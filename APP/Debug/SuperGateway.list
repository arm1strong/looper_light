
SuperGateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e32c  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0802e4bc  0802e4bc  0001e4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e840  0802e840  00020458  2**0
                  CONTENTS
  4 .ARM          00000008  0802e840  0802e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e848  0802e848  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e848  0802e848  0001e848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e84c  0802e84c  0001e84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  0802e850  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000458  0802eca8  00020458  2**3
                  ALLOC
 10 ._user_heap_stack 00002004  2000503c  0802eca8  0002503c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .debug_info   000329b2  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006df1  00000000  00000000  00052e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e00  00000000  00000000  00059c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  0005ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abce  00000000  00000000  0005d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000277fc  00000000  00000000  0008817e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a30  00000000  00000000  000af97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001983aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008330  00000000  00000000  00198400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000458 	.word	0x20000458
 80201ac:	00000000 	.word	0x00000000
 80201b0:	0802e4a4 	.word	0x0802e4a4

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	2000045c 	.word	0x2000045c
 80201cc:	0802e4a4 	.word	0x0802e4a4

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_drsub>:
 8020280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020284:	e002      	b.n	802028c <__adddf3>
 8020286:	bf00      	nop

08020288 <__aeabi_dsub>:
 8020288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802028c <__adddf3>:
 802028c:	b530      	push	{r4, r5, lr}
 802028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020296:	ea94 0f05 	teq	r4, r5
 802029a:	bf08      	it	eq
 802029c:	ea90 0f02 	teqeq	r0, r2
 80202a0:	bf1f      	itttt	ne
 80202a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202b2:	f000 80e2 	beq.w	802047a <__adddf3+0x1ee>
 80202b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202be:	bfb8      	it	lt
 80202c0:	426d      	neglt	r5, r5
 80202c2:	dd0c      	ble.n	80202de <__adddf3+0x52>
 80202c4:	442c      	add	r4, r5
 80202c6:	ea80 0202 	eor.w	r2, r0, r2
 80202ca:	ea81 0303 	eor.w	r3, r1, r3
 80202ce:	ea82 0000 	eor.w	r0, r2, r0
 80202d2:	ea83 0101 	eor.w	r1, r3, r1
 80202d6:	ea80 0202 	eor.w	r2, r0, r2
 80202da:	ea81 0303 	eor.w	r3, r1, r3
 80202de:	2d36      	cmp	r5, #54	; 0x36
 80202e0:	bf88      	it	hi
 80202e2:	bd30      	pophi	{r4, r5, pc}
 80202e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80202e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80202f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80202f4:	d002      	beq.n	80202fc <__adddf3+0x70>
 80202f6:	4240      	negs	r0, r0
 80202f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80202fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020308:	d002      	beq.n	8020310 <__adddf3+0x84>
 802030a:	4252      	negs	r2, r2
 802030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020310:	ea94 0f05 	teq	r4, r5
 8020314:	f000 80a7 	beq.w	8020466 <__adddf3+0x1da>
 8020318:	f1a4 0401 	sub.w	r4, r4, #1
 802031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020320:	db0d      	blt.n	802033e <__adddf3+0xb2>
 8020322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020326:	fa22 f205 	lsr.w	r2, r2, r5
 802032a:	1880      	adds	r0, r0, r2
 802032c:	f141 0100 	adc.w	r1, r1, #0
 8020330:	fa03 f20e 	lsl.w	r2, r3, lr
 8020334:	1880      	adds	r0, r0, r2
 8020336:	fa43 f305 	asr.w	r3, r3, r5
 802033a:	4159      	adcs	r1, r3
 802033c:	e00e      	b.n	802035c <__adddf3+0xd0>
 802033e:	f1a5 0520 	sub.w	r5, r5, #32
 8020342:	f10e 0e20 	add.w	lr, lr, #32
 8020346:	2a01      	cmp	r2, #1
 8020348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802034c:	bf28      	it	cs
 802034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020352:	fa43 f305 	asr.w	r3, r3, r5
 8020356:	18c0      	adds	r0, r0, r3
 8020358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020360:	d507      	bpl.n	8020372 <__adddf3+0xe6>
 8020362:	f04f 0e00 	mov.w	lr, #0
 8020366:	f1dc 0c00 	rsbs	ip, ip, #0
 802036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020376:	d31b      	bcc.n	80203b0 <__adddf3+0x124>
 8020378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802037c:	d30c      	bcc.n	8020398 <__adddf3+0x10c>
 802037e:	0849      	lsrs	r1, r1, #1
 8020380:	ea5f 0030 	movs.w	r0, r0, rrx
 8020384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020388:	f104 0401 	add.w	r4, r4, #1
 802038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020394:	f080 809a 	bcs.w	80204cc <__adddf3+0x240>
 8020398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802039c:	bf08      	it	eq
 802039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203a2:	f150 0000 	adcs.w	r0, r0, #0
 80203a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203aa:	ea41 0105 	orr.w	r1, r1, r5
 80203ae:	bd30      	pop	{r4, r5, pc}
 80203b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203b4:	4140      	adcs	r0, r0
 80203b6:	eb41 0101 	adc.w	r1, r1, r1
 80203ba:	3c01      	subs	r4, #1
 80203bc:	bf28      	it	cs
 80203be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80203c2:	d2e9      	bcs.n	8020398 <__adddf3+0x10c>
 80203c4:	f091 0f00 	teq	r1, #0
 80203c8:	bf04      	itt	eq
 80203ca:	4601      	moveq	r1, r0
 80203cc:	2000      	moveq	r0, #0
 80203ce:	fab1 f381 	clz	r3, r1
 80203d2:	bf08      	it	eq
 80203d4:	3320      	addeq	r3, #32
 80203d6:	f1a3 030b 	sub.w	r3, r3, #11
 80203da:	f1b3 0220 	subs.w	r2, r3, #32
 80203de:	da0c      	bge.n	80203fa <__adddf3+0x16e>
 80203e0:	320c      	adds	r2, #12
 80203e2:	dd08      	ble.n	80203f6 <__adddf3+0x16a>
 80203e4:	f102 0c14 	add.w	ip, r2, #20
 80203e8:	f1c2 020c 	rsb	r2, r2, #12
 80203ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80203f0:	fa21 f102 	lsr.w	r1, r1, r2
 80203f4:	e00c      	b.n	8020410 <__adddf3+0x184>
 80203f6:	f102 0214 	add.w	r2, r2, #20
 80203fa:	bfd8      	it	le
 80203fc:	f1c2 0c20 	rsble	ip, r2, #32
 8020400:	fa01 f102 	lsl.w	r1, r1, r2
 8020404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020408:	bfdc      	itt	le
 802040a:	ea41 010c 	orrle.w	r1, r1, ip
 802040e:	4090      	lslle	r0, r2
 8020410:	1ae4      	subs	r4, r4, r3
 8020412:	bfa2      	ittt	ge
 8020414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020418:	4329      	orrge	r1, r5
 802041a:	bd30      	popge	{r4, r5, pc}
 802041c:	ea6f 0404 	mvn.w	r4, r4
 8020420:	3c1f      	subs	r4, #31
 8020422:	da1c      	bge.n	802045e <__adddf3+0x1d2>
 8020424:	340c      	adds	r4, #12
 8020426:	dc0e      	bgt.n	8020446 <__adddf3+0x1ba>
 8020428:	f104 0414 	add.w	r4, r4, #20
 802042c:	f1c4 0220 	rsb	r2, r4, #32
 8020430:	fa20 f004 	lsr.w	r0, r0, r4
 8020434:	fa01 f302 	lsl.w	r3, r1, r2
 8020438:	ea40 0003 	orr.w	r0, r0, r3
 802043c:	fa21 f304 	lsr.w	r3, r1, r4
 8020440:	ea45 0103 	orr.w	r1, r5, r3
 8020444:	bd30      	pop	{r4, r5, pc}
 8020446:	f1c4 040c 	rsb	r4, r4, #12
 802044a:	f1c4 0220 	rsb	r2, r4, #32
 802044e:	fa20 f002 	lsr.w	r0, r0, r2
 8020452:	fa01 f304 	lsl.w	r3, r1, r4
 8020456:	ea40 0003 	orr.w	r0, r0, r3
 802045a:	4629      	mov	r1, r5
 802045c:	bd30      	pop	{r4, r5, pc}
 802045e:	fa21 f004 	lsr.w	r0, r1, r4
 8020462:	4629      	mov	r1, r5
 8020464:	bd30      	pop	{r4, r5, pc}
 8020466:	f094 0f00 	teq	r4, #0
 802046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802046e:	bf06      	itte	eq
 8020470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020474:	3401      	addeq	r4, #1
 8020476:	3d01      	subne	r5, #1
 8020478:	e74e      	b.n	8020318 <__adddf3+0x8c>
 802047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802047e:	bf18      	it	ne
 8020480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020484:	d029      	beq.n	80204da <__adddf3+0x24e>
 8020486:	ea94 0f05 	teq	r4, r5
 802048a:	bf08      	it	eq
 802048c:	ea90 0f02 	teqeq	r0, r2
 8020490:	d005      	beq.n	802049e <__adddf3+0x212>
 8020492:	ea54 0c00 	orrs.w	ip, r4, r0
 8020496:	bf04      	itt	eq
 8020498:	4619      	moveq	r1, r3
 802049a:	4610      	moveq	r0, r2
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	ea91 0f03 	teq	r1, r3
 80204a2:	bf1e      	ittt	ne
 80204a4:	2100      	movne	r1, #0
 80204a6:	2000      	movne	r0, #0
 80204a8:	bd30      	popne	{r4, r5, pc}
 80204aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ae:	d105      	bne.n	80204bc <__adddf3+0x230>
 80204b0:	0040      	lsls	r0, r0, #1
 80204b2:	4149      	adcs	r1, r1
 80204b4:	bf28      	it	cs
 80204b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ba:	bd30      	pop	{r4, r5, pc}
 80204bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204c0:	bf3c      	itt	cc
 80204c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204c6:	bd30      	popcc	{r4, r5, pc}
 80204c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80204d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204d4:	f04f 0000 	mov.w	r0, #0
 80204d8:	bd30      	pop	{r4, r5, pc}
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf1a      	itte	ne
 80204e0:	4619      	movne	r1, r3
 80204e2:	4610      	movne	r0, r2
 80204e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204e8:	bf1c      	itt	ne
 80204ea:	460b      	movne	r3, r1
 80204ec:	4602      	movne	r2, r0
 80204ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80204f2:	bf06      	itte	eq
 80204f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80204f8:	ea91 0f03 	teqeq	r1, r3
 80204fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020500:	bd30      	pop	{r4, r5, pc}
 8020502:	bf00      	nop

08020504 <__aeabi_ui2d>:
 8020504:	f090 0f00 	teq	r0, #0
 8020508:	bf04      	itt	eq
 802050a:	2100      	moveq	r1, #0
 802050c:	4770      	bxeq	lr
 802050e:	b530      	push	{r4, r5, lr}
 8020510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020518:	f04f 0500 	mov.w	r5, #0
 802051c:	f04f 0100 	mov.w	r1, #0
 8020520:	e750      	b.n	80203c4 <__adddf3+0x138>
 8020522:	bf00      	nop

08020524 <__aeabi_i2d>:
 8020524:	f090 0f00 	teq	r0, #0
 8020528:	bf04      	itt	eq
 802052a:	2100      	moveq	r1, #0
 802052c:	4770      	bxeq	lr
 802052e:	b530      	push	{r4, r5, lr}
 8020530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802053c:	bf48      	it	mi
 802053e:	4240      	negmi	r0, r0
 8020540:	f04f 0100 	mov.w	r1, #0
 8020544:	e73e      	b.n	80203c4 <__adddf3+0x138>
 8020546:	bf00      	nop

08020548 <__aeabi_f2d>:
 8020548:	0042      	lsls	r2, r0, #1
 802054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020556:	bf1f      	itttt	ne
 8020558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020564:	4770      	bxne	lr
 8020566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802056a:	bf08      	it	eq
 802056c:	4770      	bxeq	lr
 802056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020572:	bf04      	itt	eq
 8020574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020578:	4770      	bxeq	lr
 802057a:	b530      	push	{r4, r5, lr}
 802057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020588:	e71c      	b.n	80203c4 <__adddf3+0x138>
 802058a:	bf00      	nop

0802058c <__aeabi_ul2d>:
 802058c:	ea50 0201 	orrs.w	r2, r0, r1
 8020590:	bf08      	it	eq
 8020592:	4770      	bxeq	lr
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f04f 0500 	mov.w	r5, #0
 802059a:	e00a      	b.n	80205b2 <__aeabi_l2d+0x16>

0802059c <__aeabi_l2d>:
 802059c:	ea50 0201 	orrs.w	r2, r0, r1
 80205a0:	bf08      	it	eq
 80205a2:	4770      	bxeq	lr
 80205a4:	b530      	push	{r4, r5, lr}
 80205a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205aa:	d502      	bpl.n	80205b2 <__aeabi_l2d+0x16>
 80205ac:	4240      	negs	r0, r0
 80205ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205be:	f43f aed8 	beq.w	8020372 <__adddf3+0xe6>
 80205c2:	f04f 0203 	mov.w	r2, #3
 80205c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205ca:	bf18      	it	ne
 80205cc:	3203      	addne	r2, #3
 80205ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205d2:	bf18      	it	ne
 80205d4:	3203      	addne	r2, #3
 80205d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	fa00 fc03 	lsl.w	ip, r0, r3
 80205e2:	fa20 f002 	lsr.w	r0, r0, r2
 80205e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205ea:	ea40 000e 	orr.w	r0, r0, lr
 80205ee:	fa21 f102 	lsr.w	r1, r1, r2
 80205f2:	4414      	add	r4, r2
 80205f4:	e6bd      	b.n	8020372 <__adddf3+0xe6>
 80205f6:	bf00      	nop

080205f8 <__aeabi_dmul>:
 80205f8:	b570      	push	{r4, r5, r6, lr}
 80205fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80205fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020606:	bf1d      	ittte	ne
 8020608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802060c:	ea94 0f0c 	teqne	r4, ip
 8020610:	ea95 0f0c 	teqne	r5, ip
 8020614:	f000 f8de 	bleq	80207d4 <__aeabi_dmul+0x1dc>
 8020618:	442c      	add	r4, r5
 802061a:	ea81 0603 	eor.w	r6, r1, r3
 802061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802062a:	bf18      	it	ne
 802062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020638:	d038      	beq.n	80206ac <__aeabi_dmul+0xb4>
 802063a:	fba0 ce02 	umull	ip, lr, r0, r2
 802063e:	f04f 0500 	mov.w	r5, #0
 8020642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802064e:	f04f 0600 	mov.w	r6, #0
 8020652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020656:	f09c 0f00 	teq	ip, #0
 802065a:	bf18      	it	ne
 802065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802066c:	d204      	bcs.n	8020678 <__aeabi_dmul+0x80>
 802066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020672:	416d      	adcs	r5, r5
 8020674:	eb46 0606 	adc.w	r6, r6, r6
 8020678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020690:	bf88      	it	hi
 8020692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020696:	d81e      	bhi.n	80206d6 <__aeabi_dmul+0xde>
 8020698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802069c:	bf08      	it	eq
 802069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206a2:	f150 0000 	adcs.w	r0, r0, #0
 80206a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206aa:	bd70      	pop	{r4, r5, r6, pc}
 80206ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206b0:	ea46 0101 	orr.w	r1, r6, r1
 80206b4:	ea40 0002 	orr.w	r0, r0, r2
 80206b8:	ea81 0103 	eor.w	r1, r1, r3
 80206bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206c0:	bfc2      	ittt	gt
 80206c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206ca:	bd70      	popgt	{r4, r5, r6, pc}
 80206cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206d0:	f04f 0e00 	mov.w	lr, #0
 80206d4:	3c01      	subs	r4, #1
 80206d6:	f300 80ab 	bgt.w	8020830 <__aeabi_dmul+0x238>
 80206da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80206de:	bfde      	ittt	le
 80206e0:	2000      	movle	r0, #0
 80206e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80206e6:	bd70      	pople	{r4, r5, r6, pc}
 80206e8:	f1c4 0400 	rsb	r4, r4, #0
 80206ec:	3c20      	subs	r4, #32
 80206ee:	da35      	bge.n	802075c <__aeabi_dmul+0x164>
 80206f0:	340c      	adds	r4, #12
 80206f2:	dc1b      	bgt.n	802072c <__aeabi_dmul+0x134>
 80206f4:	f104 0414 	add.w	r4, r4, #20
 80206f8:	f1c4 0520 	rsb	r5, r4, #32
 80206fc:	fa00 f305 	lsl.w	r3, r0, r5
 8020700:	fa20 f004 	lsr.w	r0, r0, r4
 8020704:	fa01 f205 	lsl.w	r2, r1, r5
 8020708:	ea40 0002 	orr.w	r0, r0, r2
 802070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020718:	fa21 f604 	lsr.w	r6, r1, r4
 802071c:	eb42 0106 	adc.w	r1, r2, r6
 8020720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020724:	bf08      	it	eq
 8020726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802072a:	bd70      	pop	{r4, r5, r6, pc}
 802072c:	f1c4 040c 	rsb	r4, r4, #12
 8020730:	f1c4 0520 	rsb	r5, r4, #32
 8020734:	fa00 f304 	lsl.w	r3, r0, r4
 8020738:	fa20 f005 	lsr.w	r0, r0, r5
 802073c:	fa01 f204 	lsl.w	r2, r1, r4
 8020740:	ea40 0002 	orr.w	r0, r0, r2
 8020744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802074c:	f141 0100 	adc.w	r1, r1, #0
 8020750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020754:	bf08      	it	eq
 8020756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802075a:	bd70      	pop	{r4, r5, r6, pc}
 802075c:	f1c4 0520 	rsb	r5, r4, #32
 8020760:	fa00 f205 	lsl.w	r2, r0, r5
 8020764:	ea4e 0e02 	orr.w	lr, lr, r2
 8020768:	fa20 f304 	lsr.w	r3, r0, r4
 802076c:	fa01 f205 	lsl.w	r2, r1, r5
 8020770:	ea43 0302 	orr.w	r3, r3, r2
 8020774:	fa21 f004 	lsr.w	r0, r1, r4
 8020778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802077c:	fa21 f204 	lsr.w	r2, r1, r4
 8020780:	ea20 0002 	bic.w	r0, r0, r2
 8020784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802078c:	bf08      	it	eq
 802078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	f094 0f00 	teq	r4, #0
 8020798:	d10f      	bne.n	80207ba <__aeabi_dmul+0x1c2>
 802079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802079e:	0040      	lsls	r0, r0, #1
 80207a0:	eb41 0101 	adc.w	r1, r1, r1
 80207a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207a8:	bf08      	it	eq
 80207aa:	3c01      	subeq	r4, #1
 80207ac:	d0f7      	beq.n	802079e <__aeabi_dmul+0x1a6>
 80207ae:	ea41 0106 	orr.w	r1, r1, r6
 80207b2:	f095 0f00 	teq	r5, #0
 80207b6:	bf18      	it	ne
 80207b8:	4770      	bxne	lr
 80207ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207be:	0052      	lsls	r2, r2, #1
 80207c0:	eb43 0303 	adc.w	r3, r3, r3
 80207c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207c8:	bf08      	it	eq
 80207ca:	3d01      	subeq	r5, #1
 80207cc:	d0f7      	beq.n	80207be <__aeabi_dmul+0x1c6>
 80207ce:	ea43 0306 	orr.w	r3, r3, r6
 80207d2:	4770      	bx	lr
 80207d4:	ea94 0f0c 	teq	r4, ip
 80207d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207dc:	bf18      	it	ne
 80207de:	ea95 0f0c 	teqne	r5, ip
 80207e2:	d00c      	beq.n	80207fe <__aeabi_dmul+0x206>
 80207e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207e8:	bf18      	it	ne
 80207ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207ee:	d1d1      	bne.n	8020794 <__aeabi_dmul+0x19c>
 80207f0:	ea81 0103 	eor.w	r1, r1, r3
 80207f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207f8:	f04f 0000 	mov.w	r0, #0
 80207fc:	bd70      	pop	{r4, r5, r6, pc}
 80207fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020802:	bf06      	itte	eq
 8020804:	4610      	moveq	r0, r2
 8020806:	4619      	moveq	r1, r3
 8020808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802080c:	d019      	beq.n	8020842 <__aeabi_dmul+0x24a>
 802080e:	ea94 0f0c 	teq	r4, ip
 8020812:	d102      	bne.n	802081a <__aeabi_dmul+0x222>
 8020814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020818:	d113      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802081a:	ea95 0f0c 	teq	r5, ip
 802081e:	d105      	bne.n	802082c <__aeabi_dmul+0x234>
 8020820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020824:	bf1c      	itt	ne
 8020826:	4610      	movne	r0, r2
 8020828:	4619      	movne	r1, r3
 802082a:	d10a      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802082c:	ea81 0103 	eor.w	r1, r1, r3
 8020830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802083c:	f04f 0000 	mov.w	r0, #0
 8020840:	bd70      	pop	{r4, r5, r6, pc}
 8020842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802084a:	bd70      	pop	{r4, r5, r6, pc}

0802084c <__aeabi_ddiv>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802085a:	bf1d      	ittte	ne
 802085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020860:	ea94 0f0c 	teqne	r4, ip
 8020864:	ea95 0f0c 	teqne	r5, ip
 8020868:	f000 f8a7 	bleq	80209ba <__aeabi_ddiv+0x16e>
 802086c:	eba4 0405 	sub.w	r4, r4, r5
 8020870:	ea81 0e03 	eor.w	lr, r1, r3
 8020874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802087c:	f000 8088 	beq.w	8020990 <__aeabi_ddiv+0x144>
 8020880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208a4:	429d      	cmp	r5, r3
 80208a6:	bf08      	it	eq
 80208a8:	4296      	cmpeq	r6, r2
 80208aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208b2:	d202      	bcs.n	80208ba <__aeabi_ddiv+0x6e>
 80208b4:	085b      	lsrs	r3, r3, #1
 80208b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ba:	1ab6      	subs	r6, r6, r2
 80208bc:	eb65 0503 	sbc.w	r5, r5, r3
 80208c0:	085b      	lsrs	r3, r3, #1
 80208c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80208d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208d6:	bf22      	ittt	cs
 80208d8:	1ab6      	subcs	r6, r6, r2
 80208da:	4675      	movcs	r5, lr
 80208dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80208e0:	085b      	lsrs	r3, r3, #1
 80208e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208ee:	bf22      	ittt	cs
 80208f0:	1ab6      	subcs	r6, r6, r2
 80208f2:	4675      	movcs	r5, lr
 80208f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80208f8:	085b      	lsrs	r3, r3, #1
 80208fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020906:	bf22      	ittt	cs
 8020908:	1ab6      	subcs	r6, r6, r2
 802090a:	4675      	movcs	r5, lr
 802090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020910:	085b      	lsrs	r3, r3, #1
 8020912:	ea4f 0232 	mov.w	r2, r2, rrx
 8020916:	ebb6 0e02 	subs.w	lr, r6, r2
 802091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802091e:	bf22      	ittt	cs
 8020920:	1ab6      	subcs	r6, r6, r2
 8020922:	4675      	movcs	r5, lr
 8020924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020928:	ea55 0e06 	orrs.w	lr, r5, r6
 802092c:	d018      	beq.n	8020960 <__aeabi_ddiv+0x114>
 802092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802094a:	d1c0      	bne.n	80208ce <__aeabi_ddiv+0x82>
 802094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020950:	d10b      	bne.n	802096a <__aeabi_ddiv+0x11e>
 8020952:	ea41 0100 	orr.w	r1, r1, r0
 8020956:	f04f 0000 	mov.w	r0, #0
 802095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802095e:	e7b6      	b.n	80208ce <__aeabi_ddiv+0x82>
 8020960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020964:	bf04      	itt	eq
 8020966:	4301      	orreq	r1, r0
 8020968:	2000      	moveq	r0, #0
 802096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802096e:	bf88      	it	hi
 8020970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020974:	f63f aeaf 	bhi.w	80206d6 <__aeabi_dmul+0xde>
 8020978:	ebb5 0c03 	subs.w	ip, r5, r3
 802097c:	bf04      	itt	eq
 802097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020986:	f150 0000 	adcs.w	r0, r0, #0
 802098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802098e:	bd70      	pop	{r4, r5, r6, pc}
 8020990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802099c:	bfc2      	ittt	gt
 802099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209a6:	bd70      	popgt	{r4, r5, r6, pc}
 80209a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209ac:	f04f 0e00 	mov.w	lr, #0
 80209b0:	3c01      	subs	r4, #1
 80209b2:	e690      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209b4:	ea45 0e06 	orr.w	lr, r5, r6
 80209b8:	e68d      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209be:	ea94 0f0c 	teq	r4, ip
 80209c2:	bf08      	it	eq
 80209c4:	ea95 0f0c 	teqeq	r5, ip
 80209c8:	f43f af3b 	beq.w	8020842 <__aeabi_dmul+0x24a>
 80209cc:	ea94 0f0c 	teq	r4, ip
 80209d0:	d10a      	bne.n	80209e8 <__aeabi_ddiv+0x19c>
 80209d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209d6:	f47f af34 	bne.w	8020842 <__aeabi_dmul+0x24a>
 80209da:	ea95 0f0c 	teq	r5, ip
 80209de:	f47f af25 	bne.w	802082c <__aeabi_dmul+0x234>
 80209e2:	4610      	mov	r0, r2
 80209e4:	4619      	mov	r1, r3
 80209e6:	e72c      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209e8:	ea95 0f0c 	teq	r5, ip
 80209ec:	d106      	bne.n	80209fc <__aeabi_ddiv+0x1b0>
 80209ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80209f2:	f43f aefd 	beq.w	80207f0 <__aeabi_dmul+0x1f8>
 80209f6:	4610      	mov	r0, r2
 80209f8:	4619      	mov	r1, r3
 80209fa:	e722      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a00:	bf18      	it	ne
 8020a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a06:	f47f aec5 	bne.w	8020794 <__aeabi_dmul+0x19c>
 8020a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a0e:	f47f af0d 	bne.w	802082c <__aeabi_dmul+0x234>
 8020a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a16:	f47f aeeb 	bne.w	80207f0 <__aeabi_dmul+0x1f8>
 8020a1a:	e712      	b.n	8020842 <__aeabi_dmul+0x24a>

08020a1c <__aeabi_d2uiz>:
 8020a1c:	004a      	lsls	r2, r1, #1
 8020a1e:	d211      	bcs.n	8020a44 <__aeabi_d2uiz+0x28>
 8020a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020a24:	d211      	bcs.n	8020a4a <__aeabi_d2uiz+0x2e>
 8020a26:	d50d      	bpl.n	8020a44 <__aeabi_d2uiz+0x28>
 8020a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020a30:	d40e      	bmi.n	8020a50 <__aeabi_d2uiz+0x34>
 8020a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8020a42:	4770      	bx	lr
 8020a44:	f04f 0000 	mov.w	r0, #0
 8020a48:	4770      	bx	lr
 8020a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020a4e:	d102      	bne.n	8020a56 <__aeabi_d2uiz+0x3a>
 8020a50:	f04f 30ff 	mov.w	r0, #4294967295
 8020a54:	4770      	bx	lr
 8020a56:	f04f 0000 	mov.w	r0, #0
 8020a5a:	4770      	bx	lr

08020a5c <__aeabi_uldivmod>:
 8020a5c:	b953      	cbnz	r3, 8020a74 <__aeabi_uldivmod+0x18>
 8020a5e:	b94a      	cbnz	r2, 8020a74 <__aeabi_uldivmod+0x18>
 8020a60:	2900      	cmp	r1, #0
 8020a62:	bf08      	it	eq
 8020a64:	2800      	cmpeq	r0, #0
 8020a66:	bf1c      	itt	ne
 8020a68:	f04f 31ff 	movne.w	r1, #4294967295
 8020a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8020a70:	f000 b96e 	b.w	8020d50 <__aeabi_idiv0>
 8020a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8020a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020a7c:	f000 f806 	bl	8020a8c <__udivmoddi4>
 8020a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020a88:	b004      	add	sp, #16
 8020a8a:	4770      	bx	lr

08020a8c <__udivmoddi4>:
 8020a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a90:	9d08      	ldr	r5, [sp, #32]
 8020a92:	4604      	mov	r4, r0
 8020a94:	468c      	mov	ip, r1
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	f040 8083 	bne.w	8020ba2 <__udivmoddi4+0x116>
 8020a9c:	428a      	cmp	r2, r1
 8020a9e:	4617      	mov	r7, r2
 8020aa0:	d947      	bls.n	8020b32 <__udivmoddi4+0xa6>
 8020aa2:	fab2 f282 	clz	r2, r2
 8020aa6:	b142      	cbz	r2, 8020aba <__udivmoddi4+0x2e>
 8020aa8:	f1c2 0020 	rsb	r0, r2, #32
 8020aac:	fa24 f000 	lsr.w	r0, r4, r0
 8020ab0:	4091      	lsls	r1, r2
 8020ab2:	4097      	lsls	r7, r2
 8020ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8020ab8:	4094      	lsls	r4, r2
 8020aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020abe:	0c23      	lsrs	r3, r4, #16
 8020ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8020ac4:	fa1f fe87 	uxth.w	lr, r7
 8020ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8020acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8020ad4:	4299      	cmp	r1, r3
 8020ad6:	d909      	bls.n	8020aec <__udivmoddi4+0x60>
 8020ad8:	18fb      	adds	r3, r7, r3
 8020ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8020ade:	f080 8119 	bcs.w	8020d14 <__udivmoddi4+0x288>
 8020ae2:	4299      	cmp	r1, r3
 8020ae4:	f240 8116 	bls.w	8020d14 <__udivmoddi4+0x288>
 8020ae8:	3e02      	subs	r6, #2
 8020aea:	443b      	add	r3, r7
 8020aec:	1a5b      	subs	r3, r3, r1
 8020aee:	b2a4      	uxth	r4, r4
 8020af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8020af4:	fb08 3310 	mls	r3, r8, r0, r3
 8020af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8020b00:	45a6      	cmp	lr, r4
 8020b02:	d909      	bls.n	8020b18 <__udivmoddi4+0x8c>
 8020b04:	193c      	adds	r4, r7, r4
 8020b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b0a:	f080 8105 	bcs.w	8020d18 <__udivmoddi4+0x28c>
 8020b0e:	45a6      	cmp	lr, r4
 8020b10:	f240 8102 	bls.w	8020d18 <__udivmoddi4+0x28c>
 8020b14:	3802      	subs	r0, #2
 8020b16:	443c      	add	r4, r7
 8020b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020b1c:	eba4 040e 	sub.w	r4, r4, lr
 8020b20:	2600      	movs	r6, #0
 8020b22:	b11d      	cbz	r5, 8020b2c <__udivmoddi4+0xa0>
 8020b24:	40d4      	lsrs	r4, r2
 8020b26:	2300      	movs	r3, #0
 8020b28:	e9c5 4300 	strd	r4, r3, [r5]
 8020b2c:	4631      	mov	r1, r6
 8020b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b32:	b902      	cbnz	r2, 8020b36 <__udivmoddi4+0xaa>
 8020b34:	deff      	udf	#255	; 0xff
 8020b36:	fab2 f282 	clz	r2, r2
 8020b3a:	2a00      	cmp	r2, #0
 8020b3c:	d150      	bne.n	8020be0 <__udivmoddi4+0x154>
 8020b3e:	1bcb      	subs	r3, r1, r7
 8020b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020b44:	fa1f f887 	uxth.w	r8, r7
 8020b48:	2601      	movs	r6, #1
 8020b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8020b4e:	0c21      	lsrs	r1, r4, #16
 8020b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8020b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020b58:	fb08 f30c 	mul.w	r3, r8, ip
 8020b5c:	428b      	cmp	r3, r1
 8020b5e:	d907      	bls.n	8020b70 <__udivmoddi4+0xe4>
 8020b60:	1879      	adds	r1, r7, r1
 8020b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b66:	d202      	bcs.n	8020b6e <__udivmoddi4+0xe2>
 8020b68:	428b      	cmp	r3, r1
 8020b6a:	f200 80e9 	bhi.w	8020d40 <__udivmoddi4+0x2b4>
 8020b6e:	4684      	mov	ip, r0
 8020b70:	1ac9      	subs	r1, r1, r3
 8020b72:	b2a3      	uxth	r3, r4
 8020b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8020b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8020b80:	fb08 f800 	mul.w	r8, r8, r0
 8020b84:	45a0      	cmp	r8, r4
 8020b86:	d907      	bls.n	8020b98 <__udivmoddi4+0x10c>
 8020b88:	193c      	adds	r4, r7, r4
 8020b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b8e:	d202      	bcs.n	8020b96 <__udivmoddi4+0x10a>
 8020b90:	45a0      	cmp	r8, r4
 8020b92:	f200 80d9 	bhi.w	8020d48 <__udivmoddi4+0x2bc>
 8020b96:	4618      	mov	r0, r3
 8020b98:	eba4 0408 	sub.w	r4, r4, r8
 8020b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020ba0:	e7bf      	b.n	8020b22 <__udivmoddi4+0x96>
 8020ba2:	428b      	cmp	r3, r1
 8020ba4:	d909      	bls.n	8020bba <__udivmoddi4+0x12e>
 8020ba6:	2d00      	cmp	r5, #0
 8020ba8:	f000 80b1 	beq.w	8020d0e <__udivmoddi4+0x282>
 8020bac:	2600      	movs	r6, #0
 8020bae:	e9c5 0100 	strd	r0, r1, [r5]
 8020bb2:	4630      	mov	r0, r6
 8020bb4:	4631      	mov	r1, r6
 8020bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bba:	fab3 f683 	clz	r6, r3
 8020bbe:	2e00      	cmp	r6, #0
 8020bc0:	d14a      	bne.n	8020c58 <__udivmoddi4+0x1cc>
 8020bc2:	428b      	cmp	r3, r1
 8020bc4:	d302      	bcc.n	8020bcc <__udivmoddi4+0x140>
 8020bc6:	4282      	cmp	r2, r0
 8020bc8:	f200 80b8 	bhi.w	8020d3c <__udivmoddi4+0x2b0>
 8020bcc:	1a84      	subs	r4, r0, r2
 8020bce:	eb61 0103 	sbc.w	r1, r1, r3
 8020bd2:	2001      	movs	r0, #1
 8020bd4:	468c      	mov	ip, r1
 8020bd6:	2d00      	cmp	r5, #0
 8020bd8:	d0a8      	beq.n	8020b2c <__udivmoddi4+0xa0>
 8020bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8020bde:	e7a5      	b.n	8020b2c <__udivmoddi4+0xa0>
 8020be0:	f1c2 0320 	rsb	r3, r2, #32
 8020be4:	fa20 f603 	lsr.w	r6, r0, r3
 8020be8:	4097      	lsls	r7, r2
 8020bea:	fa01 f002 	lsl.w	r0, r1, r2
 8020bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020bf2:	40d9      	lsrs	r1, r3
 8020bf4:	4330      	orrs	r0, r6
 8020bf6:	0c03      	lsrs	r3, r0, #16
 8020bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8020bfc:	fa1f f887 	uxth.w	r8, r7
 8020c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8020c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020c08:	fb06 f108 	mul.w	r1, r6, r8
 8020c0c:	4299      	cmp	r1, r3
 8020c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8020c12:	d909      	bls.n	8020c28 <__udivmoddi4+0x19c>
 8020c14:	18fb      	adds	r3, r7, r3
 8020c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8020c1a:	f080 808d 	bcs.w	8020d38 <__udivmoddi4+0x2ac>
 8020c1e:	4299      	cmp	r1, r3
 8020c20:	f240 808a 	bls.w	8020d38 <__udivmoddi4+0x2ac>
 8020c24:	3e02      	subs	r6, #2
 8020c26:	443b      	add	r3, r7
 8020c28:	1a5b      	subs	r3, r3, r1
 8020c2a:	b281      	uxth	r1, r0
 8020c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c38:	fb00 f308 	mul.w	r3, r0, r8
 8020c3c:	428b      	cmp	r3, r1
 8020c3e:	d907      	bls.n	8020c50 <__udivmoddi4+0x1c4>
 8020c40:	1879      	adds	r1, r7, r1
 8020c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c46:	d273      	bcs.n	8020d30 <__udivmoddi4+0x2a4>
 8020c48:	428b      	cmp	r3, r1
 8020c4a:	d971      	bls.n	8020d30 <__udivmoddi4+0x2a4>
 8020c4c:	3802      	subs	r0, #2
 8020c4e:	4439      	add	r1, r7
 8020c50:	1acb      	subs	r3, r1, r3
 8020c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8020c56:	e778      	b.n	8020b4a <__udivmoddi4+0xbe>
 8020c58:	f1c6 0c20 	rsb	ip, r6, #32
 8020c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8020c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8020c64:	431c      	orrs	r4, r3
 8020c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8020c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8020c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8020c76:	431f      	orrs	r7, r3
 8020c78:	0c3b      	lsrs	r3, r7, #16
 8020c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8020c7e:	fa1f f884 	uxth.w	r8, r4
 8020c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8020c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8020c8e:	458a      	cmp	sl, r1
 8020c90:	fa02 f206 	lsl.w	r2, r2, r6
 8020c94:	fa00 f306 	lsl.w	r3, r0, r6
 8020c98:	d908      	bls.n	8020cac <__udivmoddi4+0x220>
 8020c9a:	1861      	adds	r1, r4, r1
 8020c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ca0:	d248      	bcs.n	8020d34 <__udivmoddi4+0x2a8>
 8020ca2:	458a      	cmp	sl, r1
 8020ca4:	d946      	bls.n	8020d34 <__udivmoddi4+0x2a8>
 8020ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8020caa:	4421      	add	r1, r4
 8020cac:	eba1 010a 	sub.w	r1, r1, sl
 8020cb0:	b2bf      	uxth	r7, r7
 8020cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8020cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8020cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020cbe:	fb00 f808 	mul.w	r8, r0, r8
 8020cc2:	45b8      	cmp	r8, r7
 8020cc4:	d907      	bls.n	8020cd6 <__udivmoddi4+0x24a>
 8020cc6:	19e7      	adds	r7, r4, r7
 8020cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8020ccc:	d22e      	bcs.n	8020d2c <__udivmoddi4+0x2a0>
 8020cce:	45b8      	cmp	r8, r7
 8020cd0:	d92c      	bls.n	8020d2c <__udivmoddi4+0x2a0>
 8020cd2:	3802      	subs	r0, #2
 8020cd4:	4427      	add	r7, r4
 8020cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020cda:	eba7 0708 	sub.w	r7, r7, r8
 8020cde:	fba0 8902 	umull	r8, r9, r0, r2
 8020ce2:	454f      	cmp	r7, r9
 8020ce4:	46c6      	mov	lr, r8
 8020ce6:	4649      	mov	r1, r9
 8020ce8:	d31a      	bcc.n	8020d20 <__udivmoddi4+0x294>
 8020cea:	d017      	beq.n	8020d1c <__udivmoddi4+0x290>
 8020cec:	b15d      	cbz	r5, 8020d06 <__udivmoddi4+0x27a>
 8020cee:	ebb3 020e 	subs.w	r2, r3, lr
 8020cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8020cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020cfa:	40f2      	lsrs	r2, r6
 8020cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8020d00:	40f7      	lsrs	r7, r6
 8020d02:	e9c5 2700 	strd	r2, r7, [r5]
 8020d06:	2600      	movs	r6, #0
 8020d08:	4631      	mov	r1, r6
 8020d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d0e:	462e      	mov	r6, r5
 8020d10:	4628      	mov	r0, r5
 8020d12:	e70b      	b.n	8020b2c <__udivmoddi4+0xa0>
 8020d14:	4606      	mov	r6, r0
 8020d16:	e6e9      	b.n	8020aec <__udivmoddi4+0x60>
 8020d18:	4618      	mov	r0, r3
 8020d1a:	e6fd      	b.n	8020b18 <__udivmoddi4+0x8c>
 8020d1c:	4543      	cmp	r3, r8
 8020d1e:	d2e5      	bcs.n	8020cec <__udivmoddi4+0x260>
 8020d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8020d24:	eb69 0104 	sbc.w	r1, r9, r4
 8020d28:	3801      	subs	r0, #1
 8020d2a:	e7df      	b.n	8020cec <__udivmoddi4+0x260>
 8020d2c:	4608      	mov	r0, r1
 8020d2e:	e7d2      	b.n	8020cd6 <__udivmoddi4+0x24a>
 8020d30:	4660      	mov	r0, ip
 8020d32:	e78d      	b.n	8020c50 <__udivmoddi4+0x1c4>
 8020d34:	4681      	mov	r9, r0
 8020d36:	e7b9      	b.n	8020cac <__udivmoddi4+0x220>
 8020d38:	4666      	mov	r6, ip
 8020d3a:	e775      	b.n	8020c28 <__udivmoddi4+0x19c>
 8020d3c:	4630      	mov	r0, r6
 8020d3e:	e74a      	b.n	8020bd6 <__udivmoddi4+0x14a>
 8020d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8020d44:	4439      	add	r1, r7
 8020d46:	e713      	b.n	8020b70 <__udivmoddi4+0xe4>
 8020d48:	3802      	subs	r0, #2
 8020d4a:	443c      	add	r4, r7
 8020d4c:	e724      	b.n	8020b98 <__udivmoddi4+0x10c>
 8020d4e:	bf00      	nop

08020d50 <__aeabi_idiv0>:
 8020d50:	4770      	bx	lr
 8020d52:	bf00      	nop

08020d54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8020d54:	b480      	push	{r7}
 8020d56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8020d58:	f3bf 8f4f 	dsb	sy
}
 8020d5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020d5e:	4b06      	ldr	r3, [pc, #24]	; (8020d78 <__NVIC_SystemReset+0x24>)
 8020d60:	68db      	ldr	r3, [r3, #12]
 8020d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020d66:	4904      	ldr	r1, [pc, #16]	; (8020d78 <__NVIC_SystemReset+0x24>)
 8020d68:	4b04      	ldr	r3, [pc, #16]	; (8020d7c <__NVIC_SystemReset+0x28>)
 8020d6a:	4313      	orrs	r3, r2
 8020d6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020d6e:	f3bf 8f4f 	dsb	sy
}
 8020d72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8020d74:	bf00      	nop
 8020d76:	e7fd      	b.n	8020d74 <__NVIC_SystemReset+0x20>
 8020d78:	e000ed00 	.word	0xe000ed00
 8020d7c:	05fa0004 	.word	0x05fa0004

08020d80 <app_pollCommunicationEvents>:
/**
 * 跳传事件轮询
 * 
 */
COMMU_STATE app_pollCommunicationEvents(Communication * pcommu)
{
 8020d80:	b580      	push	{r7, lr}
 8020d82:	b084      	sub	sp, #16
 8020d84:	af00      	add	r7, sp, #0
 8020d86:	6078      	str	r0, [r7, #4]
	COMMU_STATE state;

	switch(pcommu->state)
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	781b      	ldrb	r3, [r3, #0]
 8020d8c:	2b02      	cmp	r3, #2
 8020d8e:	f000 8099 	beq.w	8020ec4 <app_pollCommunicationEvents+0x144>
 8020d92:	2b02      	cmp	r3, #2
 8020d94:	f300 80f6 	bgt.w	8020f84 <app_pollCommunicationEvents+0x204>
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	f000 80f6 	beq.w	8020f8a <app_pollCommunicationEvents+0x20a>
 8020d9e:	2b01      	cmp	r3, #1
 8020da0:	f040 80f0 	bne.w	8020f84 <app_pollCommunicationEvents+0x204>
			/*啥也不干等数据*/
		}	break;

		case COMMU_ALIGNMENT:	//接收对齐态 假设当前接收sn为2 则在该状态等到max_broadcast_times再给下一级控制器跳传
		{
			if(++pcommu->tick*COMMU_POLL_PERIOD >= pcommu->max_broadcast_period)
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	891b      	ldrh	r3, [r3, #8]
 8020da8:	3301      	adds	r3, #1
 8020daa:	b29a      	uxth	r2, r3
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	811a      	strh	r2, [r3, #8]
 8020db0:	687b      	ldr	r3, [r7, #4]
 8020db2:	891b      	ldrh	r3, [r3, #8]
 8020db4:	461a      	mov	r2, r3
 8020db6:	4613      	mov	r3, r2
 8020db8:	009b      	lsls	r3, r3, #2
 8020dba:	4413      	add	r3, r2
 8020dbc:	005b      	lsls	r3, r3, #1
 8020dbe:	461a      	mov	r2, r3
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	88db      	ldrh	r3, [r3, #6]
 8020dc4:	429a      	cmp	r2, r3
 8020dc6:	f2c0 80e2 	blt.w	8020f8e <app_pollCommunicationEvents+0x20e>
			{
				pcommu->tick = 0;
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	2200      	movs	r2, #0
 8020dce:	811a      	strh	r2, [r3, #8]

				if(++pcommu->sn>=pcommu->max_broadcast_times) //对齐时间到
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	785b      	ldrb	r3, [r3, #1]
 8020dd4:	3301      	adds	r3, #1
 8020dd6:	b2da      	uxtb	r2, r3
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	705a      	strb	r2, [r3, #1]
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	785a      	ldrb	r2, [r3, #1]
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	78db      	ldrb	r3, [r3, #3]
 8020de4:	429a      	cmp	r2, r3
 8020de6:	f0c0 80d2 	bcc.w	8020f8e <app_pollCommunicationEvents+0x20e>
				{
					if(pcommu->self_id<pcommu->start_id) //不应用 跳传
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	895a      	ldrh	r2, [r3, #10]
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	899b      	ldrh	r3, [r3, #12]
 8020df2:	429a      	cmp	r2, r3
 8020df4:	d206      	bcs.n	8020e04 <app_pollCommunicationEvents+0x84>
					{
						pcommu->state = COMMU_BROADCAST;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	2202      	movs	r2, #2
 8020dfa:	701a      	strb	r2, [r3, #0]
						pcommu->id_index = 1;
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	2201      	movs	r2, #1
 8020e00:	821a      	strh	r2, [r3, #16]
 8020e02:	e05b      	b.n	8020ebc <app_pollCommunicationEvents+0x13c>
					}else if(pcommu->self_id>=pcommu->start_id && pcommu->self_id<pcommu->end_id) //应用 跳传
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	895a      	ldrh	r2, [r3, #10]
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	899b      	ldrh	r3, [r3, #12]
 8020e0c:	429a      	cmp	r2, r3
 8020e0e:	d321      	bcc.n	8020e54 <app_pollCommunicationEvents+0xd4>
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	895a      	ldrh	r2, [r3, #10]
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	89db      	ldrh	r3, [r3, #14]
 8020e18:	429a      	cmp	r2, r3
 8020e1a:	d21b      	bcs.n	8020e54 <app_pollCommunicationEvents+0xd4>
					{	
						pcommu->ischanged = 1;  //状态改变 需由主任务清空
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	2201      	movs	r2, #1
 8020e20:	709a      	strb	r2, [r3, #2]

						for(char i=0;i<8;++i)
 8020e22:	2300      	movs	r3, #0
 8020e24:	73bb      	strb	r3, [r7, #14]
 8020e26:	e00b      	b.n	8020e40 <app_pollCommunicationEvents+0xc0>
						{
							pwm2iv.write(i, pcommu->msg[i]);
 8020e28:	4b5d      	ldr	r3, [pc, #372]	; (8020fa0 <app_pollCommunicationEvents+0x220>)
 8020e2a:	689b      	ldr	r3, [r3, #8]
 8020e2c:	7bba      	ldrb	r2, [r7, #14]
 8020e2e:	6879      	ldr	r1, [r7, #4]
 8020e30:	440a      	add	r2, r1
 8020e32:	7c91      	ldrb	r1, [r2, #18]
 8020e34:	7bba      	ldrb	r2, [r7, #14]
 8020e36:	4610      	mov	r0, r2
 8020e38:	4798      	blx	r3
						for(char i=0;i<8;++i)
 8020e3a:	7bbb      	ldrb	r3, [r7, #14]
 8020e3c:	3301      	adds	r3, #1
 8020e3e:	73bb      	strb	r3, [r7, #14]
 8020e40:	7bbb      	ldrb	r3, [r7, #14]
 8020e42:	2b07      	cmp	r3, #7
 8020e44:	d9f0      	bls.n	8020e28 <app_pollCommunicationEvents+0xa8>
						}

						pcommu->state = COMMU_BROADCAST;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	2202      	movs	r2, #2
 8020e4a:	701a      	strb	r2, [r3, #0]
						pcommu->id_index = 1;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	2201      	movs	r2, #1
 8020e50:	821a      	strh	r2, [r3, #16]
 8020e52:	e033      	b.n	8020ebc <app_pollCommunicationEvents+0x13c>
					}else if(pcommu->self_id==pcommu->end_id) //应用不跳传
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	895a      	ldrh	r2, [r3, #10]
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	89db      	ldrh	r3, [r3, #14]
 8020e5c:	429a      	cmp	r2, r3
 8020e5e:	d121      	bne.n	8020ea4 <app_pollCommunicationEvents+0x124>
					{
						pcommu->ischanged = 1;  //状态改变 需由主任务清空
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	2201      	movs	r2, #1
 8020e64:	709a      	strb	r2, [r3, #2]
						
						for(char i=0;i<8;++i)
 8020e66:	2300      	movs	r3, #0
 8020e68:	737b      	strb	r3, [r7, #13]
 8020e6a:	e00b      	b.n	8020e84 <app_pollCommunicationEvents+0x104>
						{
							pwm2iv.write(i, pcommu->msg[i]);
 8020e6c:	4b4c      	ldr	r3, [pc, #304]	; (8020fa0 <app_pollCommunicationEvents+0x220>)
 8020e6e:	689b      	ldr	r3, [r3, #8]
 8020e70:	7b7a      	ldrb	r2, [r7, #13]
 8020e72:	6879      	ldr	r1, [r7, #4]
 8020e74:	440a      	add	r2, r1
 8020e76:	7c91      	ldrb	r1, [r2, #18]
 8020e78:	7b7a      	ldrb	r2, [r7, #13]
 8020e7a:	4610      	mov	r0, r2
 8020e7c:	4798      	blx	r3
						for(char i=0;i<8;++i)
 8020e7e:	7b7b      	ldrb	r3, [r7, #13]
 8020e80:	3301      	adds	r3, #1
 8020e82:	737b      	strb	r3, [r7, #13]
 8020e84:	7b7b      	ldrb	r3, [r7, #13]
 8020e86:	2b07      	cmp	r3, #7
 8020e88:	d9f0      	bls.n	8020e6c <app_pollCommunicationEvents+0xec>
						}

						pcommu->state = COMMU_IDEL;
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	2200      	movs	r2, #0
 8020e8e:	701a      	strb	r2, [r3, #0]
						pcommu->sn = 0;
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	2200      	movs	r2, #0
 8020e94:	705a      	strb	r2, [r3, #1]
						pcommu->tick = 0;
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	2200      	movs	r2, #0
 8020e9a:	811a      	strh	r2, [r3, #8]
						pcommu->id_index = 1;
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2201      	movs	r2, #1
 8020ea0:	821a      	strh	r2, [r3, #16]
 8020ea2:	e00b      	b.n	8020ebc <app_pollCommunicationEvents+0x13c>
					}else //不应用 不跳传
					{
						pcommu->state = COMMU_IDEL;
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	2200      	movs	r2, #0
 8020ea8:	701a      	strb	r2, [r3, #0]
						pcommu->sn = 0;
 8020eaa:	687b      	ldr	r3, [r7, #4]
 8020eac:	2200      	movs	r2, #0
 8020eae:	705a      	strb	r2, [r3, #1]
						pcommu->tick = 0;
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	2200      	movs	r2, #0
 8020eb4:	811a      	strh	r2, [r3, #8]
						pcommu->id_index = 1;
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	2201      	movs	r2, #1
 8020eba:	821a      	strh	r2, [r3, #16]
					}

					pcommu->sn = 0;
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	2200      	movs	r2, #0
 8020ec0:	705a      	strb	r2, [r3, #1]
				}
			}				
		}	break;
 8020ec2:	e064      	b.n	8020f8e <app_pollCommunicationEvents+0x20e>

		case COMMU_BROADCAST:	//广播跳传态
		{
			if(++pcommu->tick*COMMU_POLL_PERIOD >= pcommu->max_broadcast_period)
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	891b      	ldrh	r3, [r3, #8]
 8020ec8:	3301      	adds	r3, #1
 8020eca:	b29a      	uxth	r2, r3
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	811a      	strh	r2, [r3, #8]
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	891b      	ldrh	r3, [r3, #8]
 8020ed4:	461a      	mov	r2, r3
 8020ed6:	4613      	mov	r3, r2
 8020ed8:	009b      	lsls	r3, r3, #2
 8020eda:	4413      	add	r3, r2
 8020edc:	005b      	lsls	r3, r3, #1
 8020ede:	461a      	mov	r2, r3
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	88db      	ldrh	r3, [r3, #6]
 8020ee4:	429a      	cmp	r2, r3
 8020ee6:	db54      	blt.n	8020f92 <app_pollCommunicationEvents+0x212>
			{
				pcommu->tick = 0;
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	2200      	movs	r2, #0
 8020eec:	811a      	strh	r2, [r3, #8]

				if(++pcommu->sn>=pcommu->max_broadcast_times) //对单个控制器广播最大次数无返回 自动切换到下一个控制器对其进行广播
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	785b      	ldrb	r3, [r3, #1]
 8020ef2:	3301      	adds	r3, #1
 8020ef4:	b2da      	uxtb	r2, r3
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	705a      	strb	r2, [r3, #1]
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	785a      	ldrb	r2, [r3, #1]
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	78db      	ldrb	r3, [r3, #3]
 8020f02:	429a      	cmp	r2, r3
 8020f04:	d345      	bcc.n	8020f92 <app_pollCommunicationEvents+0x212>
				{
					pcommu->sn = 0;
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	2200      	movs	r2, #0
 8020f0a:	705a      	strb	r2, [r3, #1]
					if(++pcommu->id_index>=pcommu->max_broadcast_dev_cnts) //发给自己所有下游控制器均未收到回复 则自动切换IDLE[超过容灾最大限度 无力回天]
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	8a1b      	ldrh	r3, [r3, #16]
 8020f10:	3301      	adds	r3, #1
 8020f12:	b29a      	uxth	r2, r3
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	821a      	strh	r2, [r3, #16]
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	8a1a      	ldrh	r2, [r3, #16]
 8020f1c:	687b      	ldr	r3, [r7, #4]
 8020f1e:	791b      	ldrb	r3, [r3, #4]
 8020f20:	b29b      	uxth	r3, r3
 8020f22:	429a      	cmp	r2, r3
 8020f24:	d32c      	bcc.n	8020f80 <app_pollCommunicationEvents+0x200>
					{
						pcommu->state = COMMU_IDEL;
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	2200      	movs	r2, #0
 8020f2a:	701a      	strb	r2, [r3, #0]
						pcommu->sn = 0;
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	2200      	movs	r2, #0
 8020f30:	705a      	strb	r2, [r3, #1]
						pcommu->tick = 0;
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	2200      	movs	r2, #0
 8020f36:	811a      	strh	r2, [r3, #8]
						pcommu->id_index = 1;
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	2201      	movs	r2, #1
 8020f3c:	821a      	strh	r2, [r3, #16]

						//完成跳传后 也对自身应用配置
						if(pcommu->self_id>=pcommu->start_id && pcommu->self_id<=pcommu->end_id)
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	895a      	ldrh	r2, [r3, #10]
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	899b      	ldrh	r3, [r3, #12]
 8020f46:	429a      	cmp	r2, r3
 8020f48:	d31a      	bcc.n	8020f80 <app_pollCommunicationEvents+0x200>
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	895a      	ldrh	r2, [r3, #10]
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	89db      	ldrh	r3, [r3, #14]
 8020f52:	429a      	cmp	r2, r3
 8020f54:	d814      	bhi.n	8020f80 <app_pollCommunicationEvents+0x200>
						{

							switch (pcommu->msg[8])
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	7e9b      	ldrb	r3, [r3, #26]
 8020f5a:	2b01      	cmp	r3, #1
 8020f5c:	d002      	beq.n	8020f64 <app_pollCommunicationEvents+0x1e4>
 8020f5e:	2b02      	cmp	r3, #2
 8020f60:	d002      	beq.n	8020f68 <app_pollCommunicationEvents+0x1e8>
									app_saveSysConfig(&device);
									NVIC_SystemReset();  //重启 由Bootloader进行APP切换							
								}	break;

								default:
									break;
 8020f62:	e00e      	b.n	8020f82 <app_pollCommunicationEvents+0x202>
										NVIC_SystemReset();  //重启 由Bootloader进行APP切换											
 8020f64:	f7ff fef6 	bl	8020d54 <__NVIC_SystemReset>
									device.macaddr = 0;
 8020f68:	490e      	ldr	r1, [pc, #56]	; (8020fa4 <app_pollCommunicationEvents+0x224>)
 8020f6a:	f04f 0200 	mov.w	r2, #0
 8020f6e:	f04f 0300 	mov.w	r3, #0
 8020f72:	e9c1 2304 	strd	r2, r3, [r1, #16]
									app_saveSysConfig(&device);
 8020f76:	480b      	ldr	r0, [pc, #44]	; (8020fa4 <app_pollCommunicationEvents+0x224>)
 8020f78:	f001 f862 	bl	8022040 <app_saveSysConfig>
									NVIC_SystemReset();  //重启 由Bootloader进行APP切换							
 8020f7c:	f7ff feea 	bl	8020d54 <__NVIC_SystemReset>
							}
						}
 8020f80:	bf00      	nop
				}else 
				{
					/*广播跳传包*/
				}
			}
		}	break;
 8020f82:	e006      	b.n	8020f92 <app_pollCommunicationEvents+0x212>

		default : state = -1; break; //不存在的状态
 8020f84:	23ff      	movs	r3, #255	; 0xff
 8020f86:	73fb      	strb	r3, [r7, #15]
 8020f88:	e004      	b.n	8020f94 <app_pollCommunicationEvents+0x214>
		}	break;
 8020f8a:	bf00      	nop
 8020f8c:	e002      	b.n	8020f94 <app_pollCommunicationEvents+0x214>
		}	break;
 8020f8e:	bf00      	nop
 8020f90:	e000      	b.n	8020f94 <app_pollCommunicationEvents+0x214>
		}	break;
 8020f92:	bf00      	nop
	}

	return state;
 8020f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f96:	4618      	mov	r0, r3
 8020f98:	3710      	adds	r7, #16
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd80      	pop	{r7, pc}
 8020f9e:	bf00      	nop
 8020fa0:	20000680 	.word	0x20000680
 8020fa4:	20004c48 	.word	0x20004c48

08020fa8 <__NVIC_SystemReset>:
{
 8020fa8:	b480      	push	{r7}
 8020faa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8020fac:	f3bf 8f4f 	dsb	sy
}
 8020fb0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8020fb2:	4b06      	ldr	r3, [pc, #24]	; (8020fcc <__NVIC_SystemReset+0x24>)
 8020fb4:	68db      	ldr	r3, [r3, #12]
 8020fb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8020fba:	4904      	ldr	r1, [pc, #16]	; (8020fcc <__NVIC_SystemReset+0x24>)
 8020fbc:	4b04      	ldr	r3, [pc, #16]	; (8020fd0 <__NVIC_SystemReset+0x28>)
 8020fbe:	4313      	orrs	r3, r2
 8020fc0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020fc2:	f3bf 8f4f 	dsb	sy
}
 8020fc6:	bf00      	nop
    __NOP();
 8020fc8:	bf00      	nop
 8020fca:	e7fd      	b.n	8020fc8 <__NVIC_SystemReset+0x20>
 8020fcc:	e000ed00 	.word	0xe000ed00
 8020fd0:	05fa0004 	.word	0x05fa0004

08020fd4 <app_changeEndian>:
 * 大小端转换
 * val为待转换值 len为转换长度 可以为奇数
 * 返回转换后的值
 */
static uint64_t app_changeEndian(uint64_t val, char len)
{
 8020fd4:	b480      	push	{r7}
 8020fd6:	b089      	sub	sp, #36	; 0x24
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8020fde:	4613      	mov	r3, r2
 8020fe0:	71fb      	strb	r3, [r7, #7]
	uint64_t ret_val = 0;
 8020fe2:	f04f 0200 	mov.w	r2, #0
 8020fe6:	f04f 0300 	mov.w	r3, #0
 8020fea:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ret_val = val;
 8020fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(char i=0;i<len;++i)
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	77fb      	strb	r3, [r7, #31]
 8020ffa:	e00f      	b.n	802101c <app_changeEndian+0x48>
	{
		*((char *)&ret_val+i) = *((char *)&val+len-i-1);
 8020ffc:	79fa      	ldrb	r2, [r7, #7]
 8020ffe:	7ffb      	ldrb	r3, [r7, #31]
 8021000:	1ad3      	subs	r3, r2, r3
 8021002:	3b01      	subs	r3, #1
 8021004:	f107 0208 	add.w	r2, r7, #8
 8021008:	441a      	add	r2, r3
 802100a:	7ffb      	ldrb	r3, [r7, #31]
 802100c:	f107 0110 	add.w	r1, r7, #16
 8021010:	440b      	add	r3, r1
 8021012:	7812      	ldrb	r2, [r2, #0]
 8021014:	701a      	strb	r2, [r3, #0]
	for(char i=0;i<len;++i)
 8021016:	7ffb      	ldrb	r3, [r7, #31]
 8021018:	3301      	adds	r3, #1
 802101a:	77fb      	strb	r3, [r7, #31]
 802101c:	7ffa      	ldrb	r2, [r7, #31]
 802101e:	79fb      	ldrb	r3, [r7, #7]
 8021020:	429a      	cmp	r2, r3
 8021022:	d3eb      	bcc.n	8020ffc <app_changeEndian+0x28>
	}

	return ret_val;
 8021024:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8021028:	4610      	mov	r0, r2
 802102a:	4619      	mov	r1, r3
 802102c:	3724      	adds	r7, #36	; 0x24
 802102e:	46bd      	mov	sp, r7
 8021030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021034:	4770      	bx	lr
	...

08021038 <app_sendMsg>:

/*************************************************发送数据************************************************/
void app_sendMsg(DRV_TYPE devtype, char * buffer, uint16_t size)
{
 8021038:	b580      	push	{r7, lr}
 802103a:	b082      	sub	sp, #8
 802103c:	af00      	add	r7, sp, #0
 802103e:	4603      	mov	r3, r0
 8021040:	6039      	str	r1, [r7, #0]
 8021042:	71fb      	strb	r3, [r7, #7]
 8021044:	4613      	mov	r3, r2
 8021046:	80bb      	strh	r3, [r7, #4]
	switch(devtype)
 8021048:	79fb      	ldrb	r3, [r7, #7]
 802104a:	2b05      	cmp	r3, #5
 802104c:	d83d      	bhi.n	80210ca <app_sendMsg+0x92>
 802104e:	a201      	add	r2, pc, #4	; (adr r2, 8021054 <app_sendMsg+0x1c>)
 8021050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021054:	0802106d 	.word	0x0802106d
 8021058:	0802107d 	.word	0x0802107d
 802105c:	0802108b 	.word	0x0802108b
 8021060:	08021099 	.word	0x08021099
 8021064:	080210af 	.word	0x080210af
 8021068:	080210bd 	.word	0x080210bd
	{
		case DRV_LORA_1:
		{
			lora1.write(buffer, size);
 802106c:	4b1a      	ldr	r3, [pc, #104]	; (80210d8 <app_sendMsg+0xa0>)
 802106e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8021072:	88ba      	ldrh	r2, [r7, #4]
 8021074:	4611      	mov	r1, r2
 8021076:	6838      	ldr	r0, [r7, #0]
 8021078:	4798      	blx	r3
		}	break;
 802107a:	e029      	b.n	80210d0 <app_sendMsg+0x98>

		case DRV_RS485_1:
		{
			rs4851.write(buffer, size);
 802107c:	4b17      	ldr	r3, [pc, #92]	; (80210dc <app_sendMsg+0xa4>)
 802107e:	695b      	ldr	r3, [r3, #20]
 8021080:	88ba      	ldrh	r2, [r7, #4]
 8021082:	4611      	mov	r1, r2
 8021084:	6838      	ldr	r0, [r7, #0]
 8021086:	4798      	blx	r3
		}	break;
 8021088:	e022      	b.n	80210d0 <app_sendMsg+0x98>

		case DRV_RS485_2:
		{
			rs4852.write(buffer, size);
 802108a:	4b15      	ldr	r3, [pc, #84]	; (80210e0 <app_sendMsg+0xa8>)
 802108c:	695b      	ldr	r3, [r3, #20]
 802108e:	88ba      	ldrh	r2, [r7, #4]
 8021090:	4611      	mov	r1, r2
 8021092:	6838      	ldr	r0, [r7, #0]
 8021094:	4798      	blx	r3
		}	break;
 8021096:	e01b      	b.n	80210d0 <app_sendMsg+0x98>

		case DRV_CAT1:
		{
			if(cat1.nwkstate!=COMPLETED)
 8021098:	4b12      	ldr	r3, [pc, #72]	; (80210e4 <app_sendMsg+0xac>)
 802109a:	785b      	ldrb	r3, [r3, #1]
 802109c:	2b08      	cmp	r3, #8
 802109e:	d116      	bne.n	80210ce <app_sendMsg+0x96>
			{
				return ;
			}

			cat1.write(buffer, size);
 80210a0:	4b10      	ldr	r3, [pc, #64]	; (80210e4 <app_sendMsg+0xac>)
 80210a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80210a4:	88ba      	ldrh	r2, [r7, #4]
 80210a6:	4611      	mov	r1, r2
 80210a8:	6838      	ldr	r0, [r7, #0]
 80210aa:	4798      	blx	r3
		}	break;
 80210ac:	e010      	b.n	80210d0 <app_sendMsg+0x98>

		case DRV_BLE:
		{
			ble.write(buffer, size);
 80210ae:	4b0e      	ldr	r3, [pc, #56]	; (80210e8 <app_sendMsg+0xb0>)
 80210b0:	691b      	ldr	r3, [r3, #16]
 80210b2:	88ba      	ldrh	r2, [r7, #4]
 80210b4:	4611      	mov	r1, r2
 80210b6:	6838      	ldr	r0, [r7, #0]
 80210b8:	4798      	blx	r3
		}	break;
 80210ba:	e009      	b.n	80210d0 <app_sendMsg+0x98>

		case DRV_DEBUG:
		{
			debug.write(buffer, size);
 80210bc:	4b0b      	ldr	r3, [pc, #44]	; (80210ec <app_sendMsg+0xb4>)
 80210be:	691b      	ldr	r3, [r3, #16]
 80210c0:	88ba      	ldrh	r2, [r7, #4]
 80210c2:	4611      	mov	r1, r2
 80210c4:	6838      	ldr	r0, [r7, #0]
 80210c6:	4798      	blx	r3
		}	break;
 80210c8:	e002      	b.n	80210d0 <app_sendMsg+0x98>

		default : break;
 80210ca:	bf00      	nop
 80210cc:	e000      	b.n	80210d0 <app_sendMsg+0x98>
				return ;
 80210ce:	bf00      	nop
	}
}
 80210d0:	3708      	adds	r7, #8
 80210d2:	46bd      	mov	sp, r7
 80210d4:	bd80      	pop	{r7, pc}
 80210d6:	bf00      	nop
 80210d8:	20000078 	.word	0x20000078
 80210dc:	2000003c 	.word	0x2000003c
 80210e0:	20000058 	.word	0x20000058
 80210e4:	20000270 	.word	0x20000270
 80210e8:	200002a8 	.word	0x200002a8
 80210ec:	200002c0 	.word	0x200002c0

080210f0 <app_revDebugMsg>:
/*************************************************接收事件回调********************************************/
/**
 * debug 接收
 */
void app_revDebugMsg(char * msg, uint16_t size)
{
 80210f0:	b480      	push	{r7}
 80210f2:	b083      	sub	sp, #12
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	6078      	str	r0, [r7, #4]
 80210f8:	460b      	mov	r3, r1
 80210fa:	807b      	strh	r3, [r7, #2]

}
 80210fc:	bf00      	nop
 80210fe:	370c      	adds	r7, #12
 8021100:	46bd      	mov	sp, r7
 8021102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021106:	4770      	bx	lr

08021108 <app_revLoRa1Msg>:

/**
 * LoRa1 接收
 */
void app_revLoRa1Msg(char * msg, uint16_t size)
{
 8021108:	b580      	push	{r7, lr}
 802110a:	b082      	sub	sp, #8
 802110c:	af00      	add	r7, sp, #0
 802110e:	6078      	str	r0, [r7, #4]
 8021110:	460b      	mov	r3, r1
 8021112:	807b      	strh	r3, [r7, #2]
	led_data.times = 6;
 8021114:	4b07      	ldr	r3, [pc, #28]	; (8021134 <app_revLoRa1Msg+0x2c>)
 8021116:	2206      	movs	r2, #6
 8021118:	815a      	strh	r2, [r3, #10]
	led_data.period = 100;
 802111a:	4b06      	ldr	r3, [pc, #24]	; (8021134 <app_revLoRa1Msg+0x2c>)
 802111c:	2264      	movs	r2, #100	; 0x64
 802111e:	811a      	strh	r2, [r3, #8]

	app_procProtocolMsg(M2M, msg, size);
 8021120:	887b      	ldrh	r3, [r7, #2]
 8021122:	461a      	mov	r2, r3
 8021124:	6879      	ldr	r1, [r7, #4]
 8021126:	2001      	movs	r0, #1
 8021128:	f000 fabc 	bl	80216a4 <app_procProtocolMsg>
}
 802112c:	bf00      	nop
 802112e:	3708      	adds	r7, #8
 8021130:	46bd      	mov	sp, r7
 8021132:	bd80      	pop	{r7, pc}
 8021134:	20000028 	.word	0x20000028

08021138 <app_revRS4851Msg>:

/**
 * RS485 1接收 [目前暂未使用]
 */
void app_revRS4851Msg(char * msg, uint16_t size)
{
 8021138:	b480      	push	{r7}
 802113a:	b083      	sub	sp, #12
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	460b      	mov	r3, r1
 8021142:	807b      	strh	r3, [r7, #2]
	led_data.times = 6;
 8021144:	4b05      	ldr	r3, [pc, #20]	; (802115c <app_revRS4851Msg+0x24>)
 8021146:	2206      	movs	r2, #6
 8021148:	815a      	strh	r2, [r3, #10]
	led_data.period = 100;
 802114a:	4b04      	ldr	r3, [pc, #16]	; (802115c <app_revRS4851Msg+0x24>)
 802114c:	2264      	movs	r2, #100	; 0x64
 802114e:	811a      	strh	r2, [r3, #8]
}
 8021150:	bf00      	nop
 8021152:	370c      	adds	r7, #12
 8021154:	46bd      	mov	sp, r7
 8021156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802115a:	4770      	bx	lr
 802115c:	20000028 	.word	0x20000028

08021160 <app_revRS4852Msg>:

/**
 * RS485 2接收 [目前暂未使用]
 */
void app_revRS4852Msg(char * msg, uint16_t size)
{
 8021160:	b480      	push	{r7}
 8021162:	b083      	sub	sp, #12
 8021164:	af00      	add	r7, sp, #0
 8021166:	6078      	str	r0, [r7, #4]
 8021168:	460b      	mov	r3, r1
 802116a:	807b      	strh	r3, [r7, #2]
	led_data.times = 6;
 802116c:	4b05      	ldr	r3, [pc, #20]	; (8021184 <app_revRS4852Msg+0x24>)
 802116e:	2206      	movs	r2, #6
 8021170:	815a      	strh	r2, [r3, #10]
	led_data.period = 100;
 8021172:	4b04      	ldr	r3, [pc, #16]	; (8021184 <app_revRS4852Msg+0x24>)
 8021174:	2264      	movs	r2, #100	; 0x64
 8021176:	811a      	strh	r2, [r3, #8]
}
 8021178:	bf00      	nop
 802117a:	370c      	adds	r7, #12
 802117c:	46bd      	mov	sp, r7
 802117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021182:	4770      	bx	lr
 8021184:	20000028 	.word	0x20000028

08021188 <app_revCat1Msg>:

/**
 * Cat1接收
 */
void app_revCat1Msg(char * msg, uint16_t size)
{
 8021188:	b580      	push	{r7, lr}
 802118a:	b082      	sub	sp, #8
 802118c:	af00      	add	r7, sp, #0
 802118e:	6078      	str	r0, [r7, #4]
 8021190:	460b      	mov	r3, r1
 8021192:	807b      	strh	r3, [r7, #2]
	app_procProtocolMsg(M2S, msg, size);
 8021194:	887b      	ldrh	r3, [r7, #2]
 8021196:	461a      	mov	r2, r3
 8021198:	6879      	ldr	r1, [r7, #4]
 802119a:	2002      	movs	r0, #2
 802119c:	f000 fa82 	bl	80216a4 <app_procProtocolMsg>
}
 80211a0:	bf00      	nop
 80211a2:	3708      	adds	r7, #8
 80211a4:	46bd      	mov	sp, r7
 80211a6:	bd80      	pop	{r7, pc}

080211a8 <app_connectServer>:

/**
 * Cat1连接事件 你可以在里边设置灯光闪烁频率 或者发送注册包
 */
void app_connectServer(void)
{
 80211a8:	b580      	push	{r7, lr}
 80211aa:	b082      	sub	sp, #8
 80211ac:	af02      	add	r7, sp, #8
	led_net.period = 1000;
 80211ae:	4b08      	ldr	r3, [pc, #32]	; (80211d0 <app_connectServer+0x28>)
 80211b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80211b4:	811a      	strh	r2, [r3, #8]
	app_sendProtocolMsg(SERVER_UPLOAD_STATUS, device.macaddr, 0, 0); //连接后上报一次状态
 80211b6:	4b07      	ldr	r3, [pc, #28]	; (80211d4 <app_connectServer+0x2c>)
 80211b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80211bc:	2100      	movs	r1, #0
 80211be:	9101      	str	r1, [sp, #4]
 80211c0:	2100      	movs	r1, #0
 80211c2:	9100      	str	r1, [sp, #0]
 80211c4:	4804      	ldr	r0, [pc, #16]	; (80211d8 <app_connectServer+0x30>)
 80211c6:	f000 f82f 	bl	8021228 <app_sendProtocolMsg>
}
 80211ca:	bf00      	nop
 80211cc:	46bd      	mov	sp, r7
 80211ce:	bd80      	pop	{r7, pc}
 80211d0:	20000014 	.word	0x20000014
 80211d4:	20004c48 	.word	0x20004c48
 80211d8:	1e032002 	.word	0x1e032002

080211dc <app_restartCat1>:

/**
 * Cat1重启事件 当重启Cat1或者断开连接后执行该函数 
 */
void app_restartCat1(void)
{
 80211dc:	b480      	push	{r7}
 80211de:	af00      	add	r7, sp, #0
	led_net.period = 100;
 80211e0:	4b03      	ldr	r3, [pc, #12]	; (80211f0 <app_restartCat1+0x14>)
 80211e2:	2264      	movs	r2, #100	; 0x64
 80211e4:	811a      	strh	r2, [r3, #8]
}
 80211e6:	bf00      	nop
 80211e8:	46bd      	mov	sp, r7
 80211ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ee:	4770      	bx	lr
 80211f0:	20000014 	.word	0x20000014

080211f4 <app_registCat1>:

/**
 * Cat1组网事件 模组连接到基站执行该函数 你可以在里边设置灯光闪烁频率
 */
void app_registCat1(void)
{
 80211f4:	b480      	push	{r7}
 80211f6:	af00      	add	r7, sp, #0
	led_net.period = 500;
 80211f8:	4b04      	ldr	r3, [pc, #16]	; (802120c <app_registCat1+0x18>)
 80211fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80211fe:	811a      	strh	r2, [r3, #8]
}
 8021200:	bf00      	nop
 8021202:	46bd      	mov	sp, r7
 8021204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021208:	4770      	bx	lr
 802120a:	bf00      	nop
 802120c:	20000014 	.word	0x20000014

08021210 <app_revBLEMsg>:

/**
 * BLE接收事件 诱导标预留
 */
void app_revBLEMsg(char * msg, uint16_t size)
{
 8021210:	b480      	push	{r7}
 8021212:	b083      	sub	sp, #12
 8021214:	af00      	add	r7, sp, #0
 8021216:	6078      	str	r0, [r7, #4]
 8021218:	460b      	mov	r3, r1
 802121a:	807b      	strh	r3, [r7, #2]

}
 802121c:	bf00      	nop
 802121e:	370c      	adds	r7, #12
 8021220:	46bd      	mov	sp, r7
 8021222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021226:	4770      	bx	lr

08021228 <app_sendProtocolMsg>:
 *       size 数据体长度
 * 
 * 返回:None 
 */
void app_sendProtocolMsg(CMD_TYPE cmd, uint64_t id, char * buffer, uint16_t size)
{
 8021228:	b5b0      	push	{r4, r5, r7, lr}
 802122a:	b09c      	sub	sp, #112	; 0x70
 802122c:	af08      	add	r7, sp, #32
 802122e:	60f8      	str	r0, [r7, #12]
 8021230:	e9c7 2300 	strd	r2, r3, [r7]
	static uint16_t sn = 0;

	uint16_t len; //打包后数据长度

	switch(cmd)
 8021234:	68fb      	ldr	r3, [r7, #12]
 8021236:	4a94      	ldr	r2, [pc, #592]	; (8021488 <app_sendProtocolMsg+0x260>)
 8021238:	4293      	cmp	r3, r2
 802123a:	f000 80e0 	beq.w	80213fe <app_sendProtocolMsg+0x1d6>
 802123e:	68fb      	ldr	r3, [r7, #12]
 8021240:	4a91      	ldr	r2, [pc, #580]	; (8021488 <app_sendProtocolMsg+0x260>)
 8021242:	4293      	cmp	r3, r2
 8021244:	f200 8220 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 8021248:	68fb      	ldr	r3, [r7, #12]
 802124a:	4a90      	ldr	r2, [pc, #576]	; (802148c <app_sendProtocolMsg+0x264>)
 802124c:	4293      	cmp	r3, r2
 802124e:	f000 80b6 	beq.w	80213be <app_sendProtocolMsg+0x196>
 8021252:	68fb      	ldr	r3, [r7, #12]
 8021254:	4a8d      	ldr	r2, [pc, #564]	; (802148c <app_sendProtocolMsg+0x264>)
 8021256:	4293      	cmp	r3, r2
 8021258:	f200 8216 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 802125c:	68fb      	ldr	r3, [r7, #12]
 802125e:	4a8c      	ldr	r2, [pc, #560]	; (8021490 <app_sendProtocolMsg+0x268>)
 8021260:	4293      	cmp	r3, r2
 8021262:	f000 8195 	beq.w	8021590 <app_sendProtocolMsg+0x368>
 8021266:	68fb      	ldr	r3, [r7, #12]
 8021268:	4a89      	ldr	r2, [pc, #548]	; (8021490 <app_sendProtocolMsg+0x268>)
 802126a:	4293      	cmp	r3, r2
 802126c:	f200 820c 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	4a88      	ldr	r2, [pc, #544]	; (8021494 <app_sendProtocolMsg+0x26c>)
 8021274:	4293      	cmp	r3, r2
 8021276:	f000 8125 	beq.w	80214c4 <app_sendProtocolMsg+0x29c>
 802127a:	68fb      	ldr	r3, [r7, #12]
 802127c:	4a85      	ldr	r2, [pc, #532]	; (8021494 <app_sendProtocolMsg+0x26c>)
 802127e:	4293      	cmp	r3, r2
 8021280:	f200 8202 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 8021284:	68fb      	ldr	r3, [r7, #12]
 8021286:	4a84      	ldr	r2, [pc, #528]	; (8021498 <app_sendProtocolMsg+0x270>)
 8021288:	4293      	cmp	r3, r2
 802128a:	f000 80d8 	beq.w	802143e <app_sendProtocolMsg+0x216>
 802128e:	68fb      	ldr	r3, [r7, #12]
 8021290:	4a81      	ldr	r2, [pc, #516]	; (8021498 <app_sendProtocolMsg+0x270>)
 8021292:	4293      	cmp	r3, r2
 8021294:	f200 81f8 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 8021298:	68fb      	ldr	r3, [r7, #12]
 802129a:	4a80      	ldr	r2, [pc, #512]	; (802149c <app_sendProtocolMsg+0x274>)
 802129c:	4293      	cmp	r3, r2
 802129e:	f000 81ae 	beq.w	80215fe <app_sendProtocolMsg+0x3d6>
 80212a2:	68fb      	ldr	r3, [r7, #12]
 80212a4:	4a7d      	ldr	r2, [pc, #500]	; (802149c <app_sendProtocolMsg+0x274>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	f200 81ee 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	4a7c      	ldr	r2, [pc, #496]	; (80214a0 <app_sendProtocolMsg+0x278>)
 80212b0:	4293      	cmp	r3, r2
 80212b2:	d03d      	beq.n	8021330 <app_sendProtocolMsg+0x108>
 80212b4:	68fb      	ldr	r3, [r7, #12]
 80212b6:	4a7a      	ldr	r2, [pc, #488]	; (80214a0 <app_sendProtocolMsg+0x278>)
 80212b8:	4293      	cmp	r3, r2
 80212ba:	f200 81e5 	bhi.w	8021688 <app_sendProtocolMsg+0x460>
 80212be:	68fb      	ldr	r3, [r7, #12]
 80212c0:	4a78      	ldr	r2, [pc, #480]	; (80214a4 <app_sendProtocolMsg+0x27c>)
 80212c2:	4293      	cmp	r3, r2
 80212c4:	f000 81bb 	beq.w	802163e <app_sendProtocolMsg+0x416>
 80212c8:	68fb      	ldr	r3, [r7, #12]
 80212ca:	4a77      	ldr	r2, [pc, #476]	; (80214a8 <app_sendProtocolMsg+0x280>)
 80212cc:	4293      	cmp	r3, r2
 80212ce:	f040 81db 	bne.w	8021688 <app_sendProtocolMsg+0x460>
	{
		//周期广播自身MAC 用于APP发现
		case DEVICE_BIND:
		{
			char content[9];
			content[0] = 2;
 80212d2:	2302      	movs	r3, #2
 80212d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

			memcpy(content+1, (char *)&device.macaddr, 8);
 80212d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80212dc:	3301      	adds	r3, #1
 80212de:	2208      	movs	r2, #8
 80212e0:	4972      	ldr	r1, [pc, #456]	; (80214ac <app_sendProtocolMsg+0x284>)
 80212e2:	4618      	mov	r0, r3
 80212e4:	f00b febc 	bl	802d060 <memcpy>

            //填充数据包
            app_packProtocolMsg(M2M, 0xFFFF, content, sizeof(content), cmd, 0, 0, lora1.t_buffer, &len);
 80212e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80212ec:	b29b      	uxth	r3, r3
 80212ee:	4a70      	ldr	r2, [pc, #448]	; (80214b0 <app_sendProtocolMsg+0x288>)
 80212f0:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 80212f4:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 80212f8:	9106      	str	r1, [sp, #24]
 80212fa:	9205      	str	r2, [sp, #20]
 80212fc:	2200      	movs	r2, #0
 80212fe:	9204      	str	r2, [sp, #16]
 8021300:	2200      	movs	r2, #0
 8021302:	9203      	str	r2, [sp, #12]
 8021304:	68fa      	ldr	r2, [r7, #12]
 8021306:	9202      	str	r2, [sp, #8]
 8021308:	2209      	movs	r2, #9
 802130a:	9201      	str	r2, [sp, #4]
 802130c:	9300      	str	r3, [sp, #0]
 802130e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021312:	f04f 0300 	mov.w	r3, #0
 8021316:	2001      	movs	r0, #1
 8021318:	f000 ffaf 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_LORA_1, lora1.t_buffer, len);		
 802131c:	4b64      	ldr	r3, [pc, #400]	; (80214b0 <app_sendProtocolMsg+0x288>)
 802131e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8021322:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8021326:	4619      	mov	r1, r3
 8021328:	2000      	movs	r0, #0
 802132a:	f7ff fe85 	bl	8021038 <app_sendMsg>
		}	break;
 802132e:	e1ac      	b.n	802168a <app_sendProtocolMsg+0x462>
		//发送跳传数据
		case DEVICE_JUMP:
		{
			char content[23];

			content[0] = device.communication.sn;
 8021330:	4b60      	ldr	r3, [pc, #384]	; (80214b4 <app_sendProtocolMsg+0x28c>)
 8021332:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8021336:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			*(uint16_t *)(content+1) = device.communication.self_id;
 802133a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802133e:	3301      	adds	r3, #1
 8021340:	4a5c      	ldr	r2, [pc, #368]	; (80214b4 <app_sendProtocolMsg+0x28c>)
 8021342:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8021346:	801a      	strh	r2, [r3, #0]
			*(uint16_t *)(content+3) = device.communication.start_id;
 8021348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802134c:	3303      	adds	r3, #3
 802134e:	4a59      	ldr	r2, [pc, #356]	; (80214b4 <app_sendProtocolMsg+0x28c>)
 8021350:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8021354:	801a      	strh	r2, [r3, #0]
			*(uint16_t *)(content+5) = device.communication.start_id;
 8021356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802135a:	3305      	adds	r3, #5
 802135c:	4a55      	ldr	r2, [pc, #340]	; (80214b4 <app_sendProtocolMsg+0x28c>)
 802135e:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8021362:	801a      	strh	r2, [r3, #0]
			memcpy(content+7, device.communication.msg, 16);
 8021364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8021368:	3307      	adds	r3, #7
 802136a:	4a52      	ldr	r2, [pc, #328]	; (80214b4 <app_sendProtocolMsg+0x28c>)
 802136c:	461d      	mov	r5, r3
 802136e:	f102 0450 	add.w	r4, r2, #80	; 0x50
 8021372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021374:	6028      	str	r0, [r5, #0]
 8021376:	6069      	str	r1, [r5, #4]
 8021378:	60aa      	str	r2, [r5, #8]
 802137a:	60eb      	str	r3, [r5, #12]

            //填充数据包
            app_packProtocolMsg(M2M, id, 0, 0, cmd, content, sizeof(content), lora1.t_buffer, &len);
 802137c:	4b4c      	ldr	r3, [pc, #304]	; (80214b0 <app_sendProtocolMsg+0x288>)
 802137e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8021382:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8021386:	9206      	str	r2, [sp, #24]
 8021388:	9305      	str	r3, [sp, #20]
 802138a:	2317      	movs	r3, #23
 802138c:	9304      	str	r3, [sp, #16]
 802138e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8021392:	9303      	str	r3, [sp, #12]
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	9302      	str	r3, [sp, #8]
 8021398:	2300      	movs	r3, #0
 802139a:	9301      	str	r3, [sp, #4]
 802139c:	2300      	movs	r3, #0
 802139e:	9300      	str	r3, [sp, #0]
 80213a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80213a4:	2001      	movs	r0, #1
 80213a6:	f000 ff68 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_LORA_1, lora1.t_buffer, len);
 80213aa:	4b41      	ldr	r3, [pc, #260]	; (80214b0 <app_sendProtocolMsg+0x288>)
 80213ac:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80213b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80213b4:	4619      	mov	r1, r3
 80213b6:	2000      	movs	r0, #0
 80213b8:	f7ff fe3e 	bl	8021038 <app_sendMsg>
		}	break;
 80213bc:	e165      	b.n	802168a <app_sendProtocolMsg+0x462>

		//回复上级跳传
		case DEVICE_JUMP_ACK:
		{            
            //填充数据包
            app_packProtocolMsg(M2M, id, 0, 0, cmd, 0, 0, lora1.t_buffer, &len);
 80213be:	4b3c      	ldr	r3, [pc, #240]	; (80214b0 <app_sendProtocolMsg+0x288>)
 80213c0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80213c4:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 80213c8:	9206      	str	r2, [sp, #24]
 80213ca:	9305      	str	r3, [sp, #20]
 80213cc:	2300      	movs	r3, #0
 80213ce:	9304      	str	r3, [sp, #16]
 80213d0:	2300      	movs	r3, #0
 80213d2:	9303      	str	r3, [sp, #12]
 80213d4:	68fb      	ldr	r3, [r7, #12]
 80213d6:	9302      	str	r3, [sp, #8]
 80213d8:	2300      	movs	r3, #0
 80213da:	9301      	str	r3, [sp, #4]
 80213dc:	2300      	movs	r3, #0
 80213de:	9300      	str	r3, [sp, #0]
 80213e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80213e4:	2001      	movs	r0, #1
 80213e6:	f000 ff48 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_LORA_1, lora1.t_buffer, len);
 80213ea:	4b31      	ldr	r3, [pc, #196]	; (80214b0 <app_sendProtocolMsg+0x288>)
 80213ec:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80213f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80213f4:	4619      	mov	r1, r3
 80213f6:	2000      	movs	r0, #0
 80213f8:	f7ff fe1e 	bl	8021038 <app_sendMsg>
		} break;
 80213fc:	e145      	b.n	802168a <app_sendProtocolMsg+0x462>
		
		//回复本地控制器
		case DEVICE_CONTROL_ACK:
		{
            //填充数据包
            app_packProtocolMsg(M2M, id, 0, 0, cmd, 0, 0, lora1.t_buffer, &len);
 80213fe:	4b2c      	ldr	r3, [pc, #176]	; (80214b0 <app_sendProtocolMsg+0x288>)
 8021400:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8021404:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8021408:	9206      	str	r2, [sp, #24]
 802140a:	9305      	str	r3, [sp, #20]
 802140c:	2300      	movs	r3, #0
 802140e:	9304      	str	r3, [sp, #16]
 8021410:	2300      	movs	r3, #0
 8021412:	9303      	str	r3, [sp, #12]
 8021414:	68fb      	ldr	r3, [r7, #12]
 8021416:	9302      	str	r3, [sp, #8]
 8021418:	2300      	movs	r3, #0
 802141a:	9301      	str	r3, [sp, #4]
 802141c:	2300      	movs	r3, #0
 802141e:	9300      	str	r3, [sp, #0]
 8021420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021424:	2001      	movs	r0, #1
 8021426:	f000 ff28 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_LORA_1, lora1.t_buffer, len);
 802142a:	4b21      	ldr	r3, [pc, #132]	; (80214b0 <app_sendProtocolMsg+0x288>)
 802142c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8021430:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8021434:	4619      	mov	r1, r3
 8021436:	2000      	movs	r0, #0
 8021438:	f7ff fdfe 	bl	8021038 <app_sendMsg>
		} break;
 802143c:	e125      	b.n	802168a <app_sendProtocolMsg+0x462>

		//请求配置
		case SERVER_REQ_CFG:
		{
            //填充数据包
            app_packProtocolMsg(M2S, device.macaddr, sn++, 0, cmd, cat1.ccid, sizeof(cat1.ccid), cat1.t_buffer, &len);
 802143e:	4b1d      	ldr	r3, [pc, #116]	; (80214b4 <app_sendProtocolMsg+0x28c>)
 8021440:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021444:	491c      	ldr	r1, [pc, #112]	; (80214b8 <app_sendProtocolMsg+0x290>)
 8021446:	8809      	ldrh	r1, [r1, #0]
 8021448:	1c48      	adds	r0, r1, #1
 802144a:	b284      	uxth	r4, r0
 802144c:	481a      	ldr	r0, [pc, #104]	; (80214b8 <app_sendProtocolMsg+0x290>)
 802144e:	8004      	strh	r4, [r0, #0]
 8021450:	481a      	ldr	r0, [pc, #104]	; (80214bc <app_sendProtocolMsg+0x294>)
 8021452:	6840      	ldr	r0, [r0, #4]
 8021454:	f107 044e 	add.w	r4, r7, #78	; 0x4e
 8021458:	9406      	str	r4, [sp, #24]
 802145a:	9005      	str	r0, [sp, #20]
 802145c:	2014      	movs	r0, #20
 802145e:	9004      	str	r0, [sp, #16]
 8021460:	4817      	ldr	r0, [pc, #92]	; (80214c0 <app_sendProtocolMsg+0x298>)
 8021462:	9003      	str	r0, [sp, #12]
 8021464:	68f8      	ldr	r0, [r7, #12]
 8021466:	9002      	str	r0, [sp, #8]
 8021468:	2000      	movs	r0, #0
 802146a:	9001      	str	r0, [sp, #4]
 802146c:	9100      	str	r1, [sp, #0]
 802146e:	2002      	movs	r0, #2
 8021470:	f000 ff03 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_CAT1, cat1.t_buffer, len);
 8021474:	4b11      	ldr	r3, [pc, #68]	; (80214bc <app_sendProtocolMsg+0x294>)
 8021476:	685b      	ldr	r3, [r3, #4]
 8021478:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 802147c:	4619      	mov	r1, r3
 802147e:	2003      	movs	r0, #3
 8021480:	f7ff fdda 	bl	8021038 <app_sendMsg>
		} break;
 8021484:	e101      	b.n	802168a <app_sendProtocolMsg+0x462>
 8021486:	bf00      	nop
 8021488:	1eff1002 	.word	0x1eff1002
 802148c:	1eff1001 	.word	0x1eff1001
 8021490:	1e032004 	.word	0x1e032004
 8021494:	1e032002 	.word	0x1e032002
 8021498:	1e032001 	.word	0x1e032001
 802149c:	1e022003 	.word	0x1e022003
 80214a0:	1e001001 	.word	0x1e001001
 80214a4:	01032005 	.word	0x01032005
 80214a8:	1e001000 	.word	0x1e001000
 80214ac:	20004c58 	.word	0x20004c58
 80214b0:	20000078 	.word	0x20000078
 80214b4:	20004c48 	.word	0x20004c48
 80214b8:	20000474 	.word	0x20000474
 80214bc:	20000270 	.word	0x20000270
 80214c0:	2000027e 	.word	0x2000027e
		case SERVER_UPLOAD_STATUS:
		{
			char content[19];

			//封装当前版本
			content[0] = VERSION;
 80214c4:	2301      	movs	r3, #1
 80214c6:	763b      	strb	r3, [r7, #24]
			//封装8通道灯光亮度
			memcpy(content+1, device.communication.msg, sizeof(device.communication.msg));
 80214c8:	f107 0318 	add.w	r3, r7, #24
 80214cc:	3301      	adds	r3, #1
 80214ce:	4a71      	ldr	r2, [pc, #452]	; (8021694 <app_sendProtocolMsg+0x46c>)
 80214d0:	461d      	mov	r5, r3
 80214d2:	f102 0450 	add.w	r4, r2, #80	; 0x50
 80214d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80214d8:	6028      	str	r0, [r5, #0]
 80214da:	6069      	str	r1, [r5, #4]
 80214dc:	60aa      	str	r2, [r5, #8]
 80214de:	60eb      	str	r3, [r5, #12]
			//封装自身短ID
			*(uint16_t *)(content+9) =  app_changeEndian(device.communication.self_id, 2);
 80214e0:	4b6c      	ldr	r3, [pc, #432]	; (8021694 <app_sendProtocolMsg+0x46c>)
 80214e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80214e6:	b298      	uxth	r0, r3
 80214e8:	f04f 0100 	mov.w	r1, #0
 80214ec:	2202      	movs	r2, #2
 80214ee:	f7ff fd71 	bl	8020fd4 <app_changeEndian>
 80214f2:	f107 0318 	add.w	r3, r7, #24
 80214f6:	3309      	adds	r3, #9
 80214f8:	b282      	uxth	r2, r0
 80214fa:	801a      	strh	r2, [r3, #0]
			//封装当前信道
			*(uint32_t *)(content+11) = app_changeEndian(device.loraparam.RFFrequency, 4);
 80214fc:	4b65      	ldr	r3, [pc, #404]	; (8021694 <app_sendProtocolMsg+0x46c>)
 80214fe:	69db      	ldr	r3, [r3, #28]
 8021500:	4618      	mov	r0, r3
 8021502:	f04f 0100 	mov.w	r1, #0
 8021506:	2204      	movs	r2, #4
 8021508:	f7ff fd64 	bl	8020fd4 <app_changeEndian>
 802150c:	f107 0318 	add.w	r3, r7, #24
 8021510:	330b      	adds	r3, #11
 8021512:	4602      	mov	r2, r0
 8021514:	601a      	str	r2, [r3, #0]
			//封装容灾设备数量
			content[15] = device.communication.max_broadcast_dev_cnts;
 8021516:	4b5f      	ldr	r3, [pc, #380]	; (8021694 <app_sendProtocolMsg+0x46c>)
 8021518:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802151c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//封装广播次数
			content[16] = device.communication.max_broadcast_times;
 8021520:	4b5c      	ldr	r3, [pc, #368]	; (8021694 <app_sendProtocolMsg+0x46c>)
 8021522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8021526:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			//封装广播间隔
			*(uint16_t *)(content+17) = app_changeEndian(device.communication.max_broadcast_period, 2);
 802152a:	4b5a      	ldr	r3, [pc, #360]	; (8021694 <app_sendProtocolMsg+0x46c>)
 802152c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8021530:	b298      	uxth	r0, r3
 8021532:	f04f 0100 	mov.w	r1, #0
 8021536:	2202      	movs	r2, #2
 8021538:	f7ff fd4c 	bl	8020fd4 <app_changeEndian>
 802153c:	f107 0318 	add.w	r3, r7, #24
 8021540:	3311      	adds	r3, #17
 8021542:	b282      	uxth	r2, r0
 8021544:	801a      	strh	r2, [r3, #0]

            //填充数据包
            app_packProtocolMsg(M2S, device.macaddr, sn++, 0, cmd, content, sizeof(content), cat1.t_buffer, &len);
 8021546:	4b53      	ldr	r3, [pc, #332]	; (8021694 <app_sendProtocolMsg+0x46c>)
 8021548:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802154c:	4952      	ldr	r1, [pc, #328]	; (8021698 <app_sendProtocolMsg+0x470>)
 802154e:	8809      	ldrh	r1, [r1, #0]
 8021550:	1c48      	adds	r0, r1, #1
 8021552:	b284      	uxth	r4, r0
 8021554:	4850      	ldr	r0, [pc, #320]	; (8021698 <app_sendProtocolMsg+0x470>)
 8021556:	8004      	strh	r4, [r0, #0]
 8021558:	4850      	ldr	r0, [pc, #320]	; (802169c <app_sendProtocolMsg+0x474>)
 802155a:	6840      	ldr	r0, [r0, #4]
 802155c:	f107 044e 	add.w	r4, r7, #78	; 0x4e
 8021560:	9406      	str	r4, [sp, #24]
 8021562:	9005      	str	r0, [sp, #20]
 8021564:	2013      	movs	r0, #19
 8021566:	9004      	str	r0, [sp, #16]
 8021568:	f107 0018 	add.w	r0, r7, #24
 802156c:	9003      	str	r0, [sp, #12]
 802156e:	68f8      	ldr	r0, [r7, #12]
 8021570:	9002      	str	r0, [sp, #8]
 8021572:	2000      	movs	r0, #0
 8021574:	9001      	str	r0, [sp, #4]
 8021576:	9100      	str	r1, [sp, #0]
 8021578:	2002      	movs	r0, #2
 802157a:	f000 fe7e 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_CAT1, cat1.t_buffer, len);		
 802157e:	4b47      	ldr	r3, [pc, #284]	; (802169c <app_sendProtocolMsg+0x474>)
 8021580:	685b      	ldr	r3, [r3, #4]
 8021582:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8021586:	4619      	mov	r1, r3
 8021588:	2003      	movs	r0, #3
 802158a:	f7ff fd55 	bl	8021038 <app_sendMsg>
		} break;
 802158e:	e07c      	b.n	802168a <app_sendProtocolMsg+0x462>
		case SERVER_REQ_FW:
		{
            //定义数据包
            char content[4];  
            
            content[0] = 0;  //固件类型
 8021590:	2300      	movs	r3, #0
 8021592:	753b      	strb	r3, [r7, #20]
            content[1] = device.fwver.version;  //固件版本 预留
 8021594:	4b3f      	ldr	r3, [pc, #252]	; (8021694 <app_sendProtocolMsg+0x46c>)
 8021596:	781b      	ldrb	r3, [r3, #0]
 8021598:	757b      	strb	r3, [r7, #21]
            *(uint16_t *)(content+2) = app_changeEndian(device.fwver.index, 2);//固件索引
 802159a:	4b3e      	ldr	r3, [pc, #248]	; (8021694 <app_sendProtocolMsg+0x46c>)
 802159c:	891b      	ldrh	r3, [r3, #8]
 802159e:	b298      	uxth	r0, r3
 80215a0:	f04f 0100 	mov.w	r1, #0
 80215a4:	2202      	movs	r2, #2
 80215a6:	f7ff fd15 	bl	8020fd4 <app_changeEndian>
 80215aa:	f107 0314 	add.w	r3, r7, #20
 80215ae:	3302      	adds	r3, #2
 80215b0:	b282      	uxth	r2, r0
 80215b2:	801a      	strh	r2, [r3, #0]
    
            //填充数据包
            app_packProtocolMsg(M2S, device.macaddr, sn++, 0, SERVER_REQ_FW, content,sizeof(content), cat1.t_buffer, &len);
 80215b4:	4b37      	ldr	r3, [pc, #220]	; (8021694 <app_sendProtocolMsg+0x46c>)
 80215b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80215ba:	4937      	ldr	r1, [pc, #220]	; (8021698 <app_sendProtocolMsg+0x470>)
 80215bc:	8809      	ldrh	r1, [r1, #0]
 80215be:	1c48      	adds	r0, r1, #1
 80215c0:	b284      	uxth	r4, r0
 80215c2:	4835      	ldr	r0, [pc, #212]	; (8021698 <app_sendProtocolMsg+0x470>)
 80215c4:	8004      	strh	r4, [r0, #0]
 80215c6:	4835      	ldr	r0, [pc, #212]	; (802169c <app_sendProtocolMsg+0x474>)
 80215c8:	6840      	ldr	r0, [r0, #4]
 80215ca:	f107 044e 	add.w	r4, r7, #78	; 0x4e
 80215ce:	9406      	str	r4, [sp, #24]
 80215d0:	9005      	str	r0, [sp, #20]
 80215d2:	2004      	movs	r0, #4
 80215d4:	9004      	str	r0, [sp, #16]
 80215d6:	f107 0014 	add.w	r0, r7, #20
 80215da:	9003      	str	r0, [sp, #12]
 80215dc:	4830      	ldr	r0, [pc, #192]	; (80216a0 <app_sendProtocolMsg+0x478>)
 80215de:	9002      	str	r0, [sp, #8]
 80215e0:	2000      	movs	r0, #0
 80215e2:	9001      	str	r0, [sp, #4]
 80215e4:	9100      	str	r1, [sp, #0]
 80215e6:	2002      	movs	r0, #2
 80215e8:	f000 fe47 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_CAT1, cat1.t_buffer, len);          
 80215ec:	4b2b      	ldr	r3, [pc, #172]	; (802169c <app_sendProtocolMsg+0x474>)
 80215ee:	685b      	ldr	r3, [r3, #4]
 80215f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80215f4:	4619      	mov	r1, r3
 80215f6:	2003      	movs	r0, #3
 80215f8:	f7ff fd1e 	bl	8021038 <app_sendMsg>
		} break;
 80215fc:	e045      	b.n	802168a <app_sendProtocolMsg+0x462>

		//回复平台控制
		case SERVER_DOWNLOAD_CTRL_ACK:
		{
            //填充数据包
            app_packProtocolMsg(M2S, device.macaddr, *(uint16_t *)buffer, 0, cmd, 0, 0, cat1.t_buffer, &len);
 80215fe:	4b25      	ldr	r3, [pc, #148]	; (8021694 <app_sendProtocolMsg+0x46c>)
 8021600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021604:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8021606:	8809      	ldrh	r1, [r1, #0]
 8021608:	4824      	ldr	r0, [pc, #144]	; (802169c <app_sendProtocolMsg+0x474>)
 802160a:	6840      	ldr	r0, [r0, #4]
 802160c:	f107 044e 	add.w	r4, r7, #78	; 0x4e
 8021610:	9406      	str	r4, [sp, #24]
 8021612:	9005      	str	r0, [sp, #20]
 8021614:	2000      	movs	r0, #0
 8021616:	9004      	str	r0, [sp, #16]
 8021618:	2000      	movs	r0, #0
 802161a:	9003      	str	r0, [sp, #12]
 802161c:	68f8      	ldr	r0, [r7, #12]
 802161e:	9002      	str	r0, [sp, #8]
 8021620:	2000      	movs	r0, #0
 8021622:	9001      	str	r0, [sp, #4]
 8021624:	9100      	str	r1, [sp, #0]
 8021626:	2002      	movs	r0, #2
 8021628:	f000 fe27 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_CAT1, cat1.t_buffer, len);
 802162c:	4b1b      	ldr	r3, [pc, #108]	; (802169c <app_sendProtocolMsg+0x474>)
 802162e:	685b      	ldr	r3, [r3, #4]
 8021630:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8021634:	4619      	mov	r1, r3
 8021636:	2003      	movs	r0, #3
 8021638:	f7ff fcfe 	bl	8021038 <app_sendMsg>
		} break;
 802163c:	e025      	b.n	802168a <app_sendProtocolMsg+0x462>

		//反馈升级结果
		case SERVER_IAP_RET:
		{
            //填充数据包
            app_packProtocolMsg(M2S, device.macaddr, sn++, 0, cmd, buffer, size, cat1.t_buffer, &len);
 802163e:	4b15      	ldr	r3, [pc, #84]	; (8021694 <app_sendProtocolMsg+0x46c>)
 8021640:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021644:	4914      	ldr	r1, [pc, #80]	; (8021698 <app_sendProtocolMsg+0x470>)
 8021646:	8809      	ldrh	r1, [r1, #0]
 8021648:	1c48      	adds	r0, r1, #1
 802164a:	b284      	uxth	r4, r0
 802164c:	4812      	ldr	r0, [pc, #72]	; (8021698 <app_sendProtocolMsg+0x470>)
 802164e:	8004      	strh	r4, [r0, #0]
 8021650:	4812      	ldr	r0, [pc, #72]	; (802169c <app_sendProtocolMsg+0x474>)
 8021652:	6840      	ldr	r0, [r0, #4]
 8021654:	f107 044e 	add.w	r4, r7, #78	; 0x4e
 8021658:	9406      	str	r4, [sp, #24]
 802165a:	9005      	str	r0, [sp, #20]
 802165c:	f8b7 0064 	ldrh.w	r0, [r7, #100]	; 0x64
 8021660:	9004      	str	r0, [sp, #16]
 8021662:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8021664:	9003      	str	r0, [sp, #12]
 8021666:	68f8      	ldr	r0, [r7, #12]
 8021668:	9002      	str	r0, [sp, #8]
 802166a:	2000      	movs	r0, #0
 802166c:	9001      	str	r0, [sp, #4]
 802166e:	9100      	str	r1, [sp, #0]
 8021670:	2002      	movs	r0, #2
 8021672:	f000 fe02 	bl	802227a <app_packProtocolMsg>

            //发送数据包
			app_sendMsg(DRV_CAT1, cat1.t_buffer, len);
 8021676:	4b09      	ldr	r3, [pc, #36]	; (802169c <app_sendProtocolMsg+0x474>)
 8021678:	685b      	ldr	r3, [r3, #4]
 802167a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 802167e:	4619      	mov	r1, r3
 8021680:	2003      	movs	r0, #3
 8021682:	f7ff fcd9 	bl	8021038 <app_sendMsg>
		} break;
 8021686:	e000      	b.n	802168a <app_sendProtocolMsg+0x462>

		default:	break;
 8021688:	bf00      	nop
	}
}
 802168a:	bf00      	nop
 802168c:	3750      	adds	r7, #80	; 0x50
 802168e:	46bd      	mov	sp, r7
 8021690:	bdb0      	pop	{r4, r5, r7, pc}
 8021692:	bf00      	nop
 8021694:	20004c48 	.word	0x20004c48
 8021698:	20000474 	.word	0x20000474
 802169c:	20000270 	.word	0x20000270
 80216a0:	1e032004 	.word	0x1e032004

080216a4 <app_procProtocolMsg>:
 *       size 接收内容长度
 * 
 * 返回:None 
 */
void app_procProtocolMsg(PROTOCOLTYPE msgtype, char * buffer, uint16_t size)
{
 80216a4:	b5b0      	push	{r4, r5, r7, lr}
 80216a6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80216aa:	af04      	add	r7, sp, #16
 80216ac:	463b      	mov	r3, r7
 80216ae:	6019      	str	r1, [r3, #0]
 80216b0:	4611      	mov	r1, r2
 80216b2:	1dfb      	adds	r3, r7, #7
 80216b4:	4602      	mov	r2, r0
 80216b6:	701a      	strb	r2, [r3, #0]
 80216b8:	1d3b      	adds	r3, r7, #4
 80216ba:	460a      	mov	r2, r1
 80216bc:	801a      	strh	r2, [r3, #0]
	static char fwcache[IAP_PKTSIZE];
	static uint32_t crc = 0;    //本地计算下发固件的CRC
	static uint32_t fwcrc = 0;  //固件本身携带的crc

    ProtocolParam protocol;
    uint16_t len = 0;
 80216be:	2300      	movs	r3, #0
 80216c0:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

    //接收的数据体长度
    char content[IAP_PKTSIZE]; //接收的数据体部分 考虑配置字节较多的场景(在线升级)

    //解析数据
    if(app_unpackProtocolMsg(msgtype, &protocol, buffer, size, 0, content, &len)==NO)
 80216c4:	1d3b      	adds	r3, r7, #4
 80216c6:	881d      	ldrh	r5, [r3, #0]
 80216c8:	4639      	mov	r1, r7
 80216ca:	f507 7404 	add.w	r4, r7, #528	; 0x210
 80216ce:	1dfb      	adds	r3, r7, #7
 80216d0:	7818      	ldrb	r0, [r3, #0]
 80216d2:	f207 230e 	addw	r3, r7, #526	; 0x20e
 80216d6:	9303      	str	r3, [sp, #12]
 80216d8:	f107 030c 	add.w	r3, r7, #12
 80216dc:	9302      	str	r3, [sp, #8]
 80216de:	f04f 0200 	mov.w	r2, #0
 80216e2:	f04f 0300 	mov.w	r3, #0
 80216e6:	e9cd 2300 	strd	r2, r3, [sp]
 80216ea:	462b      	mov	r3, r5
 80216ec:	680a      	ldr	r2, [r1, #0]
 80216ee:	4621      	mov	r1, r4
 80216f0:	f000 fe6b 	bl	80223ca <app_unpackProtocolMsg>
 80216f4:	4603      	mov	r3, r0
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	f000 8472 	beq.w	8021fe0 <app_procProtocolMsg+0x93c>
    {
        return ;
    }

    //判断产品ID 1E表示回路调光 
    if((protocol.command&0xFF000000) != PRODUCT_ID)
 80216fc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8021700:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8021704:	f1b3 5ff0 	cmp.w	r3, #503316480	; 0x1e000000
 8021708:	f040 846c 	bne.w	8021fe4 <app_procProtocolMsg+0x940>
    {
        return ;
    }

	if(msgtype==M2M)
 802170c:	1dfb      	adds	r3, r7, #7
 802170e:	781b      	ldrb	r3, [r3, #0]
 8021710:	2b01      	cmp	r3, #1
 8021712:	f040 80f8 	bne.w	8021906 <app_procProtocolMsg+0x262>
	{
		if(protocol.id!=device.communication.self_id && protocol.id!=0xFFFF)  //非法ID 只对自身ID或者广播ID进行处理
 8021716:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 802171a:	4bbe      	ldr	r3, [pc, #760]	; (8021a14 <app_procProtocolMsg+0x370>)
 802171c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021720:	b29a      	uxth	r2, r3
 8021722:	f04f 0300 	mov.w	r3, #0
 8021726:	4299      	cmp	r1, r3
 8021728:	bf08      	it	eq
 802172a:	4290      	cmpeq	r0, r2
 802172c:	d00a      	beq.n	8021744 <app_procProtocolMsg+0xa0>
 802172e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8021732:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8021736:	f04f 0100 	mov.w	r1, #0
 802173a:	428b      	cmp	r3, r1
 802173c:	bf08      	it	eq
 802173e:	4282      	cmpeq	r2, r0
 8021740:	f040 8452 	bne.w	8021fe8 <app_procProtocolMsg+0x944>
		{
			return ;
		}

		switch(protocol.command)
 8021744:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8021748:	4ab3      	ldr	r2, [pc, #716]	; (8021a18 <app_procProtocolMsg+0x374>)
 802174a:	4293      	cmp	r3, r2
 802174c:	d06b      	beq.n	8021826 <app_procProtocolMsg+0x182>
 802174e:	4ab2      	ldr	r2, [pc, #712]	; (8021a18 <app_procProtocolMsg+0x374>)
 8021750:	4293      	cmp	r3, r2
 8021752:	f200 844b 	bhi.w	8021fec <app_procProtocolMsg+0x948>
 8021756:	4ab1      	ldr	r2, [pc, #708]	; (8021a1c <app_procProtocolMsg+0x378>)
 8021758:	4293      	cmp	r3, r2
 802175a:	f000 809e 	beq.w	802189a <app_procProtocolMsg+0x1f6>
 802175e:	4aaf      	ldr	r2, [pc, #700]	; (8021a1c <app_procProtocolMsg+0x378>)
 8021760:	4293      	cmp	r3, r2
 8021762:	f200 8443 	bhi.w	8021fec <app_procProtocolMsg+0x948>
 8021766:	4aae      	ldr	r2, [pc, #696]	; (8021a20 <app_procProtocolMsg+0x37c>)
 8021768:	4293      	cmp	r3, r2
 802176a:	d004      	beq.n	8021776 <app_procProtocolMsg+0xd2>
 802176c:	4aad      	ldr	r2, [pc, #692]	; (8021a24 <app_procProtocolMsg+0x380>)
 802176e:	4293      	cmp	r3, r2
 8021770:	d01d      	beq.n	80217ae <app_procProtocolMsg+0x10a>
				memcpy(device.communication.msg, content+7, 8);

				app_sendProtocolMsg(DEVICE_JUMP_ACK, device.communication.self_id, 0, 0);
			}	break;

			default:	break;
 8021772:	f000 bc3b 	b.w	8021fec <app_procProtocolMsg+0x948>
				if(*(uint64_t *)(content+1)==device.macaddr)//判断指令是否是属于自己
 8021776:	f107 030c 	add.w	r3, r7, #12
 802177a:	3301      	adds	r3, #1
 802177c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021780:	4ba4      	ldr	r3, [pc, #656]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021782:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021786:	4299      	cmp	r1, r3
 8021788:	bf08      	it	eq
 802178a:	4290      	cmpeq	r0, r2
 802178c:	f040 8430 	bne.w	8021ff0 <app_procProtocolMsg+0x94c>
					if(content[0]==1)//1 是灯光测试指令
 8021790:	f107 030c 	add.w	r3, r7, #12
 8021794:	781b      	ldrb	r3, [r3, #0]
 8021796:	2b01      	cmp	r3, #1
 8021798:	f040 842a 	bne.w	8021ff0 <app_procProtocolMsg+0x94c>
						SWITCH_STATE(TIPS); //灯光提示
 802179c:	4b9d      	ldr	r3, [pc, #628]	; (8021a14 <app_procProtocolMsg+0x370>)
 802179e:	7e9a      	ldrb	r2, [r3, #26]
 80217a0:	4b9c      	ldr	r3, [pc, #624]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217a2:	76da      	strb	r2, [r3, #27]
 80217a4:	4b9b      	ldr	r3, [pc, #620]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217a6:	2207      	movs	r2, #7
 80217a8:	769a      	strb	r2, [r3, #26]
			}	break;
 80217aa:	f000 bc21 	b.w	8021ff0 <app_procProtocolMsg+0x94c>
				device.communication.state = COMMU_ALIGNMENT;
 80217ae:	4b99      	ldr	r3, [pc, #612]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217b0:	2201      	movs	r2, #1
 80217b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				device.communication.tick = 0;
 80217b6:	4b97      	ldr	r3, [pc, #604]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217b8:	2200      	movs	r2, #0
 80217ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				device.communication.id_index = 1;
 80217be:	4b95      	ldr	r3, [pc, #596]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217c0:	2201      	movs	r2, #1
 80217c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				device.communication.sn = content;
 80217c6:	f107 030c 	add.w	r3, r7, #12
 80217ca:	b2da      	uxtb	r2, r3
 80217cc:	4b91      	ldr	r3, [pc, #580]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				device.communication.start_id = *(uint16_t *)(content+3);
 80217d2:	f107 030c 	add.w	r3, r7, #12
 80217d6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80217da:	b29a      	uxth	r2, r3
 80217dc:	4b8d      	ldr	r3, [pc, #564]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				device.communication.end_id = *(uint16_t *)(content+5);
 80217e2:	f107 030c 	add.w	r3, r7, #12
 80217e6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80217ea:	b29a      	uxth	r2, r3
 80217ec:	4b89      	ldr	r3, [pc, #548]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				memcpy(device.communication.msg, content+7, sizeof(device.communication.msg));
 80217f2:	f107 030c 	add.w	r3, r7, #12
 80217f6:	3307      	adds	r3, #7
 80217f8:	4a86      	ldr	r2, [pc, #536]	; (8021a14 <app_procProtocolMsg+0x370>)
 80217fa:	f102 0450 	add.w	r4, r2, #80	; 0x50
 80217fe:	6818      	ldr	r0, [r3, #0]
 8021800:	6859      	ldr	r1, [r3, #4]
 8021802:	689a      	ldr	r2, [r3, #8]
 8021804:	68db      	ldr	r3, [r3, #12]
 8021806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
				app_sendProtocolMsg(DEVICE_JUMP_ACK, *(uint16_t *)(content+1), 0, 0); //回复数据源设备
 8021808:	f107 030c 	add.w	r3, r7, #12
 802180c:	3301      	adds	r3, #1
 802180e:	881b      	ldrh	r3, [r3, #0]
 8021810:	b29a      	uxth	r2, r3
 8021812:	f04f 0300 	mov.w	r3, #0
 8021816:	2100      	movs	r1, #0
 8021818:	9101      	str	r1, [sp, #4]
 802181a:	2100      	movs	r1, #0
 802181c:	9100      	str	r1, [sp, #0]
 802181e:	487e      	ldr	r0, [pc, #504]	; (8021a18 <app_procProtocolMsg+0x374>)
 8021820:	f7ff fd02 	bl	8021228 <app_sendProtocolMsg>
			}	break;
 8021824:	e3f7      	b.n	8022016 <app_procProtocolMsg+0x972>
				device.communication.state = COMMU_IDEL;
 8021826:	4b7b      	ldr	r3, [pc, #492]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021828:	2200      	movs	r2, #0
 802182a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				device.communication.tick = 0;
 802182e:	4b79      	ldr	r3, [pc, #484]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021830:	2200      	movs	r2, #0
 8021832:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				device.communication.id_index = 1;
 8021836:	4b77      	ldr	r3, [pc, #476]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021838:	2201      	movs	r2, #1
 802183a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				device.communication.sn = 0;
 802183e:	4b75      	ldr	r3, [pc, #468]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021840:	2200      	movs	r2, #0
 8021842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				if(device.communication.self_id>=device.communication.start_id && device.communication.self_id<=device.communication.end_id)
 8021846:	4b73      	ldr	r3, [pc, #460]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802184c:	4b71      	ldr	r3, [pc, #452]	; (8021a14 <app_procProtocolMsg+0x370>)
 802184e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8021852:	429a      	cmp	r2, r3
 8021854:	d31f      	bcc.n	8021896 <app_procProtocolMsg+0x1f2>
 8021856:	4b6f      	ldr	r3, [pc, #444]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021858:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802185c:	4b6d      	ldr	r3, [pc, #436]	; (8021a14 <app_procProtocolMsg+0x370>)
 802185e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8021862:	429a      	cmp	r2, r3
 8021864:	d817      	bhi.n	8021896 <app_procProtocolMsg+0x1f2>
					switch (device.communication.msg[8])
 8021866:	4b6b      	ldr	r3, [pc, #428]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021868:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802186c:	2b01      	cmp	r3, #1
 802186e:	d002      	beq.n	8021876 <app_procProtocolMsg+0x1d2>
 8021870:	2b02      	cmp	r3, #2
 8021872:	d008      	beq.n	8021886 <app_procProtocolMsg+0x1e2>
							break;
 8021874:	e010      	b.n	8021898 <app_procProtocolMsg+0x1f4>
							SWITCH_STATE(RESTART);										
 8021876:	4b67      	ldr	r3, [pc, #412]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021878:	7e9a      	ldrb	r2, [r3, #26]
 802187a:	4b66      	ldr	r3, [pc, #408]	; (8021a14 <app_procProtocolMsg+0x370>)
 802187c:	76da      	strb	r2, [r3, #27]
 802187e:	4b65      	ldr	r3, [pc, #404]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021880:	2205      	movs	r2, #5
 8021882:	769a      	strb	r2, [r3, #26]
						}	break;
 8021884:	e008      	b.n	8021898 <app_procProtocolMsg+0x1f4>
							SWITCH_STATE(RESTORE);															
 8021886:	4b63      	ldr	r3, [pc, #396]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021888:	7e9a      	ldrb	r2, [r3, #26]
 802188a:	4b62      	ldr	r3, [pc, #392]	; (8021a14 <app_procProtocolMsg+0x370>)
 802188c:	76da      	strb	r2, [r3, #27]
 802188e:	4b61      	ldr	r3, [pc, #388]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021890:	2206      	movs	r2, #6
 8021892:	769a      	strb	r2, [r3, #26]
						}	break;
 8021894:	e000      	b.n	8021898 <app_procProtocolMsg+0x1f4>
				}
 8021896:	bf00      	nop
			}	break;
 8021898:	e3bd      	b.n	8022016 <app_procProtocolMsg+0x972>
				device.communication.state = COMMU_ALIGNMENT;
 802189a:	4b5e      	ldr	r3, [pc, #376]	; (8021a14 <app_procProtocolMsg+0x370>)
 802189c:	2201      	movs	r2, #1
 802189e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				device.communication.tick = 0;
 80218a2:	4b5c      	ldr	r3, [pc, #368]	; (8021a14 <app_procProtocolMsg+0x370>)
 80218a4:	2200      	movs	r2, #0
 80218a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				device.communication.id_index = 1;
 80218aa:	4b5a      	ldr	r3, [pc, #360]	; (8021a14 <app_procProtocolMsg+0x370>)
 80218ac:	2201      	movs	r2, #1
 80218ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				device.communication.sn = 0;
 80218b2:	4b58      	ldr	r3, [pc, #352]	; (8021a14 <app_procProtocolMsg+0x370>)
 80218b4:	2200      	movs	r2, #0
 80218b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				device.communication.start_id = *(uint16_t *)(content+3);
 80218ba:	f107 030c 	add.w	r3, r7, #12
 80218be:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80218c2:	b29a      	uxth	r2, r3
 80218c4:	4b53      	ldr	r3, [pc, #332]	; (8021a14 <app_procProtocolMsg+0x370>)
 80218c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				device.communication.end_id = *(uint16_t *)(content+5);
 80218ca:	f107 030c 	add.w	r3, r7, #12
 80218ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80218d2:	b29a      	uxth	r2, r3
 80218d4:	4b4f      	ldr	r3, [pc, #316]	; (8021a14 <app_procProtocolMsg+0x370>)
 80218d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				memcpy(device.communication.msg, content+7, 8);
 80218da:	f107 030c 	add.w	r3, r7, #12
 80218de:	3307      	adds	r3, #7
 80218e0:	2208      	movs	r2, #8
 80218e2:	4619      	mov	r1, r3
 80218e4:	4850      	ldr	r0, [pc, #320]	; (8021a28 <app_procProtocolMsg+0x384>)
 80218e6:	f00b fbbb 	bl	802d060 <memcpy>
				app_sendProtocolMsg(DEVICE_JUMP_ACK, device.communication.self_id, 0, 0);
 80218ea:	4b4a      	ldr	r3, [pc, #296]	; (8021a14 <app_procProtocolMsg+0x370>)
 80218ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80218f0:	b29a      	uxth	r2, r3
 80218f2:	f04f 0300 	mov.w	r3, #0
 80218f6:	2100      	movs	r1, #0
 80218f8:	9101      	str	r1, [sp, #4]
 80218fa:	2100      	movs	r1, #0
 80218fc:	9100      	str	r1, [sp, #0]
 80218fe:	4846      	ldr	r0, [pc, #280]	; (8021a18 <app_procProtocolMsg+0x374>)
 8021900:	f7ff fc92 	bl	8021228 <app_sendProtocolMsg>
			}	break;
 8021904:	e387      	b.n	8022016 <app_procProtocolMsg+0x972>
		}
	}else if(msgtype==M2S)
 8021906:	1dfb      	adds	r3, r7, #7
 8021908:	781b      	ldrb	r3, [r3, #0]
 802190a:	2b02      	cmp	r3, #2
 802190c:	f040 8383 	bne.w	8022016 <app_procProtocolMsg+0x972>
	{
		if(protocol.id!=device.macaddr)  //非法MAC地址
 8021910:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8021914:	4b3f      	ldr	r3, [pc, #252]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021916:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802191a:	4299      	cmp	r1, r3
 802191c:	bf08      	it	eq
 802191e:	4290      	cmpeq	r0, r2
 8021920:	f040 8368 	bne.w	8021ff4 <app_procProtocolMsg+0x950>
		{
			return ;
		}

		switch(protocol.command)
 8021924:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8021928:	4a40      	ldr	r2, [pc, #256]	; (8021a2c <app_procProtocolMsg+0x388>)
 802192a:	4293      	cmp	r3, r2
 802192c:	d03f      	beq.n	80219ae <app_procProtocolMsg+0x30a>
 802192e:	4a3f      	ldr	r2, [pc, #252]	; (8021a2c <app_procProtocolMsg+0x388>)
 8021930:	4293      	cmp	r3, r2
 8021932:	f200 8361 	bhi.w	8021ff8 <app_procProtocolMsg+0x954>
 8021936:	4a3e      	ldr	r2, [pc, #248]	; (8021a30 <app_procProtocolMsg+0x38c>)
 8021938:	4293      	cmp	r3, r2
 802193a:	f000 820a 	beq.w	8021d52 <app_procProtocolMsg+0x6ae>
 802193e:	4a3c      	ldr	r2, [pc, #240]	; (8021a30 <app_procProtocolMsg+0x38c>)
 8021940:	4293      	cmp	r3, r2
 8021942:	f200 8359 	bhi.w	8021ff8 <app_procProtocolMsg+0x954>
 8021946:	4a3b      	ldr	r2, [pc, #236]	; (8021a34 <app_procProtocolMsg+0x390>)
 8021948:	4293      	cmp	r3, r2
 802194a:	d003      	beq.n	8021954 <app_procProtocolMsg+0x2b0>
 802194c:	f1b3 5ff0 	cmp.w	r3, #503316480	; 0x1e000000
 8021950:	d028      	beq.n	80219a4 <app_procProtocolMsg+0x300>
					default:
						break;
				}
			}	break;

			default:	break;
 8021952:	e351      	b.n	8021ff8 <app_procProtocolMsg+0x954>
				device.communication.self_id = app_changeEndian(*(uint16_t *)content, 2);
 8021954:	f107 030c 	add.w	r3, r7, #12
 8021958:	881b      	ldrh	r3, [r3, #0]
 802195a:	b298      	uxth	r0, r3
 802195c:	f04f 0100 	mov.w	r1, #0
 8021960:	2202      	movs	r2, #2
 8021962:	f7ff fb37 	bl	8020fd4 <app_changeEndian>
 8021966:	4602      	mov	r2, r0
 8021968:	460b      	mov	r3, r1
 802196a:	b292      	uxth	r2, r2
 802196c:	4b29      	ldr	r3, [pc, #164]	; (8021a14 <app_procProtocolMsg+0x370>)
 802196e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				device.loraparam.RFFrequency = app_changeEndian(*(uint16_t *)(content+2), 4);
 8021972:	f107 030c 	add.w	r3, r7, #12
 8021976:	3302      	adds	r3, #2
 8021978:	881b      	ldrh	r3, [r3, #0]
 802197a:	b298      	uxth	r0, r3
 802197c:	f04f 0100 	mov.w	r1, #0
 8021980:	2204      	movs	r2, #4
 8021982:	f7ff fb27 	bl	8020fd4 <app_changeEndian>
 8021986:	4602      	mov	r2, r0
 8021988:	460b      	mov	r3, r1
 802198a:	4b22      	ldr	r3, [pc, #136]	; (8021a14 <app_procProtocolMsg+0x370>)
 802198c:	61da      	str	r2, [r3, #28]
				app_saveSysConfig(&device);
 802198e:	4821      	ldr	r0, [pc, #132]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021990:	f000 fb56 	bl	8022040 <app_saveSysConfig>
				SWITCH_STATE(RESTART); //重启
 8021994:	4b1f      	ldr	r3, [pc, #124]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021996:	7e9a      	ldrb	r2, [r3, #26]
 8021998:	4b1e      	ldr	r3, [pc, #120]	; (8021a14 <app_procProtocolMsg+0x370>)
 802199a:	76da      	strb	r2, [r3, #27]
 802199c:	4b1d      	ldr	r3, [pc, #116]	; (8021a14 <app_procProtocolMsg+0x370>)
 802199e:	2205      	movs	r2, #5
 80219a0:	769a      	strb	r2, [r3, #26]
			}	break;
 80219a2:	e338      	b.n	8022016 <app_procProtocolMsg+0x972>
				device.rev_timeout = 0;
 80219a4:	4b1b      	ldr	r3, [pc, #108]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219a6:	2200      	movs	r2, #0
 80219a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			}	break;
 80219ac:	e333      	b.n	8022016 <app_procProtocolMsg+0x972>
				if(device.fwver.index!=app_changeEndian(*(uint16_t *)content, 2))
 80219ae:	4b19      	ldr	r3, [pc, #100]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219b0:	891b      	ldrh	r3, [r3, #8]
 80219b2:	b29c      	uxth	r4, r3
 80219b4:	f04f 0500 	mov.w	r5, #0
 80219b8:	f107 030c 	add.w	r3, r7, #12
 80219bc:	881b      	ldrh	r3, [r3, #0]
 80219be:	b298      	uxth	r0, r3
 80219c0:	f04f 0100 	mov.w	r1, #0
 80219c4:	2202      	movs	r2, #2
 80219c6:	f7ff fb05 	bl	8020fd4 <app_changeEndian>
 80219ca:	4602      	mov	r2, r0
 80219cc:	460b      	mov	r3, r1
 80219ce:	429d      	cmp	r5, r3
 80219d0:	bf08      	it	eq
 80219d2:	4294      	cmpeq	r4, r2
 80219d4:	f040 831c 	bne.w	8022010 <app_procProtocolMsg+0x96c>
				if(device.fwver.index>=device.fwver.times)
 80219d8:	4b0e      	ldr	r3, [pc, #56]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219da:	891a      	ldrh	r2, [r3, #8]
 80219dc:	4b0d      	ldr	r3, [pc, #52]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219de:	895b      	ldrh	r3, [r3, #10]
 80219e0:	429a      	cmp	r2, r3
 80219e2:	d32d      	bcc.n	8021a40 <app_procProtocolMsg+0x39c>
					device.fwver.iap_ret[0] = IAP_ERR_OVERFLOW;
 80219e4:	4b0b      	ldr	r3, [pc, #44]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219e6:	2202      	movs	r2, #2
 80219e8:	735a      	strb	r2, [r3, #13]
					device.fwver.iap_ret[1] = VERSION;
 80219ea:	4b0a      	ldr	r3, [pc, #40]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219ec:	2201      	movs	r2, #1
 80219ee:	739a      	strb	r2, [r3, #14]
					app_sendProtocolMsg(SERVER_IAP_RET, device.macaddr, device.fwver.iap_ret, sizeof(device.fwver.iap_ret));     //回复平台升级结果
 80219f0:	4b08      	ldr	r3, [pc, #32]	; (8021a14 <app_procProtocolMsg+0x370>)
 80219f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80219f6:	2102      	movs	r1, #2
 80219f8:	9101      	str	r1, [sp, #4]
 80219fa:	490f      	ldr	r1, [pc, #60]	; (8021a38 <app_procProtocolMsg+0x394>)
 80219fc:	9100      	str	r1, [sp, #0]
 80219fe:	480f      	ldr	r0, [pc, #60]	; (8021a3c <app_procProtocolMsg+0x398>)
 8021a00:	f7ff fc12 	bl	8021228 <app_sendProtocolMsg>
					device.fwver.index = 0;
 8021a04:	4b03      	ldr	r3, [pc, #12]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021a06:	2200      	movs	r2, #0
 8021a08:	811a      	strh	r2, [r3, #8]
					app_saveSysConfig(&device);
 8021a0a:	4802      	ldr	r0, [pc, #8]	; (8021a14 <app_procProtocolMsg+0x370>)
 8021a0c:	f000 fb18 	bl	8022040 <app_saveSysConfig>
					return ;
 8021a10:	e301      	b.n	8022016 <app_procProtocolMsg+0x972>
 8021a12:	bf00      	nop
 8021a14:	20004c48 	.word	0x20004c48
 8021a18:	1eff1001 	.word	0x1eff1001
 8021a1c:	1e001002 	.word	0x1e001002
 8021a20:	1e001000 	.word	0x1e001000
 8021a24:	1e001001 	.word	0x1e001001
 8021a28:	20004c98 	.word	0x20004c98
 8021a2c:	1e012004 	.word	0x1e012004
 8021a30:	1e012003 	.word	0x1e012003
 8021a34:	01012001 	.word	0x01012001
 8021a38:	20004c55 	.word	0x20004c55
 8021a3c:	01032005 	.word	0x01032005
                device.iap_timeout = 0;
 8021a40:	4bae      	ldr	r3, [pc, #696]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021a42:	2200      	movs	r2, #0
 8021a44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				memcpy(fwcache, content+2, IAP_PKTSIZE);  //不进行复制会导致总线错误!!!
 8021a48:	f107 030c 	add.w	r3, r7, #12
 8021a4c:	3302      	adds	r3, #2
 8021a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021a52:	4619      	mov	r1, r3
 8021a54:	48aa      	ldr	r0, [pc, #680]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021a56:	f00b fb03 	bl	802d060 <memcpy>
				if(hal_programFlash(IAP_PART+device.fwver.index*IAP_PKTSIZE, fwcache, IAP_PKTSIZE)==FLASH_SUCCESS)
 8021a5a:	4ba8      	ldr	r3, [pc, #672]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021a5c:	891b      	ldrh	r3, [r3, #8]
 8021a5e:	025b      	lsls	r3, r3, #9
 8021a60:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8021a64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8021a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021a6c:	49a4      	ldr	r1, [pc, #656]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021a6e:	4618      	mov	r0, r3
 8021a70:	f006 fb92 	bl	8028198 <hal_programFlash>
 8021a74:	4603      	mov	r3, r0
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	f040 82cc 	bne.w	8022014 <app_procProtocolMsg+0x970>
					app_saveSysConfig(&device); //用于断点续传
 8021a7c:	489f      	ldr	r0, [pc, #636]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021a7e:	f000 fadf 	bl	8022040 <app_saveSysConfig>
					if(device.fwver.index==device.fwver.times-1) //固件升级完成 设置启动参数并重启
 8021a82:	4b9e      	ldr	r3, [pc, #632]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021a84:	891b      	ldrh	r3, [r3, #8]
 8021a86:	461a      	mov	r2, r3
 8021a88:	4b9c      	ldr	r3, [pc, #624]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021a8a:	895b      	ldrh	r3, [r3, #10]
 8021a8c:	3b01      	subs	r3, #1
 8021a8e:	429a      	cmp	r2, r3
 8021a90:	f040 8140 	bne.w	8021d14 <app_procProtocolMsg+0x670>
						crc = 0;
 8021a94:	4b9b      	ldr	r3, [pc, #620]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021a96:	2200      	movs	r2, #0
 8021a98:	601a      	str	r2, [r3, #0]
						fwcrc = 0;
 8021a9a:	4b9b      	ldr	r3, [pc, #620]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	601a      	str	r2, [r3, #0]
						for(uint8_t fragment=0;fragment<device.fwver.times;++fragment) //读取升级片段 计算固件CRC
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
 8021aa6:	e0da      	b.n	8021c5e <app_procProtocolMsg+0x5ba>
							hal_readFlash(IAP_PART + fragment*IAP_PKTSIZE, fwcache, IAP_PKTSIZE);
 8021aa8:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8021aac:	025b      	lsls	r3, r3, #9
 8021aae:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8021ab2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8021ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021aba:	4991      	ldr	r1, [pc, #580]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021abc:	4618      	mov	r0, r3
 8021abe:	f006 fbae 	bl	802821e <hal_readFlash>
							if(device.fwver.packsize%IAP_PKTSIZE < 4) //固件CRC在上一包
 8021ac2:	4b8e      	ldr	r3, [pc, #568]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021ac4:	685b      	ldr	r3, [r3, #4]
 8021ac6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	f040 808f 	bne.w	8021bee <app_procProtocolMsg+0x54a>
								for(uint16_t i=0;i<IAP_PKTSIZE;++i)
 8021ad0:	2300      	movs	r3, #0
 8021ad2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8021ad6:	e01f      	b.n	8021b18 <app_procProtocolMsg+0x474>
									if(fragment==device.fwver.times-2 && i==IAP_PKTSIZE-(4-device.fwver.packsize%IAP_PKTSIZE))
 8021ad8:	f897 222f 	ldrb.w	r2, [r7, #559]	; 0x22f
 8021adc:	4b87      	ldr	r3, [pc, #540]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021ade:	895b      	ldrh	r3, [r3, #10]
 8021ae0:	3b02      	subs	r3, #2
 8021ae2:	429a      	cmp	r2, r3
 8021ae4:	d109      	bne.n	8021afa <app_procProtocolMsg+0x456>
 8021ae6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8021aea:	4b84      	ldr	r3, [pc, #528]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021aec:	685b      	ldr	r3, [r3, #4]
 8021aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021af2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8021af6:	429a      	cmp	r2, r3
 8021af8:	d014      	beq.n	8021b24 <app_procProtocolMsg+0x480>
									crc += (uint8_t)fwcache[i];
 8021afa:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8021afe:	4a80      	ldr	r2, [pc, #512]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021b00:	5cd3      	ldrb	r3, [r2, r3]
 8021b02:	461a      	mov	r2, r3
 8021b04:	4b7f      	ldr	r3, [pc, #508]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	4413      	add	r3, r2
 8021b0a:	4a7e      	ldr	r2, [pc, #504]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021b0c:	6013      	str	r3, [r2, #0]
								for(uint16_t i=0;i<IAP_PKTSIZE;++i)
 8021b0e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8021b12:	3301      	adds	r3, #1
 8021b14:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8021b18:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8021b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021b20:	d3da      	bcc.n	8021ad8 <app_procProtocolMsg+0x434>
 8021b22:	e000      	b.n	8021b26 <app_procProtocolMsg+0x482>
										break;
 8021b24:	bf00      	nop
								if(fragment==device.fwver.times-2)
 8021b26:	f897 222f 	ldrb.w	r2, [r7, #559]	; 0x22f
 8021b2a:	4b74      	ldr	r3, [pc, #464]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021b2c:	895b      	ldrh	r3, [r3, #10]
 8021b2e:	3b02      	subs	r3, #2
 8021b30:	429a      	cmp	r2, r3
 8021b32:	d12d      	bne.n	8021b90 <app_procProtocolMsg+0x4ec>
									for(char i=0;i<4-device.fwver.packsize%IAP_PKTSIZE;++i)
 8021b34:	2300      	movs	r3, #0
 8021b36:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
 8021b3a:	e01e      	b.n	8021b7a <app_procProtocolMsg+0x4d6>
										fwcrc |= fwcache[IAP_PKTSIZE-i-1]<<8*(4-device.fwver.packsize%IAP_PKTSIZE-i-1);
 8021b3c:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8021b40:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8021b44:	3301      	adds	r3, #1
 8021b46:	4a6e      	ldr	r2, [pc, #440]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021b48:	5cd3      	ldrb	r3, [r2, r3]
 8021b4a:	4619      	mov	r1, r3
 8021b4c:	4b6b      	ldr	r3, [pc, #428]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021b4e:	685b      	ldr	r3, [r3, #4]
 8021b50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8021b54:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8021b58:	4413      	add	r3, r2
 8021b5a:	f1c3 0303 	rsb	r3, r3, #3
 8021b5e:	00db      	lsls	r3, r3, #3
 8021b60:	fa01 f303 	lsl.w	r3, r1, r3
 8021b64:	461a      	mov	r2, r3
 8021b66:	4b68      	ldr	r3, [pc, #416]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021b68:	681b      	ldr	r3, [r3, #0]
 8021b6a:	4313      	orrs	r3, r2
 8021b6c:	4a66      	ldr	r2, [pc, #408]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021b6e:	6013      	str	r3, [r2, #0]
									for(char i=0;i<4-device.fwver.packsize%IAP_PKTSIZE;++i)
 8021b70:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8021b74:	3301      	adds	r3, #1
 8021b76:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
 8021b7a:	f897 222b 	ldrb.w	r2, [r7, #555]	; 0x22b
 8021b7e:	4b5f      	ldr	r3, [pc, #380]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021b80:	685b      	ldr	r3, [r3, #4]
 8021b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021b86:	f1c3 0304 	rsb	r3, r3, #4
 8021b8a:	429a      	cmp	r2, r3
 8021b8c:	d3d6      	bcc.n	8021b3c <app_procProtocolMsg+0x498>
 8021b8e:	e061      	b.n	8021c54 <app_procProtocolMsg+0x5b0>
								}else if(fragment==device.fwver.times-1)
 8021b90:	f897 222f 	ldrb.w	r2, [r7, #559]	; 0x22f
 8021b94:	4b59      	ldr	r3, [pc, #356]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021b96:	895b      	ldrh	r3, [r3, #10]
 8021b98:	3b01      	subs	r3, #1
 8021b9a:	429a      	cmp	r2, r3
 8021b9c:	d15a      	bne.n	8021c54 <app_procProtocolMsg+0x5b0>
									for(char i=0;i<device.fwver.packsize%IAP_PKTSIZE;++i)
 8021b9e:	2300      	movs	r3, #0
 8021ba0:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
 8021ba4:	e01a      	b.n	8021bdc <app_procProtocolMsg+0x538>
										fwcrc |= fwcache[i]<<8*(4-device.fwver.packsize%IAP_PKTSIZE+i);
 8021ba6:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8021baa:	4a55      	ldr	r2, [pc, #340]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021bac:	5cd3      	ldrb	r3, [r2, r3]
 8021bae:	4619      	mov	r1, r3
 8021bb0:	f897 222a 	ldrb.w	r2, [r7, #554]	; 0x22a
 8021bb4:	4b51      	ldr	r3, [pc, #324]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021bb6:	685b      	ldr	r3, [r3, #4]
 8021bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021bbc:	1ad3      	subs	r3, r2, r3
 8021bbe:	3304      	adds	r3, #4
 8021bc0:	00db      	lsls	r3, r3, #3
 8021bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8021bc6:	461a      	mov	r2, r3
 8021bc8:	4b4f      	ldr	r3, [pc, #316]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021bca:	681b      	ldr	r3, [r3, #0]
 8021bcc:	4313      	orrs	r3, r2
 8021bce:	4a4e      	ldr	r2, [pc, #312]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021bd0:	6013      	str	r3, [r2, #0]
									for(char i=0;i<device.fwver.packsize%IAP_PKTSIZE;++i)
 8021bd2:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8021bd6:	3301      	adds	r3, #1
 8021bd8:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
 8021bdc:	f897 222a 	ldrb.w	r2, [r7, #554]	; 0x22a
 8021be0:	4b46      	ldr	r3, [pc, #280]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021be2:	685b      	ldr	r3, [r3, #4]
 8021be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021be8:	429a      	cmp	r2, r3
 8021bea:	d3dc      	bcc.n	8021ba6 <app_procProtocolMsg+0x502>
 8021bec:	e032      	b.n	8021c54 <app_procProtocolMsg+0x5b0>
								for(uint16_t i=0;i<IAP_PKTSIZE;++i)
 8021bee:	2300      	movs	r3, #0
 8021bf0:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8021bf4:	e029      	b.n	8021c4a <app_procProtocolMsg+0x5a6>
									if(fragment==device.fwver.times-1 && i==device.fwver.packsize%IAP_PKTSIZE-4)
 8021bf6:	f897 222f 	ldrb.w	r2, [r7, #559]	; 0x22f
 8021bfa:	4b40      	ldr	r3, [pc, #256]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021bfc:	895b      	ldrh	r3, [r3, #10]
 8021bfe:	3b01      	subs	r3, #1
 8021c00:	429a      	cmp	r2, r3
 8021c02:	d113      	bne.n	8021c2c <app_procProtocolMsg+0x588>
 8021c04:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8021c08:	4b3c      	ldr	r3, [pc, #240]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c0a:	685b      	ldr	r3, [r3, #4]
 8021c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c10:	3b04      	subs	r3, #4
 8021c12:	429a      	cmp	r2, r3
 8021c14:	d10a      	bne.n	8021c2c <app_procProtocolMsg+0x588>
										fwcrc = *(uint32_t *)(fwcache+device.fwver.packsize%IAP_PKTSIZE-4);
 8021c16:	4b39      	ldr	r3, [pc, #228]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c18:	685b      	ldr	r3, [r3, #4]
 8021c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c1e:	3b04      	subs	r3, #4
 8021c20:	4a37      	ldr	r2, [pc, #220]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021c22:	4413      	add	r3, r2
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	4a38      	ldr	r2, [pc, #224]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021c28:	6013      	str	r3, [r2, #0]
										break;
 8021c2a:	e013      	b.n	8021c54 <app_procProtocolMsg+0x5b0>
									crc += (uint8_t)fwcache[i];
 8021c2c:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8021c30:	4a33      	ldr	r2, [pc, #204]	; (8021d00 <app_procProtocolMsg+0x65c>)
 8021c32:	5cd3      	ldrb	r3, [r2, r3]
 8021c34:	461a      	mov	r2, r3
 8021c36:	4b33      	ldr	r3, [pc, #204]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	4413      	add	r3, r2
 8021c3c:	4a31      	ldr	r2, [pc, #196]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021c3e:	6013      	str	r3, [r2, #0]
								for(uint16_t i=0;i<IAP_PKTSIZE;++i)
 8021c40:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8021c44:	3301      	adds	r3, #1
 8021c46:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8021c4a:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8021c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021c52:	d3d0      	bcc.n	8021bf6 <app_procProtocolMsg+0x552>
						for(uint8_t fragment=0;fragment<device.fwver.times;++fragment) //读取升级片段 计算固件CRC
 8021c54:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8021c58:	3301      	adds	r3, #1
 8021c5a:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
 8021c5e:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8021c62:	b29a      	uxth	r2, r3
 8021c64:	4b25      	ldr	r3, [pc, #148]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c66:	895b      	ldrh	r3, [r3, #10]
 8021c68:	429a      	cmp	r2, r3
 8021c6a:	f4ff af1d 	bcc.w	8021aa8 <app_procProtocolMsg+0x404>
						if(crc==fwcrc)  //固件传输正常
 8021c6e:	4b25      	ldr	r3, [pc, #148]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021c70:	681a      	ldr	r2, [r3, #0]
 8021c72:	4b25      	ldr	r3, [pc, #148]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	429a      	cmp	r2, r3
 8021c78:	d11b      	bne.n	8021cb2 <app_procProtocolMsg+0x60e>
							device.fwver.iap_ret[0] = IAP_SUCCESS;
 8021c7a:	4b20      	ldr	r3, [pc, #128]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	735a      	strb	r2, [r3, #13]
							device.fwver.iap_ret[1] = device.fwver.version;
 8021c80:	4b1e      	ldr	r3, [pc, #120]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c82:	781a      	ldrb	r2, [r3, #0]
 8021c84:	4b1d      	ldr	r3, [pc, #116]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c86:	739a      	strb	r2, [r3, #14]
							app_sendProtocolMsg(SERVER_IAP_RET, device.macaddr, device.fwver.iap_ret, sizeof(device.fwver.iap_ret));  //回复平台表示已配置完成
 8021c88:	4b1c      	ldr	r3, [pc, #112]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021c8e:	2102      	movs	r1, #2
 8021c90:	9101      	str	r1, [sp, #4]
 8021c92:	491e      	ldr	r1, [pc, #120]	; (8021d0c <app_procProtocolMsg+0x668>)
 8021c94:	9100      	str	r1, [sp, #0]
 8021c96:	481e      	ldr	r0, [pc, #120]	; (8021d10 <app_procProtocolMsg+0x66c>)
 8021c98:	f7ff fac6 	bl	8021228 <app_sendProtocolMsg>
							device.fwver.updatestate = 1;//升级完成标志
 8021c9c:	4b17      	ldr	r3, [pc, #92]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021c9e:	2201      	movs	r2, #1
 8021ca0:	731a      	strb	r2, [r3, #12]
							device.fwver.index = 0;
 8021ca2:	4b16      	ldr	r3, [pc, #88]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	811a      	strh	r2, [r3, #8]
							app_saveSysConfig(&device);
 8021ca8:	4814      	ldr	r0, [pc, #80]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021caa:	f000 f9c9 	bl	8022040 <app_saveSysConfig>
							NVIC_SystemReset();  //重启 由Bootloader进行APP切换
 8021cae:	f7ff f97b 	bl	8020fa8 <__NVIC_SystemReset>
							device.fwver.iap_ret[0] = IAP_ERR_CRC;
 8021cb2:	4b12      	ldr	r3, [pc, #72]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021cb4:	2203      	movs	r2, #3
 8021cb6:	735a      	strb	r2, [r3, #13]
							device.fwver.iap_ret[1] = VERSION;
 8021cb8:	4b10      	ldr	r3, [pc, #64]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021cba:	2201      	movs	r2, #1
 8021cbc:	739a      	strb	r2, [r3, #14]
							app_sendProtocolMsg(SERVER_IAP_RET, device.macaddr, device.fwver.iap_ret, sizeof(device.fwver.iap_ret));  //回复平台表示已配置完成
 8021cbe:	4b0f      	ldr	r3, [pc, #60]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021cc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021cc4:	2102      	movs	r1, #2
 8021cc6:	9101      	str	r1, [sp, #4]
 8021cc8:	4910      	ldr	r1, [pc, #64]	; (8021d0c <app_procProtocolMsg+0x668>)
 8021cca:	9100      	str	r1, [sp, #0]
 8021ccc:	4810      	ldr	r0, [pc, #64]	; (8021d10 <app_procProtocolMsg+0x66c>)
 8021cce:	f7ff faab 	bl	8021228 <app_sendProtocolMsg>
							device.fwver.index = 0;
 8021cd2:	4b0a      	ldr	r3, [pc, #40]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021cd4:	2200      	movs	r2, #0
 8021cd6:	811a      	strh	r2, [r3, #8]
							SWITCH_STATE(CONFIGED);
 8021cd8:	4b08      	ldr	r3, [pc, #32]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021cda:	7e9a      	ldrb	r2, [r3, #26]
 8021cdc:	4b07      	ldr	r3, [pc, #28]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021cde:	76da      	strb	r2, [r3, #27]
 8021ce0:	4b06      	ldr	r3, [pc, #24]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021ce2:	2202      	movs	r2, #2
 8021ce4:	769a      	strb	r2, [r3, #26]
							app_saveSysConfig(&device);
 8021ce6:	4805      	ldr	r0, [pc, #20]	; (8021cfc <app_procProtocolMsg+0x658>)
 8021ce8:	f000 f9aa 	bl	8022040 <app_saveSysConfig>
						crc = 0;
 8021cec:	4b05      	ldr	r3, [pc, #20]	; (8021d04 <app_procProtocolMsg+0x660>)
 8021cee:	2200      	movs	r2, #0
 8021cf0:	601a      	str	r2, [r3, #0]
						fwcrc = 0;
 8021cf2:	4b05      	ldr	r3, [pc, #20]	; (8021d08 <app_procProtocolMsg+0x664>)
 8021cf4:	2200      	movs	r2, #0
 8021cf6:	601a      	str	r2, [r3, #0]
						return ;
 8021cf8:	e18d      	b.n	8022016 <app_procProtocolMsg+0x972>
 8021cfa:	bf00      	nop
 8021cfc:	20004c48 	.word	0x20004c48
 8021d00:	20000478 	.word	0x20000478
 8021d04:	20000678 	.word	0x20000678
 8021d08:	2000067c 	.word	0x2000067c
 8021d0c:	20004c55 	.word	0x20004c55
 8021d10:	01032005 	.word	0x01032005
						device.fwver.iap_ret[0] = IAP_ERR_FALSH;
 8021d14:	4bb9      	ldr	r3, [pc, #740]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d16:	2204      	movs	r2, #4
 8021d18:	735a      	strb	r2, [r3, #13]
						device.fwver.iap_ret[1] = VERSION;
 8021d1a:	4bb8      	ldr	r3, [pc, #736]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d1c:	2201      	movs	r2, #1
 8021d1e:	739a      	strb	r2, [r3, #14]
						app_sendProtocolMsg(SERVER_IAP_RET, 0, device.fwver.iap_ret, sizeof(device.fwver.iap_ret));  //回复平台表示已配置完成
 8021d20:	2302      	movs	r3, #2
 8021d22:	9301      	str	r3, [sp, #4]
 8021d24:	4bb6      	ldr	r3, [pc, #728]	; (8022000 <app_procProtocolMsg+0x95c>)
 8021d26:	9300      	str	r3, [sp, #0]
 8021d28:	f04f 0200 	mov.w	r2, #0
 8021d2c:	f04f 0300 	mov.w	r3, #0
 8021d30:	48b4      	ldr	r0, [pc, #720]	; (8022004 <app_procProtocolMsg+0x960>)
 8021d32:	f7ff fa79 	bl	8021228 <app_sendProtocolMsg>
						SWITCH_STATE(CONFIGED);
 8021d36:	4bb1      	ldr	r3, [pc, #708]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d38:	7e9a      	ldrb	r2, [r3, #26]
 8021d3a:	4bb0      	ldr	r3, [pc, #704]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d3c:	76da      	strb	r2, [r3, #27]
 8021d3e:	4baf      	ldr	r3, [pc, #700]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d40:	2202      	movs	r2, #2
 8021d42:	769a      	strb	r2, [r3, #26]
					++device.fwver.index;
 8021d44:	4bad      	ldr	r3, [pc, #692]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d46:	891b      	ldrh	r3, [r3, #8]
 8021d48:	3301      	adds	r3, #1
 8021d4a:	b29a      	uxth	r2, r3
 8021d4c:	4bab      	ldr	r3, [pc, #684]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d4e:	811a      	strh	r2, [r3, #8]
			}	break;
 8021d50:	e160      	b.n	8022014 <app_procProtocolMsg+0x970>
				app_sendProtocolMsg(SERVER_DOWNLOAD_CTRL_ACK, device.macaddr, (char *)&protocol.sn, 0); //回复平台响应
 8021d52:	4baa      	ldr	r3, [pc, #680]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021d54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021d58:	2100      	movs	r1, #0
 8021d5a:	9101      	str	r1, [sp, #4]
 8021d5c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8021d60:	3112      	adds	r1, #18
 8021d62:	9100      	str	r1, [sp, #0]
 8021d64:	48a8      	ldr	r0, [pc, #672]	; (8022008 <app_procProtocolMsg+0x964>)
 8021d66:	f7ff fa5f 	bl	8021228 <app_sendProtocolMsg>
				switch (content[0])
 8021d6a:	f107 030c 	add.w	r3, r7, #12
 8021d6e:	781b      	ldrb	r3, [r3, #0]
 8021d70:	3b01      	subs	r3, #1
 8021d72:	2b0d      	cmp	r3, #13
 8021d74:	f200 8132 	bhi.w	8021fdc <app_procProtocolMsg+0x938>
 8021d78:	a201      	add	r2, pc, #4	; (adr r2, 8021d80 <app_procProtocolMsg+0x6dc>)
 8021d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d7e:	bf00      	nop
 8021d80:	08021db9 	.word	0x08021db9
 8021d84:	08021db9 	.word	0x08021db9
 8021d88:	08021e11 	.word	0x08021e11
 8021d8c:	08021e6d 	.word	0x08021e6d
 8021d90:	08021f11 	.word	0x08021f11
 8021d94:	08021f25 	.word	0x08021f25
 8021d98:	08021f39 	.word	0x08021f39
 8021d9c:	08021fdd 	.word	0x08021fdd
 8021da0:	08021f51 	.word	0x08021f51
 8021da4:	08021f67 	.word	0x08021f67
 8021da8:	08021f7b 	.word	0x08021f7b
 8021dac:	08021f93 	.word	0x08021f93
 8021db0:	08021fdd 	.word	0x08021fdd
 8021db4:	08021fa7 	.word	0x08021fa7
						device.communication.state = COMMU_ALIGNMENT;
 8021db8:	4b90      	ldr	r3, [pc, #576]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021dba:	2201      	movs	r2, #1
 8021dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						device.communication.tick = 0;
 8021dc0:	4b8e      	ldr	r3, [pc, #568]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021dc2:	2200      	movs	r2, #0
 8021dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
						device.communication.id_index = 1;
 8021dc8:	4b8c      	ldr	r3, [pc, #560]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021dca:	2201      	movs	r2, #1
 8021dcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
						device.communication.sn = 0;
 8021dd0:	4b8a      	ldr	r3, [pc, #552]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021dd2:	2200      	movs	r2, #0
 8021dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
						device.communication.start_id = *(uint16_t *)(content+1);
 8021dd8:	f107 030c 	add.w	r3, r7, #12
 8021ddc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021de0:	b29a      	uxth	r2, r3
 8021de2:	4b86      	ldr	r3, [pc, #536]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021de4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
						device.communication.end_id = *(uint16_t *)(content+3);
 8021de8:	f107 030c 	add.w	r3, r7, #12
 8021dec:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8021df0:	b29a      	uxth	r2, r3
 8021df2:	4b82      	ldr	r3, [pc, #520]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021df4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						memset(device.communication.msg, 0xFF, sizeof(device.communication.msg)); //调光部分填充失效数据 目的是不调光只重启
 8021df8:	2210      	movs	r2, #16
 8021dfa:	21ff      	movs	r1, #255	; 0xff
 8021dfc:	4883      	ldr	r0, [pc, #524]	; (802200c <app_procProtocolMsg+0x968>)
 8021dfe:	f00b f93d 	bl	802d07c <memset>
						device.communication.msg[8] = content[0];
 8021e02:	f107 030c 	add.w	r3, r7, #12
 8021e06:	781a      	ldrb	r2, [r3, #0]
 8021e08:	4b7c      	ldr	r3, [pc, #496]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
					}	break;
 8021e0e:	e0e6      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.communication.state = COMMU_ALIGNMENT;
 8021e10:	4b7a      	ldr	r3, [pc, #488]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e12:	2201      	movs	r2, #1
 8021e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						device.communication.tick = 0;
 8021e18:	4b78      	ldr	r3, [pc, #480]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e1a:	2200      	movs	r2, #0
 8021e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
						device.communication.id_index = 1;
 8021e20:	4b76      	ldr	r3, [pc, #472]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e22:	2201      	movs	r2, #1
 8021e24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
						device.communication.sn = 0;
 8021e28:	4b74      	ldr	r3, [pc, #464]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e2a:	2200      	movs	r2, #0
 8021e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
						device.communication.start_id = *(uint16_t *)(content+1);
 8021e30:	f107 030c 	add.w	r3, r7, #12
 8021e34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021e38:	b29a      	uxth	r2, r3
 8021e3a:	4b70      	ldr	r3, [pc, #448]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
						device.communication.end_id = *(uint16_t *)(content+3);
 8021e40:	f107 030c 	add.w	r3, r7, #12
 8021e44:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8021e48:	b29a      	uxth	r2, r3
 8021e4a:	4b6c      	ldr	r3, [pc, #432]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						memset(device.communication.msg, 0xFF, sizeof(device.communication.msg)); //调光部分填充失效数据 目的是不调光只重启
 8021e50:	2210      	movs	r2, #16
 8021e52:	21ff      	movs	r1, #255	; 0xff
 8021e54:	486d      	ldr	r0, [pc, #436]	; (802200c <app_procProtocolMsg+0x968>)
 8021e56:	f00b f911 	bl	802d07c <memset>
						memcpy(device.communication.msg, content+5, 8); //调光部分填充失效数据 目的是不调光只重启
 8021e5a:	f107 030c 	add.w	r3, r7, #12
 8021e5e:	3305      	adds	r3, #5
 8021e60:	2208      	movs	r2, #8
 8021e62:	4619      	mov	r1, r3
 8021e64:	4869      	ldr	r0, [pc, #420]	; (802200c <app_procProtocolMsg+0x968>)
 8021e66:	f00b f8fb 	bl	802d060 <memcpy>
					}	break;
 8021e6a:	e0b8      	b.n	8021fde <app_procProtocolMsg+0x93a>
                        if(content[1]==VERSION) //相同版本不升级
 8021e6c:	f107 030c 	add.w	r3, r7, #12
 8021e70:	785b      	ldrb	r3, [r3, #1]
 8021e72:	2b01      	cmp	r3, #1
 8021e74:	d111      	bne.n	8021e9a <app_procProtocolMsg+0x7f6>
							device.fwver.iap_ret[0] = IAP_ERR_VER;
 8021e76:	4b61      	ldr	r3, [pc, #388]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e78:	2201      	movs	r2, #1
 8021e7a:	735a      	strb	r2, [r3, #13]
							device.fwver.iap_ret[1] = VERSION;
 8021e7c:	4b5f      	ldr	r3, [pc, #380]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021e7e:	2201      	movs	r2, #1
 8021e80:	739a      	strb	r2, [r3, #14]
            				app_sendProtocolMsg(SERVER_IAP_RET, 0, device.fwver.iap_ret, sizeof(device.fwver.iap_ret));  //回复平台表示已配置完成
 8021e82:	2302      	movs	r3, #2
 8021e84:	9301      	str	r3, [sp, #4]
 8021e86:	4b5e      	ldr	r3, [pc, #376]	; (8022000 <app_procProtocolMsg+0x95c>)
 8021e88:	9300      	str	r3, [sp, #0]
 8021e8a:	f04f 0200 	mov.w	r2, #0
 8021e8e:	f04f 0300 	mov.w	r3, #0
 8021e92:	485c      	ldr	r0, [pc, #368]	; (8022004 <app_procProtocolMsg+0x960>)
 8021e94:	f7ff f9c8 	bl	8021228 <app_sendProtocolMsg>
                        	return ;
 8021e98:	e0bd      	b.n	8022016 <app_procProtocolMsg+0x972>
                        device.fwver.version = content[1];
 8021e9a:	f107 030c 	add.w	r3, r7, #12
 8021e9e:	785a      	ldrb	r2, [r3, #1]
 8021ea0:	4b56      	ldr	r3, [pc, #344]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ea2:	701a      	strb	r2, [r3, #0]
                        device.fwver.packsize = app_changeEndian(*(uint32_t *)(content+2), 4);
 8021ea4:	f107 030c 	add.w	r3, r7, #12
 8021ea8:	3302      	adds	r3, #2
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	4618      	mov	r0, r3
 8021eae:	f04f 0100 	mov.w	r1, #0
 8021eb2:	2204      	movs	r2, #4
 8021eb4:	f7ff f88e 	bl	8020fd4 <app_changeEndian>
 8021eb8:	4602      	mov	r2, r0
 8021eba:	460b      	mov	r3, r1
 8021ebc:	4b4f      	ldr	r3, [pc, #316]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ebe:	605a      	str	r2, [r3, #4]
                        device.fwver.times = device.fwver.packsize/IAP_PKTSIZE;
 8021ec0:	4b4e      	ldr	r3, [pc, #312]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ec2:	685b      	ldr	r3, [r3, #4]
 8021ec4:	0a5b      	lsrs	r3, r3, #9
 8021ec6:	b29a      	uxth	r2, r3
 8021ec8:	4b4c      	ldr	r3, [pc, #304]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021eca:	815a      	strh	r2, [r3, #10]
                        if(device.fwver.packsize%IAP_PKTSIZE)
 8021ecc:	4b4b      	ldr	r3, [pc, #300]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ece:	685b      	ldr	r3, [r3, #4]
 8021ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d005      	beq.n	8021ee4 <app_procProtocolMsg+0x840>
                        	++device.fwver.times;
 8021ed8:	4b48      	ldr	r3, [pc, #288]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021eda:	895b      	ldrh	r3, [r3, #10]
 8021edc:	3301      	adds	r3, #1
 8021ede:	b29a      	uxth	r2, r3
 8021ee0:	4b46      	ldr	r3, [pc, #280]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ee2:	815a      	strh	r2, [r3, #10]
                        device.fwver.index = 0;
 8021ee4:	4b45      	ldr	r3, [pc, #276]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	811a      	strh	r2, [r3, #8]
                        device.iap_timeout = 0;
 8021eea:	4b44      	ldr	r3, [pc, #272]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021eec:	2200      	movs	r2, #0
 8021eee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                        SWITCH_STATE(DEVIAP);
 8021ef2:	4b42      	ldr	r3, [pc, #264]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ef4:	7e9a      	ldrb	r2, [r3, #26]
 8021ef6:	4b41      	ldr	r3, [pc, #260]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021ef8:	76da      	strb	r2, [r3, #27]
 8021efa:	4b40      	ldr	r3, [pc, #256]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021efc:	2203      	movs	r2, #3
 8021efe:	769a      	strb	r2, [r3, #26]
                        app_saveSysConfig(&device); //保存状态 用于断点续传
 8021f00:	483e      	ldr	r0, [pc, #248]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f02:	f000 f89d 	bl	8022040 <app_saveSysConfig>
                        hal_eraseFlash(6, 1);
 8021f06:	2101      	movs	r1, #1
 8021f08:	2006      	movs	r0, #6
 8021f0a:	f006 f9ad 	bl	8028268 <hal_eraseFlash>
					}	break;
 8021f0e:	e066      	b.n	8021fde <app_procProtocolMsg+0x93a>
						SWITCH_STATE(content[1]);
 8021f10:	4b3a      	ldr	r3, [pc, #232]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f12:	7e9a      	ldrb	r2, [r3, #26]
 8021f14:	4b39      	ldr	r3, [pc, #228]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f16:	76da      	strb	r2, [r3, #27]
 8021f18:	f107 030c 	add.w	r3, r7, #12
 8021f1c:	785a      	ldrb	r2, [r3, #1]
 8021f1e:	4b37      	ldr	r3, [pc, #220]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f20:	769a      	strb	r2, [r3, #26]
					}	break;
 8021f22:	e05c      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.role = content[1];
 8021f24:	f107 030c 	add.w	r3, r7, #12
 8021f28:	785a      	ldrb	r2, [r3, #1]
 8021f2a:	4b34      	ldr	r3, [pc, #208]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f2c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                        app_saveSysConfig(&device); //保存状态
 8021f30:	4832      	ldr	r0, [pc, #200]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f32:	f000 f885 	bl	8022040 <app_saveSysConfig>
					}	break;
 8021f36:	e052      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.communication.self_id = *(uint16_t *)(content+1);
 8021f38:	f107 030c 	add.w	r3, r7, #12
 8021f3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021f40:	b29a      	uxth	r2, r3
 8021f42:	4b2e      	ldr	r3, [pc, #184]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                        app_saveSysConfig(&device); //保存状态
 8021f48:	482c      	ldr	r0, [pc, #176]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f4a:	f000 f879 	bl	8022040 <app_saveSysConfig>
					}	break;	
 8021f4e:	e046      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.loraparam.Power = content[1];
 8021f50:	f107 030c 	add.w	r3, r7, #12
 8021f54:	785b      	ldrb	r3, [r3, #1]
 8021f56:	b25a      	sxtb	r2, r3
 8021f58:	4b28      	ldr	r3, [pc, #160]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f5a:	f883 2020 	strb.w	r2, [r3, #32]
                        app_saveSysConfig(&device); //保存状态
 8021f5e:	4827      	ldr	r0, [pc, #156]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f60:	f000 f86e 	bl	8022040 <app_saveSysConfig>
					}	break;	
 8021f64:	e03b      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.communication.max_broadcast_times = content[1];
 8021f66:	f107 030c 	add.w	r3, r7, #12
 8021f6a:	785a      	ldrb	r2, [r3, #1]
 8021f6c:	4b23      	ldr	r3, [pc, #140]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        app_saveSysConfig(&device); //保存状态
 8021f72:	4822      	ldr	r0, [pc, #136]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f74:	f000 f864 	bl	8022040 <app_saveSysConfig>
					}	break;	
 8021f78:	e031      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.communication.max_broadcast_period = *(uint16_t *)(content+1);
 8021f7a:	f107 030c 	add.w	r3, r7, #12
 8021f7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021f82:	b29a      	uxth	r2, r3
 8021f84:	4b1d      	ldr	r3, [pc, #116]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        app_saveSysConfig(&device); //保存状态
 8021f8a:	481c      	ldr	r0, [pc, #112]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f8c:	f000 f858 	bl	8022040 <app_saveSysConfig>
					}	break;	
 8021f90:	e025      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.communication.max_broadcast_dev_cnts = content[1];
 8021f92:	f107 030c 	add.w	r3, r7, #12
 8021f96:	785a      	ldrb	r2, [r3, #1]
 8021f98:	4b18      	ldr	r3, [pc, #96]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                        app_saveSysConfig(&device); //保存状态
 8021f9e:	4817      	ldr	r0, [pc, #92]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fa0:	f000 f84e 	bl	8022040 <app_saveSysConfig>
					}	break;	
 8021fa4:	e01b      	b.n	8021fde <app_procProtocolMsg+0x93a>
						device.uploadperiod = *(uint16_t *)(content+1);
 8021fa6:	f107 030c 	add.w	r3, r7, #12
 8021faa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021fae:	b29a      	uxth	r2, r3
 8021fb0:	4b12      	ldr	r3, [pc, #72]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
						if(device.uploadperiod<60)
 8021fb4:	4b11      	ldr	r3, [pc, #68]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fb6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8021fb8:	2b3b      	cmp	r3, #59	; 0x3b
 8021fba:	d802      	bhi.n	8021fc2 <app_procProtocolMsg+0x91e>
							device.uploadperiod = 60;
 8021fbc:	4b0f      	ldr	r3, [pc, #60]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fbe:	223c      	movs	r2, #60	; 0x3c
 8021fc0:	879a      	strh	r2, [r3, #60]	; 0x3c
						if(device.uploadperiod>1200)
 8021fc2:	4b0e      	ldr	r3, [pc, #56]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fc4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8021fc6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8021fca:	d903      	bls.n	8021fd4 <app_procProtocolMsg+0x930>
							device.uploadperiod = 1200;
 8021fcc:	4b0b      	ldr	r3, [pc, #44]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fce:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8021fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
                        app_saveSysConfig(&device); //保存状态
 8021fd4:	4809      	ldr	r0, [pc, #36]	; (8021ffc <app_procProtocolMsg+0x958>)
 8021fd6:	f000 f833 	bl	8022040 <app_saveSysConfig>
					}	break;	
 8021fda:	e000      	b.n	8021fde <app_procProtocolMsg+0x93a>
						break;
 8021fdc:	bf00      	nop
			}	break;
 8021fde:	e01a      	b.n	8022016 <app_procProtocolMsg+0x972>
        return ;
 8021fe0:	bf00      	nop
 8021fe2:	e018      	b.n	8022016 <app_procProtocolMsg+0x972>
        return ;
 8021fe4:	bf00      	nop
 8021fe6:	e016      	b.n	8022016 <app_procProtocolMsg+0x972>
			return ;
 8021fe8:	bf00      	nop
 8021fea:	e014      	b.n	8022016 <app_procProtocolMsg+0x972>
			default:	break;
 8021fec:	bf00      	nop
 8021fee:	e012      	b.n	8022016 <app_procProtocolMsg+0x972>
			}	break;
 8021ff0:	bf00      	nop
 8021ff2:	e010      	b.n	8022016 <app_procProtocolMsg+0x972>
			return ;
 8021ff4:	bf00      	nop
 8021ff6:	e00e      	b.n	8022016 <app_procProtocolMsg+0x972>
			default:	break;
 8021ff8:	bf00      	nop
 8021ffa:	e00c      	b.n	8022016 <app_procProtocolMsg+0x972>
 8021ffc:	20004c48 	.word	0x20004c48
 8022000:	20004c55 	.word	0x20004c55
 8022004:	01032005 	.word	0x01032005
 8022008:	1e022003 	.word	0x1e022003
 802200c:	20004c98 	.word	0x20004c98
					return ;
 8022010:	bf00      	nop
 8022012:	e000      	b.n	8022016 <app_procProtocolMsg+0x972>
			}	break;
 8022014:	bf00      	nop
		}		
	}else  
	{
		
	}
}
 8022016:	f507 770c 	add.w	r7, r7, #560	; 0x230
 802201a:	46bd      	mov	sp, r7
 802201c:	bdb0      	pop	{r4, r5, r7, pc}
 802201e:	bf00      	nop

08022020 <app_readSysConfig>:

/**
 * 读取系统配置参数
 */
void app_readSysConfig(Device * dev)
{
 8022020:	b580      	push	{r7, lr}
 8022022:	b082      	sub	sp, #8
 8022024:	af00      	add	r7, sp, #0
 8022026:	6078      	str	r0, [r7, #4]
	hal_readFlash(CFG_PART, (char *)dev, sizeof(Device));
 8022028:	2268      	movs	r2, #104	; 0x68
 802202a:	6879      	ldr	r1, [r7, #4]
 802202c:	4803      	ldr	r0, [pc, #12]	; (802203c <app_readSysConfig+0x1c>)
 802202e:	f006 f8f6 	bl	802821e <hal_readFlash>
}
 8022032:	bf00      	nop
 8022034:	3708      	adds	r7, #8
 8022036:	46bd      	mov	sp, r7
 8022038:	bd80      	pop	{r7, pc}
 802203a:	bf00      	nop
 802203c:	08008000 	.word	0x08008000

08022040 <app_saveSysConfig>:
/**
 * 存储系统配置参数
 * 返回 FLASH_SUCCESS / FLASH_FAIL
 */
char app_saveSysConfig(Device * dev)
{
 8022040:	b580      	push	{r7, lr}
 8022042:	b084      	sub	sp, #16
 8022044:	af00      	add	r7, sp, #0
 8022046:	6078      	str	r0, [r7, #4]
	char ret = FLASH_FAIL;
 8022048:	2301      	movs	r3, #1
 802204a:	73fb      	strb	r3, [r7, #15]

	if(hal_eraseFlash(2, 1)==HAL_OK) //擦除16KB空间
 802204c:	2101      	movs	r1, #1
 802204e:	2002      	movs	r0, #2
 8022050:	f006 f90a 	bl	8028268 <hal_eraseFlash>
 8022054:	4603      	mov	r3, r0
 8022056:	2b00      	cmp	r3, #0
 8022058:	d106      	bne.n	8022068 <app_saveSysConfig+0x28>
	{
		ret = hal_programFlash(CFG_PART, (char *)dev, sizeof(Device));
 802205a:	2268      	movs	r2, #104	; 0x68
 802205c:	6879      	ldr	r1, [r7, #4]
 802205e:	4805      	ldr	r0, [pc, #20]	; (8022074 <app_saveSysConfig+0x34>)
 8022060:	f006 f89a 	bl	8028198 <hal_programFlash>
 8022064:	4603      	mov	r3, r0
 8022066:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8022068:	7bfb      	ldrb	r3, [r7, #15]
}
 802206a:	4618      	mov	r0, r3
 802206c:	3710      	adds	r7, #16
 802206e:	46bd      	mov	sp, r7
 8022070:	bd80      	pop	{r7, pc}
 8022072:	bf00      	nop
 8022074:	08008000 	.word	0x08008000

08022078 <app_initDevice>:
/**
 * 设备初始化  初始化各外设/驱动/设备运行参数
 *  
 */
void app_initDevice(Device *pdev)
{
 8022078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802207c:	b086      	sub	sp, #24
 802207e:	af00      	add	r7, sp, #0
 8022080:	6078      	str	r0, [r7, #4]
	uint64_t macaddr = (uint64_t)HAL_GetUIDw1()<<32 | HAL_GetUIDw0();  //获取自身ID
 8022082:	f002 ffb5 	bl	8024ff0 <HAL_GetUIDw1>
 8022086:	4603      	mov	r3, r0
 8022088:	461a      	mov	r2, r3
 802208a:	f04f 0300 	mov.w	r3, #0
 802208e:	f04f 0400 	mov.w	r4, #0
 8022092:	f04f 0500 	mov.w	r5, #0
 8022096:	0015      	movs	r5, r2
 8022098:	2400      	movs	r4, #0
 802209a:	f002 ff9d 	bl	8024fd8 <HAL_GetUIDw0>
 802209e:	4603      	mov	r3, r0
 80220a0:	461a      	mov	r2, r3
 80220a2:	f04f 0300 	mov.w	r3, #0
 80220a6:	ea44 0802 	orr.w	r8, r4, r2
 80220aa:	ea45 0903 	orr.w	r9, r5, r3
 80220ae:	e9c7 8902 	strd	r8, r9, [r7, #8]

    pdev->systick = 0;   //系统时间戳
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	2200      	movs	r2, #0
 80220b6:	639a      	str	r2, [r3, #56]	; 0x38

    pdev->fwver.version = VERSION;
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	2201      	movs	r2, #1
 80220bc:	701a      	strb	r2, [r3, #0]

	app_readSysConfig(pdev);
 80220be:	6878      	ldr	r0, [r7, #4]
 80220c0:	f7ff ffae 	bl	8022020 <app_readSysConfig>

	pdev->rev_timeout = 0;
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	2200      	movs	r2, #0
 80220c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	if(pdev->macaddr==macaddr) //之前存储过
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80220d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80220d6:	4299      	cmp	r1, r3
 80220d8:	bf08      	it	eq
 80220da:	4290      	cmpeq	r0, r2
 80220dc:	d117      	bne.n	802210e <app_initDevice+0x96>
	{
		lora1.loraparam.LoRaSettings = pdev->loraparam;
 80220de:	4a49      	ldr	r2, [pc, #292]	; (8022204 <app_initDevice+0x18c>)
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	f102 0420 	add.w	r4, r2, #32
 80220e6:	f103 051c 	add.w	r5, r3, #28
 80220ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80220ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80220ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80220f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		if(pdev->state!=DEVIAP) //断点续传
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	7e9b      	ldrb	r3, [r3, #26]
 80220fa:	2b03      	cmp	r3, #3
 80220fc:	d033      	beq.n	8022166 <app_initDevice+0xee>
		{
			SWITCH_STATE(CONFIGED);
 80220fe:	4b42      	ldr	r3, [pc, #264]	; (8022208 <app_initDevice+0x190>)
 8022100:	7e9a      	ldrb	r2, [r3, #26]
 8022102:	4b41      	ldr	r3, [pc, #260]	; (8022208 <app_initDevice+0x190>)
 8022104:	76da      	strb	r2, [r3, #27]
 8022106:	4b40      	ldr	r3, [pc, #256]	; (8022208 <app_initDevice+0x190>)
 8022108:	2202      	movs	r2, #2
 802210a:	769a      	strb	r2, [r3, #26]
 802210c:	e02b      	b.n	8022166 <app_initDevice+0xee>
		}
	}else //被恢复出厂或第一次运行
	{
		pdev->macaddr = macaddr;
 802210e:	6879      	ldr	r1, [r7, #4]
 8022110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022114:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pdev->uploadperiod = 300; //默认5min上报一次设备状态
 8022118:	687b      	ldr	r3, [r7, #4]
 802211a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802211e:	879a      	strh	r2, [r3, #60]	; 0x3c

	    pdev->loraparam = lora1.loraparam.LoRaSettings;
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	4a38      	ldr	r2, [pc, #224]	; (8022204 <app_initDevice+0x18c>)
 8022124:	f103 041c 	add.w	r4, r3, #28
 8022128:	f102 0520 	add.w	r5, r2, #32
 802212c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802212e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8022134:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	    pdev->fwver.index = 0;
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	2200      	movs	r2, #0
 802213c:	811a      	strh	r2, [r3, #8]
	    pdev->fwver.packsize = 0;
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	2200      	movs	r2, #0
 8022142:	605a      	str	r2, [r3, #4]
	    pdev->fwver.times = 0;
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	2200      	movs	r2, #0
 8022148:	815a      	strh	r2, [r3, #10]

		pdev->role = ROLE_BASIC;
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	2201      	movs	r2, #1
 802214e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

		app_saveSysConfig(pdev);
 8022152:	6878      	ldr	r0, [r7, #4]
 8022154:	f7ff ff74 	bl	8022040 <app_saveSysConfig>

		SWITCH_STATE(UNCONFIG);  //进入未配置状态 向平台索要配置
 8022158:	4b2b      	ldr	r3, [pc, #172]	; (8022208 <app_initDevice+0x190>)
 802215a:	7e9a      	ldrb	r2, [r3, #26]
 802215c:	4b2a      	ldr	r3, [pc, #168]	; (8022208 <app_initDevice+0x190>)
 802215e:	76da      	strb	r2, [r3, #27]
 8022160:	4b29      	ldr	r3, [pc, #164]	; (8022208 <app_initDevice+0x190>)
 8022162:	2201      	movs	r2, #1
 8022164:	769a      	strb	r2, [r3, #26]
	}


	pdev->communication.state = COMMU_IDEL;
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	2200      	movs	r2, #0
 802216a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdev->communication.tick = 0;
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	2200      	movs	r2, #0
 8022172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	pdev->communication.id_index = 1;
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	2201      	movs	r2, #1
 802217a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	pdev->communication.sn = 0;
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	2200      	movs	r2, #0
 8022182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	device.maccrc = 0;
 8022186:	4b20      	ldr	r3, [pc, #128]	; (8022208 <app_initDevice+0x190>)
 8022188:	2200      	movs	r2, #0
 802218a:	831a      	strh	r2, [r3, #24]
	for(char i=0;i<8;++i)
 802218c:	2300      	movs	r3, #0
 802218e:	75fb      	strb	r3, [r7, #23]
 8022190:	e00d      	b.n	80221ae <app_initDevice+0x136>
	{
		device.maccrc += *(((uint8_t *)&device.macaddr)+i);
 8022192:	4b1d      	ldr	r3, [pc, #116]	; (8022208 <app_initDevice+0x190>)
 8022194:	8b1a      	ldrh	r2, [r3, #24]
 8022196:	7dfb      	ldrb	r3, [r7, #23]
 8022198:	491c      	ldr	r1, [pc, #112]	; (802220c <app_initDevice+0x194>)
 802219a:	440b      	add	r3, r1
 802219c:	781b      	ldrb	r3, [r3, #0]
 802219e:	b29b      	uxth	r3, r3
 80221a0:	4413      	add	r3, r2
 80221a2:	b29a      	uxth	r2, r3
 80221a4:	4b18      	ldr	r3, [pc, #96]	; (8022208 <app_initDevice+0x190>)
 80221a6:	831a      	strh	r2, [r3, #24]
	for(char i=0;i<8;++i)
 80221a8:	7dfb      	ldrb	r3, [r7, #23]
 80221aa:	3301      	adds	r3, #1
 80221ac:	75fb      	strb	r3, [r7, #23]
 80221ae:	7dfb      	ldrb	r3, [r7, #23]
 80221b0:	2b07      	cmp	r3, #7
 80221b2:	d9ee      	bls.n	8022192 <app_initDevice+0x11a>
	}
	
	/*初始化驱动*/
	drv_initLED(&led_sys);
 80221b4:	4816      	ldr	r0, [pc, #88]	; (8022210 <app_initDevice+0x198>)
 80221b6:	f002 f9f5 	bl	80245a4 <drv_initLED>
	drv_initLED(&led_net);
 80221ba:	4816      	ldr	r0, [pc, #88]	; (8022214 <app_initDevice+0x19c>)
 80221bc:	f002 f9f2 	bl	80245a4 <drv_initLED>
	drv_initLED(&led_data);
 80221c0:	4815      	ldr	r0, [pc, #84]	; (8022218 <app_initDevice+0x1a0>)
 80221c2:	f002 f9ef 	bl	80245a4 <drv_initLED>
	drv_initFlash(&flash);
 80221c6:	4815      	ldr	r0, [pc, #84]	; (802221c <app_initDevice+0x1a4>)
 80221c8:	f002 fb2e 	bl	8024828 <drv_initFlash>
	drv_initRS485(&rs4851);
 80221cc:	4814      	ldr	r0, [pc, #80]	; (8022220 <app_initDevice+0x1a8>)
 80221ce:	f001 fc91 	bl	8023af4 <drv_initRS485>
	drv_initRS485(&rs4852);
 80221d2:	4814      	ldr	r0, [pc, #80]	; (8022224 <app_initDevice+0x1ac>)
 80221d4:	f001 fc8e 	bl	8023af4 <drv_initRS485>
	drv_initPWM2IV(&pwm2iv);
 80221d8:	4813      	ldr	r0, [pc, #76]	; (8022228 <app_initDevice+0x1b0>)
 80221da:	f002 fd3b 	bl	8024c54 <drv_initPWM2IV>
	drv_initCat1(&cat1);
 80221de:	4813      	ldr	r0, [pc, #76]	; (802222c <app_initDevice+0x1b4>)
 80221e0:	f001 fde0 	bl	8023da4 <drv_initCat1>
	drv_initSX1278(&lora1);
 80221e4:	4807      	ldr	r0, [pc, #28]	; (8022204 <app_initDevice+0x18c>)
 80221e6:	f002 fdb9 	bl	8024d5c <drv_initSX1278>
	drv_initBLE(&ble);
 80221ea:	4811      	ldr	r0, [pc, #68]	; (8022230 <app_initDevice+0x1b8>)
 80221ec:	f001 fd08 	bl	8023c00 <drv_initBLE>
	drv_initDebug(&debug);
 80221f0:	4810      	ldr	r0, [pc, #64]	; (8022234 <app_initDevice+0x1bc>)
 80221f2:	f002 f939 	bl	8024468 <drv_initDebug>
	hal_initWdg();
 80221f6:	f006 fd65 	bl	8028cc4 <hal_initWdg>
}
 80221fa:	bf00      	nop
 80221fc:	3718      	adds	r7, #24
 80221fe:	46bd      	mov	sp, r7
 8022200:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8022204:	20000078 	.word	0x20000078
 8022208:	20004c48 	.word	0x20004c48
 802220c:	20004c58 	.word	0x20004c58
 8022210:	20000000 	.word	0x20000000
 8022214:	20000014 	.word	0x20000014
 8022218:	20000028 	.word	0x20000028
 802221c:	20004c38 	.word	0x20004c38
 8022220:	2000003c 	.word	0x2000003c
 8022224:	20000058 	.word	0x20000058
 8022228:	20000680 	.word	0x20000680
 802222c:	20000270 	.word	0x20000270
 8022230:	200002a8 	.word	0x200002a8
 8022234:	200002c0 	.word	0x200002c0

08022238 <getCrc16>:
 * 功能：计算CRC
 * 参数: data 数据 len 长度
 * 返回: 计算结果
 */
static unsigned short getCrc16(unsigned char * data, unsigned short len)
{
 8022238:	b480      	push	{r7}
 802223a:	b085      	sub	sp, #20
 802223c:	af00      	add	r7, sp, #0
 802223e:	6078      	str	r0, [r7, #4]
 8022240:	460b      	mov	r3, r1
 8022242:	807b      	strh	r3, [r7, #2]
    unsigned short ret = 0;
 8022244:	2300      	movs	r3, #0
 8022246:	81fb      	strh	r3, [r7, #14]

    for(unsigned short i=0;i<len;++i)
 8022248:	2300      	movs	r3, #0
 802224a:	81bb      	strh	r3, [r7, #12]
 802224c:	e00a      	b.n	8022264 <getCrc16+0x2c>
    {
        ret += data[i];
 802224e:	89bb      	ldrh	r3, [r7, #12]
 8022250:	687a      	ldr	r2, [r7, #4]
 8022252:	4413      	add	r3, r2
 8022254:	781b      	ldrb	r3, [r3, #0]
 8022256:	b29a      	uxth	r2, r3
 8022258:	89fb      	ldrh	r3, [r7, #14]
 802225a:	4413      	add	r3, r2
 802225c:	81fb      	strh	r3, [r7, #14]
    for(unsigned short i=0;i<len;++i)
 802225e:	89bb      	ldrh	r3, [r7, #12]
 8022260:	3301      	adds	r3, #1
 8022262:	81bb      	strh	r3, [r7, #12]
 8022264:	89ba      	ldrh	r2, [r7, #12]
 8022266:	887b      	ldrh	r3, [r7, #2]
 8022268:	429a      	cmp	r2, r3
 802226a:	d3f0      	bcc.n	802224e <getCrc16+0x16>
    }

    return ret;
 802226c:	89fb      	ldrh	r3, [r7, #14]
}
 802226e:	4618      	mov	r0, r3
 8022270:	3714      	adds	r7, #20
 8022272:	46bd      	mov	sp, r7
 8022274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022278:	4770      	bx	lr

0802227a <app_packProtocolMsg>:
 * 最近修改:
 *
 *          [20210111] MAC地址改为小端上传
 */
BOOL app_packProtocolMsg(PROTOCOLTYPE protocoltype, unsigned long long id, unsigned short sn, unsigned char cryption, unsigned int cmd, char * data, unsigned short len, char * tbuffer, unsigned short * size)
{
 802227a:	b590      	push	{r4, r7, lr}
 802227c:	b087      	sub	sp, #28
 802227e:	af00      	add	r7, sp, #0
 8022280:	4601      	mov	r1, r0
 8022282:	e9c7 2300 	strd	r2, r3, [r7]
 8022286:	460b      	mov	r3, r1
 8022288:	73fb      	strb	r3, [r7, #15]
    BOOL ret = OK;
 802228a:	2301      	movs	r3, #1
 802228c:	75fb      	strb	r3, [r7, #23]

    /*判断协议类型*/
    if(protocoltype==M2M)
 802228e:	7bfb      	ldrb	r3, [r7, #15]
 8022290:	2b01      	cmp	r3, #1
 8022292:	d12f      	bne.n	80222f4 <app_packProtocolMsg+0x7a>
    {
        /*避免内存溢出*/
        if(M2MPROTOCOL_SIZE+len>TBUF_SIZE)
 8022294:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8022296:	2bf4      	cmp	r3, #244	; 0xf4
 8022298:	d901      	bls.n	802229e <app_packProtocolMsg+0x24>
        {
            return NO;
 802229a:	2300      	movs	r3, #0
 802229c:	e091      	b.n	80223c2 <app_packProtocolMsg+0x148>
        }

        /*封装头*/
        *(unsigned short *)tbuffer = HEAD;
 802229e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80222a0:	f644 2254 	movw	r2, #19028	; 0x4a54
 80222a4:	801a      	strh	r2, [r3, #0]

        /*封装设备ID*/
        *(unsigned short *)(tbuffer + HEAD_SIZE) = id;
 80222a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80222aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80222ac:	3102      	adds	r1, #2
 80222ae:	b293      	uxth	r3, r2
 80222b0:	800b      	strh	r3, [r1, #0]

        /*封装指令功能码*/
        *(unsigned int *)(tbuffer + HEAD_SIZE + DEVICEID_SIZE) = cmd;
 80222b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80222b4:	3304      	adds	r3, #4
 80222b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80222b8:	601a      	str	r2, [r3, #0]

        /*封装数据长度*/
        *(unsigned short *)(tbuffer + HEAD_SIZE + DEVICEID_SIZE + COMMAND_SIZE) = len;
 80222ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80222bc:	3308      	adds	r3, #8
 80222be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80222c0:	801a      	strh	r2, [r3, #0]

        /*封装数据体*/
        memcpy(tbuffer+HEAD_SIZE+DEVICEID_SIZE+COMMAND_SIZE+DATALEN_SIZE, data, len);
 80222c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80222c4:	330a      	adds	r3, #10
 80222c6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80222c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80222ca:	4618      	mov	r0, r3
 80222cc:	f00a fec8 	bl	802d060 <memcpy>

        /*封装CRC*/
        *(unsigned short *)(tbuffer + M2MPROTOCOL_SIZE - CRC_SIZE + len) = getCrc16(tbuffer, M2MPROTOCOL_SIZE - CRC_SIZE + len);
 80222d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80222d2:	330a      	adds	r3, #10
 80222d4:	b299      	uxth	r1, r3
 80222d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80222d8:	330a      	adds	r3, #10
 80222da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80222dc:	18d4      	adds	r4, r2, r3
 80222de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80222e0:	f7ff ffaa 	bl	8022238 <getCrc16>
 80222e4:	4603      	mov	r3, r0
 80222e6:	8023      	strh	r3, [r4, #0]

        *size = M2MPROTOCOL_SIZE + len;
 80222e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80222ea:	330c      	adds	r3, #12
 80222ec:	b29a      	uxth	r2, r3
 80222ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80222f0:	801a      	strh	r2, [r3, #0]
 80222f2:	e065      	b.n	80223c0 <app_packProtocolMsg+0x146>
        /*发送数据*/
        // callback_sendMsg(tbuffer, M2MPROTOCOL_SIZE+len);
    }else  
    {
        /*避免内存溢出*/
        if(M2SPROTOCOL_SIZE+len>TBUF_SIZE)
 80222f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80222f6:	2beb      	cmp	r3, #235	; 0xeb
 80222f8:	d901      	bls.n	80222fe <app_packProtocolMsg+0x84>
        {
            return NO;
 80222fa:	2300      	movs	r3, #0
 80222fc:	e061      	b.n	80223c2 <app_packProtocolMsg+0x148>
        }

        /*封装头*/
        *(unsigned short *)tbuffer = HEAD>>8 | HEAD<<8;
 80222fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022300:	f245 424a 	movw	r2, #21578	; 0x544a
 8022304:	801a      	strh	r2, [r3, #0]
        /*封装设备ID*/
//        for(unsigned char i=0;i<8;++i)
//        {
//            *(unsigned char *)(tbuffer + HEAD_SIZE+i) = id>>(7-i)*8;
//        }
        memcpy(tbuffer+HEAD_SIZE, (char *)&id, 8);
 8022306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022308:	3302      	adds	r3, #2
 802230a:	4639      	mov	r1, r7
 802230c:	2208      	movs	r2, #8
 802230e:	4618      	mov	r0, r3
 8022310:	f00a fea6 	bl	802d060 <memcpy>
        /*封装SN号*/
        *(unsigned short *)(tbuffer + HEAD_SIZE+NETWAYMAC_SIZE) = sn>>8 | sn<<8;
 8022314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022316:	0a1b      	lsrs	r3, r3, #8
 8022318:	b29b      	uxth	r3, r3
 802231a:	b21a      	sxth	r2, r3
 802231c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802231e:	021b      	lsls	r3, r3, #8
 8022320:	b21b      	sxth	r3, r3
 8022322:	4313      	orrs	r3, r2
 8022324:	b21a      	sxth	r2, r3
 8022326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022328:	330a      	adds	r3, #10
 802232a:	b292      	uxth	r2, r2
 802232c:	801a      	strh	r2, [r3, #0]

        /*封装加密方式*/
        tbuffer[HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE] = cryption;
 802232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022330:	330c      	adds	r3, #12
 8022332:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8022336:	701a      	strb	r2, [r3, #0]

        /*封装指令功能码*/
        *(unsigned int *)(tbuffer + HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE+CRYPTION_SIZE) = (cmd&0xFF000000)>>24 | (cmd&0x00FF0000)>>8 | (cmd&0x0000FF00)<<8 | (cmd&0x000000FF)<<24;
 8022338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802233a:	0e1a      	lsrs	r2, r3, #24
 802233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802233e:	0a1b      	lsrs	r3, r3, #8
 8022340:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022344:	431a      	orrs	r2, r3
 8022346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022348:	021b      	lsls	r3, r3, #8
 802234a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802234e:	ea42 0103 	orr.w	r1, r2, r3
 8022352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022354:	061a      	lsls	r2, r3, #24
 8022356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022358:	330d      	adds	r3, #13
 802235a:	430a      	orrs	r2, r1
 802235c:	601a      	str	r2, [r3, #0]

        /*封装数据长度*/
        *(unsigned short *)(tbuffer + HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE+CRYPTION_SIZE+COMMAND_SIZE) = len>>8 | len<<8;
 802235e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8022360:	0a1b      	lsrs	r3, r3, #8
 8022362:	b29b      	uxth	r3, r3
 8022364:	b21a      	sxth	r2, r3
 8022366:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8022368:	021b      	lsls	r3, r3, #8
 802236a:	b21b      	sxth	r3, r3
 802236c:	4313      	orrs	r3, r2
 802236e:	b21a      	sxth	r2, r3
 8022370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022372:	3311      	adds	r3, #17
 8022374:	b292      	uxth	r2, r2
 8022376:	801a      	strh	r2, [r3, #0]

        /*封装数据体*/
        memcpy(tbuffer+HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE+CRYPTION_SIZE+COMMAND_SIZE+DATALEN_SIZE, data, len);
 8022378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802237a:	3313      	adds	r3, #19
 802237c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 802237e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022380:	4618      	mov	r0, r3
 8022382:	f00a fe6d 	bl	802d060 <memcpy>

        /*封装CRC*/
        unsigned short crc = getCrc16(tbuffer, M2SPROTOCOL_SIZE - CRC_SIZE + len);
 8022386:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8022388:	3313      	adds	r3, #19
 802238a:	b29b      	uxth	r3, r3
 802238c:	4619      	mov	r1, r3
 802238e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8022390:	f7ff ff52 	bl	8022238 <getCrc16>
 8022394:	4603      	mov	r3, r0
 8022396:	82bb      	strh	r3, [r7, #20]
        *(unsigned short *)(tbuffer + M2SPROTOCOL_SIZE - CRC_SIZE + len) = crc>>8 | crc<<8;
 8022398:	8abb      	ldrh	r3, [r7, #20]
 802239a:	0a1b      	lsrs	r3, r3, #8
 802239c:	b29b      	uxth	r3, r3
 802239e:	b21a      	sxth	r2, r3
 80223a0:	8abb      	ldrh	r3, [r7, #20]
 80223a2:	021b      	lsls	r3, r3, #8
 80223a4:	b21b      	sxth	r3, r3
 80223a6:	4313      	orrs	r3, r2
 80223a8:	b219      	sxth	r1, r3
 80223aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80223ac:	3313      	adds	r3, #19
 80223ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80223b0:	4413      	add	r3, r2
 80223b2:	b28a      	uxth	r2, r1
 80223b4:	801a      	strh	r2, [r3, #0]

        /*发送数据*/
        // callback_sendMsg(tbuffer, M2SPROTOCOL_SIZE+len);
        *size = M2SPROTOCOL_SIZE + len;
 80223b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80223b8:	3315      	adds	r3, #21
 80223ba:	b29a      	uxth	r2, r3
 80223bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80223be:	801a      	strh	r2, [r3, #0]
    }

    return OK;
 80223c0:	2301      	movs	r3, #1
}
 80223c2:	4618      	mov	r0, r3
 80223c4:	371c      	adds	r7, #28
 80223c6:	46bd      	mov	sp, r7
 80223c8:	bd90      	pop	{r4, r7, pc}

080223ca <app_unpackProtocolMsg>:
 * 功能：协议解包发送函数
 * 参数: protocoltype 协议类型 id M2M取低2字节 cmd 指令码 data 待发送数据 len 发送数据长度 id 自身ID 用于和接收ID比较 rbuffer 解包后有效数据部分缓冲区 size 有效数据长度[暂时没用]
 * 返回: 是否发送成功 OK or NO
 */
BOOL app_unpackProtocolMsg(PROTOCOLTYPE protocoltype, ProtocolParam * pstruct, char * revmsg, unsigned short len, unsigned long long id, char * rbuffer, unsigned short * size)
{
 80223ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80223ce:	b09c      	sub	sp, #112	; 0x70
 80223d0:	af00      	add	r7, sp, #0
 80223d2:	6639      	str	r1, [r7, #96]	; 0x60
 80223d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80223d6:	461a      	mov	r2, r3
 80223d8:	4603      	mov	r3, r0
 80223da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80223de:	4613      	mov	r3, r2
 80223e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    BOOL ret = OK;
 80223e4:	2301      	movs	r3, #1
 80223e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    
    //小于2会导致 在计算CRC时数组越界
    if(len<2)
 80223ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80223ee:	2b01      	cmp	r3, #1
 80223f0:	d801      	bhi.n	80223f6 <app_unpackProtocolMsg+0x2c>
    {
        return NO;
 80223f2:	2300      	movs	r3, #0
 80223f4:	e1bf      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
    }
    
    if(protocoltype==M2M)
 80223f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80223fa:	2b01      	cmp	r3, #1
 80223fc:	d14e      	bne.n	802249c <app_unpackProtocolMsg+0xd2>
    {
        /*数据头错误*/
        if(*(unsigned short *)revmsg!=HEAD)
 80223fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022400:	881b      	ldrh	r3, [r3, #0]
 8022402:	f644 2254 	movw	r2, #19028	; 0x4a54
 8022406:	4293      	cmp	r3, r2
 8022408:	d004      	beq.n	8022414 <app_unpackProtocolMsg+0x4a>
        {
            pstruct->errcode = CODE_ERR_HEAD;
 802240a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802240c:	2205      	movs	r2, #5
 802240e:	60da      	str	r2, [r3, #12]
            return NO;
 8022410:	2300      	movs	r3, #0
 8022412:	e1b0      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
        }

        /*CRC错误*/
        unsigned short crc = getCrc16(revmsg, len-sizeof(short));
 8022414:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8022418:	3b02      	subs	r3, #2
 802241a:	b29b      	uxth	r3, r3
 802241c:	4619      	mov	r1, r3
 802241e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8022420:	f7ff ff0a 	bl	8022238 <getCrc16>
 8022424:	4603      	mov	r3, r0
 8022426:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        if(*(unsigned short *)(revmsg+len-sizeof(short))!=crc)
 802242a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 802242e:	3b02      	subs	r3, #2
 8022430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8022432:	4413      	add	r3, r2
 8022434:	881b      	ldrh	r3, [r3, #0]
 8022436:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 802243a:	429a      	cmp	r2, r3
 802243c:	d004      	beq.n	8022448 <app_unpackProtocolMsg+0x7e>
        {
            pstruct->errcode = CODE_ERR_CRC;
 802243e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022440:	2201      	movs	r2, #1
 8022442:	60da      	str	r2, [r3, #12]
            return NO;
 8022444:	2300      	movs	r3, #0
 8022446:	e196      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
        }

        /*数据长度错误*/
        if(*(unsigned short *)(revmsg+HEAD_SIZE+DEVICEID_SIZE+COMMAND_SIZE)+M2MPROTOCOL_SIZE!=len)
 8022448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802244a:	3308      	adds	r3, #8
 802244c:	881b      	ldrh	r3, [r3, #0]
 802244e:	f103 020c 	add.w	r2, r3, #12
 8022452:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8022456:	429a      	cmp	r2, r3
 8022458:	d004      	beq.n	8022464 <app_unpackProtocolMsg+0x9a>
        {
            pstruct->errcode = CODE_ERR_LEN;
 802245a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802245c:	2203      	movs	r2, #3
 802245e:	60da      	str	r2, [r3, #12]
            return NO;
 8022460:	2300      	movs	r3, #0
 8022462:	e188      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
        }

        /*无错误 开始解析*/
        /*解析功能码*/
        pstruct->command = *(unsigned int *)(revmsg+HEAD_SIZE+DEVICEID_SIZE);
 8022464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022466:	685a      	ldr	r2, [r3, #4]
 8022468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802246a:	609a      	str	r2, [r3, #8]
        /*获取ID*/
        pstruct->id = *(unsigned short *)(revmsg+HEAD_SIZE);
 802246c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802246e:	3302      	adds	r3, #2
 8022470:	881b      	ldrh	r3, [r3, #0]
 8022472:	b29a      	uxth	r2, r3
 8022474:	f04f 0300 	mov.w	r3, #0
 8022478:	6e39      	ldr	r1, [r7, #96]	; 0x60
 802247a:	e9c1 2300 	strd	r2, r3, [r1]
        /*解析数据长度*/
        pstruct->len = *(unsigned short *)(revmsg+HEAD_SIZE+DEVICEID_SIZE+COMMAND_SIZE);
 802247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022480:	891a      	ldrh	r2, [r3, #8]
 8022482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022484:	821a      	strh	r2, [r3, #16]
        /*解析数据*/
        memcpy(rbuffer, revmsg+HEAD_SIZE+DEVICEID_SIZE+COMMAND_SIZE+DATALEN_SIZE, pstruct->len);
 8022486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022488:	f103 010a 	add.w	r1, r3, #10
 802248c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802248e:	8a1b      	ldrh	r3, [r3, #16]
 8022490:	461a      	mov	r2, r3
 8022492:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8022496:	f00a fde3 	bl	802d060 <memcpy>
 802249a:	e16b      	b.n	8022774 <app_unpackProtocolMsg+0x3aa>
    }else  
    {
        /*检测ID是否正确*/
        unsigned char i = 0;
 802249c:	2300      	movs	r3, #0
 802249e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        //     pstruct->errcode = CODE_ERR_ID;
        //     return NO;
        // }

        /*数据头错误*/
        if(*(unsigned short *)revmsg!=((HEAD&0xFF00)>>8 | (HEAD&0x00FF)<<8))
 80224a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80224a4:	881a      	ldrh	r2, [r3, #0]
 80224a6:	f245 434a 	movw	r3, #21578	; 0x544a
 80224aa:	429a      	cmp	r2, r3
 80224ac:	d004      	beq.n	80224b8 <app_unpackProtocolMsg+0xee>
        {
            pstruct->errcode = CODE_ERR_HEAD;
 80224ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80224b0:	2205      	movs	r2, #5
 80224b2:	60da      	str	r2, [r3, #12]
            return NO;
 80224b4:	2300      	movs	r3, #0
 80224b6:	e15e      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
        }

        /*CRC错误*/
        if(getCrc16((unsigned char *)revmsg, len-sizeof(short))!=((*(unsigned short *)(revmsg+len-sizeof(short))&0xFF00)>>8 | (*(unsigned short *)(revmsg+len-sizeof(short))&0x00FF)<<8))
 80224b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80224bc:	3b02      	subs	r3, #2
 80224be:	b29b      	uxth	r3, r3
 80224c0:	4619      	mov	r1, r3
 80224c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80224c4:	f7ff feb8 	bl	8022238 <getCrc16>
 80224c8:	4603      	mov	r3, r0
 80224ca:	4618      	mov	r0, r3
 80224cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80224d0:	1e9a      	subs	r2, r3, #2
 80224d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80224d4:	4413      	add	r3, r2
 80224d6:	881b      	ldrh	r3, [r3, #0]
 80224d8:	0a1b      	lsrs	r3, r3, #8
 80224da:	b29b      	uxth	r3, r3
 80224dc:	4619      	mov	r1, r3
 80224de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80224e2:	1e9a      	subs	r2, r3, #2
 80224e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80224e6:	4413      	add	r3, r2
 80224e8:	881b      	ldrh	r3, [r3, #0]
 80224ea:	021b      	lsls	r3, r3, #8
 80224ec:	b29b      	uxth	r3, r3
 80224ee:	430b      	orrs	r3, r1
 80224f0:	4298      	cmp	r0, r3
 80224f2:	d004      	beq.n	80224fe <app_unpackProtocolMsg+0x134>
        {
            pstruct->errcode = CODE_ERR_CRC;
 80224f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80224f6:	2201      	movs	r2, #1
 80224f8:	60da      	str	r2, [r3, #12]
            return NO;
 80224fa:	2300      	movs	r3, #0
 80224fc:	e13b      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
        }

        /*数据长度错误*/
        if((((*(unsigned short *)(revmsg+HEAD_SIZE+NETWAYMAC_SIZE+COMMAND_SIZE+SN_SIZE+CRYPTION_SIZE)&0xFF00)>>8)|((*(unsigned short *)(revmsg+HEAD_SIZE+NETWAYMAC_SIZE+COMMAND_SIZE+SN_SIZE+CRYPTION_SIZE))&0x00FF)<<8)+M2SPROTOCOL_SIZE!=len)
 80224fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022500:	3311      	adds	r3, #17
 8022502:	881b      	ldrh	r3, [r3, #0]
 8022504:	0a1b      	lsrs	r3, r3, #8
 8022506:	b29b      	uxth	r3, r3
 8022508:	461a      	mov	r2, r3
 802250a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802250c:	3311      	adds	r3, #17
 802250e:	881b      	ldrh	r3, [r3, #0]
 8022510:	021b      	lsls	r3, r3, #8
 8022512:	b29b      	uxth	r3, r3
 8022514:	4313      	orrs	r3, r2
 8022516:	f103 0215 	add.w	r2, r3, #21
 802251a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 802251e:	429a      	cmp	r2, r3
 8022520:	d004      	beq.n	802252c <app_unpackProtocolMsg+0x162>
        {
            pstruct->errcode = CODE_ERR_LEN;
 8022522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022524:	2203      	movs	r2, #3
 8022526:	60da      	str	r2, [r3, #12]
            return NO;
 8022528:	2300      	movs	r3, #0
 802252a:	e124      	b.n	8022776 <app_unpackProtocolMsg+0x3ac>
        }

        pstruct->errcode = CODE_OK;
 802252c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802252e:	2300      	movs	r3, #0
 8022530:	60d3      	str	r3, [r2, #12]
        /*无错误 开始解析*/
        /*解析SN*/
        pstruct->sn = *(unsigned short *)(revmsg+HEAD_SIZE+NETWAYMAC_SIZE);
 8022532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022534:	895b      	ldrh	r3, [r3, #10]
 8022536:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022538:	8253      	strh	r3, [r2, #18]
        pstruct->sn = pstruct->sn>>8 | pstruct->sn<<8;
 802253a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802253c:	8a5b      	ldrh	r3, [r3, #18]
 802253e:	0a1b      	lsrs	r3, r3, #8
 8022540:	b29b      	uxth	r3, r3
 8022542:	b21a      	sxth	r2, r3
 8022544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022546:	8a5b      	ldrh	r3, [r3, #18]
 8022548:	021b      	lsls	r3, r3, #8
 802254a:	b21b      	sxth	r3, r3
 802254c:	4313      	orrs	r3, r2
 802254e:	b21b      	sxth	r3, r3
 8022550:	b29b      	uxth	r3, r3
 8022552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022554:	8253      	strh	r3, [r2, #18]
        /*解析ID*/
        memcpy(&pstruct->id, revmsg+HEAD_SIZE, 8);
 8022556:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8022558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802255a:	3302      	adds	r3, #2
 802255c:	2208      	movs	r2, #8
 802255e:	4619      	mov	r1, r3
 8022560:	f00a fd7e 	bl	802d060 <memcpy>
        pstruct->id = (pstruct->id&0xFF00000000000000)>>56 | (pstruct->id&0x00FF000000000000)>>40 | (pstruct->id&0x0000FF0000000000)>>24 \
 8022564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022566:	e9d3 2300 	ldrd	r2, r3, [r3]
 802256a:	f04f 0400 	mov.w	r4, #0
 802256e:	f04f 0500 	mov.w	r5, #0
 8022572:	0e1c      	lsrs	r4, r3, #24
 8022574:	2500      	movs	r5, #0
 8022576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022578:	e9d3 2300 	ldrd	r2, r3, [r3]
 802257c:	f04f 0000 	mov.w	r0, #0
 8022580:	f04f 0100 	mov.w	r1, #0
 8022584:	0a18      	lsrs	r0, r3, #8
 8022586:	2100      	movs	r1, #0
 8022588:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 802258c:	f04f 0300 	mov.w	r3, #0
 8022590:	ea00 0802 	and.w	r8, r0, r2
 8022594:	ea01 0903 	and.w	r9, r1, r3
 8022598:	ea44 0308 	orr.w	r3, r4, r8
 802259c:	653b      	str	r3, [r7, #80]	; 0x50
 802259e:	ea45 0309 	orr.w	r3, r5, r9
 80225a2:	657b      	str	r3, [r7, #84]	; 0x54
 80225a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80225a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225aa:	f04f 0000 	mov.w	r0, #0
 80225ae:	f04f 0100 	mov.w	r1, #0
 80225b2:	0e10      	lsrs	r0, r2, #24
 80225b4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80225b8:	0e19      	lsrs	r1, r3, #24
 80225ba:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80225be:	f04f 0300 	mov.w	r3, #0
 80225c2:	ea00 0a02 	and.w	sl, r0, r2
 80225c6:	ea01 0b03 	and.w	fp, r1, r3
 80225ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80225ce:	460b      	mov	r3, r1
 80225d0:	ea43 030a 	orr.w	r3, r3, sl
 80225d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80225d6:	4613      	mov	r3, r2
 80225d8:	ea43 030b 	orr.w	r3, r3, fp
 80225dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    | (pstruct->id&0x000000FF00000000)>>8 | (pstruct->id&0x00000000FF000000)<<8 | (pstruct->id&0x0000000000FF0000)<<24 \
 80225de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80225e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225e4:	f04f 0000 	mov.w	r0, #0
 80225e8:	f04f 0100 	mov.w	r1, #0
 80225ec:	0a10      	lsrs	r0, r2, #8
 80225ee:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80225f2:	0a19      	lsrs	r1, r3, #8
 80225f4:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80225f8:	f04f 0300 	mov.w	r3, #0
 80225fc:	ea00 0402 	and.w	r4, r0, r2
 8022600:	643c      	str	r4, [r7, #64]	; 0x40
 8022602:	400b      	ands	r3, r1
 8022604:	647b      	str	r3, [r7, #68]	; 0x44
 8022606:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 802260a:	4623      	mov	r3, r4
 802260c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8022610:	4602      	mov	r2, r0
 8022612:	4313      	orrs	r3, r2
 8022614:	63bb      	str	r3, [r7, #56]	; 0x38
 8022616:	462b      	mov	r3, r5
 8022618:	460a      	mov	r2, r1
 802261a:	4313      	orrs	r3, r2
 802261c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802261e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022624:	f04f 0000 	mov.w	r0, #0
 8022628:	f04f 0100 	mov.w	r1, #0
 802262c:	0219      	lsls	r1, r3, #8
 802262e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8022632:	0210      	lsls	r0, r2, #8
 8022634:	f04f 0200 	mov.w	r2, #0
 8022638:	f04f 03ff 	mov.w	r3, #255	; 0xff
 802263c:	ea00 0402 	and.w	r4, r0, r2
 8022640:	633c      	str	r4, [r7, #48]	; 0x30
 8022642:	400b      	ands	r3, r1
 8022644:	637b      	str	r3, [r7, #52]	; 0x34
 8022646:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 802264a:	4623      	mov	r3, r4
 802264c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8022650:	4602      	mov	r2, r0
 8022652:	4313      	orrs	r3, r2
 8022654:	62bb      	str	r3, [r7, #40]	; 0x28
 8022656:	462b      	mov	r3, r5
 8022658:	460a      	mov	r2, r1
 802265a:	4313      	orrs	r3, r2
 802265c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802265e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022664:	f04f 0000 	mov.w	r0, #0
 8022668:	f04f 0100 	mov.w	r1, #0
 802266c:	0619      	lsls	r1, r3, #24
 802266e:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8022672:	0610      	lsls	r0, r2, #24
 8022674:	f04f 0200 	mov.w	r2, #0
 8022678:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 802267c:	ea00 0402 	and.w	r4, r0, r2
 8022680:	623c      	str	r4, [r7, #32]
 8022682:	400b      	ands	r3, r1
 8022684:	627b      	str	r3, [r7, #36]	; 0x24
 8022686:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 802268a:	4623      	mov	r3, r4
 802268c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022690:	4602      	mov	r2, r0
 8022692:	4313      	orrs	r3, r2
 8022694:	61bb      	str	r3, [r7, #24]
 8022696:	462b      	mov	r3, r5
 8022698:	460a      	mov	r2, r1
 802269a:	4313      	orrs	r3, r2
 802269c:	61fb      	str	r3, [r7, #28]
                                    | (pstruct->id&0x000000000000FF00)<<40 | (pstruct->id&0x00000000000000FF)<<56;  
 802269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80226a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80226a4:	f04f 0200 	mov.w	r2, #0
 80226a8:	f04f 0300 	mov.w	r3, #0
 80226ac:	0203      	lsls	r3, r0, #8
 80226ae:	2200      	movs	r2, #0
 80226b0:	f04f 0000 	mov.w	r0, #0
 80226b4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80226b8:	ea02 0400 	and.w	r4, r2, r0
 80226bc:	613c      	str	r4, [r7, #16]
 80226be:	400b      	ands	r3, r1
 80226c0:	617b      	str	r3, [r7, #20]
 80226c2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80226c6:	4623      	mov	r3, r4
 80226c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80226cc:	4602      	mov	r2, r0
 80226ce:	4313      	orrs	r3, r2
 80226d0:	60bb      	str	r3, [r7, #8]
 80226d2:	462b      	mov	r3, r5
 80226d4:	460a      	mov	r2, r1
 80226d6:	4313      	orrs	r3, r2
 80226d8:	60fb      	str	r3, [r7, #12]
 80226da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80226dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80226e0:	f04f 0200 	mov.w	r2, #0
 80226e4:	f04f 0300 	mov.w	r3, #0
 80226e8:	0603      	lsls	r3, r0, #24
 80226ea:	2200      	movs	r2, #0
 80226ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80226f0:	4621      	mov	r1, r4
 80226f2:	4311      	orrs	r1, r2
 80226f4:	6039      	str	r1, [r7, #0]
 80226f6:	4629      	mov	r1, r5
 80226f8:	4319      	orrs	r1, r3
 80226fa:	6079      	str	r1, [r7, #4]
        pstruct->id = (pstruct->id&0xFF00000000000000)>>56 | (pstruct->id&0x00FF000000000000)>>40 | (pstruct->id&0x0000FF0000000000)>>24 \
 80226fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80226fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8022702:	e9c3 1200 	strd	r1, r2, [r3]

        /*解析功能码*/
        pstruct->command = *(unsigned int *)(revmsg+HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE+CRYPTION_SIZE);
 8022706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022708:	f8d3 200d 	ldr.w	r2, [r3, #13]
 802270c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802270e:	609a      	str	r2, [r3, #8]
        pstruct->command = (pstruct->command&0xFF000000)>>24 | (pstruct->command&0x00FF0000)>>8 | (pstruct->command&0x0000FF00)<<8 | (pstruct->command&0x000000FF)<<24;
 8022710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022712:	689b      	ldr	r3, [r3, #8]
 8022714:	0e1a      	lsrs	r2, r3, #24
 8022716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022718:	689b      	ldr	r3, [r3, #8]
 802271a:	0a1b      	lsrs	r3, r3, #8
 802271c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022720:	431a      	orrs	r2, r3
 8022722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022724:	689b      	ldr	r3, [r3, #8]
 8022726:	021b      	lsls	r3, r3, #8
 8022728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802272c:	431a      	orrs	r2, r3
 802272e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022730:	689b      	ldr	r3, [r3, #8]
 8022732:	061b      	lsls	r3, r3, #24
 8022734:	431a      	orrs	r2, r3
 8022736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022738:	609a      	str	r2, [r3, #8]
        /*解析数据长度*/
        pstruct->len = *(unsigned short *)(revmsg+HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE+CRYPTION_SIZE+COMMAND_SIZE);
 802273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802273c:	f8b3 2011 	ldrh.w	r2, [r3, #17]
 8022740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022742:	821a      	strh	r2, [r3, #16]
        pstruct->len = (pstruct->len&0xFF00)>>8 | (pstruct->len&0x00FF)<<8;
 8022744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022746:	8a1b      	ldrh	r3, [r3, #16]
 8022748:	0a1b      	lsrs	r3, r3, #8
 802274a:	b29b      	uxth	r3, r3
 802274c:	b21a      	sxth	r2, r3
 802274e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022750:	8a1b      	ldrh	r3, [r3, #16]
 8022752:	021b      	lsls	r3, r3, #8
 8022754:	b21b      	sxth	r3, r3
 8022756:	4313      	orrs	r3, r2
 8022758:	b21b      	sxth	r3, r3
 802275a:	b29a      	uxth	r2, r3
 802275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802275e:	821a      	strh	r2, [r3, #16]
        
        /*解析数据*/
        memcpy(rbuffer, revmsg+HEAD_SIZE+NETWAYMAC_SIZE+SN_SIZE+CRYPTION_SIZE+COMMAND_SIZE+DATALEN_SIZE, pstruct->len);
 8022760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022762:	f103 0113 	add.w	r1, r3, #19
 8022766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022768:	8a1b      	ldrh	r3, [r3, #16]
 802276a:	461a      	mov	r2, r3
 802276c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8022770:	f00a fc76 	bl	802d060 <memcpy>
    }
    
    return OK;
 8022774:	2301      	movs	r3, #1
}
 8022776:	4618      	mov	r0, r3
 8022778:	3770      	adds	r7, #112	; 0x70
 802277a:	46bd      	mov	sp, r7
 802277c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08022780 <__NVIC_SystemReset>:
{
 8022780:	b480      	push	{r7}
 8022782:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8022784:	f3bf 8f4f 	dsb	sy
}
 8022788:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802278a:	4b06      	ldr	r3, [pc, #24]	; (80227a4 <__NVIC_SystemReset+0x24>)
 802278c:	68db      	ldr	r3, [r3, #12]
 802278e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8022792:	4904      	ldr	r1, [pc, #16]	; (80227a4 <__NVIC_SystemReset+0x24>)
 8022794:	4b04      	ldr	r3, [pc, #16]	; (80227a8 <__NVIC_SystemReset+0x28>)
 8022796:	4313      	orrs	r3, r2
 8022798:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802279a:	f3bf 8f4f 	dsb	sy
}
 802279e:	bf00      	nop
    __NOP();
 80227a0:	bf00      	nop
 80227a2:	e7fd      	b.n	80227a0 <__NVIC_SystemReset+0x20>
 80227a4:	e000ed00 	.word	0xe000ed00
 80227a8:	05fa0004 	.word	0x05fa0004

080227ac <vApplicationIdleHook>:

/**
 * 空闲钩子函数 用于统计CPU占用率
 */
void vApplicationIdleHook( void )
{
 80227ac:	b480      	push	{r7}
 80227ae:	af00      	add	r7, sp, #0
	static uint32_t tick = 0;

	if(tick != uwTick)
 80227b0:	4b09      	ldr	r3, [pc, #36]	; (80227d8 <vApplicationIdleHook+0x2c>)
 80227b2:	681a      	ldr	r2, [r3, #0]
 80227b4:	4b09      	ldr	r3, [pc, #36]	; (80227dc <vApplicationIdleHook+0x30>)
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	429a      	cmp	r2, r3
 80227ba:	d008      	beq.n	80227ce <vApplicationIdleHook+0x22>
	{
	    ++idle_tick;
 80227bc:	4b08      	ldr	r3, [pc, #32]	; (80227e0 <vApplicationIdleHook+0x34>)
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	3301      	adds	r3, #1
 80227c2:	4a07      	ldr	r2, [pc, #28]	; (80227e0 <vApplicationIdleHook+0x34>)
 80227c4:	6013      	str	r3, [r2, #0]
	    tick  = uwTick;
 80227c6:	4b05      	ldr	r3, [pc, #20]	; (80227dc <vApplicationIdleHook+0x30>)
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	4a03      	ldr	r2, [pc, #12]	; (80227d8 <vApplicationIdleHook+0x2c>)
 80227cc:	6013      	str	r3, [r2, #0]
	}

}
 80227ce:	bf00      	nop
 80227d0:	46bd      	mov	sp, r7
 80227d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d6:	4770      	bx	lr
 80227d8:	20000694 	.word	0x20000694
 80227dc:	20004cc8 	.word	0x20004cc8
 80227e0:	20000690 	.word	0x20000690

080227e4 <app_mainTask>:
/**
 * 主任务
 */
void app_mainTask(void * param)
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	b086      	sub	sp, #24
 80227e8:	af02      	add	r7, sp, #8
 80227ea:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        switch(device.state)
 80227ec:	4ba5      	ldr	r3, [pc, #660]	; (8022a84 <app_mainTask+0x2a0>)
 80227ee:	7e9b      	ldrb	r3, [r3, #26]
 80227f0:	2b08      	cmp	r3, #8
 80227f2:	f200 827e 	bhi.w	8022cf2 <app_mainTask+0x50e>
 80227f6:	a201      	add	r2, pc, #4	; (adr r2, 80227fc <app_mainTask+0x18>)
 80227f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80227fc:	08022821 	.word	0x08022821
 8022800:	0802285b 	.word	0x0802285b
 8022804:	0802294f 	.word	0x0802294f
 8022808:	08022963 	.word	0x08022963
 802280c:	08022d03 	.word	0x08022d03
 8022810:	080229ef 	.word	0x080229ef
 8022814:	080229f5 	.word	0x080229f5
 8022818:	08022a0d 	.word	0x08022a0d
 802281c:	08022b13 	.word	0x08022b13
        {
            case IDLE:
            {
	            led_sys.period = 1000;
 8022820:	4b99      	ldr	r3, [pc, #612]	; (8022a88 <app_mainTask+0x2a4>)
 8022822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8022826:	811a      	strh	r2, [r3, #8]

                mainTask_size = osThreadGetStackSpace(mainTaskHandle );
 8022828:	4b98      	ldr	r3, [pc, #608]	; (8022a8c <app_mainTask+0x2a8>)
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	4618      	mov	r0, r3
 802282e:	f006 fbad 	bl	8028f8c <osThreadGetStackSpace>
 8022832:	4603      	mov	r3, r0
 8022834:	4a96      	ldr	r2, [pc, #600]	; (8022a90 <app_mainTask+0x2ac>)
 8022836:	6013      	str	r3, [r2, #0]
                commuTask_size = osThreadGetStackSpace(commuTaskHandle );
 8022838:	4b96      	ldr	r3, [pc, #600]	; (8022a94 <app_mainTask+0x2b0>)
 802283a:	681b      	ldr	r3, [r3, #0]
 802283c:	4618      	mov	r0, r3
 802283e:	f006 fba5 	bl	8028f8c <osThreadGetStackSpace>
 8022842:	4603      	mov	r3, r0
 8022844:	4a94      	ldr	r2, [pc, #592]	; (8022a98 <app_mainTask+0x2b4>)
 8022846:	6013      	str	r3, [r2, #0]
                driverTask_size = osThreadGetStackSpace(driverTaskHandle );
 8022848:	4b94      	ldr	r3, [pc, #592]	; (8022a9c <app_mainTask+0x2b8>)
 802284a:	681b      	ldr	r3, [r3, #0]
 802284c:	4618      	mov	r0, r3
 802284e:	f006 fb9d 	bl	8028f8c <osThreadGetStackSpace>
 8022852:	4603      	mov	r3, r0
 8022854:	4a92      	ldr	r2, [pc, #584]	; (8022aa0 <app_mainTask+0x2bc>)
 8022856:	6013      	str	r3, [r2, #0]
            }   break;
 8022858:	e25a      	b.n	8022d10 <app_mainTask+0x52c>
            {
                static uint32_t unconfig_tick = 0; 
                static uint16_t rand_tick = 0;
                static uint16_t rand_period = 7;

                led_sys.period = 100;    
 802285a:	4b8b      	ldr	r3, [pc, #556]	; (8022a88 <app_mainTask+0x2a4>)
 802285c:	2264      	movs	r2, #100	; 0x64
 802285e:	811a      	strh	r2, [r3, #8]

                if((++unconfig_tick*APP_POLL_PERIOD)%1000==0) //1S获取一次配置
 8022860:	4b90      	ldr	r3, [pc, #576]	; (8022aa4 <app_mainTask+0x2c0>)
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	3301      	adds	r3, #1
 8022866:	4a8f      	ldr	r2, [pc, #572]	; (8022aa4 <app_mainTask+0x2c0>)
 8022868:	6013      	str	r3, [r2, #0]
 802286a:	4b8e      	ldr	r3, [pc, #568]	; (8022aa4 <app_mainTask+0x2c0>)
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	2264      	movs	r2, #100	; 0x64
 8022870:	fb02 f203 	mul.w	r2, r2, r3
 8022874:	4b8c      	ldr	r3, [pc, #560]	; (8022aa8 <app_mainTask+0x2c4>)
 8022876:	fba3 1302 	umull	r1, r3, r3, r2
 802287a:	099b      	lsrs	r3, r3, #6
 802287c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8022880:	fb01 f303 	mul.w	r3, r1, r3
 8022884:	1ad3      	subs	r3, r2, r3
 8022886:	2b00      	cmp	r3, #0
 8022888:	d109      	bne.n	802289e <app_mainTask+0xba>
                {
                    app_sendProtocolMsg(SERVER_REQ_CFG, device.macaddr, 0, 0);                  
 802288a:	4b7e      	ldr	r3, [pc, #504]	; (8022a84 <app_mainTask+0x2a0>)
 802288c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8022890:	2100      	movs	r1, #0
 8022892:	9101      	str	r1, [sp, #4]
 8022894:	2100      	movs	r1, #0
 8022896:	9100      	str	r1, [sp, #0]
 8022898:	4884      	ldr	r0, [pc, #528]	; (8022aac <app_mainTask+0x2c8>)
 802289a:	f7fe fcc5 	bl	8021228 <app_sendProtocolMsg>
                }

                if(++rand_tick%rand_period==0)
 802289e:	4b84      	ldr	r3, [pc, #528]	; (8022ab0 <app_mainTask+0x2cc>)
 80228a0:	881b      	ldrh	r3, [r3, #0]
 80228a2:	3301      	adds	r3, #1
 80228a4:	b29a      	uxth	r2, r3
 80228a6:	4b82      	ldr	r3, [pc, #520]	; (8022ab0 <app_mainTask+0x2cc>)
 80228a8:	801a      	strh	r2, [r3, #0]
 80228aa:	4b81      	ldr	r3, [pc, #516]	; (8022ab0 <app_mainTask+0x2cc>)
 80228ac:	881b      	ldrh	r3, [r3, #0]
 80228ae:	4a81      	ldr	r2, [pc, #516]	; (8022ab4 <app_mainTask+0x2d0>)
 80228b0:	8812      	ldrh	r2, [r2, #0]
 80228b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80228b6:	fb02 f201 	mul.w	r2, r2, r1
 80228ba:	1a9b      	subs	r3, r3, r2
 80228bc:	b29b      	uxth	r3, r3
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d12d      	bne.n	802291e <app_mainTask+0x13a>
                {
                    rand_tick = 0;
 80228c2:	4b7b      	ldr	r3, [pc, #492]	; (8022ab0 <app_mainTask+0x2cc>)
 80228c4:	2200      	movs	r2, #0
 80228c6:	801a      	strh	r2, [r3, #0]

                    srand(osKernelGetTickCount()+device.maccrc);
 80228c8:	f006 fa92 	bl	8028df0 <osKernelGetTickCount>
 80228cc:	4603      	mov	r3, r0
 80228ce:	4a6d      	ldr	r2, [pc, #436]	; (8022a84 <app_mainTask+0x2a0>)
 80228d0:	8b12      	ldrh	r2, [r2, #24]
 80228d2:	4413      	add	r3, r2
 80228d4:	4618      	mov	r0, r3
 80228d6:	f00a fbd9 	bl	802d08c <srand>

                    rand_period = rand()%100; //0~10S 单位100ms 随机广播
 80228da:	f00a fc05 	bl	802d0e8 <rand>
 80228de:	4603      	mov	r3, r0
 80228e0:	4a75      	ldr	r2, [pc, #468]	; (8022ab8 <app_mainTask+0x2d4>)
 80228e2:	fb82 1203 	smull	r1, r2, r2, r3
 80228e6:	1151      	asrs	r1, r2, #5
 80228e8:	17da      	asrs	r2, r3, #31
 80228ea:	1a8a      	subs	r2, r1, r2
 80228ec:	2164      	movs	r1, #100	; 0x64
 80228ee:	fb01 f202 	mul.w	r2, r1, r2
 80228f2:	1a9a      	subs	r2, r3, r2
 80228f4:	b292      	uxth	r2, r2
 80228f6:	4b6f      	ldr	r3, [pc, #444]	; (8022ab4 <app_mainTask+0x2d0>)
 80228f8:	801a      	strh	r2, [r3, #0]

                    if(rand_period==0)  //避免除0异常
 80228fa:	4b6e      	ldr	r3, [pc, #440]	; (8022ab4 <app_mainTask+0x2d0>)
 80228fc:	881b      	ldrh	r3, [r3, #0]
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d102      	bne.n	8022908 <app_mainTask+0x124>
                    {
                        rand_period = 6;
 8022902:	4b6c      	ldr	r3, [pc, #432]	; (8022ab4 <app_mainTask+0x2d0>)
 8022904:	2206      	movs	r2, #6
 8022906:	801a      	strh	r2, [r3, #0]
                    }

                    app_sendProtocolMsg(DEVICE_BIND, 0, 0, 0); 
 8022908:	2300      	movs	r3, #0
 802290a:	9301      	str	r3, [sp, #4]
 802290c:	2300      	movs	r3, #0
 802290e:	9300      	str	r3, [sp, #0]
 8022910:	f04f 0200 	mov.w	r2, #0
 8022914:	f04f 0300 	mov.w	r3, #0
 8022918:	4868      	ldr	r0, [pc, #416]	; (8022abc <app_mainTask+0x2d8>)
 802291a:	f7fe fc85 	bl	8021228 <app_sendProtocolMsg>
                }

                for(int i=0;i<8;++i)
 802291e:	2300      	movs	r3, #0
 8022920:	60fb      	str	r3, [r7, #12]
 8022922:	e010      	b.n	8022946 <app_mainTask+0x162>
                {
                	pwm2iv.write(i, (i+3)*10);
 8022924:	4b66      	ldr	r3, [pc, #408]	; (8022ac0 <app_mainTask+0x2dc>)
 8022926:	689b      	ldr	r3, [r3, #8]
 8022928:	68fa      	ldr	r2, [r7, #12]
 802292a:	b2d0      	uxtb	r0, r2
 802292c:	68fa      	ldr	r2, [r7, #12]
 802292e:	3203      	adds	r2, #3
 8022930:	b2d2      	uxtb	r2, r2
 8022932:	4611      	mov	r1, r2
 8022934:	0089      	lsls	r1, r1, #2
 8022936:	440a      	add	r2, r1
 8022938:	0052      	lsls	r2, r2, #1
 802293a:	b2d2      	uxtb	r2, r2
 802293c:	4611      	mov	r1, r2
 802293e:	4798      	blx	r3
                for(int i=0;i<8;++i)
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	3301      	adds	r3, #1
 8022944:	60fb      	str	r3, [r7, #12]
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	2b07      	cmp	r3, #7
 802294a:	ddeb      	ble.n	8022924 <app_mainTask+0x140>
                }
            }   break;
 802294c:	e1e0      	b.n	8022d10 <app_mainTask+0x52c>

            case CONFIGED:
            {
                static uint32_t configed_tick = 0; 
                
	            led_sys.period = 1000;    
 802294e:	4b4e      	ldr	r3, [pc, #312]	; (8022a88 <app_mainTask+0x2a4>)
 8022950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8022954:	811a      	strh	r2, [r3, #8]

                if((++configed_tick*APP_POLL_PERIOD)%device.uploadperiod==0) //周期上报状态
 8022956:	4b5b      	ldr	r3, [pc, #364]	; (8022ac4 <app_mainTask+0x2e0>)
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	3301      	adds	r3, #1
 802295c:	4a59      	ldr	r2, [pc, #356]	; (8022ac4 <app_mainTask+0x2e0>)
 802295e:	6013      	str	r3, [r2, #0]
                {

                }
            }   break;
 8022960:	e1d6      	b.n	8022d10 <app_mainTask+0x52c>

            case DEVIAP:
            {
                static uint32_t deviap_tick = 0; 

	            led_sys.period = 500;    
 8022962:	4b49      	ldr	r3, [pc, #292]	; (8022a88 <app_mainTask+0x2a4>)
 8022964:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8022968:	811a      	strh	r2, [r3, #8]

                if((++deviap_tick*APP_POLL_PERIOD)%1000==0) //升级 1s请求一次
 802296a:	4b57      	ldr	r3, [pc, #348]	; (8022ac8 <app_mainTask+0x2e4>)
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	3301      	adds	r3, #1
 8022970:	4a55      	ldr	r2, [pc, #340]	; (8022ac8 <app_mainTask+0x2e4>)
 8022972:	6013      	str	r3, [r2, #0]
 8022974:	4b54      	ldr	r3, [pc, #336]	; (8022ac8 <app_mainTask+0x2e4>)
 8022976:	681b      	ldr	r3, [r3, #0]
 8022978:	2264      	movs	r2, #100	; 0x64
 802297a:	fb02 f203 	mul.w	r2, r2, r3
 802297e:	4b4a      	ldr	r3, [pc, #296]	; (8022aa8 <app_mainTask+0x2c4>)
 8022980:	fba3 1302 	umull	r1, r3, r3, r2
 8022984:	099b      	lsrs	r3, r3, #6
 8022986:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802298a:	fb01 f303 	mul.w	r3, r1, r3
 802298e:	1ad3      	subs	r3, r2, r3
 8022990:	2b00      	cmp	r3, #0
 8022992:	f040 81b8 	bne.w	8022d06 <app_mainTask+0x522>
                {
                    if(++device.iap_timeout*APP_POLL_PERIOD > 300000) //如果升级超过5min则认为升级超时
 8022996:	4b3b      	ldr	r3, [pc, #236]	; (8022a84 <app_mainTask+0x2a0>)
 8022998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802299c:	3301      	adds	r3, #1
 802299e:	b29a      	uxth	r2, r3
 80229a0:	4b38      	ldr	r3, [pc, #224]	; (8022a84 <app_mainTask+0x2a0>)
 80229a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80229a6:	4b37      	ldr	r3, [pc, #220]	; (8022a84 <app_mainTask+0x2a0>)
 80229a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80229ac:	461a      	mov	r2, r3
 80229ae:	2364      	movs	r3, #100	; 0x64
 80229b0:	fb03 f302 	mul.w	r3, r3, r2
 80229b4:	4a45      	ldr	r2, [pc, #276]	; (8022acc <app_mainTask+0x2e8>)
 80229b6:	4293      	cmp	r3, r2
 80229b8:	dd0e      	ble.n	80229d8 <app_mainTask+0x1f4>
                    {
                        device.iap_timeout = 0;
 80229ba:	4b32      	ldr	r3, [pc, #200]	; (8022a84 <app_mainTask+0x2a0>)
 80229bc:	2200      	movs	r2, #0
 80229be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

                        SWITCH_STATE(CONFIGED);
 80229c2:	4b30      	ldr	r3, [pc, #192]	; (8022a84 <app_mainTask+0x2a0>)
 80229c4:	7e9a      	ldrb	r2, [r3, #26]
 80229c6:	4b2f      	ldr	r3, [pc, #188]	; (8022a84 <app_mainTask+0x2a0>)
 80229c8:	76da      	strb	r2, [r3, #27]
 80229ca:	4b2e      	ldr	r3, [pc, #184]	; (8022a84 <app_mainTask+0x2a0>)
 80229cc:	2202      	movs	r2, #2
 80229ce:	769a      	strb	r2, [r3, #26]
                        app_saveSysConfig(&device);
 80229d0:	482c      	ldr	r0, [pc, #176]	; (8022a84 <app_mainTask+0x2a0>)
 80229d2:	f7ff fb35 	bl	8022040 <app_saveSysConfig>
                    {
                        app_sendProtocolMsg(SERVER_REQ_FW, device.macaddr, 0, 0);
                    }
                }

            }   break;
 80229d6:	e196      	b.n	8022d06 <app_mainTask+0x522>
                        app_sendProtocolMsg(SERVER_REQ_FW, device.macaddr, 0, 0);
 80229d8:	4b2a      	ldr	r3, [pc, #168]	; (8022a84 <app_mainTask+0x2a0>)
 80229da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80229de:	2100      	movs	r1, #0
 80229e0:	9101      	str	r1, [sp, #4]
 80229e2:	2100      	movs	r1, #0
 80229e4:	9100      	str	r1, [sp, #0]
 80229e6:	483a      	ldr	r0, [pc, #232]	; (8022ad0 <app_mainTask+0x2ec>)
 80229e8:	f7fe fc1e 	bl	8021228 <app_sendProtocolMsg>
            }   break;
 80229ec:	e18b      	b.n	8022d06 <app_mainTask+0x522>

            }   break;

            case RESTART://复位
            {
                HAL_NVIC_SystemReset();
 80229ee:	f002 fc26 	bl	802523e <HAL_NVIC_SystemReset>
            }   break;
 80229f2:	e18d      	b.n	8022d10 <app_mainTask+0x52c>

            case RESTORE://恢复出厂
            {
                device.macaddr = 0;
 80229f4:	4923      	ldr	r1, [pc, #140]	; (8022a84 <app_mainTask+0x2a0>)
 80229f6:	f04f 0200 	mov.w	r2, #0
 80229fa:	f04f 0300 	mov.w	r3, #0
 80229fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
                app_saveSysConfig(&device);
 8022a02:	4820      	ldr	r0, [pc, #128]	; (8022a84 <app_mainTask+0x2a0>)
 8022a04:	f7ff fb1c 	bl	8022040 <app_saveSysConfig>
                NVIC_SystemReset();	
 8022a08:	f7ff feba 	bl	8022780 <__NVIC_SystemReset>
            {
                static uint32_t tips_tick = 0; 
                static uint8_t light[2] = {0, 50};
                static uint8_t index = 0;

                if((++tips_tick*APP_POLL_PERIOD)%800==0)
 8022a0c:	4b31      	ldr	r3, [pc, #196]	; (8022ad4 <app_mainTask+0x2f0>)
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	3301      	adds	r3, #1
 8022a12:	4a30      	ldr	r2, [pc, #192]	; (8022ad4 <app_mainTask+0x2f0>)
 8022a14:	6013      	str	r3, [r2, #0]
 8022a16:	4b2f      	ldr	r3, [pc, #188]	; (8022ad4 <app_mainTask+0x2f0>)
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	2264      	movs	r2, #100	; 0x64
 8022a1c:	fb02 f203 	mul.w	r2, r2, r3
 8022a20:	4b25      	ldr	r3, [pc, #148]	; (8022ab8 <app_mainTask+0x2d4>)
 8022a22:	fba3 1302 	umull	r1, r3, r3, r2
 8022a26:	0a1b      	lsrs	r3, r3, #8
 8022a28:	f44f 7148 	mov.w	r1, #800	; 0x320
 8022a2c:	fb01 f303 	mul.w	r3, r1, r3
 8022a30:	1ad3      	subs	r3, r2, r3
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	f040 8169 	bne.w	8022d0a <app_mainTask+0x526>
                {
                    for(char i=0;i<8;++i)
 8022a38:	2300      	movs	r3, #0
 8022a3a:	72fb      	strb	r3, [r7, #11]
 8022a3c:	e00d      	b.n	8022a5a <app_mainTask+0x276>
                    {
                        pwm2iv.write(i, light[index%2]);
 8022a3e:	4b20      	ldr	r3, [pc, #128]	; (8022ac0 <app_mainTask+0x2dc>)
 8022a40:	689b      	ldr	r3, [r3, #8]
 8022a42:	4a25      	ldr	r2, [pc, #148]	; (8022ad8 <app_mainTask+0x2f4>)
 8022a44:	7812      	ldrb	r2, [r2, #0]
 8022a46:	f002 0201 	and.w	r2, r2, #1
 8022a4a:	4924      	ldr	r1, [pc, #144]	; (8022adc <app_mainTask+0x2f8>)
 8022a4c:	5c89      	ldrb	r1, [r1, r2]
 8022a4e:	7afa      	ldrb	r2, [r7, #11]
 8022a50:	4610      	mov	r0, r2
 8022a52:	4798      	blx	r3
                    for(char i=0;i<8;++i)
 8022a54:	7afb      	ldrb	r3, [r7, #11]
 8022a56:	3301      	adds	r3, #1
 8022a58:	72fb      	strb	r3, [r7, #11]
 8022a5a:	7afb      	ldrb	r3, [r7, #11]
 8022a5c:	2b07      	cmp	r3, #7
 8022a5e:	d9ee      	bls.n	8022a3e <app_mainTask+0x25a>
                    }

                    if(++index>=6) //闪烁完成还原之前状态
 8022a60:	4b1d      	ldr	r3, [pc, #116]	; (8022ad8 <app_mainTask+0x2f4>)
 8022a62:	781b      	ldrb	r3, [r3, #0]
 8022a64:	3301      	adds	r3, #1
 8022a66:	b2da      	uxtb	r2, r3
 8022a68:	4b1b      	ldr	r3, [pc, #108]	; (8022ad8 <app_mainTask+0x2f4>)
 8022a6a:	701a      	strb	r2, [r3, #0]
 8022a6c:	4b1a      	ldr	r3, [pc, #104]	; (8022ad8 <app_mainTask+0x2f4>)
 8022a6e:	781b      	ldrb	r3, [r3, #0]
 8022a70:	2b05      	cmp	r3, #5
 8022a72:	f240 814a 	bls.w	8022d0a <app_mainTask+0x526>
                    {
                        index = 0;
 8022a76:	4b18      	ldr	r3, [pc, #96]	; (8022ad8 <app_mainTask+0x2f4>)
 8022a78:	2200      	movs	r2, #0
 8022a7a:	701a      	strb	r2, [r3, #0]

                        for(char i=0;i<8;++i)
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	72bb      	strb	r3, [r7, #10]
 8022a80:	e03b      	b.n	8022afa <app_mainTask+0x316>
 8022a82:	bf00      	nop
 8022a84:	20004c48 	.word	0x20004c48
 8022a88:	20000000 	.word	0x20000000
 8022a8c:	20004cb0 	.word	0x20004cb0
 8022a90:	20004cb8 	.word	0x20004cb8
 8022a94:	20004cb4 	.word	0x20004cb4
 8022a98:	20004cc0 	.word	0x20004cc0
 8022a9c:	20004cbc 	.word	0x20004cbc
 8022aa0:	20004cc4 	.word	0x20004cc4
 8022aa4:	20000698 	.word	0x20000698
 8022aa8:	10624dd3 	.word	0x10624dd3
 8022aac:	1e032001 	.word	0x1e032001
 8022ab0:	2000069c 	.word	0x2000069c
 8022ab4:	200002d8 	.word	0x200002d8
 8022ab8:	51eb851f 	.word	0x51eb851f
 8022abc:	1e001000 	.word	0x1e001000
 8022ac0:	20000680 	.word	0x20000680
 8022ac4:	200006a0 	.word	0x200006a0
 8022ac8:	200006a4 	.word	0x200006a4
 8022acc:	000493e0 	.word	0x000493e0
 8022ad0:	1e032004 	.word	0x1e032004
 8022ad4:	200006a8 	.word	0x200006a8
 8022ad8:	200006ac 	.word	0x200006ac
 8022adc:	200002dc 	.word	0x200002dc
                        {
                            pwm2iv.write(i, device.communication.msg[i]);
 8022ae0:	4b8d      	ldr	r3, [pc, #564]	; (8022d18 <app_mainTask+0x534>)
 8022ae2:	689b      	ldr	r3, [r3, #8]
 8022ae4:	7aba      	ldrb	r2, [r7, #10]
 8022ae6:	498d      	ldr	r1, [pc, #564]	; (8022d1c <app_mainTask+0x538>)
 8022ae8:	440a      	add	r2, r1
 8022aea:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
 8022aee:	7aba      	ldrb	r2, [r7, #10]
 8022af0:	4610      	mov	r0, r2
 8022af2:	4798      	blx	r3
                        for(char i=0;i<8;++i)
 8022af4:	7abb      	ldrb	r3, [r7, #10]
 8022af6:	3301      	adds	r3, #1
 8022af8:	72bb      	strb	r3, [r7, #10]
 8022afa:	7abb      	ldrb	r3, [r7, #10]
 8022afc:	2b07      	cmp	r3, #7
 8022afe:	d9ef      	bls.n	8022ae0 <app_mainTask+0x2fc>
                        }

                        SWITCH_STATE(device.old_state);                        
 8022b00:	4b86      	ldr	r3, [pc, #536]	; (8022d1c <app_mainTask+0x538>)
 8022b02:	7e9a      	ldrb	r2, [r3, #26]
 8022b04:	4b85      	ldr	r3, [pc, #532]	; (8022d1c <app_mainTask+0x538>)
 8022b06:	76da      	strb	r2, [r3, #27]
 8022b08:	4b84      	ldr	r3, [pc, #528]	; (8022d1c <app_mainTask+0x538>)
 8022b0a:	7eda      	ldrb	r2, [r3, #27]
 8022b0c:	4b83      	ldr	r3, [pc, #524]	; (8022d1c <app_mainTask+0x538>)
 8022b0e:	769a      	strb	r2, [r3, #26]
                    }
                }
            }   break;
 8022b10:	e0fb      	b.n	8022d0a <app_mainTask+0x526>
            {
                static uint16_t period = 100;

                static uint16_t test_tick = 0; 

                if(++test_tick==period)
 8022b12:	4b83      	ldr	r3, [pc, #524]	; (8022d20 <app_mainTask+0x53c>)
 8022b14:	881b      	ldrh	r3, [r3, #0]
 8022b16:	3301      	adds	r3, #1
 8022b18:	b29a      	uxth	r2, r3
 8022b1a:	4b81      	ldr	r3, [pc, #516]	; (8022d20 <app_mainTask+0x53c>)
 8022b1c:	801a      	strh	r2, [r3, #0]
 8022b1e:	4b80      	ldr	r3, [pc, #512]	; (8022d20 <app_mainTask+0x53c>)
 8022b20:	881a      	ldrh	r2, [r3, #0]
 8022b22:	4b80      	ldr	r3, [pc, #512]	; (8022d24 <app_mainTask+0x540>)
 8022b24:	881b      	ldrh	r3, [r3, #0]
 8022b26:	429a      	cmp	r2, r3
 8022b28:	d10b      	bne.n	8022b42 <app_mainTask+0x35e>
                {
                    app_sendProtocolMsg(DEVICE_BIND, 0, 0, 0);
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	9301      	str	r3, [sp, #4]
 8022b2e:	2300      	movs	r3, #0
 8022b30:	9300      	str	r3, [sp, #0]
 8022b32:	f04f 0200 	mov.w	r2, #0
 8022b36:	f04f 0300 	mov.w	r3, #0
 8022b3a:	487b      	ldr	r0, [pc, #492]	; (8022d28 <app_mainTask+0x544>)
 8022b3c:	f7fe fb74 	bl	8021228 <app_sendProtocolMsg>
                }else 
                {

                }
                
            }   break;
 8022b40:	e0e5      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022b42:	4b77      	ldr	r3, [pc, #476]	; (8022d20 <app_mainTask+0x53c>)
 8022b44:	881b      	ldrh	r3, [r3, #0]
 8022b46:	3301      	adds	r3, #1
 8022b48:	b29a      	uxth	r2, r3
 8022b4a:	4b75      	ldr	r3, [pc, #468]	; (8022d20 <app_mainTask+0x53c>)
 8022b4c:	801a      	strh	r2, [r3, #0]
 8022b4e:	4b74      	ldr	r3, [pc, #464]	; (8022d20 <app_mainTask+0x53c>)
 8022b50:	881a      	ldrh	r2, [r3, #0]
 8022b52:	4b74      	ldr	r3, [pc, #464]	; (8022d24 <app_mainTask+0x540>)
 8022b54:	881b      	ldrh	r3, [r3, #0]
 8022b56:	429a      	cmp	r2, r3
 8022b58:	d111      	bne.n	8022b7e <app_mainTask+0x39a>
                    app_sendProtocolMsg(DEVICE_JUMP, 1, 0, 0);
 8022b5a:	2300      	movs	r3, #0
 8022b5c:	9301      	str	r3, [sp, #4]
 8022b5e:	2300      	movs	r3, #0
 8022b60:	9300      	str	r3, [sp, #0]
 8022b62:	f04f 0201 	mov.w	r2, #1
 8022b66:	f04f 0300 	mov.w	r3, #0
 8022b6a:	4870      	ldr	r0, [pc, #448]	; (8022d2c <app_mainTask+0x548>)
 8022b6c:	f7fe fb5c 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022b70:	4b6c      	ldr	r3, [pc, #432]	; (8022d24 <app_mainTask+0x540>)
 8022b72:	881b      	ldrh	r3, [r3, #0]
 8022b74:	3364      	adds	r3, #100	; 0x64
 8022b76:	b29a      	uxth	r2, r3
 8022b78:	4b6a      	ldr	r3, [pc, #424]	; (8022d24 <app_mainTask+0x540>)
 8022b7a:	801a      	strh	r2, [r3, #0]
            }   break;
 8022b7c:	e0c7      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022b7e:	4b68      	ldr	r3, [pc, #416]	; (8022d20 <app_mainTask+0x53c>)
 8022b80:	881b      	ldrh	r3, [r3, #0]
 8022b82:	3301      	adds	r3, #1
 8022b84:	b29a      	uxth	r2, r3
 8022b86:	4b66      	ldr	r3, [pc, #408]	; (8022d20 <app_mainTask+0x53c>)
 8022b88:	801a      	strh	r2, [r3, #0]
 8022b8a:	4b65      	ldr	r3, [pc, #404]	; (8022d20 <app_mainTask+0x53c>)
 8022b8c:	881a      	ldrh	r2, [r3, #0]
 8022b8e:	4b65      	ldr	r3, [pc, #404]	; (8022d24 <app_mainTask+0x540>)
 8022b90:	881b      	ldrh	r3, [r3, #0]
 8022b92:	429a      	cmp	r2, r3
 8022b94:	d111      	bne.n	8022bba <app_mainTask+0x3d6>
                    app_sendProtocolMsg(DEVICE_JUMP_ACK, 1, 0, 0);
 8022b96:	2300      	movs	r3, #0
 8022b98:	9301      	str	r3, [sp, #4]
 8022b9a:	2300      	movs	r3, #0
 8022b9c:	9300      	str	r3, [sp, #0]
 8022b9e:	f04f 0201 	mov.w	r2, #1
 8022ba2:	f04f 0300 	mov.w	r3, #0
 8022ba6:	4862      	ldr	r0, [pc, #392]	; (8022d30 <app_mainTask+0x54c>)
 8022ba8:	f7fe fb3e 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022bac:	4b5d      	ldr	r3, [pc, #372]	; (8022d24 <app_mainTask+0x540>)
 8022bae:	881b      	ldrh	r3, [r3, #0]
 8022bb0:	3364      	adds	r3, #100	; 0x64
 8022bb2:	b29a      	uxth	r2, r3
 8022bb4:	4b5b      	ldr	r3, [pc, #364]	; (8022d24 <app_mainTask+0x540>)
 8022bb6:	801a      	strh	r2, [r3, #0]
            }   break;
 8022bb8:	e0a9      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022bba:	4b59      	ldr	r3, [pc, #356]	; (8022d20 <app_mainTask+0x53c>)
 8022bbc:	881b      	ldrh	r3, [r3, #0]
 8022bbe:	3301      	adds	r3, #1
 8022bc0:	b29a      	uxth	r2, r3
 8022bc2:	4b57      	ldr	r3, [pc, #348]	; (8022d20 <app_mainTask+0x53c>)
 8022bc4:	801a      	strh	r2, [r3, #0]
 8022bc6:	4b56      	ldr	r3, [pc, #344]	; (8022d20 <app_mainTask+0x53c>)
 8022bc8:	881a      	ldrh	r2, [r3, #0]
 8022bca:	4b56      	ldr	r3, [pc, #344]	; (8022d24 <app_mainTask+0x540>)
 8022bcc:	881b      	ldrh	r3, [r3, #0]
 8022bce:	429a      	cmp	r2, r3
 8022bd0:	d111      	bne.n	8022bf6 <app_mainTask+0x412>
                    app_sendProtocolMsg(DEVICE_CONTROL_ACK, 1, 0, 0);
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	9301      	str	r3, [sp, #4]
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	9300      	str	r3, [sp, #0]
 8022bda:	f04f 0201 	mov.w	r2, #1
 8022bde:	f04f 0300 	mov.w	r3, #0
 8022be2:	4854      	ldr	r0, [pc, #336]	; (8022d34 <app_mainTask+0x550>)
 8022be4:	f7fe fb20 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022be8:	4b4e      	ldr	r3, [pc, #312]	; (8022d24 <app_mainTask+0x540>)
 8022bea:	881b      	ldrh	r3, [r3, #0]
 8022bec:	3364      	adds	r3, #100	; 0x64
 8022bee:	b29a      	uxth	r2, r3
 8022bf0:	4b4c      	ldr	r3, [pc, #304]	; (8022d24 <app_mainTask+0x540>)
 8022bf2:	801a      	strh	r2, [r3, #0]
            }   break;
 8022bf4:	e08b      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022bf6:	4b4a      	ldr	r3, [pc, #296]	; (8022d20 <app_mainTask+0x53c>)
 8022bf8:	881b      	ldrh	r3, [r3, #0]
 8022bfa:	3301      	adds	r3, #1
 8022bfc:	b29a      	uxth	r2, r3
 8022bfe:	4b48      	ldr	r3, [pc, #288]	; (8022d20 <app_mainTask+0x53c>)
 8022c00:	801a      	strh	r2, [r3, #0]
 8022c02:	4b47      	ldr	r3, [pc, #284]	; (8022d20 <app_mainTask+0x53c>)
 8022c04:	881a      	ldrh	r2, [r3, #0]
 8022c06:	4b47      	ldr	r3, [pc, #284]	; (8022d24 <app_mainTask+0x540>)
 8022c08:	881b      	ldrh	r3, [r3, #0]
 8022c0a:	429a      	cmp	r2, r3
 8022c0c:	d111      	bne.n	8022c32 <app_mainTask+0x44e>
                    app_sendProtocolMsg(SERVER_REQ_CFG, 0, 0, 0);
 8022c0e:	2300      	movs	r3, #0
 8022c10:	9301      	str	r3, [sp, #4]
 8022c12:	2300      	movs	r3, #0
 8022c14:	9300      	str	r3, [sp, #0]
 8022c16:	f04f 0200 	mov.w	r2, #0
 8022c1a:	f04f 0300 	mov.w	r3, #0
 8022c1e:	4846      	ldr	r0, [pc, #280]	; (8022d38 <app_mainTask+0x554>)
 8022c20:	f7fe fb02 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022c24:	4b3f      	ldr	r3, [pc, #252]	; (8022d24 <app_mainTask+0x540>)
 8022c26:	881b      	ldrh	r3, [r3, #0]
 8022c28:	3364      	adds	r3, #100	; 0x64
 8022c2a:	b29a      	uxth	r2, r3
 8022c2c:	4b3d      	ldr	r3, [pc, #244]	; (8022d24 <app_mainTask+0x540>)
 8022c2e:	801a      	strh	r2, [r3, #0]
            }   break;
 8022c30:	e06d      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022c32:	4b3b      	ldr	r3, [pc, #236]	; (8022d20 <app_mainTask+0x53c>)
 8022c34:	881b      	ldrh	r3, [r3, #0]
 8022c36:	3301      	adds	r3, #1
 8022c38:	b29a      	uxth	r2, r3
 8022c3a:	4b39      	ldr	r3, [pc, #228]	; (8022d20 <app_mainTask+0x53c>)
 8022c3c:	801a      	strh	r2, [r3, #0]
 8022c3e:	4b38      	ldr	r3, [pc, #224]	; (8022d20 <app_mainTask+0x53c>)
 8022c40:	881a      	ldrh	r2, [r3, #0]
 8022c42:	4b38      	ldr	r3, [pc, #224]	; (8022d24 <app_mainTask+0x540>)
 8022c44:	881b      	ldrh	r3, [r3, #0]
 8022c46:	429a      	cmp	r2, r3
 8022c48:	d111      	bne.n	8022c6e <app_mainTask+0x48a>
                    app_sendProtocolMsg(SERVER_REQ_FW, 0, 0, 0);
 8022c4a:	2300      	movs	r3, #0
 8022c4c:	9301      	str	r3, [sp, #4]
 8022c4e:	2300      	movs	r3, #0
 8022c50:	9300      	str	r3, [sp, #0]
 8022c52:	f04f 0200 	mov.w	r2, #0
 8022c56:	f04f 0300 	mov.w	r3, #0
 8022c5a:	4838      	ldr	r0, [pc, #224]	; (8022d3c <app_mainTask+0x558>)
 8022c5c:	f7fe fae4 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022c60:	4b30      	ldr	r3, [pc, #192]	; (8022d24 <app_mainTask+0x540>)
 8022c62:	881b      	ldrh	r3, [r3, #0]
 8022c64:	3364      	adds	r3, #100	; 0x64
 8022c66:	b29a      	uxth	r2, r3
 8022c68:	4b2e      	ldr	r3, [pc, #184]	; (8022d24 <app_mainTask+0x540>)
 8022c6a:	801a      	strh	r2, [r3, #0]
            }   break;
 8022c6c:	e04f      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022c6e:	4b2c      	ldr	r3, [pc, #176]	; (8022d20 <app_mainTask+0x53c>)
 8022c70:	881b      	ldrh	r3, [r3, #0]
 8022c72:	3301      	adds	r3, #1
 8022c74:	b29a      	uxth	r2, r3
 8022c76:	4b2a      	ldr	r3, [pc, #168]	; (8022d20 <app_mainTask+0x53c>)
 8022c78:	801a      	strh	r2, [r3, #0]
 8022c7a:	4b29      	ldr	r3, [pc, #164]	; (8022d20 <app_mainTask+0x53c>)
 8022c7c:	881a      	ldrh	r2, [r3, #0]
 8022c7e:	4b29      	ldr	r3, [pc, #164]	; (8022d24 <app_mainTask+0x540>)
 8022c80:	881b      	ldrh	r3, [r3, #0]
 8022c82:	429a      	cmp	r2, r3
 8022c84:	d111      	bne.n	8022caa <app_mainTask+0x4c6>
                    app_sendProtocolMsg(SERVER_DOWNLOAD_CTRL_ACK, 0, 0, 0);
 8022c86:	2300      	movs	r3, #0
 8022c88:	9301      	str	r3, [sp, #4]
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	9300      	str	r3, [sp, #0]
 8022c8e:	f04f 0200 	mov.w	r2, #0
 8022c92:	f04f 0300 	mov.w	r3, #0
 8022c96:	482a      	ldr	r0, [pc, #168]	; (8022d40 <app_mainTask+0x55c>)
 8022c98:	f7fe fac6 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022c9c:	4b21      	ldr	r3, [pc, #132]	; (8022d24 <app_mainTask+0x540>)
 8022c9e:	881b      	ldrh	r3, [r3, #0]
 8022ca0:	3364      	adds	r3, #100	; 0x64
 8022ca2:	b29a      	uxth	r2, r3
 8022ca4:	4b1f      	ldr	r3, [pc, #124]	; (8022d24 <app_mainTask+0x540>)
 8022ca6:	801a      	strh	r2, [r3, #0]
            }   break;
 8022ca8:	e031      	b.n	8022d0e <app_mainTask+0x52a>
                }else if(++test_tick==period)
 8022caa:	4b1d      	ldr	r3, [pc, #116]	; (8022d20 <app_mainTask+0x53c>)
 8022cac:	881b      	ldrh	r3, [r3, #0]
 8022cae:	3301      	adds	r3, #1
 8022cb0:	b29a      	uxth	r2, r3
 8022cb2:	4b1b      	ldr	r3, [pc, #108]	; (8022d20 <app_mainTask+0x53c>)
 8022cb4:	801a      	strh	r2, [r3, #0]
 8022cb6:	4b1a      	ldr	r3, [pc, #104]	; (8022d20 <app_mainTask+0x53c>)
 8022cb8:	881a      	ldrh	r2, [r3, #0]
 8022cba:	4b1a      	ldr	r3, [pc, #104]	; (8022d24 <app_mainTask+0x540>)
 8022cbc:	881b      	ldrh	r3, [r3, #0]
 8022cbe:	429a      	cmp	r2, r3
 8022cc0:	d125      	bne.n	8022d0e <app_mainTask+0x52a>
					device.fwver.iap_ret[0] = IAP_ERR_TIMEOUT;
 8022cc2:	4b16      	ldr	r3, [pc, #88]	; (8022d1c <app_mainTask+0x538>)
 8022cc4:	2205      	movs	r2, #5
 8022cc6:	735a      	strb	r2, [r3, #13]
					device.fwver.iap_ret[1] = VERSION;
 8022cc8:	4b14      	ldr	r3, [pc, #80]	; (8022d1c <app_mainTask+0x538>)
 8022cca:	2201      	movs	r2, #1
 8022ccc:	739a      	strb	r2, [r3, #14]
    				app_sendProtocolMsg(SERVER_IAP_RET, 0, device.fwver.iap_ret, sizeof(device.fwver.iap_ret));  //回复平台表示已配置完成
 8022cce:	2302      	movs	r3, #2
 8022cd0:	9301      	str	r3, [sp, #4]
 8022cd2:	4b1c      	ldr	r3, [pc, #112]	; (8022d44 <app_mainTask+0x560>)
 8022cd4:	9300      	str	r3, [sp, #0]
 8022cd6:	f04f 0200 	mov.w	r2, #0
 8022cda:	f04f 0300 	mov.w	r3, #0
 8022cde:	481a      	ldr	r0, [pc, #104]	; (8022d48 <app_mainTask+0x564>)
 8022ce0:	f7fe faa2 	bl	8021228 <app_sendProtocolMsg>
                    period += 100;
 8022ce4:	4b0f      	ldr	r3, [pc, #60]	; (8022d24 <app_mainTask+0x540>)
 8022ce6:	881b      	ldrh	r3, [r3, #0]
 8022ce8:	3364      	adds	r3, #100	; 0x64
 8022cea:	b29a      	uxth	r2, r3
 8022cec:	4b0d      	ldr	r3, [pc, #52]	; (8022d24 <app_mainTask+0x540>)
 8022cee:	801a      	strh	r2, [r3, #0]
            }   break;
 8022cf0:	e00d      	b.n	8022d0e <app_mainTask+0x52a>

            default: //下发非法状态默认切换至运行态
            {
                SWITCH_STATE(CONFIGED);
 8022cf2:	4b0a      	ldr	r3, [pc, #40]	; (8022d1c <app_mainTask+0x538>)
 8022cf4:	7e9a      	ldrb	r2, [r3, #26]
 8022cf6:	4b09      	ldr	r3, [pc, #36]	; (8022d1c <app_mainTask+0x538>)
 8022cf8:	76da      	strb	r2, [r3, #27]
 8022cfa:	4b08      	ldr	r3, [pc, #32]	; (8022d1c <app_mainTask+0x538>)
 8022cfc:	2202      	movs	r2, #2
 8022cfe:	769a      	strb	r2, [r3, #26]
            }  break;
 8022d00:	e006      	b.n	8022d10 <app_mainTask+0x52c>
            }   break;
 8022d02:	bf00      	nop
 8022d04:	e004      	b.n	8022d10 <app_mainTask+0x52c>
            }   break;
 8022d06:	bf00      	nop
 8022d08:	e002      	b.n	8022d10 <app_mainTask+0x52c>
            }   break;
 8022d0a:	bf00      	nop
 8022d0c:	e000      	b.n	8022d10 <app_mainTask+0x52c>
            }   break;
 8022d0e:	bf00      	nop
        }

        osDelay(APP_POLL_PERIOD); //100ms执行一次     
 8022d10:	2064      	movs	r0, #100	; 0x64
 8022d12:	f006 f969 	bl	8028fe8 <osDelay>
        switch(device.state)
 8022d16:	e569      	b.n	80227ec <app_mainTask+0x8>
 8022d18:	20000680 	.word	0x20000680
 8022d1c:	20004c48 	.word	0x20004c48
 8022d20:	200006ae 	.word	0x200006ae
 8022d24:	200002de 	.word	0x200002de
 8022d28:	1e001000 	.word	0x1e001000
 8022d2c:	1e001001 	.word	0x1e001001
 8022d30:	1eff1001 	.word	0x1eff1001
 8022d34:	1eff1002 	.word	0x1eff1002
 8022d38:	1e032001 	.word	0x1e032001
 8022d3c:	1e032004 	.word	0x1e032004
 8022d40:	1e022003 	.word	0x1e022003
 8022d44:	20004c55 	.word	0x20004c55
 8022d48:	01032005 	.word	0x01032005

08022d4c <app_communicationTask>:

/**
 * 跳传通讯任务
 */
void app_communicationTask(void *argument)
{
 8022d4c:	b580      	push	{r7, lr}
 8022d4e:	b082      	sub	sp, #8
 8022d50:	af00      	add	r7, sp, #0
 8022d52:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        app_pollCommunicationEvents(&device.communication); 
 8022d54:	4803      	ldr	r0, [pc, #12]	; (8022d64 <app_communicationTask+0x18>)
 8022d56:	f7fe f813 	bl	8020d80 <app_pollCommunicationEvents>
        osDelay(COMMU_POLL_PERIOD);  //10ms执行一次     
 8022d5a:	200a      	movs	r0, #10
 8022d5c:	f006 f944 	bl	8028fe8 <osDelay>
        app_pollCommunicationEvents(&device.communication); 
 8022d60:	e7f8      	b.n	8022d54 <app_communicationTask+0x8>
 8022d62:	bf00      	nop
 8022d64:	20004c86 	.word	0x20004c86

08022d68 <app_driverTask>:

/**
 * 驱动任务
 */
void app_driverTask(void *argument)
{
 8022d68:	b580      	push	{r7, lr}
 8022d6a:	b082      	sub	sp, #8
 8022d6c:	af00      	add	r7, sp, #0
 8022d6e:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        drv_pollSCat1Events(&cat1);
 8022d70:	480e      	ldr	r0, [pc, #56]	; (8022dac <app_driverTask+0x44>)
 8022d72:	f001 f853 	bl	8023e1c <drv_pollSCat1Events>
        drv_pollLoRaEvents(&lora1);
 8022d76:	480e      	ldr	r0, [pc, #56]	; (8022db0 <app_driverTask+0x48>)
 8022d78:	f002 f864 	bl	8024e44 <drv_pollLoRaEvents>
        drv_pollRS485Events(&rs4851);
 8022d7c:	480d      	ldr	r0, [pc, #52]	; (8022db4 <app_driverTask+0x4c>)
 8022d7e:	f000 ff0d 	bl	8023b9c <drv_pollRS485Events>
        drv_pollRS485Events(&rs4852);
 8022d82:	480d      	ldr	r0, [pc, #52]	; (8022db8 <app_driverTask+0x50>)
 8022d84:	f000 ff0a 	bl	8023b9c <drv_pollRS485Events>
        drv_pollBLEEvents(&ble);
 8022d88:	480c      	ldr	r0, [pc, #48]	; (8022dbc <app_driverTask+0x54>)
 8022d8a:	f000 ff5d 	bl	8023c48 <drv_pollBLEEvents>
        drv_pollLEDEvent(&led_sys);
 8022d8e:	480c      	ldr	r0, [pc, #48]	; (8022dc0 <app_driverTask+0x58>)
 8022d90:	f001 fc54 	bl	802463c <drv_pollLEDEvent>
        drv_pollLEDEvent(&led_net);
 8022d94:	480b      	ldr	r0, [pc, #44]	; (8022dc4 <app_driverTask+0x5c>)
 8022d96:	f001 fc51 	bl	802463c <drv_pollLEDEvent>
        drv_pollLEDEvent(&led_data);
 8022d9a:	480b      	ldr	r0, [pc, #44]	; (8022dc8 <app_driverTask+0x60>)
 8022d9c:	f001 fc4e 	bl	802463c <drv_pollLEDEvent>
        hal_feedWdg();
 8022da0:	f005 ffaa 	bl	8028cf8 <hal_feedWdg>

        osDelay(DRV_POLL_PERIOD);  //10ms执行一次       
 8022da4:	200a      	movs	r0, #10
 8022da6:	f006 f91f 	bl	8028fe8 <osDelay>
        drv_pollSCat1Events(&cat1);
 8022daa:	e7e1      	b.n	8022d70 <app_driverTask+0x8>
 8022dac:	20000270 	.word	0x20000270
 8022db0:	20000078 	.word	0x20000078
 8022db4:	2000003c 	.word	0x2000003c
 8022db8:	20000058 	.word	0x20000058
 8022dbc:	200002a8 	.word	0x200002a8
 8022dc0:	20000000 	.word	0x20000000
 8022dc4:	20000014 	.word	0x20000014
 8022dc8:	20000028 	.word	0x20000028

08022dcc <app_createAllTask>:

/**
 * 创建所有任务
 */
void app_createAllTask(void)
{
 8022dcc:	b580      	push	{r7, lr}
 8022dce:	af00      	add	r7, sp, #0
    mainTaskHandle = osThreadNew(app_mainTask, NULL, &mainTask_attributes);             //优先级别高 轮询周期100ms
 8022dd0:	4a0c      	ldr	r2, [pc, #48]	; (8022e04 <app_createAllTask+0x38>)
 8022dd2:	2100      	movs	r1, #0
 8022dd4:	480c      	ldr	r0, [pc, #48]	; (8022e08 <app_createAllTask+0x3c>)
 8022dd6:	f006 f833 	bl	8028e40 <osThreadNew>
 8022dda:	4603      	mov	r3, r0
 8022ddc:	4a0b      	ldr	r2, [pc, #44]	; (8022e0c <app_createAllTask+0x40>)
 8022dde:	6013      	str	r3, [r2, #0]
    commuTaskHandle = osThreadNew(app_communicationTask, NULL, &commuTask_attributes);  //优先级别中 轮询周期10ms
 8022de0:	4a0b      	ldr	r2, [pc, #44]	; (8022e10 <app_createAllTask+0x44>)
 8022de2:	2100      	movs	r1, #0
 8022de4:	480b      	ldr	r0, [pc, #44]	; (8022e14 <app_createAllTask+0x48>)
 8022de6:	f006 f82b 	bl	8028e40 <osThreadNew>
 8022dea:	4603      	mov	r3, r0
 8022dec:	4a0a      	ldr	r2, [pc, #40]	; (8022e18 <app_createAllTask+0x4c>)
 8022dee:	6013      	str	r3, [r2, #0]
    driverTaskHandle = osThreadNew(app_driverTask, NULL, &driverTask_attributes);       //优先级别低 轮询周期10ms
 8022df0:	4a0a      	ldr	r2, [pc, #40]	; (8022e1c <app_createAllTask+0x50>)
 8022df2:	2100      	movs	r1, #0
 8022df4:	480a      	ldr	r0, [pc, #40]	; (8022e20 <app_createAllTask+0x54>)
 8022df6:	f006 f823 	bl	8028e40 <osThreadNew>
 8022dfa:	4603      	mov	r3, r0
 8022dfc:	4a09      	ldr	r2, [pc, #36]	; (8022e24 <app_createAllTask+0x58>)
 8022dfe:	6013      	str	r3, [r2, #0]
}
 8022e00:	bf00      	nop
 8022e02:	bd80      	pop	{r7, pc}
 8022e04:	0802e5a4 	.word	0x0802e5a4
 8022e08:	080227e5 	.word	0x080227e5
 8022e0c:	20004cb0 	.word	0x20004cb0
 8022e10:	0802e5c8 	.word	0x0802e5c8
 8022e14:	08022d4d 	.word	0x08022d4d
 8022e18:	20004cb4 	.word	0x20004cb4
 8022e1c:	0802e5ec 	.word	0x0802e5ec
 8022e20:	08022d69 	.word	0x08022d69
 8022e24:	20004cbc 	.word	0x20004cbc

08022e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8022e28:	b580      	push	{r7, lr}
 8022e2a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8022e2c:	f002 f83e 	bl	8024eac <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8022e30:	f000 f80c 	bl	8022e4c <SystemClock_Config>

  app_initDevice(&device);
 8022e34:	4804      	ldr	r0, [pc, #16]	; (8022e48 <main+0x20>)
 8022e36:	f7ff f91f 	bl	8022078 <app_initDevice>

  /* Init scheduler */
  osKernelInitialize();
 8022e3a:	f005 ff6f 	bl	8028d1c <osKernelInitialize>

  app_createAllTask();
 8022e3e:	f7ff ffc5 	bl	8022dcc <app_createAllTask>

  /* Start scheduler */
  osKernelStart();
 8022e42:	f005 ff9f 	bl	8028d84 <osKernelStart>

  while (1)
 8022e46:	e7fe      	b.n	8022e46 <main+0x1e>
 8022e48:	20004c48 	.word	0x20004c48

08022e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b098      	sub	sp, #96	; 0x60
 8022e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8022e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022e56:	2230      	movs	r2, #48	; 0x30
 8022e58:	2100      	movs	r1, #0
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	f00a f90e 	bl	802d07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8022e60:	f107 031c 	add.w	r3, r7, #28
 8022e64:	2200      	movs	r2, #0
 8022e66:	601a      	str	r2, [r3, #0]
 8022e68:	605a      	str	r2, [r3, #4]
 8022e6a:	609a      	str	r2, [r3, #8]
 8022e6c:	60da      	str	r2, [r3, #12]
 8022e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022e70:	f107 030c 	add.w	r3, r7, #12
 8022e74:	2200      	movs	r2, #0
 8022e76:	601a      	str	r2, [r3, #0]
 8022e78:	605a      	str	r2, [r3, #4]
 8022e7a:	609a      	str	r2, [r3, #8]
 8022e7c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8022e7e:	2300      	movs	r3, #0
 8022e80:	60bb      	str	r3, [r7, #8]
 8022e82:	4b31      	ldr	r3, [pc, #196]	; (8022f48 <SystemClock_Config+0xfc>)
 8022e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e86:	4a30      	ldr	r2, [pc, #192]	; (8022f48 <SystemClock_Config+0xfc>)
 8022e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8022e8e:	4b2e      	ldr	r3, [pc, #184]	; (8022f48 <SystemClock_Config+0xfc>)
 8022e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022e96:	60bb      	str	r3, [r7, #8]
 8022e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	607b      	str	r3, [r7, #4]
 8022e9e:	4b2b      	ldr	r3, [pc, #172]	; (8022f4c <SystemClock_Config+0x100>)
 8022ea0:	681b      	ldr	r3, [r3, #0]
 8022ea2:	4a2a      	ldr	r2, [pc, #168]	; (8022f4c <SystemClock_Config+0x100>)
 8022ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022ea8:	6013      	str	r3, [r2, #0]
 8022eaa:	4b28      	ldr	r3, [pc, #160]	; (8022f4c <SystemClock_Config+0x100>)
 8022eac:	681b      	ldr	r3, [r3, #0]
 8022eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022eb2:	607b      	str	r3, [r7, #4]
 8022eb4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8022eb6:	2305      	movs	r3, #5
 8022eb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8022eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022ebe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8022ec0:	2301      	movs	r3, #1
 8022ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8022ec4:	2302      	movs	r3, #2
 8022ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8022ec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8022ece:	2304      	movs	r3, #4
 8022ed0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8022ed2:	23a8      	movs	r3, #168	; 0xa8
 8022ed4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8022ed6:	2302      	movs	r3, #2
 8022ed8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8022eda:	2304      	movs	r3, #4
 8022edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8022ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022ee2:	4618      	mov	r0, r3
 8022ee4:	f002 feaa 	bl	8025c3c <HAL_RCC_OscConfig>
 8022ee8:	4603      	mov	r3, r0
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d001      	beq.n	8022ef2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8022eee:	f000 f82f 	bl	8022f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8022ef2:	230f      	movs	r3, #15
 8022ef4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8022ef6:	2302      	movs	r3, #2
 8022ef8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8022efa:	2300      	movs	r3, #0
 8022efc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8022efe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022f02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8022f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022f08:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8022f0a:	f107 031c 	add.w	r3, r7, #28
 8022f0e:	2105      	movs	r1, #5
 8022f10:	4618      	mov	r0, r3
 8022f12:	f003 f903 	bl	802611c <HAL_RCC_ClockConfig>
 8022f16:	4603      	mov	r3, r0
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d001      	beq.n	8022f20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8022f1c:	f000 f818 	bl	8022f50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8022f20:	2302      	movs	r3, #2
 8022f22:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8022f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022f28:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8022f2a:	f107 030c 	add.w	r3, r7, #12
 8022f2e:	4618      	mov	r0, r3
 8022f30:	f003 faf0 	bl	8026514 <HAL_RCCEx_PeriphCLKConfig>
 8022f34:	4603      	mov	r3, r0
 8022f36:	2b00      	cmp	r3, #0
 8022f38:	d001      	beq.n	8022f3e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8022f3a:	f000 f809 	bl	8022f50 <Error_Handler>
  }

//  SystemCoreClockUpdate();
}
 8022f3e:	bf00      	nop
 8022f40:	3760      	adds	r7, #96	; 0x60
 8022f42:	46bd      	mov	sp, r7
 8022f44:	bd80      	pop	{r7, pc}
 8022f46:	bf00      	nop
 8022f48:	40023800 	.word	0x40023800
 8022f4c:	40007000 	.word	0x40007000

08022f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8022f50:	b480      	push	{r7}
 8022f52:	af00      	add	r7, sp, #0

}
 8022f54:	bf00      	nop
 8022f56:	46bd      	mov	sp, r7
 8022f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f5c:	4770      	bx	lr
	...

08022f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8022f60:	b480      	push	{r7}
 8022f62:	b083      	sub	sp, #12
 8022f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022f66:	2300      	movs	r3, #0
 8022f68:	607b      	str	r3, [r7, #4]
 8022f6a:	4b10      	ldr	r3, [pc, #64]	; (8022fac <HAL_MspInit+0x4c>)
 8022f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022f6e:	4a0f      	ldr	r2, [pc, #60]	; (8022fac <HAL_MspInit+0x4c>)
 8022f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022f74:	6453      	str	r3, [r2, #68]	; 0x44
 8022f76:	4b0d      	ldr	r3, [pc, #52]	; (8022fac <HAL_MspInit+0x4c>)
 8022f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022f7e:	607b      	str	r3, [r7, #4]
 8022f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8022f82:	2300      	movs	r3, #0
 8022f84:	603b      	str	r3, [r7, #0]
 8022f86:	4b09      	ldr	r3, [pc, #36]	; (8022fac <HAL_MspInit+0x4c>)
 8022f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f8a:	4a08      	ldr	r2, [pc, #32]	; (8022fac <HAL_MspInit+0x4c>)
 8022f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022f90:	6413      	str	r3, [r2, #64]	; 0x40
 8022f92:	4b06      	ldr	r3, [pc, #24]	; (8022fac <HAL_MspInit+0x4c>)
 8022f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022f9a:	603b      	str	r3, [r7, #0]
 8022f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8022f9e:	bf00      	nop
 8022fa0:	370c      	adds	r7, #12
 8022fa2:	46bd      	mov	sp, r7
 8022fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fa8:	4770      	bx	lr
 8022faa:	bf00      	nop
 8022fac:	40023800 	.word	0x40023800

08022fb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim)
{
 8022fb0:	b480      	push	{r7}
 8022fb2:	b087      	sub	sp, #28
 8022fb4:	af00      	add	r7, sp, #0
 8022fb6:	6078      	str	r0, [r7, #4]
  if(htim->Instance==TIM1)
 8022fb8:	687b      	ldr	r3, [r7, #4]
 8022fba:	681b      	ldr	r3, [r3, #0]
 8022fbc:	4a1f      	ldr	r2, [pc, #124]	; (802303c <HAL_TIM_PWM_MspInit+0x8c>)
 8022fbe:	4293      	cmp	r3, r2
 8022fc0:	d10e      	bne.n	8022fe0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8022fc2:	2300      	movs	r3, #0
 8022fc4:	617b      	str	r3, [r7, #20]
 8022fc6:	4b1e      	ldr	r3, [pc, #120]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8022fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fca:	4a1d      	ldr	r2, [pc, #116]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8022fcc:	f043 0301 	orr.w	r3, r3, #1
 8022fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8022fd2:	4b1b      	ldr	r3, [pc, #108]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8022fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fd6:	f003 0301 	and.w	r3, r3, #1
 8022fda:	617b      	str	r3, [r7, #20]
 8022fdc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8022fde:	e026      	b.n	802302e <HAL_TIM_PWM_MspInit+0x7e>
  }else  if(htim->Instance==TIM2)
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	681b      	ldr	r3, [r3, #0]
 8022fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022fe8:	d10e      	bne.n	8023008 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8022fea:	2300      	movs	r3, #0
 8022fec:	613b      	str	r3, [r7, #16]
 8022fee:	4b14      	ldr	r3, [pc, #80]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8022ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ff2:	4a13      	ldr	r2, [pc, #76]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8022ff4:	f043 0301 	orr.w	r3, r3, #1
 8022ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8022ffa:	4b11      	ldr	r3, [pc, #68]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8022ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ffe:	f003 0301 	and.w	r3, r3, #1
 8023002:	613b      	str	r3, [r7, #16]
 8023004:	693b      	ldr	r3, [r7, #16]
}
 8023006:	e012      	b.n	802302e <HAL_TIM_PWM_MspInit+0x7e>
  }else  if(htim->Instance==TIM4)
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	681b      	ldr	r3, [r3, #0]
 802300c:	4a0d      	ldr	r2, [pc, #52]	; (8023044 <HAL_TIM_PWM_MspInit+0x94>)
 802300e:	4293      	cmp	r3, r2
 8023010:	d10d      	bne.n	802302e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8023012:	2300      	movs	r3, #0
 8023014:	60fb      	str	r3, [r7, #12]
 8023016:	4b0a      	ldr	r3, [pc, #40]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8023018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802301a:	4a09      	ldr	r2, [pc, #36]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 802301c:	f043 0304 	orr.w	r3, r3, #4
 8023020:	6413      	str	r3, [r2, #64]	; 0x40
 8023022:	4b07      	ldr	r3, [pc, #28]	; (8023040 <HAL_TIM_PWM_MspInit+0x90>)
 8023024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023026:	f003 0304 	and.w	r3, r3, #4
 802302a:	60fb      	str	r3, [r7, #12]
 802302c:	68fb      	ldr	r3, [r7, #12]
}
 802302e:	bf00      	nop
 8023030:	371c      	adds	r7, #28
 8023032:	46bd      	mov	sp, r7
 8023034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023038:	4770      	bx	lr
 802303a:	bf00      	nop
 802303c:	40010000 	.word	0x40010000
 8023040:	40023800 	.word	0x40023800
 8023044:	40000800 	.word	0x40000800

08023048 <HAL_TIM_PWM_IO_MspInit>:

void HAL_TIM_PWM_IO_MspInit(TIM_HandleTypeDef* htim)
{
 8023048:	b580      	push	{r7, lr}
 802304a:	b08a      	sub	sp, #40	; 0x28
 802304c:	af00      	add	r7, sp, #0
 802304e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023050:	f107 0314 	add.w	r3, r7, #20
 8023054:	2200      	movs	r2, #0
 8023056:	601a      	str	r2, [r3, #0]
 8023058:	605a      	str	r2, [r3, #4]
 802305a:	609a      	str	r2, [r3, #8]
 802305c:	60da      	str	r2, [r3, #12]
 802305e:	611a      	str	r2, [r3, #16]

	if(htim->Instance==TIM1)
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	681b      	ldr	r3, [r3, #0]
 8023064:	4a37      	ldr	r2, [pc, #220]	; (8023144 <HAL_TIM_PWM_IO_MspInit+0xfc>)
 8023066:	4293      	cmp	r3, r2
 8023068:	d11f      	bne.n	80230aa <HAL_TIM_PWM_IO_MspInit+0x62>
	{
	    __HAL_RCC_GPIOE_CLK_ENABLE();
 802306a:	2300      	movs	r3, #0
 802306c:	613b      	str	r3, [r7, #16]
 802306e:	4b36      	ldr	r3, [pc, #216]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 8023070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023072:	4a35      	ldr	r2, [pc, #212]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 8023074:	f043 0310 	orr.w	r3, r3, #16
 8023078:	6313      	str	r3, [r2, #48]	; 0x30
 802307a:	4b33      	ldr	r3, [pc, #204]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 802307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802307e:	f003 0310 	and.w	r3, r3, #16
 8023082:	613b      	str	r3, [r7, #16]
 8023084:	693b      	ldr	r3, [r7, #16]
	    /**TIM1 GPIO Configuration
	    PE13     ------> TIM1_CH3
	    PE14     ------> TIM1_CH4
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8023086:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 802308a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802308c:	2302      	movs	r3, #2
 802308e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8023090:	2302      	movs	r3, #2
 8023092:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8023094:	2302      	movs	r3, #2
 8023096:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8023098:	2301      	movs	r3, #1
 802309a:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802309c:	f107 0314 	add.w	r3, r7, #20
 80230a0:	4619      	mov	r1, r3
 80230a2:	482a      	ldr	r0, [pc, #168]	; (802314c <HAL_TIM_PWM_IO_MspInit+0x104>)
 80230a4:	f002 fbb4 	bl	8025810 <HAL_GPIO_Init>
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}else
	{

	}
}
 80230a8:	e047      	b.n	802313a <HAL_TIM_PWM_IO_MspInit+0xf2>
	}else if(htim->Instance==TIM2)
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80230b2:	d11e      	bne.n	80230f2 <HAL_TIM_PWM_IO_MspInit+0xaa>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80230b4:	2300      	movs	r3, #0
 80230b6:	60fb      	str	r3, [r7, #12]
 80230b8:	4b23      	ldr	r3, [pc, #140]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 80230ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230bc:	4a22      	ldr	r2, [pc, #136]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 80230be:	f043 0302 	orr.w	r3, r3, #2
 80230c2:	6313      	str	r3, [r2, #48]	; 0x30
 80230c4:	4b20      	ldr	r3, [pc, #128]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 80230c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230c8:	f003 0302 	and.w	r3, r3, #2
 80230cc:	60fb      	str	r3, [r7, #12]
 80230ce:	68fb      	ldr	r3, [r7, #12]
	    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80230d0:	2308      	movs	r3, #8
 80230d2:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80230d4:	2302      	movs	r3, #2
 80230d6:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80230d8:	2302      	movs	r3, #2
 80230da:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80230dc:	2302      	movs	r3, #2
 80230de:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80230e0:	2301      	movs	r3, #1
 80230e2:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80230e4:	f107 0314 	add.w	r3, r7, #20
 80230e8:	4619      	mov	r1, r3
 80230ea:	4819      	ldr	r0, [pc, #100]	; (8023150 <HAL_TIM_PWM_IO_MspInit+0x108>)
 80230ec:	f002 fb90 	bl	8025810 <HAL_GPIO_Init>
}
 80230f0:	e023      	b.n	802313a <HAL_TIM_PWM_IO_MspInit+0xf2>
	}else if(htim->Instance==TIM4)
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	681b      	ldr	r3, [r3, #0]
 80230f6:	4a17      	ldr	r2, [pc, #92]	; (8023154 <HAL_TIM_PWM_IO_MspInit+0x10c>)
 80230f8:	4293      	cmp	r3, r2
 80230fa:	d11e      	bne.n	802313a <HAL_TIM_PWM_IO_MspInit+0xf2>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80230fc:	2300      	movs	r3, #0
 80230fe:	60bb      	str	r3, [r7, #8]
 8023100:	4b11      	ldr	r3, [pc, #68]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 8023102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023104:	4a10      	ldr	r2, [pc, #64]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 8023106:	f043 0302 	orr.w	r3, r3, #2
 802310a:	6313      	str	r3, [r2, #48]	; 0x30
 802310c:	4b0e      	ldr	r3, [pc, #56]	; (8023148 <HAL_TIM_PWM_IO_MspInit+0x100>)
 802310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023110:	f003 0302 	and.w	r3, r3, #2
 8023114:	60bb      	str	r3, [r7, #8]
 8023116:	68bb      	ldr	r3, [r7, #8]
	    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8023118:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 802311c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802311e:	2302      	movs	r3, #2
 8023120:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8023122:	2302      	movs	r3, #2
 8023124:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8023126:	2302      	movs	r3, #2
 8023128:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 802312a:	2302      	movs	r3, #2
 802312c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802312e:	f107 0314 	add.w	r3, r7, #20
 8023132:	4619      	mov	r1, r3
 8023134:	4806      	ldr	r0, [pc, #24]	; (8023150 <HAL_TIM_PWM_IO_MspInit+0x108>)
 8023136:	f002 fb6b 	bl	8025810 <HAL_GPIO_Init>
}
 802313a:	bf00      	nop
 802313c:	3728      	adds	r7, #40	; 0x28
 802313e:	46bd      	mov	sp, r7
 8023140:	bd80      	pop	{r7, pc}
 8023142:	bf00      	nop
 8023144:	40010000 	.word	0x40010000
 8023148:	40023800 	.word	0x40023800
 802314c:	40021000 	.word	0x40021000
 8023150:	40020400 	.word	0x40020400
 8023154:	40000800 	.word	0x40000800

08023158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8023158:	b580      	push	{r7, lr}
 802315a:	b08e      	sub	sp, #56	; 0x38
 802315c:	af00      	add	r7, sp, #0
 802315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023164:	2200      	movs	r2, #0
 8023166:	601a      	str	r2, [r3, #0]
 8023168:	605a      	str	r2, [r3, #4]
 802316a:	609a      	str	r2, [r3, #8]
 802316c:	60da      	str	r2, [r3, #12]
 802316e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	681b      	ldr	r3, [r3, #0]
 8023174:	4a50      	ldr	r2, [pc, #320]	; (80232b8 <HAL_SPI_MspInit+0x160>)
 8023176:	4293      	cmp	r3, r2
 8023178:	d14a      	bne.n	8023210 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802317a:	2300      	movs	r3, #0
 802317c:	623b      	str	r3, [r7, #32]
 802317e:	4b4f      	ldr	r3, [pc, #316]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023182:	4a4e      	ldr	r2, [pc, #312]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8023188:	6453      	str	r3, [r2, #68]	; 0x44
 802318a:	4b4c      	ldr	r3, [pc, #304]	; (80232bc <HAL_SPI_MspInit+0x164>)
 802318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802318e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023192:	623b      	str	r3, [r7, #32]
 8023194:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023196:	2300      	movs	r3, #0
 8023198:	61fb      	str	r3, [r7, #28]
 802319a:	4b48      	ldr	r3, [pc, #288]	; (80232bc <HAL_SPI_MspInit+0x164>)
 802319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802319e:	4a47      	ldr	r2, [pc, #284]	; (80232bc <HAL_SPI_MspInit+0x164>)
 80231a0:	f043 0301 	orr.w	r3, r3, #1
 80231a4:	6313      	str	r3, [r2, #48]	; 0x30
 80231a6:	4b45      	ldr	r3, [pc, #276]	; (80232bc <HAL_SPI_MspInit+0x164>)
 80231a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231aa:	f003 0301 	and.w	r3, r3, #1
 80231ae:	61fb      	str	r3, [r7, #28]
 80231b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80231b2:	2300      	movs	r3, #0
 80231b4:	61bb      	str	r3, [r7, #24]
 80231b6:	4b41      	ldr	r3, [pc, #260]	; (80232bc <HAL_SPI_MspInit+0x164>)
 80231b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231ba:	4a40      	ldr	r2, [pc, #256]	; (80232bc <HAL_SPI_MspInit+0x164>)
 80231bc:	f043 0302 	orr.w	r3, r3, #2
 80231c0:	6313      	str	r3, [r2, #48]	; 0x30
 80231c2:	4b3e      	ldr	r3, [pc, #248]	; (80232bc <HAL_SPI_MspInit+0x164>)
 80231c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231c6:	f003 0302 	and.w	r3, r3, #2
 80231ca:	61bb      	str	r3, [r7, #24]
 80231cc:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80231ce:	2360      	movs	r3, #96	; 0x60
 80231d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80231d2:	2302      	movs	r3, #2
 80231d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80231d6:	2300      	movs	r3, #0
 80231d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80231da:	2303      	movs	r3, #3
 80231dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80231de:	2305      	movs	r3, #5
 80231e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80231e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80231e6:	4619      	mov	r1, r3
 80231e8:	4835      	ldr	r0, [pc, #212]	; (80232c0 <HAL_SPI_MspInit+0x168>)
 80231ea:	f002 fb11 	bl	8025810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80231ee:	2320      	movs	r3, #32
 80231f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80231f2:	2302      	movs	r3, #2
 80231f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80231f6:	2300      	movs	r3, #0
 80231f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80231fa:	2303      	movs	r3, #3
 80231fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80231fe:	2305      	movs	r3, #5
 8023200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023206:	4619      	mov	r1, r3
 8023208:	482e      	ldr	r0, [pc, #184]	; (80232c4 <HAL_SPI_MspInit+0x16c>)
 802320a:	f002 fb01 	bl	8025810 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 802320e:	e04f      	b.n	80232b0 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	4a2c      	ldr	r2, [pc, #176]	; (80232c8 <HAL_SPI_MspInit+0x170>)
 8023216:	4293      	cmp	r3, r2
 8023218:	d14a      	bne.n	80232b0 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 802321a:	2300      	movs	r3, #0
 802321c:	617b      	str	r3, [r7, #20]
 802321e:	4b27      	ldr	r3, [pc, #156]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023222:	4a26      	ldr	r2, [pc, #152]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023228:	6413      	str	r3, [r2, #64]	; 0x40
 802322a:	4b24      	ldr	r3, [pc, #144]	; (80232bc <HAL_SPI_MspInit+0x164>)
 802322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802322e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023232:	617b      	str	r3, [r7, #20]
 8023234:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023236:	2300      	movs	r3, #0
 8023238:	613b      	str	r3, [r7, #16]
 802323a:	4b20      	ldr	r3, [pc, #128]	; (80232bc <HAL_SPI_MspInit+0x164>)
 802323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802323e:	4a1f      	ldr	r2, [pc, #124]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023240:	f043 0304 	orr.w	r3, r3, #4
 8023244:	6313      	str	r3, [r2, #48]	; 0x30
 8023246:	4b1d      	ldr	r3, [pc, #116]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802324a:	f003 0304 	and.w	r3, r3, #4
 802324e:	613b      	str	r3, [r7, #16]
 8023250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023252:	2300      	movs	r3, #0
 8023254:	60fb      	str	r3, [r7, #12]
 8023256:	4b19      	ldr	r3, [pc, #100]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802325a:	4a18      	ldr	r2, [pc, #96]	; (80232bc <HAL_SPI_MspInit+0x164>)
 802325c:	f043 0302 	orr.w	r3, r3, #2
 8023260:	6313      	str	r3, [r2, #48]	; 0x30
 8023262:	4b16      	ldr	r3, [pc, #88]	; (80232bc <HAL_SPI_MspInit+0x164>)
 8023264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023266:	f003 0302 	and.w	r3, r3, #2
 802326a:	60fb      	str	r3, [r7, #12]
 802326c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802326e:	230c      	movs	r3, #12
 8023270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023272:	2302      	movs	r3, #2
 8023274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023276:	2300      	movs	r3, #0
 8023278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802327a:	2303      	movs	r3, #3
 802327c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 802327e:	2305      	movs	r3, #5
 8023280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023286:	4619      	mov	r1, r3
 8023288:	4810      	ldr	r0, [pc, #64]	; (80232cc <HAL_SPI_MspInit+0x174>)
 802328a:	f002 fac1 	bl	8025810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 802328e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023294:	2302      	movs	r3, #2
 8023296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023298:	2300      	movs	r3, #0
 802329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802329c:	2303      	movs	r3, #3
 802329e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80232a0:	2305      	movs	r3, #5
 80232a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80232a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80232a8:	4619      	mov	r1, r3
 80232aa:	4806      	ldr	r0, [pc, #24]	; (80232c4 <HAL_SPI_MspInit+0x16c>)
 80232ac:	f002 fab0 	bl	8025810 <HAL_GPIO_Init>
}
 80232b0:	bf00      	nop
 80232b2:	3738      	adds	r7, #56	; 0x38
 80232b4:	46bd      	mov	sp, r7
 80232b6:	bd80      	pop	{r7, pc}
 80232b8:	40013000 	.word	0x40013000
 80232bc:	40023800 	.word	0x40023800
 80232c0:	40020000 	.word	0x40020000
 80232c4:	40020400 	.word	0x40020400
 80232c8:	40003800 	.word	0x40003800
 80232cc:	40020800 	.word	0x40020800

080232d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80232d0:	b580      	push	{r7, lr}
 80232d2:	b092      	sub	sp, #72	; 0x48
 80232d4:	af00      	add	r7, sp, #0
 80232d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80232d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80232dc:	2200      	movs	r2, #0
 80232de:	601a      	str	r2, [r3, #0]
 80232e0:	605a      	str	r2, [r3, #4]
 80232e2:	609a      	str	r2, [r3, #8]
 80232e4:	60da      	str	r2, [r3, #12]
 80232e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4) //485 2
 80232e8:	687b      	ldr	r3, [r7, #4]
 80232ea:	681b      	ldr	r3, [r3, #0]
 80232ec:	4a92      	ldr	r2, [pc, #584]	; (8023538 <HAL_UART_MspInit+0x268>)
 80232ee:	4293      	cmp	r3, r2
 80232f0:	d135      	bne.n	802335e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80232f2:	2300      	movs	r3, #0
 80232f4:	633b      	str	r3, [r7, #48]	; 0x30
 80232f6:	4b91      	ldr	r3, [pc, #580]	; (802353c <HAL_UART_MspInit+0x26c>)
 80232f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232fa:	4a90      	ldr	r2, [pc, #576]	; (802353c <HAL_UART_MspInit+0x26c>)
 80232fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8023300:	6413      	str	r3, [r2, #64]	; 0x40
 8023302:	4b8e      	ldr	r3, [pc, #568]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802330a:	633b      	str	r3, [r7, #48]	; 0x30
 802330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802330e:	2300      	movs	r3, #0
 8023310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023312:	4b8a      	ldr	r3, [pc, #552]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023316:	4a89      	ldr	r2, [pc, #548]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023318:	f043 0304 	orr.w	r3, r3, #4
 802331c:	6313      	str	r3, [r2, #48]	; 0x30
 802331e:	4b87      	ldr	r3, [pc, #540]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023322:	f003 0304 	and.w	r3, r3, #4
 8023326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802332a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802332e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023330:	2302      	movs	r3, #2
 8023332:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023334:	2301      	movs	r3, #1
 8023336:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023338:	2303      	movs	r3, #3
 802333a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802333c:	2308      	movs	r3, #8
 802333e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023344:	4619      	mov	r1, r3
 8023346:	487e      	ldr	r0, [pc, #504]	; (8023540 <HAL_UART_MspInit+0x270>)
 8023348:	f002 fa62 	bl	8025810 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */
    HAL_NVIC_SetPriority(UART4_IRQn, 3, 0);
 802334c:	2200      	movs	r2, #0
 802334e:	2103      	movs	r1, #3
 8023350:	2034      	movs	r0, #52	; 0x34
 8023352:	f001 ff4a 	bl	80251ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8023356:	2034      	movs	r0, #52	; 0x34
 8023358:	f001 ff63 	bl	8025222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 802335c:	e0e8      	b.n	8023530 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART1)
 802335e:	687b      	ldr	r3, [r7, #4]
 8023360:	681b      	ldr	r3, [r3, #0]
 8023362:	4a78      	ldr	r2, [pc, #480]	; (8023544 <HAL_UART_MspInit+0x274>)
 8023364:	4293      	cmp	r3, r2
 8023366:	d135      	bne.n	80233d4 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART1_CLK_ENABLE();
 8023368:	2300      	movs	r3, #0
 802336a:	62bb      	str	r3, [r7, #40]	; 0x28
 802336c:	4b73      	ldr	r3, [pc, #460]	; (802353c <HAL_UART_MspInit+0x26c>)
 802336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023370:	4a72      	ldr	r2, [pc, #456]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023372:	f043 0310 	orr.w	r3, r3, #16
 8023376:	6453      	str	r3, [r2, #68]	; 0x44
 8023378:	4b70      	ldr	r3, [pc, #448]	; (802353c <HAL_UART_MspInit+0x26c>)
 802337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802337c:	f003 0310 	and.w	r3, r3, #16
 8023380:	62bb      	str	r3, [r7, #40]	; 0x28
 8023382:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023384:	2300      	movs	r3, #0
 8023386:	627b      	str	r3, [r7, #36]	; 0x24
 8023388:	4b6c      	ldr	r3, [pc, #432]	; (802353c <HAL_UART_MspInit+0x26c>)
 802338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802338c:	4a6b      	ldr	r2, [pc, #428]	; (802353c <HAL_UART_MspInit+0x26c>)
 802338e:	f043 0301 	orr.w	r3, r3, #1
 8023392:	6313      	str	r3, [r2, #48]	; 0x30
 8023394:	4b69      	ldr	r3, [pc, #420]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023398:	f003 0301 	and.w	r3, r3, #1
 802339c:	627b      	str	r3, [r7, #36]	; 0x24
 802339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80233a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80233a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80233a6:	2302      	movs	r3, #2
 80233a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80233aa:	2300      	movs	r3, #0
 80233ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80233ae:	2303      	movs	r3, #3
 80233b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80233b2:	2307      	movs	r3, #7
 80233b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80233b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80233ba:	4619      	mov	r1, r3
 80233bc:	4862      	ldr	r0, [pc, #392]	; (8023548 <HAL_UART_MspInit+0x278>)
 80233be:	f002 fa27 	bl	8025810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80233c2:	2200      	movs	r2, #0
 80233c4:	2104      	movs	r1, #4
 80233c6:	2025      	movs	r0, #37	; 0x25
 80233c8:	f001 ff0f 	bl	80251ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);  
 80233cc:	2025      	movs	r0, #37	; 0x25
 80233ce:	f001 ff28 	bl	8025222 <HAL_NVIC_EnableIRQ>
}
 80233d2:	e0ad      	b.n	8023530 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART2)
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	4a5c      	ldr	r2, [pc, #368]	; (802354c <HAL_UART_MspInit+0x27c>)
 80233da:	4293      	cmp	r3, r2
 80233dc:	d134      	bne.n	8023448 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART2_CLK_ENABLE();
 80233de:	2300      	movs	r3, #0
 80233e0:	623b      	str	r3, [r7, #32]
 80233e2:	4b56      	ldr	r3, [pc, #344]	; (802353c <HAL_UART_MspInit+0x26c>)
 80233e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80233e6:	4a55      	ldr	r2, [pc, #340]	; (802353c <HAL_UART_MspInit+0x26c>)
 80233e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80233ec:	6413      	str	r3, [r2, #64]	; 0x40
 80233ee:	4b53      	ldr	r3, [pc, #332]	; (802353c <HAL_UART_MspInit+0x26c>)
 80233f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80233f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80233f6:	623b      	str	r3, [r7, #32]
 80233f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80233fa:	2300      	movs	r3, #0
 80233fc:	61fb      	str	r3, [r7, #28]
 80233fe:	4b4f      	ldr	r3, [pc, #316]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023402:	4a4e      	ldr	r2, [pc, #312]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023404:	f043 0308 	orr.w	r3, r3, #8
 8023408:	6313      	str	r3, [r2, #48]	; 0x30
 802340a:	4b4c      	ldr	r3, [pc, #304]	; (802353c <HAL_UART_MspInit+0x26c>)
 802340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802340e:	f003 0308 	and.w	r3, r3, #8
 8023412:	61fb      	str	r3, [r7, #28]
 8023414:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8023416:	2360      	movs	r3, #96	; 0x60
 8023418:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802341a:	2302      	movs	r3, #2
 802341c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802341e:	2300      	movs	r3, #0
 8023420:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023422:	2303      	movs	r3, #3
 8023424:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8023426:	2307      	movs	r3, #7
 8023428:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802342a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802342e:	4619      	mov	r1, r3
 8023430:	4847      	ldr	r0, [pc, #284]	; (8023550 <HAL_UART_MspInit+0x280>)
 8023432:	f002 f9ed 	bl	8025810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8023436:	2200      	movs	r2, #0
 8023438:	2101      	movs	r1, #1
 802343a:	2026      	movs	r0, #38	; 0x26
 802343c:	f001 fed5 	bl	80251ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8023440:	2026      	movs	r0, #38	; 0x26
 8023442:	f001 feee 	bl	8025222 <HAL_NVIC_EnableIRQ>
}
 8023446:	e073      	b.n	8023530 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART3) //485 1
 8023448:	687b      	ldr	r3, [r7, #4]
 802344a:	681b      	ldr	r3, [r3, #0]
 802344c:	4a41      	ldr	r2, [pc, #260]	; (8023554 <HAL_UART_MspInit+0x284>)
 802344e:	4293      	cmp	r3, r2
 8023450:	d135      	bne.n	80234be <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 8023452:	2300      	movs	r3, #0
 8023454:	61bb      	str	r3, [r7, #24]
 8023456:	4b39      	ldr	r3, [pc, #228]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802345a:	4a38      	ldr	r2, [pc, #224]	; (802353c <HAL_UART_MspInit+0x26c>)
 802345c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023460:	6413      	str	r3, [r2, #64]	; 0x40
 8023462:	4b36      	ldr	r3, [pc, #216]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802346a:	61bb      	str	r3, [r7, #24]
 802346c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802346e:	2300      	movs	r3, #0
 8023470:	617b      	str	r3, [r7, #20]
 8023472:	4b32      	ldr	r3, [pc, #200]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023476:	4a31      	ldr	r2, [pc, #196]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023478:	f043 0308 	orr.w	r3, r3, #8
 802347c:	6313      	str	r3, [r2, #48]	; 0x30
 802347e:	4b2f      	ldr	r3, [pc, #188]	; (802353c <HAL_UART_MspInit+0x26c>)
 8023480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023482:	f003 0308 	and.w	r3, r3, #8
 8023486:	617b      	str	r3, [r7, #20]
 8023488:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802348a:	f44f 7340 	mov.w	r3, #768	; 0x300
 802348e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023490:	2302      	movs	r3, #2
 8023492:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023494:	2300      	movs	r3, #0
 8023496:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023498:	2303      	movs	r3, #3
 802349a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802349c:	2307      	movs	r3, #7
 802349e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80234a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80234a4:	4619      	mov	r1, r3
 80234a6:	482a      	ldr	r0, [pc, #168]	; (8023550 <HAL_UART_MspInit+0x280>)
 80234a8:	f002 f9b2 	bl	8025810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80234ac:	2200      	movs	r2, #0
 80234ae:	2102      	movs	r1, #2
 80234b0:	2027      	movs	r0, #39	; 0x27
 80234b2:	f001 fe9a 	bl	80251ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80234b6:	2027      	movs	r0, #39	; 0x27
 80234b8:	f001 feb3 	bl	8025222 <HAL_NVIC_EnableIRQ>
}
 80234bc:	e038      	b.n	8023530 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	681b      	ldr	r3, [r3, #0]
 80234c2:	4a25      	ldr	r2, [pc, #148]	; (8023558 <HAL_UART_MspInit+0x288>)
 80234c4:	4293      	cmp	r3, r2
 80234c6:	d133      	bne.n	8023530 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 80234c8:	2300      	movs	r3, #0
 80234ca:	613b      	str	r3, [r7, #16]
 80234cc:	4b1b      	ldr	r3, [pc, #108]	; (802353c <HAL_UART_MspInit+0x26c>)
 80234ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234d0:	4a1a      	ldr	r2, [pc, #104]	; (802353c <HAL_UART_MspInit+0x26c>)
 80234d2:	f043 0320 	orr.w	r3, r3, #32
 80234d6:	6453      	str	r3, [r2, #68]	; 0x44
 80234d8:	4b18      	ldr	r3, [pc, #96]	; (802353c <HAL_UART_MspInit+0x26c>)
 80234da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234dc:	f003 0320 	and.w	r3, r3, #32
 80234e0:	613b      	str	r3, [r7, #16]
 80234e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80234e4:	2300      	movs	r3, #0
 80234e6:	60fb      	str	r3, [r7, #12]
 80234e8:	4b14      	ldr	r3, [pc, #80]	; (802353c <HAL_UART_MspInit+0x26c>)
 80234ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ec:	4a13      	ldr	r2, [pc, #76]	; (802353c <HAL_UART_MspInit+0x26c>)
 80234ee:	f043 0304 	orr.w	r3, r3, #4
 80234f2:	6313      	str	r3, [r2, #48]	; 0x30
 80234f4:	4b11      	ldr	r3, [pc, #68]	; (802353c <HAL_UART_MspInit+0x26c>)
 80234f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234f8:	f003 0304 	and.w	r3, r3, #4
 80234fc:	60fb      	str	r3, [r7, #12]
 80234fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8023500:	23c0      	movs	r3, #192	; 0xc0
 8023502:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023504:	2302      	movs	r3, #2
 8023506:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023508:	2300      	movs	r3, #0
 802350a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802350c:	2303      	movs	r3, #3
 802350e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8023510:	2308      	movs	r3, #8
 8023512:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023514:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023518:	4619      	mov	r1, r3
 802351a:	4809      	ldr	r0, [pc, #36]	; (8023540 <HAL_UART_MspInit+0x270>)
 802351c:	f002 f978 	bl	8025810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8023520:	2200      	movs	r2, #0
 8023522:	2105      	movs	r1, #5
 8023524:	2047      	movs	r0, #71	; 0x47
 8023526:	f001 fe60 	bl	80251ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 802352a:	2047      	movs	r0, #71	; 0x47
 802352c:	f001 fe79 	bl	8025222 <HAL_NVIC_EnableIRQ>
}
 8023530:	bf00      	nop
 8023532:	3748      	adds	r7, #72	; 0x48
 8023534:	46bd      	mov	sp, r7
 8023536:	bd80      	pop	{r7, pc}
 8023538:	40004c00 	.word	0x40004c00
 802353c:	40023800 	.word	0x40023800
 8023540:	40020800 	.word	0x40020800
 8023544:	40011000 	.word	0x40011000
 8023548:	40020000 	.word	0x40020000
 802354c:	40004400 	.word	0x40004400
 8023550:	40020c00 	.word	0x40020c00
 8023554:	40004800 	.word	0x40004800
 8023558:	40011400 	.word	0x40011400

0802355c <__NVIC_SystemReset>:
{
 802355c:	b480      	push	{r7}
 802355e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8023560:	f3bf 8f4f 	dsb	sy
}
 8023564:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8023566:	4b06      	ldr	r3, [pc, #24]	; (8023580 <__NVIC_SystemReset+0x24>)
 8023568:	68db      	ldr	r3, [r3, #12]
 802356a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802356e:	4904      	ldr	r1, [pc, #16]	; (8023580 <__NVIC_SystemReset+0x24>)
 8023570:	4b04      	ldr	r3, [pc, #16]	; (8023584 <__NVIC_SystemReset+0x28>)
 8023572:	4313      	orrs	r3, r2
 8023574:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8023576:	f3bf 8f4f 	dsb	sy
}
 802357a:	bf00      	nop
    __NOP();
 802357c:	bf00      	nop
 802357e:	e7fd      	b.n	802357c <__NVIC_SystemReset+0x20>
 8023580:	e000ed00 	.word	0xe000ed00
 8023584:	05fa0004 	.word	0x05fa0004

08023588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8023588:	b480      	push	{r7}
 802358a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 802358c:	bf00      	nop
 802358e:	46bd      	mov	sp, r7
 8023590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023594:	4770      	bx	lr

08023596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8023596:	b580      	push	{r7, lr}
 8023598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 802359a:	f7ff ffdf 	bl	802355c <__NVIC_SystemReset>

0802359e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802359e:	b580      	push	{r7, lr}
 80235a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  NVIC_SystemReset();
 80235a2:	f7ff ffdb 	bl	802355c <__NVIC_SystemReset>

080235a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80235a6:	b580      	push	{r7, lr}
 80235a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  NVIC_SystemReset();
 80235aa:	f7ff ffd7 	bl	802355c <__NVIC_SystemReset>

080235ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80235ae:	b580      	push	{r7, lr}
 80235b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  NVIC_SystemReset();
 80235b2:	f7ff ffd3 	bl	802355c <__NVIC_SystemReset>

080235b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80235b6:	b480      	push	{r7}
 80235b8:	af00      	add	r7, sp, #0
  
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80235ba:	bf00      	nop
 80235bc:	46bd      	mov	sp, r7
 80235be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235c2:	4770      	bx	lr

080235c4 <SysTick_Handler>:
extern uint32_t idle_tick; //空闲任务++
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80235c4:	b580      	push	{r7, lr}
 80235c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80235c8:	f001 fcc2 	bl	8024f50 <HAL_IncTick>

  if(uwTick%1000==0)
 80235cc:	4b14      	ldr	r3, [pc, #80]	; (8023620 <SysTick_Handler+0x5c>)
 80235ce:	681a      	ldr	r2, [r3, #0]
 80235d0:	4b14      	ldr	r3, [pc, #80]	; (8023624 <SysTick_Handler+0x60>)
 80235d2:	fba3 1302 	umull	r1, r3, r3, r2
 80235d6:	099b      	lsrs	r3, r3, #6
 80235d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80235dc:	fb01 f303 	mul.w	r3, r1, r3
 80235e0:	1ad3      	subs	r3, r2, r3
 80235e2:	2b00      	cmp	r3, #0
 80235e4:	d112      	bne.n	802360c <SysTick_Handler+0x48>
  {
    cpu_usage = (1000-idle_tick) * 100 / 1000;
 80235e6:	4b10      	ldr	r3, [pc, #64]	; (8023628 <SysTick_Handler+0x64>)
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80235ee:	fb02 f303 	mul.w	r3, r2, r3
 80235f2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80235f6:	33a0      	adds	r3, #160	; 0xa0
 80235f8:	4a0a      	ldr	r2, [pc, #40]	; (8023624 <SysTick_Handler+0x60>)
 80235fa:	fba2 2303 	umull	r2, r3, r2, r3
 80235fe:	099b      	lsrs	r3, r3, #6
 8023600:	b29a      	uxth	r2, r3
 8023602:	4b0a      	ldr	r3, [pc, #40]	; (802362c <SysTick_Handler+0x68>)
 8023604:	801a      	strh	r2, [r3, #0]
    idle_tick = 0;
 8023606:	4b08      	ldr	r3, [pc, #32]	; (8023628 <SysTick_Handler+0x64>)
 8023608:	2200      	movs	r2, #0
 802360a:	601a      	str	r2, [r3, #0]
  }
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 802360c:	f007 f954 	bl	802a8b8 <xTaskGetSchedulerState>
 8023610:	4603      	mov	r3, r0
 8023612:	2b01      	cmp	r3, #1
 8023614:	d001      	beq.n	802361a <SysTick_Handler+0x56>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8023616:	f007 ff3f 	bl	802b498 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802361a:	bf00      	nop
 802361c:	bd80      	pop	{r7, pc}
 802361e:	bf00      	nop
 8023620:	20004cc8 	.word	0x20004cc8
 8023624:	10624dd3 	.word	0x10624dd3
 8023628:	20000690 	.word	0x20000690
 802362c:	2000068c 	.word	0x2000068c

08023630 <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  *        用于调试 [接收暂时没用上]
  */
void DEBUG_IRQ(void)
{
 8023630:	b480      	push	{r7}
 8023632:	b083      	sub	sp, #12
 8023634:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart1, UART_FLAG_RXNE)!=0) //接收单字节
 8023636:	4b0f      	ldr	r3, [pc, #60]	; (8023674 <USART1_IRQHandler+0x44>)
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	f003 0320 	and.w	r3, r3, #32
 8023640:	2b20      	cmp	r3, #32
 8023642:	d011      	beq.n	8023668 <USART1_IRQHandler+0x38>
    {

    }else if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart1, UART_FLAG_IDLE))//接收完成 在此处处理平台数据
 8023644:	4b0b      	ldr	r3, [pc, #44]	; (8023674 <USART1_IRQHandler+0x44>)
 8023646:	681b      	ldr	r3, [r3, #0]
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	f003 0310 	and.w	r3, r3, #16
 802364e:	2b10      	cmp	r3, #16
 8023650:	d10a      	bne.n	8023668 <USART1_IRQHandler+0x38>
    {
    	__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8023652:	2300      	movs	r3, #0
 8023654:	607b      	str	r3, [r7, #4]
 8023656:	4b07      	ldr	r3, [pc, #28]	; (8023674 <USART1_IRQHandler+0x44>)
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	681b      	ldr	r3, [r3, #0]
 802365c:	607b      	str	r3, [r7, #4]
 802365e:	4b05      	ldr	r3, [pc, #20]	; (8023674 <USART1_IRQHandler+0x44>)
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	685b      	ldr	r3, [r3, #4]
 8023664:	607b      	str	r3, [r7, #4]
 8023666:	687b      	ldr	r3, [r7, #4]
    }else
    {

    }
}
 8023668:	bf00      	nop
 802366a:	370c      	adds	r7, #12
 802366c:	46bd      	mov	sp, r7
 802366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023672:	4770      	bx	lr
 8023674:	20004edc 	.word	0x20004edc

08023678 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  *        用于Cat1接收
  */
void CAT1_IRQ(void)
{
 8023678:	b490      	push	{r4, r7}
 802367a:	b082      	sub	sp, #8
 802367c:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart2, UART_FLAG_RXNE)!=0) //接收单字节
 802367e:	4b1c      	ldr	r3, [pc, #112]	; (80236f0 <USART2_IRQHandler+0x78>)
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	681b      	ldr	r3, [r3, #0]
 8023684:	f003 0320 	and.w	r3, r3, #32
 8023688:	2b20      	cmp	r3, #32
 802368a:	d117      	bne.n	80236bc <USART2_IRQHandler+0x44>
    {
		cat1.r_buffer[cat1.r_tail++] = huart2.Instance->DR;
 802368c:	4b18      	ldr	r3, [pc, #96]	; (80236f0 <USART2_IRQHandler+0x78>)
 802368e:	681b      	ldr	r3, [r3, #0]
 8023690:	6858      	ldr	r0, [r3, #4]
 8023692:	4b18      	ldr	r3, [pc, #96]	; (80236f4 <USART2_IRQHandler+0x7c>)
 8023694:	689a      	ldr	r2, [r3, #8]
 8023696:	4b17      	ldr	r3, [pc, #92]	; (80236f4 <USART2_IRQHandler+0x7c>)
 8023698:	899b      	ldrh	r3, [r3, #12]
 802369a:	1c59      	adds	r1, r3, #1
 802369c:	b28c      	uxth	r4, r1
 802369e:	4915      	ldr	r1, [pc, #84]	; (80236f4 <USART2_IRQHandler+0x7c>)
 80236a0:	818c      	strh	r4, [r1, #12]
 80236a2:	4413      	add	r3, r2
 80236a4:	b2c2      	uxtb	r2, r0
 80236a6:	701a      	strb	r2, [r3, #0]

		if(cat1.r_tail>=CAT1_MAX_REVSIZE)
 80236a8:	4b12      	ldr	r3, [pc, #72]	; (80236f4 <USART2_IRQHandler+0x7c>)
 80236aa:	899b      	ldrh	r3, [r3, #12]
 80236ac:	f240 221d 	movw	r2, #541	; 0x21d
 80236b0:	4293      	cmp	r3, r2
 80236b2:	d918      	bls.n	80236e6 <USART2_IRQHandler+0x6e>
		{
			cat1.r_tail = 0;
 80236b4:	4b0f      	ldr	r3, [pc, #60]	; (80236f4 <USART2_IRQHandler+0x7c>)
 80236b6:	2200      	movs	r2, #0
 80236b8:	819a      	strh	r2, [r3, #12]
		cat1.r_flag = true; //接收完成标志 驱动模块会自行处理
    }else
    {

    }
}
 80236ba:	e014      	b.n	80236e6 <USART2_IRQHandler+0x6e>
    }else if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart2, UART_FLAG_IDLE))//没用上
 80236bc:	4b0c      	ldr	r3, [pc, #48]	; (80236f0 <USART2_IRQHandler+0x78>)
 80236be:	681b      	ldr	r3, [r3, #0]
 80236c0:	681b      	ldr	r3, [r3, #0]
 80236c2:	f003 0310 	and.w	r3, r3, #16
 80236c6:	2b10      	cmp	r3, #16
 80236c8:	d10d      	bne.n	80236e6 <USART2_IRQHandler+0x6e>
    	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80236ca:	2300      	movs	r3, #0
 80236cc:	607b      	str	r3, [r7, #4]
 80236ce:	4b08      	ldr	r3, [pc, #32]	; (80236f0 <USART2_IRQHandler+0x78>)
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	681b      	ldr	r3, [r3, #0]
 80236d4:	607b      	str	r3, [r7, #4]
 80236d6:	4b06      	ldr	r3, [pc, #24]	; (80236f0 <USART2_IRQHandler+0x78>)
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	685b      	ldr	r3, [r3, #4]
 80236dc:	607b      	str	r3, [r7, #4]
 80236de:	687b      	ldr	r3, [r7, #4]
		cat1.r_flag = true; //接收完成标志 驱动模块会自行处理
 80236e0:	4b04      	ldr	r3, [pc, #16]	; (80236f4 <USART2_IRQHandler+0x7c>)
 80236e2:	2201      	movs	r2, #1
 80236e4:	709a      	strb	r2, [r3, #2]
}
 80236e6:	bf00      	nop
 80236e8:	3708      	adds	r7, #8
 80236ea:	46bd      	mov	sp, r7
 80236ec:	bc90      	pop	{r4, r7}
 80236ee:	4770      	bx	lr
 80236f0:	20004f9c 	.word	0x20004f9c
 80236f4:	20000270 	.word	0x20000270

080236f8 <USART3_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  *        用于RS485 1接收
  */
void RS4851_IRQ(void)
{
 80236f8:	b490      	push	{r4, r7}
 80236fa:	b082      	sub	sp, #8
 80236fc:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart3, UART_FLAG_RXNE)!=0) //接收单字节
 80236fe:	4b1b      	ldr	r3, [pc, #108]	; (802376c <USART3_IRQHandler+0x74>)
 8023700:	681b      	ldr	r3, [r3, #0]
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	f003 0320 	and.w	r3, r3, #32
 8023708:	2b20      	cmp	r3, #32
 802370a:	d115      	bne.n	8023738 <USART3_IRQHandler+0x40>
    {
		rs4851.r_buffer[rs4851.r_tail++] = huart3.Instance->DR;
 802370c:	4b17      	ldr	r3, [pc, #92]	; (802376c <USART3_IRQHandler+0x74>)
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	6858      	ldr	r0, [r3, #4]
 8023712:	4b17      	ldr	r3, [pc, #92]	; (8023770 <USART3_IRQHandler+0x78>)
 8023714:	691a      	ldr	r2, [r3, #16]
 8023716:	4b16      	ldr	r3, [pc, #88]	; (8023770 <USART3_IRQHandler+0x78>)
 8023718:	7a5b      	ldrb	r3, [r3, #9]
 802371a:	1c59      	adds	r1, r3, #1
 802371c:	b2cc      	uxtb	r4, r1
 802371e:	4914      	ldr	r1, [pc, #80]	; (8023770 <USART3_IRQHandler+0x78>)
 8023720:	724c      	strb	r4, [r1, #9]
 8023722:	4413      	add	r3, r2
 8023724:	b2c2      	uxtb	r2, r0
 8023726:	701a      	strb	r2, [r3, #0]

		if(rs4851.r_tail>=RS485_1_MAX_REVSIZE)
 8023728:	4b11      	ldr	r3, [pc, #68]	; (8023770 <USART3_IRQHandler+0x78>)
 802372a:	7a5b      	ldrb	r3, [r3, #9]
 802372c:	2b1d      	cmp	r3, #29
 802372e:	d918      	bls.n	8023762 <USART3_IRQHandler+0x6a>
		{
			rs4851.r_tail = 0;
 8023730:	4b0f      	ldr	r3, [pc, #60]	; (8023770 <USART3_IRQHandler+0x78>)
 8023732:	2200      	movs	r2, #0
 8023734:	725a      	strb	r2, [r3, #9]
		rs4851.r_flag = true;
    }else
    {

    }
}
 8023736:	e014      	b.n	8023762 <USART3_IRQHandler+0x6a>
    }else if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart3, UART_FLAG_IDLE))//没用上
 8023738:	4b0c      	ldr	r3, [pc, #48]	; (802376c <USART3_IRQHandler+0x74>)
 802373a:	681b      	ldr	r3, [r3, #0]
 802373c:	681b      	ldr	r3, [r3, #0]
 802373e:	f003 0310 	and.w	r3, r3, #16
 8023742:	2b10      	cmp	r3, #16
 8023744:	d10d      	bne.n	8023762 <USART3_IRQHandler+0x6a>
    	__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8023746:	2300      	movs	r3, #0
 8023748:	607b      	str	r3, [r7, #4]
 802374a:	4b08      	ldr	r3, [pc, #32]	; (802376c <USART3_IRQHandler+0x74>)
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	681b      	ldr	r3, [r3, #0]
 8023750:	607b      	str	r3, [r7, #4]
 8023752:	4b06      	ldr	r3, [pc, #24]	; (802376c <USART3_IRQHandler+0x74>)
 8023754:	681b      	ldr	r3, [r3, #0]
 8023756:	685b      	ldr	r3, [r3, #4]
 8023758:	607b      	str	r3, [r7, #4]
 802375a:	687b      	ldr	r3, [r7, #4]
		rs4851.r_flag = true;
 802375c:	4b04      	ldr	r3, [pc, #16]	; (8023770 <USART3_IRQHandler+0x78>)
 802375e:	2201      	movs	r2, #1
 8023760:	721a      	strb	r2, [r3, #8]
}
 8023762:	bf00      	nop
 8023764:	3708      	adds	r7, #8
 8023766:	46bd      	mov	sp, r7
 8023768:	bc90      	pop	{r4, r7}
 802376a:	4770      	bx	lr
 802376c:	20004e5c 	.word	0x20004e5c
 8023770:	2000003c 	.word	0x2000003c

08023774 <UART4_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  *        用于RS485 2接收
  */
void RS4852_IRQ(void)
{
 8023774:	b490      	push	{r4, r7}
 8023776:	b082      	sub	sp, #8
 8023778:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart4, UART_FLAG_RXNE)!=0) //接收单字节
 802377a:	4b1b      	ldr	r3, [pc, #108]	; (80237e8 <UART4_IRQHandler+0x74>)
 802377c:	681b      	ldr	r3, [r3, #0]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	f003 0320 	and.w	r3, r3, #32
 8023784:	2b20      	cmp	r3, #32
 8023786:	d115      	bne.n	80237b4 <UART4_IRQHandler+0x40>
    {
		rs4852.r_buffer[rs4852.r_tail++] = huart4.Instance->DR;
 8023788:	4b17      	ldr	r3, [pc, #92]	; (80237e8 <UART4_IRQHandler+0x74>)
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	6858      	ldr	r0, [r3, #4]
 802378e:	4b17      	ldr	r3, [pc, #92]	; (80237ec <UART4_IRQHandler+0x78>)
 8023790:	691a      	ldr	r2, [r3, #16]
 8023792:	4b16      	ldr	r3, [pc, #88]	; (80237ec <UART4_IRQHandler+0x78>)
 8023794:	7a5b      	ldrb	r3, [r3, #9]
 8023796:	1c59      	adds	r1, r3, #1
 8023798:	b2cc      	uxtb	r4, r1
 802379a:	4914      	ldr	r1, [pc, #80]	; (80237ec <UART4_IRQHandler+0x78>)
 802379c:	724c      	strb	r4, [r1, #9]
 802379e:	4413      	add	r3, r2
 80237a0:	b2c2      	uxtb	r2, r0
 80237a2:	701a      	strb	r2, [r3, #0]

		if(rs4852.r_tail>=RS485_2_MAX_REVSIZE)
 80237a4:	4b11      	ldr	r3, [pc, #68]	; (80237ec <UART4_IRQHandler+0x78>)
 80237a6:	7a5b      	ldrb	r3, [r3, #9]
 80237a8:	2b1d      	cmp	r3, #29
 80237aa:	d918      	bls.n	80237de <UART4_IRQHandler+0x6a>
		{
			rs4852.r_tail = 0;
 80237ac:	4b0f      	ldr	r3, [pc, #60]	; (80237ec <UART4_IRQHandler+0x78>)
 80237ae:	2200      	movs	r2, #0
 80237b0:	725a      	strb	r2, [r3, #9]
		rs4852.r_flag = true;
    }else
    {

    }
}
 80237b2:	e014      	b.n	80237de <UART4_IRQHandler+0x6a>
    }else if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart4, UART_FLAG_IDLE))//没用上
 80237b4:	4b0c      	ldr	r3, [pc, #48]	; (80237e8 <UART4_IRQHandler+0x74>)
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	f003 0310 	and.w	r3, r3, #16
 80237be:	2b10      	cmp	r3, #16
 80237c0:	d10d      	bne.n	80237de <UART4_IRQHandler+0x6a>
    	__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80237c2:	2300      	movs	r3, #0
 80237c4:	607b      	str	r3, [r7, #4]
 80237c6:	4b08      	ldr	r3, [pc, #32]	; (80237e8 <UART4_IRQHandler+0x74>)
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	607b      	str	r3, [r7, #4]
 80237ce:	4b06      	ldr	r3, [pc, #24]	; (80237e8 <UART4_IRQHandler+0x74>)
 80237d0:	681b      	ldr	r3, [r3, #0]
 80237d2:	685b      	ldr	r3, [r3, #4]
 80237d4:	607b      	str	r3, [r7, #4]
 80237d6:	687b      	ldr	r3, [r7, #4]
		rs4852.r_flag = true;
 80237d8:	4b04      	ldr	r3, [pc, #16]	; (80237ec <UART4_IRQHandler+0x78>)
 80237da:	2201      	movs	r2, #1
 80237dc:	721a      	strb	r2, [r3, #8]
}
 80237de:	bf00      	nop
 80237e0:	3708      	adds	r7, #8
 80237e2:	46bd      	mov	sp, r7
 80237e4:	bc90      	pop	{r4, r7}
 80237e6:	4770      	bx	lr
 80237e8:	20004f5c 	.word	0x20004f5c
 80237ec:	20000058 	.word	0x20000058

080237f0 <USART6_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  *        用于BLE接收
  */
void BLE_IRQ(void)
{
 80237f0:	b490      	push	{r4, r7}
 80237f2:	b082      	sub	sp, #8
 80237f4:	af00      	add	r7, sp, #0
    if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart6, UART_FLAG_RXNE)!=0) //接收单字节
 80237f6:	4b18      	ldr	r3, [pc, #96]	; (8023858 <USART6_IRQHandler+0x68>)
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	681b      	ldr	r3, [r3, #0]
 80237fc:	f003 0320 	and.w	r3, r3, #32
 8023800:	2b20      	cmp	r3, #32
 8023802:	d10e      	bne.n	8023822 <USART6_IRQHandler+0x32>
    {
		ble.r_buffer[ble.r_tail++] = huart6.Instance->DR;
 8023804:	4b14      	ldr	r3, [pc, #80]	; (8023858 <USART6_IRQHandler+0x68>)
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	6858      	ldr	r0, [r3, #4]
 802380a:	4b14      	ldr	r3, [pc, #80]	; (802385c <USART6_IRQHandler+0x6c>)
 802380c:	68da      	ldr	r2, [r3, #12]
 802380e:	4b13      	ldr	r3, [pc, #76]	; (802385c <USART6_IRQHandler+0x6c>)
 8023810:	795b      	ldrb	r3, [r3, #5]
 8023812:	1c59      	adds	r1, r3, #1
 8023814:	b2cc      	uxtb	r4, r1
 8023816:	4911      	ldr	r1, [pc, #68]	; (802385c <USART6_IRQHandler+0x6c>)
 8023818:	714c      	strb	r4, [r1, #5]
 802381a:	4413      	add	r3, r2
 802381c:	b2c2      	uxtb	r2, r0
 802381e:	701a      	strb	r2, [r3, #0]
		ble.r_flag = true;
    }else
    {

    }
}
 8023820:	e014      	b.n	802384c <USART6_IRQHandler+0x5c>
    }else if(__HAL_UART_GET_FLAG((UART_HandleTypeDef *)&huart6, UART_FLAG_IDLE))//没用上
 8023822:	4b0d      	ldr	r3, [pc, #52]	; (8023858 <USART6_IRQHandler+0x68>)
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	f003 0310 	and.w	r3, r3, #16
 802382c:	2b10      	cmp	r3, #16
 802382e:	d10d      	bne.n	802384c <USART6_IRQHandler+0x5c>
    	__HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8023830:	2300      	movs	r3, #0
 8023832:	607b      	str	r3, [r7, #4]
 8023834:	4b08      	ldr	r3, [pc, #32]	; (8023858 <USART6_IRQHandler+0x68>)
 8023836:	681b      	ldr	r3, [r3, #0]
 8023838:	681b      	ldr	r3, [r3, #0]
 802383a:	607b      	str	r3, [r7, #4]
 802383c:	4b06      	ldr	r3, [pc, #24]	; (8023858 <USART6_IRQHandler+0x68>)
 802383e:	681b      	ldr	r3, [r3, #0]
 8023840:	685b      	ldr	r3, [r3, #4]
 8023842:	607b      	str	r3, [r7, #4]
 8023844:	687b      	ldr	r3, [r7, #4]
		ble.r_flag = true;
 8023846:	4b05      	ldr	r3, [pc, #20]	; (802385c <USART6_IRQHandler+0x6c>)
 8023848:	2201      	movs	r2, #1
 802384a:	711a      	strb	r2, [r3, #4]
}
 802384c:	bf00      	nop
 802384e:	3708      	adds	r7, #8
 8023850:	46bd      	mov	sp, r7
 8023852:	bc90      	pop	{r4, r7}
 8023854:	4770      	bx	lr
 8023856:	bf00      	nop
 8023858:	20004f1c 	.word	0x20004f1c
 802385c:	200002a8 	.word	0x200002a8

08023860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8023860:	b480      	push	{r7}
 8023862:	af00      	add	r7, sp, #0
	return 1;
 8023864:	2301      	movs	r3, #1
}
 8023866:	4618      	mov	r0, r3
 8023868:	46bd      	mov	sp, r7
 802386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802386e:	4770      	bx	lr

08023870 <_kill>:

int _kill(int pid, int sig)
{
 8023870:	b580      	push	{r7, lr}
 8023872:	b082      	sub	sp, #8
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
 8023878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802387a:	f009 fbc7 	bl	802d00c <__errno>
 802387e:	4603      	mov	r3, r0
 8023880:	2216      	movs	r2, #22
 8023882:	601a      	str	r2, [r3, #0]
	return -1;
 8023884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023888:	4618      	mov	r0, r3
 802388a:	3708      	adds	r7, #8
 802388c:	46bd      	mov	sp, r7
 802388e:	bd80      	pop	{r7, pc}

08023890 <_exit>:

void _exit (int status)
{
 8023890:	b580      	push	{r7, lr}
 8023892:	b082      	sub	sp, #8
 8023894:	af00      	add	r7, sp, #0
 8023896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8023898:	f04f 31ff 	mov.w	r1, #4294967295
 802389c:	6878      	ldr	r0, [r7, #4]
 802389e:	f7ff ffe7 	bl	8023870 <_kill>
	while (1) {}		/* Make sure we hang here */
 80238a2:	e7fe      	b.n	80238a2 <_exit+0x12>

080238a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80238a4:	b580      	push	{r7, lr}
 80238a6:	b086      	sub	sp, #24
 80238a8:	af00      	add	r7, sp, #0
 80238aa:	60f8      	str	r0, [r7, #12]
 80238ac:	60b9      	str	r1, [r7, #8]
 80238ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80238b0:	2300      	movs	r3, #0
 80238b2:	617b      	str	r3, [r7, #20]
 80238b4:	e00a      	b.n	80238cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80238b6:	f3af 8000 	nop.w
 80238ba:	4601      	mov	r1, r0
 80238bc:	68bb      	ldr	r3, [r7, #8]
 80238be:	1c5a      	adds	r2, r3, #1
 80238c0:	60ba      	str	r2, [r7, #8]
 80238c2:	b2ca      	uxtb	r2, r1
 80238c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80238c6:	697b      	ldr	r3, [r7, #20]
 80238c8:	3301      	adds	r3, #1
 80238ca:	617b      	str	r3, [r7, #20]
 80238cc:	697a      	ldr	r2, [r7, #20]
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	429a      	cmp	r2, r3
 80238d2:	dbf0      	blt.n	80238b6 <_read+0x12>
	}

return len;
 80238d4:	687b      	ldr	r3, [r7, #4]
}
 80238d6:	4618      	mov	r0, r3
 80238d8:	3718      	adds	r7, #24
 80238da:	46bd      	mov	sp, r7
 80238dc:	bd80      	pop	{r7, pc}

080238de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80238de:	b580      	push	{r7, lr}
 80238e0:	b086      	sub	sp, #24
 80238e2:	af00      	add	r7, sp, #0
 80238e4:	60f8      	str	r0, [r7, #12]
 80238e6:	60b9      	str	r1, [r7, #8]
 80238e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80238ea:	2300      	movs	r3, #0
 80238ec:	617b      	str	r3, [r7, #20]
 80238ee:	e009      	b.n	8023904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80238f0:	68bb      	ldr	r3, [r7, #8]
 80238f2:	1c5a      	adds	r2, r3, #1
 80238f4:	60ba      	str	r2, [r7, #8]
 80238f6:	781b      	ldrb	r3, [r3, #0]
 80238f8:	4618      	mov	r0, r3
 80238fa:	f005 f9d7 	bl	8028cac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80238fe:	697b      	ldr	r3, [r7, #20]
 8023900:	3301      	adds	r3, #1
 8023902:	617b      	str	r3, [r7, #20]
 8023904:	697a      	ldr	r2, [r7, #20]
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	429a      	cmp	r2, r3
 802390a:	dbf1      	blt.n	80238f0 <_write+0x12>
	}
	return len;
 802390c:	687b      	ldr	r3, [r7, #4]
}
 802390e:	4618      	mov	r0, r3
 8023910:	3718      	adds	r7, #24
 8023912:	46bd      	mov	sp, r7
 8023914:	bd80      	pop	{r7, pc}

08023916 <_close>:

int _close(int file)
{
 8023916:	b480      	push	{r7}
 8023918:	b083      	sub	sp, #12
 802391a:	af00      	add	r7, sp, #0
 802391c:	6078      	str	r0, [r7, #4]
	return -1;
 802391e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023922:	4618      	mov	r0, r3
 8023924:	370c      	adds	r7, #12
 8023926:	46bd      	mov	sp, r7
 8023928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802392c:	4770      	bx	lr

0802392e <_fstat>:


int _fstat(int file, struct stat *st)
{
 802392e:	b480      	push	{r7}
 8023930:	b083      	sub	sp, #12
 8023932:	af00      	add	r7, sp, #0
 8023934:	6078      	str	r0, [r7, #4]
 8023936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8023938:	683b      	ldr	r3, [r7, #0]
 802393a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802393e:	605a      	str	r2, [r3, #4]
	return 0;
 8023940:	2300      	movs	r3, #0
}
 8023942:	4618      	mov	r0, r3
 8023944:	370c      	adds	r7, #12
 8023946:	46bd      	mov	sp, r7
 8023948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802394c:	4770      	bx	lr

0802394e <_isatty>:

int _isatty(int file)
{
 802394e:	b480      	push	{r7}
 8023950:	b083      	sub	sp, #12
 8023952:	af00      	add	r7, sp, #0
 8023954:	6078      	str	r0, [r7, #4]
	return 1;
 8023956:	2301      	movs	r3, #1
}
 8023958:	4618      	mov	r0, r3
 802395a:	370c      	adds	r7, #12
 802395c:	46bd      	mov	sp, r7
 802395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023962:	4770      	bx	lr

08023964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8023964:	b480      	push	{r7}
 8023966:	b085      	sub	sp, #20
 8023968:	af00      	add	r7, sp, #0
 802396a:	60f8      	str	r0, [r7, #12]
 802396c:	60b9      	str	r1, [r7, #8]
 802396e:	607a      	str	r2, [r7, #4]
	return 0;
 8023970:	2300      	movs	r3, #0
}
 8023972:	4618      	mov	r0, r3
 8023974:	3714      	adds	r7, #20
 8023976:	46bd      	mov	sp, r7
 8023978:	f85d 7b04 	ldr.w	r7, [sp], #4
 802397c:	4770      	bx	lr
	...

08023980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8023980:	b580      	push	{r7, lr}
 8023982:	b086      	sub	sp, #24
 8023984:	af00      	add	r7, sp, #0
 8023986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8023988:	4a14      	ldr	r2, [pc, #80]	; (80239dc <_sbrk+0x5c>)
 802398a:	4b15      	ldr	r3, [pc, #84]	; (80239e0 <_sbrk+0x60>)
 802398c:	1ad3      	subs	r3, r2, r3
 802398e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8023990:	697b      	ldr	r3, [r7, #20]
 8023992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8023994:	4b13      	ldr	r3, [pc, #76]	; (80239e4 <_sbrk+0x64>)
 8023996:	681b      	ldr	r3, [r3, #0]
 8023998:	2b00      	cmp	r3, #0
 802399a:	d102      	bne.n	80239a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802399c:	4b11      	ldr	r3, [pc, #68]	; (80239e4 <_sbrk+0x64>)
 802399e:	4a12      	ldr	r2, [pc, #72]	; (80239e8 <_sbrk+0x68>)
 80239a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80239a2:	4b10      	ldr	r3, [pc, #64]	; (80239e4 <_sbrk+0x64>)
 80239a4:	681a      	ldr	r2, [r3, #0]
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	4413      	add	r3, r2
 80239aa:	693a      	ldr	r2, [r7, #16]
 80239ac:	429a      	cmp	r2, r3
 80239ae:	d207      	bcs.n	80239c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80239b0:	f009 fb2c 	bl	802d00c <__errno>
 80239b4:	4603      	mov	r3, r0
 80239b6:	220c      	movs	r2, #12
 80239b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80239ba:	f04f 33ff 	mov.w	r3, #4294967295
 80239be:	e009      	b.n	80239d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80239c0:	4b08      	ldr	r3, [pc, #32]	; (80239e4 <_sbrk+0x64>)
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80239c6:	4b07      	ldr	r3, [pc, #28]	; (80239e4 <_sbrk+0x64>)
 80239c8:	681a      	ldr	r2, [r3, #0]
 80239ca:	687b      	ldr	r3, [r7, #4]
 80239cc:	4413      	add	r3, r2
 80239ce:	4a05      	ldr	r2, [pc, #20]	; (80239e4 <_sbrk+0x64>)
 80239d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80239d2:	68fb      	ldr	r3, [r7, #12]
}
 80239d4:	4618      	mov	r0, r3
 80239d6:	3718      	adds	r7, #24
 80239d8:	46bd      	mov	sp, r7
 80239da:	bd80      	pop	{r7, pc}
 80239dc:	20020000 	.word	0x20020000
 80239e0:	00001000 	.word	0x00001000
 80239e4:	200006b0 	.word	0x200006b0
 80239e8:	20005040 	.word	0x20005040

080239ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80239ec:	b480      	push	{r7}
 80239ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80239f0:	4b07      	ldr	r3, [pc, #28]	; (8023a10 <SystemInit+0x24>)
 80239f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80239f6:	4a06      	ldr	r2, [pc, #24]	; (8023a10 <SystemInit+0x24>)
 80239f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80239fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8023a00:	4b03      	ldr	r3, [pc, #12]	; (8023a10 <SystemInit+0x24>)
 8023a02:	4a04      	ldr	r2, [pc, #16]	; (8023a14 <SystemInit+0x28>)
 8023a04:	609a      	str	r2, [r3, #8]
#endif
}
 8023a06:	bf00      	nop
 8023a08:	46bd      	mov	sp, r7
 8023a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a0e:	4770      	bx	lr
 8023a10:	e000ed00 	.word	0xe000ed00
 8023a14:	08020000 	.word	0x08020000

08023a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8023a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8023a50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8023a1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8023a1e:	e003      	b.n	8023a28 <LoopCopyDataInit>

08023a20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8023a20:	4b0c      	ldr	r3, [pc, #48]	; (8023a54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8023a22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8023a24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8023a26:	3104      	adds	r1, #4

08023a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8023a28:	480b      	ldr	r0, [pc, #44]	; (8023a58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8023a2a:	4b0c      	ldr	r3, [pc, #48]	; (8023a5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8023a2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8023a2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8023a30:	d3f6      	bcc.n	8023a20 <CopyDataInit>
  ldr  r2, =_sbss
 8023a32:	4a0b      	ldr	r2, [pc, #44]	; (8023a60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8023a34:	e002      	b.n	8023a3c <LoopFillZerobss>

08023a36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8023a36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8023a38:	f842 3b04 	str.w	r3, [r2], #4

08023a3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8023a3c:	4b09      	ldr	r3, [pc, #36]	; (8023a64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8023a3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8023a40:	d3f9      	bcc.n	8023a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8023a42:	f7ff ffd3 	bl	80239ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8023a46:	f009 fae7 	bl	802d018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8023a4a:	f7ff f9ed 	bl	8022e28 <main>
  bx  lr    
 8023a4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8023a50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8023a54:	0802e850 	.word	0x0802e850
  ldr  r0, =_sdata
 8023a58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8023a5c:	20000458 	.word	0x20000458
  ldr  r2, =_sbss
 8023a60:	20000458 	.word	0x20000458
  ldr  r3, = _ebss
 8023a64:	2000503c 	.word	0x2000503c

08023a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8023a68:	e7fe      	b.n	8023a68 <ADC_IRQHandler>
	...

08023a6c <drv_sendRS485_1_Data>:

/**
 * 发送RS485 1 数据
 */
static void drv_sendRS485_1_Data(char * bytes, uint16_t len)
{
 8023a6c:	b580      	push	{r7, lr}
 8023a6e:	b084      	sub	sp, #16
 8023a70:	af02      	add	r7, sp, #8
 8023a72:	6078      	str	r0, [r7, #4]
 8023a74:	460b      	mov	r3, r1
 8023a76:	807b      	strh	r3, [r7, #2]
	hal_setGPIOLevel(RS485_1_EN, 1);
 8023a78:	4b0c      	ldr	r3, [pc, #48]	; (8023aac <drv_sendRS485_1_Data+0x40>)
 8023a7a:	2201      	movs	r2, #1
 8023a7c:	9201      	str	r2, [sp, #4]
 8023a7e:	691a      	ldr	r2, [r3, #16]
 8023a80:	9200      	str	r2, [sp, #0]
 8023a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023a84:	f004 fcd4 	bl	8028430 <hal_setGPIOLevel>
	hal_sendUARTBytes(UART_4, bytes, len);
 8023a88:	887b      	ldrh	r3, [r7, #2]
 8023a8a:	461a      	mov	r2, r3
 8023a8c:	6879      	ldr	r1, [r7, #4]
 8023a8e:	2003      	movs	r0, #3
 8023a90:	f005 f8b2 	bl	8028bf8 <hal_sendUARTBytes>
	hal_setGPIOLevel(RS485_1_EN, 0);
 8023a94:	4b05      	ldr	r3, [pc, #20]	; (8023aac <drv_sendRS485_1_Data+0x40>)
 8023a96:	2200      	movs	r2, #0
 8023a98:	9201      	str	r2, [sp, #4]
 8023a9a:	691a      	ldr	r2, [r3, #16]
 8023a9c:	9200      	str	r2, [sp, #0]
 8023a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023aa0:	f004 fcc6 	bl	8028430 <hal_setGPIOLevel>
}
 8023aa4:	bf00      	nop
 8023aa6:	3708      	adds	r7, #8
 8023aa8:	46bd      	mov	sp, r7
 8023aaa:	bd80      	pop	{r7, pc}
 8023aac:	200002e4 	.word	0x200002e4

08023ab0 <drv_sendRS485_2_Data>:

/**
 * 发送RS485 2 数据
 */
static void drv_sendRS485_2_Data(char * bytes, uint16_t len)
{
 8023ab0:	b580      	push	{r7, lr}
 8023ab2:	b084      	sub	sp, #16
 8023ab4:	af02      	add	r7, sp, #8
 8023ab6:	6078      	str	r0, [r7, #4]
 8023ab8:	460b      	mov	r3, r1
 8023aba:	807b      	strh	r3, [r7, #2]
	hal_setGPIOLevel(RS485_2_EN, 1);
 8023abc:	4b0c      	ldr	r3, [pc, #48]	; (8023af0 <drv_sendRS485_2_Data+0x40>)
 8023abe:	2201      	movs	r2, #1
 8023ac0:	9201      	str	r2, [sp, #4]
 8023ac2:	691a      	ldr	r2, [r3, #16]
 8023ac4:	9200      	str	r2, [sp, #0]
 8023ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023ac8:	f004 fcb2 	bl	8028430 <hal_setGPIOLevel>
	hal_sendUARTBytes(UART_3, bytes, len);
 8023acc:	887b      	ldrh	r3, [r7, #2]
 8023ace:	461a      	mov	r2, r3
 8023ad0:	6879      	ldr	r1, [r7, #4]
 8023ad2:	2002      	movs	r0, #2
 8023ad4:	f005 f890 	bl	8028bf8 <hal_sendUARTBytes>
	hal_setGPIOLevel(RS485_2_EN, 0);
 8023ad8:	4b05      	ldr	r3, [pc, #20]	; (8023af0 <drv_sendRS485_2_Data+0x40>)
 8023ada:	2200      	movs	r2, #0
 8023adc:	9201      	str	r2, [sp, #4]
 8023ade:	691a      	ldr	r2, [r3, #16]
 8023ae0:	9200      	str	r2, [sp, #0]
 8023ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023ae4:	f004 fca4 	bl	8028430 <hal_setGPIOLevel>
}
 8023ae8:	bf00      	nop
 8023aea:	3708      	adds	r7, #8
 8023aec:	46bd      	mov	sp, r7
 8023aee:	bd80      	pop	{r7, pc}
 8023af0:	200002f8 	.word	0x200002f8

08023af4 <drv_initRS485>:

/**
 * 初始化485
 */
void drv_initRS485(RS485_Descriptor * pdescriptor)
{
 8023af4:	b580      	push	{r7, lr}
 8023af6:	b084      	sub	sp, #16
 8023af8:	af02      	add	r7, sp, #8
 8023afa:	6078      	str	r0, [r7, #4]
	if(pdescriptor->rs485Nmb==RS485_1)
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	781b      	ldrb	r3, [r3, #0]
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d11d      	bne.n	8023b40 <drv_initRS485+0x4c>
	{
		hal_initGPIO(RS485_1_EN);
 8023b04:	4b21      	ldr	r3, [pc, #132]	; (8023b8c <drv_initRS485+0x98>)
 8023b06:	691a      	ldr	r2, [r3, #16]
 8023b08:	9200      	str	r2, [sp, #0]
 8023b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023b0c:	f004 fbd8 	bl	80282c0 <hal_initGPIO>
		hal_initUART(UART_4, pdescriptor->baudrate);
 8023b10:	687b      	ldr	r3, [r7, #4]
 8023b12:	685b      	ldr	r3, [r3, #4]
 8023b14:	4619      	mov	r1, r3
 8023b16:	2003      	movs	r0, #3
 8023b18:	f004 ff4a 	bl	80289b0 <hal_initUART>
		pdescriptor->write = drv_sendRS485_1_Data;
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	4a1c      	ldr	r2, [pc, #112]	; (8023b90 <drv_initRS485+0x9c>)
 8023b20:	615a      	str	r2, [r3, #20]
		pdescriptor->t_buffer = (char *)pvPortMalloc(RS485_1_MAX_SENDSIZE);
 8023b22:	201e      	movs	r0, #30
 8023b24:	f007 fd48 	bl	802b5b8 <pvPortMalloc>
 8023b28:	4603      	mov	r3, r0
 8023b2a:	461a      	mov	r2, r3
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	60da      	str	r2, [r3, #12]
		pdescriptor->r_buffer = (char *)pvPortMalloc(RS485_1_MAX_REVSIZE);
 8023b30:	201e      	movs	r0, #30
 8023b32:	f007 fd41 	bl	802b5b8 <pvPortMalloc>
 8023b36:	4603      	mov	r3, r0
 8023b38:	461a      	mov	r2, r3
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	611a      	str	r2, [r3, #16]
		pdescriptor->r_buffer = (char *)pvPortMalloc(RS485_2_MAX_REVSIZE);
	}else
	{

	}
}
 8023b3e:	e020      	b.n	8023b82 <drv_initRS485+0x8e>
	}else if(pdescriptor->rs485Nmb==RS485_2)
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	781b      	ldrb	r3, [r3, #0]
 8023b44:	2b01      	cmp	r3, #1
 8023b46:	d11c      	bne.n	8023b82 <drv_initRS485+0x8e>
		hal_initGPIO(RS485_2_EN);
 8023b48:	4b12      	ldr	r3, [pc, #72]	; (8023b94 <drv_initRS485+0xa0>)
 8023b4a:	691a      	ldr	r2, [r3, #16]
 8023b4c:	9200      	str	r2, [sp, #0]
 8023b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023b50:	f004 fbb6 	bl	80282c0 <hal_initGPIO>
		hal_initUART(UART_3, pdescriptor->baudrate);
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	685b      	ldr	r3, [r3, #4]
 8023b58:	4619      	mov	r1, r3
 8023b5a:	2002      	movs	r0, #2
 8023b5c:	f004 ff28 	bl	80289b0 <hal_initUART>
		pdescriptor->write = drv_sendRS485_2_Data;
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	4a0d      	ldr	r2, [pc, #52]	; (8023b98 <drv_initRS485+0xa4>)
 8023b64:	615a      	str	r2, [r3, #20]
		pdescriptor->t_buffer = (char *)pvPortMalloc(RS485_2_MAX_SENDSIZE);
 8023b66:	201e      	movs	r0, #30
 8023b68:	f007 fd26 	bl	802b5b8 <pvPortMalloc>
 8023b6c:	4603      	mov	r3, r0
 8023b6e:	461a      	mov	r2, r3
 8023b70:	687b      	ldr	r3, [r7, #4]
 8023b72:	60da      	str	r2, [r3, #12]
		pdescriptor->r_buffer = (char *)pvPortMalloc(RS485_2_MAX_REVSIZE);
 8023b74:	201e      	movs	r0, #30
 8023b76:	f007 fd1f 	bl	802b5b8 <pvPortMalloc>
 8023b7a:	4603      	mov	r3, r0
 8023b7c:	461a      	mov	r2, r3
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	611a      	str	r2, [r3, #16]
}
 8023b82:	bf00      	nop
 8023b84:	3708      	adds	r7, #8
 8023b86:	46bd      	mov	sp, r7
 8023b88:	bd80      	pop	{r7, pc}
 8023b8a:	bf00      	nop
 8023b8c:	200002e4 	.word	0x200002e4
 8023b90:	08023a6d 	.word	0x08023a6d
 8023b94:	200002f8 	.word	0x200002f8
 8023b98:	08023ab1 	.word	0x08023ab1

08023b9c <drv_pollRS485Events>:

/**
 * 轮询485是否接收到数据
 */
void drv_pollRS485Events(RS485_Descriptor * pdescriptor)
{
 8023b9c:	b580      	push	{r7, lr}
 8023b9e:	b082      	sub	sp, #8
 8023ba0:	af00      	add	r7, sp, #0
 8023ba2:	6078      	str	r0, [r7, #4]
	if(pdescriptor->r_flag==true)
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	7a1b      	ldrb	r3, [r3, #8]
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	d015      	beq.n	8023bd8 <drv_pollRS485Events+0x3c>
	{
		pdescriptor->read(pdescriptor->r_buffer, pdescriptor->r_tail);
 8023bac:	687b      	ldr	r3, [r7, #4]
 8023bae:	699b      	ldr	r3, [r3, #24]
 8023bb0:	687a      	ldr	r2, [r7, #4]
 8023bb2:	6910      	ldr	r0, [r2, #16]
 8023bb4:	687a      	ldr	r2, [r7, #4]
 8023bb6:	7a52      	ldrb	r2, [r2, #9]
 8023bb8:	b292      	uxth	r2, r2
 8023bba:	4611      	mov	r1, r2
 8023bbc:	4798      	blx	r3
		
		memset(pdescriptor->r_buffer, 0, RS485_1_MAX_REVSIZE);
 8023bbe:	687b      	ldr	r3, [r7, #4]
 8023bc0:	691b      	ldr	r3, [r3, #16]
 8023bc2:	221e      	movs	r2, #30
 8023bc4:	2100      	movs	r1, #0
 8023bc6:	4618      	mov	r0, r3
 8023bc8:	f009 fa58 	bl	802d07c <memset>
		pdescriptor->r_flag = false; 
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	2200      	movs	r2, #0
 8023bd0:	721a      	strb	r2, [r3, #8]
		pdescriptor->r_tail = 0;
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	2200      	movs	r2, #0
 8023bd6:	725a      	strb	r2, [r3, #9]
	}
}
 8023bd8:	bf00      	nop
 8023bda:	3708      	adds	r7, #8
 8023bdc:	46bd      	mov	sp, r7
 8023bde:	bd80      	pop	{r7, pc}

08023be0 <drv_sendBLEData>:

/**
 * 发送BLE 数据
 */
static void drv_sendBLEData(char * bytes, uint16_t len)
{
 8023be0:	b580      	push	{r7, lr}
 8023be2:	b082      	sub	sp, #8
 8023be4:	af00      	add	r7, sp, #0
 8023be6:	6078      	str	r0, [r7, #4]
 8023be8:	460b      	mov	r3, r1
 8023bea:	807b      	strh	r3, [r7, #2]
	hal_sendUARTBytes(UART_6, bytes, len);
 8023bec:	887b      	ldrh	r3, [r7, #2]
 8023bee:	461a      	mov	r2, r3
 8023bf0:	6879      	ldr	r1, [r7, #4]
 8023bf2:	2005      	movs	r0, #5
 8023bf4:	f005 f800 	bl	8028bf8 <hal_sendUARTBytes>
}
 8023bf8:	bf00      	nop
 8023bfa:	3708      	adds	r7, #8
 8023bfc:	46bd      	mov	sp, r7
 8023bfe:	bd80      	pop	{r7, pc}

08023c00 <drv_initBLE>:

/**
 * 初始化BLE串口
 */
void drv_initBLE(BLE_Descriptor * pdescriptor)
{
 8023c00:	b580      	push	{r7, lr}
 8023c02:	b082      	sub	sp, #8
 8023c04:	af00      	add	r7, sp, #0
 8023c06:	6078      	str	r0, [r7, #4]
	hal_initUART(UART_6, pdescriptor->baudrate);
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	4619      	mov	r1, r3
 8023c0e:	2005      	movs	r0, #5
 8023c10:	f004 fece 	bl	80289b0 <hal_initUART>
	pdescriptor->write = drv_sendBLEData;
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	4a0b      	ldr	r2, [pc, #44]	; (8023c44 <drv_initBLE+0x44>)
 8023c18:	611a      	str	r2, [r3, #16]

	pdescriptor->t_buffer = (char *)pvPortMalloc(BLE_MAX_SENDSIZE);
 8023c1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8023c1e:	f007 fccb 	bl	802b5b8 <pvPortMalloc>
 8023c22:	4603      	mov	r3, r0
 8023c24:	461a      	mov	r2, r3
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	609a      	str	r2, [r3, #8]
	pdescriptor->r_buffer = (char *)pvPortMalloc(BLE_MAX_REVSIZE);
 8023c2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8023c2e:	f007 fcc3 	bl	802b5b8 <pvPortMalloc>
 8023c32:	4603      	mov	r3, r0
 8023c34:	461a      	mov	r2, r3
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	60da      	str	r2, [r3, #12]
}
 8023c3a:	bf00      	nop
 8023c3c:	3708      	adds	r7, #8
 8023c3e:	46bd      	mov	sp, r7
 8023c40:	bd80      	pop	{r7, pc}
 8023c42:	bf00      	nop
 8023c44:	08023be1 	.word	0x08023be1

08023c48 <drv_pollBLEEvents>:

/**
 * 轮询BLE是否接收到数据
 */
void drv_pollBLEEvents(BLE_Descriptor * pdescriptor)
{
 8023c48:	b580      	push	{r7, lr}
 8023c4a:	b082      	sub	sp, #8
 8023c4c:	af00      	add	r7, sp, #0
 8023c4e:	6078      	str	r0, [r7, #4]
	if(pdescriptor->r_flag==true)
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	791b      	ldrb	r3, [r3, #4]
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d016      	beq.n	8023c86 <drv_pollBLEEvents+0x3e>
	{
		pdescriptor->read(pdescriptor->r_buffer, pdescriptor->r_tail);
 8023c58:	687b      	ldr	r3, [r7, #4]
 8023c5a:	695b      	ldr	r3, [r3, #20]
 8023c5c:	687a      	ldr	r2, [r7, #4]
 8023c5e:	68d0      	ldr	r0, [r2, #12]
 8023c60:	687a      	ldr	r2, [r7, #4]
 8023c62:	7952      	ldrb	r2, [r2, #5]
 8023c64:	b292      	uxth	r2, r2
 8023c66:	4611      	mov	r1, r2
 8023c68:	4798      	blx	r3
		
		memset(pdescriptor->r_buffer, 0, BLE_MAX_REVSIZE);
 8023c6a:	687b      	ldr	r3, [r7, #4]
 8023c6c:	68db      	ldr	r3, [r3, #12]
 8023c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023c72:	2100      	movs	r1, #0
 8023c74:	4618      	mov	r0, r3
 8023c76:	f009 fa01 	bl	802d07c <memset>
		pdescriptor->r_flag = false; 
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	2200      	movs	r2, #0
 8023c7e:	711a      	strb	r2, [r3, #4]
		pdescriptor->r_tail = 0;
 8023c80:	687b      	ldr	r3, [r7, #4]
 8023c82:	2200      	movs	r2, #0
 8023c84:	715a      	strb	r2, [r3, #5]
	}
}
 8023c86:	bf00      	nop
 8023c88:	3708      	adds	r7, #8
 8023c8a:	46bd      	mov	sp, r7
 8023c8c:	bd80      	pop	{r7, pc}
	...

08023c90 <drv_sendATCmd>:
 * 参数: op 操作指令类型
 * 返回: NONE
 * 说明: NONE
 */
static void drv_sendATCmd(NETSTATE op)
{
 8023c90:	b580      	push	{r7, lr}
 8023c92:	b086      	sub	sp, #24
 8023c94:	af04      	add	r7, sp, #16
 8023c96:	4603      	mov	r3, r0
 8023c98:	71fb      	strb	r3, [r7, #7]
    static uint8_t atbuffer[50];             //AT指令buffer 最大为create socket AT指令 47字节
    
    memset(atbuffer, 0, sizeof(atbuffer));
 8023c9a:	2232      	movs	r2, #50	; 0x32
 8023c9c:	2100      	movs	r1, #0
 8023c9e:	4830      	ldr	r0, [pc, #192]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023ca0:	f009 f9ec 	bl	802d07c <memset>
 
    switch(op)
 8023ca4:	79fb      	ldrb	r3, [r7, #7]
 8023ca6:	3b02      	subs	r3, #2
 8023ca8:	2b0a      	cmp	r3, #10
 8023caa:	d84a      	bhi.n	8023d42 <drv_sendATCmd+0xb2>
 8023cac:	a201      	add	r2, pc, #4	; (adr r2, 8023cb4 <drv_sendATCmd+0x24>)
 8023cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023cb2:	bf00      	nop
 8023cb4:	08023ce1 	.word	0x08023ce1
 8023cb8:	08023ceb 	.word	0x08023ceb
 8023cbc:	08023cf5 	.word	0x08023cf5
 8023cc0:	08023cff 	.word	0x08023cff
 8023cc4:	08023d1b 	.word	0x08023d1b
 8023cc8:	08023d25 	.word	0x08023d25
 8023ccc:	08023d43 	.word	0x08023d43
 8023cd0:	08023d43 	.word	0x08023d43
 8023cd4:	08023d43 	.word	0x08023d43
 8023cd8:	08023d2f 	.word	0x08023d2f
 8023cdc:	08023d39 	.word	0x08023d39
    {
        case AT_CHECK      :sprintf(atbuffer,"ATE0\r\n");break;
 8023ce0:	4920      	ldr	r1, [pc, #128]	; (8023d64 <drv_sendATCmd+0xd4>)
 8023ce2:	481f      	ldr	r0, [pc, #124]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023ce4:	f009 fa40 	bl	802d168 <siprintf>
 8023ce8:	e02c      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_BAUDRATE   :sprintf(atbuffer,"AT+IPR=9600\r\n");break;
 8023cea:	491f      	ldr	r1, [pc, #124]	; (8023d68 <drv_sendATCmd+0xd8>)
 8023cec:	481c      	ldr	r0, [pc, #112]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023cee:	f009 fa3b 	bl	802d168 <siprintf>
 8023cf2:	e027      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_ACTIVEPDP  :sprintf(atbuffer,"AT+QIACT=1\r\n");break;
 8023cf4:	491d      	ldr	r1, [pc, #116]	; (8023d6c <drv_sendATCmd+0xdc>)
 8023cf6:	481a      	ldr	r0, [pc, #104]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023cf8:	f009 fa36 	bl	802d168 <siprintf>
 8023cfc:	e022      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_CONNECT    :sprintf(atbuffer,"AT+QIOPEN=1,0,\"TCP\",\"%d.%d.%d.%d\",%d,0,2\r\n", (CAT1_DEFAULT_IP&0xFF000000)>>24, (CAT1_DEFAULT_IP&0x00FF0000)>>16, (CAT1_DEFAULT_IP&0x0000FF00)>>8, CAT1_DEFAULT_IP&0xFF, CAT1_DEFAULT_PORT);break;
 8023cfe:	f246 335c 	movw	r3, #25436	; 0x635c
 8023d02:	9302      	str	r3, [sp, #8]
 8023d04:	2315      	movs	r3, #21
 8023d06:	9301      	str	r3, [sp, #4]
 8023d08:	2380      	movs	r3, #128	; 0x80
 8023d0a:	9300      	str	r3, [sp, #0]
 8023d0c:	232e      	movs	r3, #46	; 0x2e
 8023d0e:	2267      	movs	r2, #103	; 0x67
 8023d10:	4917      	ldr	r1, [pc, #92]	; (8023d70 <drv_sendATCmd+0xe0>)
 8023d12:	4813      	ldr	r0, [pc, #76]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d14:	f009 fa28 	bl	802d168 <siprintf>
 8023d18:	e014      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_DISCONNECT :sprintf(atbuffer,"AT+QICLOSE=0\r\n");break;
 8023d1a:	4916      	ldr	r1, [pc, #88]	; (8023d74 <drv_sendATCmd+0xe4>)
 8023d1c:	4810      	ldr	r0, [pc, #64]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d1e:	f009 fa23 	bl	802d168 <siprintf>
 8023d22:	e00f      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_QUITSEND   :sprintf(atbuffer, "+++");break;
 8023d24:	4914      	ldr	r1, [pc, #80]	; (8023d78 <drv_sendATCmd+0xe8>)
 8023d26:	480e      	ldr	r0, [pc, #56]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d28:	f009 fa1e 	bl	802d168 <siprintf>
 8023d2c:	e00a      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_SLEEP	   :sprintf(atbuffer, "AT+QSCLKEX=1,2,120\r\n");break;//使能休眠  1S进入休眠 异常恢复休眠时间120min
 8023d2e:	4913      	ldr	r1, [pc, #76]	; (8023d7c <drv_sendATCmd+0xec>)
 8023d30:	480b      	ldr	r0, [pc, #44]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d32:	f009 fa19 	bl	802d168 <siprintf>
 8023d36:	e005      	b.n	8023d44 <drv_sendATCmd+0xb4>
        case AT_ID		   :sprintf(atbuffer, "AT+QCCID\r\n\r\n");break;//读取卡号
 8023d38:	4911      	ldr	r1, [pc, #68]	; (8023d80 <drv_sendATCmd+0xf0>)
 8023d3a:	4809      	ldr	r0, [pc, #36]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d3c:	f009 fa14 	bl	802d168 <siprintf>
 8023d40:	e000      	b.n	8023d44 <drv_sendATCmd+0xb4>

        default:                            break;
 8023d42:	bf00      	nop
    }
    
    hal_sendUARTBytes(UART_2, atbuffer, strlen(atbuffer));
 8023d44:	4806      	ldr	r0, [pc, #24]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d46:	f7fc fa43 	bl	80201d0 <strlen>
 8023d4a:	4603      	mov	r3, r0
 8023d4c:	b29b      	uxth	r3, r3
 8023d4e:	461a      	mov	r2, r3
 8023d50:	4903      	ldr	r1, [pc, #12]	; (8023d60 <drv_sendATCmd+0xd0>)
 8023d52:	2001      	movs	r0, #1
 8023d54:	f004 ff50 	bl	8028bf8 <hal_sendUARTBytes>
}
 8023d58:	bf00      	nop
 8023d5a:	3708      	adds	r7, #8
 8023d5c:	46bd      	mov	sp, r7
 8023d5e:	bd80      	pop	{r7, pc}
 8023d60:	200006b4 	.word	0x200006b4
 8023d64:	0802e4e0 	.word	0x0802e4e0
 8023d68:	0802e4e8 	.word	0x0802e4e8
 8023d6c:	0802e4f8 	.word	0x0802e4f8
 8023d70:	0802e508 	.word	0x0802e508
 8023d74:	0802e534 	.word	0x0802e534
 8023d78:	0802e544 	.word	0x0802e544
 8023d7c:	0802e548 	.word	0x0802e548
 8023d80:	0802e560 	.word	0x0802e560

08023d84 <drv_sendData>:

/**
 * 发送数据到服务器
 */
static void drv_sendData(char * buffer, uint16_t size)
{
 8023d84:	b580      	push	{r7, lr}
 8023d86:	b082      	sub	sp, #8
 8023d88:	af00      	add	r7, sp, #0
 8023d8a:	6078      	str	r0, [r7, #4]
 8023d8c:	460b      	mov	r3, r1
 8023d8e:	807b      	strh	r3, [r7, #2]
    {
        EXIT_SLEEP();
        HAL_Delay(10);
    }

    hal_sendUARTBytes(UART_2, buffer, size);
 8023d90:	887b      	ldrh	r3, [r7, #2]
 8023d92:	461a      	mov	r2, r3
 8023d94:	6879      	ldr	r1, [r7, #4]
 8023d96:	2001      	movs	r0, #1
 8023d98:	f004 ff2e 	bl	8028bf8 <hal_sendUARTBytes>
    
    if(CAT1_EN_SAVEPOWER)
    {
        ENTER_SLEEP();
    }
}
 8023d9c:	bf00      	nop
 8023d9e:	3708      	adds	r7, #8
 8023da0:	46bd      	mov	sp, r7
 8023da2:	bd80      	pop	{r7, pc}

08023da4 <drv_initCat1>:

/**
 * 初始化串口 引脚 状态等
 */
void drv_initCat1(Cat1_Descriptor * pdescriptor)
{   
 8023da4:	b580      	push	{r7, lr}
 8023da6:	b084      	sub	sp, #16
 8023da8:	af02      	add	r7, sp, #8
 8023daa:	6078      	str	r0, [r7, #4]
    hal_initGPIO(Cat1_Power);
 8023dac:	4b17      	ldr	r3, [pc, #92]	; (8023e0c <drv_initCat1+0x68>)
 8023dae:	691a      	ldr	r2, [r3, #16]
 8023db0:	9200      	str	r2, [sp, #0]
 8023db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023db4:	f004 fa84 	bl	80282c0 <hal_initGPIO>
    hal_initGPIO(Cat1_Rst);
 8023db8:	4b15      	ldr	r3, [pc, #84]	; (8023e10 <drv_initCat1+0x6c>)
 8023dba:	691a      	ldr	r2, [r3, #16]
 8023dbc:	9200      	str	r2, [sp, #0]
 8023dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023dc0:	f004 fa7e 	bl	80282c0 <hal_initGPIO>
    hal_initGPIO(Cat1_Sleep);
 8023dc4:	4b13      	ldr	r3, [pc, #76]	; (8023e14 <drv_initCat1+0x70>)
 8023dc6:	691a      	ldr	r2, [r3, #16]
 8023dc8:	9200      	str	r2, [sp, #0]
 8023dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023dcc:	f004 fa78 	bl	80282c0 <hal_initGPIO>

    hal_initUART(UART_2, 115200);
 8023dd0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8023dd4:	2001      	movs	r0, #1
 8023dd6:	f004 fdeb 	bl	80289b0 <hal_initUART>

    pdescriptor->write = drv_sendData;
 8023dda:	687b      	ldr	r3, [r7, #4]
 8023ddc:	4a0e      	ldr	r2, [pc, #56]	; (8023e18 <drv_initCat1+0x74>)
 8023dde:	625a      	str	r2, [r3, #36]	; 0x24
    pdescriptor->nwkstate = POWERSWITCH;
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	2209      	movs	r2, #9
 8023de4:	705a      	strb	r2, [r3, #1]

    pdescriptor->t_buffer = (char *)pvPortMalloc(CAT1_MAX_SENDSIZE);
 8023de6:	2064      	movs	r0, #100	; 0x64
 8023de8:	f007 fbe6 	bl	802b5b8 <pvPortMalloc>
 8023dec:	4603      	mov	r3, r0
 8023dee:	461a      	mov	r2, r3
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	605a      	str	r2, [r3, #4]
    pdescriptor->r_buffer = (char *)pvPortMalloc(CAT1_MAX_REVSIZE);
 8023df4:	f240 201e 	movw	r0, #542	; 0x21e
 8023df8:	f007 fbde 	bl	802b5b8 <pvPortMalloc>
 8023dfc:	4603      	mov	r3, r0
 8023dfe:	461a      	mov	r2, r3
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	609a      	str	r2, [r3, #8]
}
 8023e04:	bf00      	nop
 8023e06:	3708      	adds	r7, #8
 8023e08:	46bd      	mov	sp, r7
 8023e0a:	bd80      	pop	{r7, pc}
 8023e0c:	2000030c 	.word	0x2000030c
 8023e10:	20000320 	.word	0x20000320
 8023e14:	20000334 	.word	0x20000334
 8023e18:	08023d85 	.word	0x08023d85

08023e1c <drv_pollSCat1Events>:

/**
 * 网络状态时间轮询 1ms调用一次
 */
NETSTATE drv_pollSCat1Events(Cat1_Descriptor * pdescriptor)
{
 8023e1c:	b580      	push	{r7, lr}
 8023e1e:	b084      	sub	sp, #16
 8023e20:	af02      	add	r7, sp, #8
 8023e22:	6078      	str	r0, [r7, #4]
    static uint8_t atresult = 0;                 //指令结果 如果返回OK 或者CONNECT则为1 返回ERROR NO则为0

    static uint8_t retrytimes = 0;               //重试次数 如果某个AT操作失败超过N次则强制重启模组 目前次数为5次

    //接收数据分发
    if(pdescriptor->r_flag)
 8023e24:	687b      	ldr	r3, [r7, #4]
 8023e26:	789b      	ldrb	r3, [r3, #2]
 8023e28:	2b00      	cmp	r3, #0
 8023e2a:	f000 80c6 	beq.w	8023fba <drv_pollSCat1Events+0x19e>
	{
		switch (pdescriptor->nwkstate)
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	785b      	ldrb	r3, [r3, #1]
 8023e32:	3b01      	subs	r3, #1
 8023e34:	2b0b      	cmp	r3, #11
 8023e36:	f200 80b1 	bhi.w	8023f9c <drv_pollSCat1Events+0x180>
 8023e3a:	a201      	add	r2, pc, #4	; (adr r2, 8023e40 <drv_pollSCat1Events+0x24>)
 8023e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023e40:	08023e71 	.word	0x08023e71
 8023e44:	08023e93 	.word	0x08023e93
 8023e48:	08023f9d 	.word	0x08023f9d
 8023e4c:	08023eeb 	.word	0x08023eeb
 8023e50:	08023f2f 	.word	0x08023f2f
 8023e54:	08023f51 	.word	0x08023f51
 8023e58:	08023f9d 	.word	0x08023f9d
 8023e5c:	08023f73 	.word	0x08023f73
 8023e60:	08023f9d 	.word	0x08023f9d
 8023e64:	08023f9d 	.word	0x08023f9d
 8023e68:	08023f0d 	.word	0x08023f0d
 8023e6c:	08023eb5 	.word	0x08023eb5
		{
			case INIT          :
								{
									if(strstr(pdescriptor->r_buffer, "RDY")!=0)
 8023e70:	687b      	ldr	r3, [r7, #4]
 8023e72:	689b      	ldr	r3, [r3, #8]
 8023e74:	49a4      	ldr	r1, [pc, #656]	; (8024108 <drv_pollSCat1Events+0x2ec>)
 8023e76:	4618      	mov	r0, r3
 8023e78:	f009 f996 	bl	802d1a8 <strstr>
 8023e7c:	4603      	mov	r3, r0
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	d003      	beq.n	8023e8a <drv_pollSCat1Events+0x6e>
									{
										atresult = 1;
 8023e82:	4ba2      	ldr	r3, [pc, #648]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023e84:	2201      	movs	r2, #1
 8023e86:	701a      	strb	r2, [r3, #0]
									}else
									{
										atresult = 0;
									}
								}break;
 8023e88:	e089      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023e8a:	4ba0      	ldr	r3, [pc, #640]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023e8c:	2200      	movs	r2, #0
 8023e8e:	701a      	strb	r2, [r3, #0]
								}break;
 8023e90:	e085      	b.n	8023f9e <drv_pollSCat1Events+0x182>
			case AT_CHECK      :
								{
									if(strstr(pdescriptor->r_buffer, "OK")!=0)
 8023e92:	687b      	ldr	r3, [r7, #4]
 8023e94:	689b      	ldr	r3, [r3, #8]
 8023e96:	499e      	ldr	r1, [pc, #632]	; (8024110 <drv_pollSCat1Events+0x2f4>)
 8023e98:	4618      	mov	r0, r3
 8023e9a:	f009 f985 	bl	802d1a8 <strstr>
 8023e9e:	4603      	mov	r3, r0
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	d003      	beq.n	8023eac <drv_pollSCat1Events+0x90>
									{
										atresult = 1;
 8023ea4:	4b99      	ldr	r3, [pc, #612]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023ea6:	2201      	movs	r2, #1
 8023ea8:	701a      	strb	r2, [r3, #0]
									}else
									{
										atresult = 0;
									}
								}break;
 8023eaa:	e078      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023eac:	4b97      	ldr	r3, [pc, #604]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023eae:	2200      	movs	r2, #0
 8023eb0:	701a      	strb	r2, [r3, #0]
								}break;
 8023eb2:	e074      	b.n	8023f9e <drv_pollSCat1Events+0x182>

			case AT_ID      :
								{
									if(strstr(pdescriptor->r_buffer, "OK")!=0)
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	689b      	ldr	r3, [r3, #8]
 8023eb8:	4995      	ldr	r1, [pc, #596]	; (8024110 <drv_pollSCat1Events+0x2f4>)
 8023eba:	4618      	mov	r0, r3
 8023ebc:	f009 f974 	bl	802d1a8 <strstr>
 8023ec0:	4603      	mov	r3, r0
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	d00d      	beq.n	8023ee2 <drv_pollSCat1Events+0xc6>
									{
										atresult = 1;
 8023ec6:	4b91      	ldr	r3, [pc, #580]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023ec8:	2201      	movs	r2, #1
 8023eca:	701a      	strb	r2, [r3, #0]

				                        memcpy(pdescriptor->ccid, pdescriptor->r_buffer+10, 20);
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	f103 000e 	add.w	r0, r3, #14
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	689b      	ldr	r3, [r3, #8]
 8023ed6:	330a      	adds	r3, #10
 8023ed8:	2214      	movs	r2, #20
 8023eda:	4619      	mov	r1, r3
 8023edc:	f009 f8c0 	bl	802d060 <memcpy>
									}else
									{
										atresult = 0;
									}
								}break;
 8023ee0:	e05d      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023ee2:	4b8a      	ldr	r3, [pc, #552]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023ee4:	2200      	movs	r2, #0
 8023ee6:	701a      	strb	r2, [r3, #0]
								}break;
 8023ee8:	e059      	b.n	8023f9e <drv_pollSCat1Events+0x182>
								{
									/* nothing.. */
								}break;
			case AT_ACTIVEPDP  :
								{
									if(strstr(pdescriptor->r_buffer, "OK")!=0)
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	689b      	ldr	r3, [r3, #8]
 8023eee:	4988      	ldr	r1, [pc, #544]	; (8024110 <drv_pollSCat1Events+0x2f4>)
 8023ef0:	4618      	mov	r0, r3
 8023ef2:	f009 f959 	bl	802d1a8 <strstr>
 8023ef6:	4603      	mov	r3, r0
 8023ef8:	2b00      	cmp	r3, #0
 8023efa:	d003      	beq.n	8023f04 <drv_pollSCat1Events+0xe8>
									{
										atresult = 1;
 8023efc:	4b83      	ldr	r3, [pc, #524]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023efe:	2201      	movs	r2, #1
 8023f00:	701a      	strb	r2, [r3, #0]
									}else
									{
										atresult = 0;
									}
								}break;
 8023f02:	e04c      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023f04:	4b81      	ldr	r3, [pc, #516]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f06:	2200      	movs	r2, #0
 8023f08:	701a      	strb	r2, [r3, #0]
								}break;
 8023f0a:	e048      	b.n	8023f9e <drv_pollSCat1Events+0x182>
			case AT_SLEEP  :
								{
									if(strstr(pdescriptor->r_buffer, "OK")!=0)
 8023f0c:	687b      	ldr	r3, [r7, #4]
 8023f0e:	689b      	ldr	r3, [r3, #8]
 8023f10:	497f      	ldr	r1, [pc, #508]	; (8024110 <drv_pollSCat1Events+0x2f4>)
 8023f12:	4618      	mov	r0, r3
 8023f14:	f009 f948 	bl	802d1a8 <strstr>
 8023f18:	4603      	mov	r3, r0
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d003      	beq.n	8023f26 <drv_pollSCat1Events+0x10a>
									{
										atresult = 1;
 8023f1e:	4b7b      	ldr	r3, [pc, #492]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f20:	2201      	movs	r2, #1
 8023f22:	701a      	strb	r2, [r3, #0]
									}else
									{
										atresult = 0;
									}
								}break;
 8023f24:	e03b      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023f26:	4b79      	ldr	r3, [pc, #484]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f28:	2200      	movs	r2, #0
 8023f2a:	701a      	strb	r2, [r3, #0]
								}break;
 8023f2c:	e037      	b.n	8023f9e <drv_pollSCat1Events+0x182>
			case AT_CONNECT    :
								{
									if(strstr(pdescriptor->r_buffer, "CONNECT")!=0)
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	689b      	ldr	r3, [r3, #8]
 8023f32:	4978      	ldr	r1, [pc, #480]	; (8024114 <drv_pollSCat1Events+0x2f8>)
 8023f34:	4618      	mov	r0, r3
 8023f36:	f009 f937 	bl	802d1a8 <strstr>
 8023f3a:	4603      	mov	r3, r0
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	d003      	beq.n	8023f48 <drv_pollSCat1Events+0x12c>
									{
										atresult = 1;
 8023f40:	4b72      	ldr	r3, [pc, #456]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f42:	2201      	movs	r2, #1
 8023f44:	701a      	strb	r2, [r3, #0]
									}else
									{
										atresult = 0;
									}
								}break;
 8023f46:	e02a      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023f48:	4b70      	ldr	r3, [pc, #448]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f4a:	2200      	movs	r2, #0
 8023f4c:	701a      	strb	r2, [r3, #0]
								}break;
 8023f4e:	e026      	b.n	8023f9e <drv_pollSCat1Events+0x182>
			case AT_DISCONNECT :
								{
									if(strstr(pdescriptor->r_buffer, "OK")!=0)
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	689b      	ldr	r3, [r3, #8]
 8023f54:	496e      	ldr	r1, [pc, #440]	; (8024110 <drv_pollSCat1Events+0x2f4>)
 8023f56:	4618      	mov	r0, r3
 8023f58:	f009 f926 	bl	802d1a8 <strstr>
 8023f5c:	4603      	mov	r3, r0
 8023f5e:	2b00      	cmp	r3, #0
 8023f60:	d003      	beq.n	8023f6a <drv_pollSCat1Events+0x14e>
									{
										atresult = 1;
 8023f62:	4b6a      	ldr	r3, [pc, #424]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f64:	2201      	movs	r2, #1
 8023f66:	701a      	strb	r2, [r3, #0]
									}else
									{
										atresult = 0;
									}
								}break;
 8023f68:	e019      	b.n	8023f9e <drv_pollSCat1Events+0x182>
										atresult = 0;
 8023f6a:	4b68      	ldr	r3, [pc, #416]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8023f6c:	2200      	movs	r2, #0
 8023f6e:	701a      	strb	r2, [r3, #0]
								}break;
 8023f70:	e015      	b.n	8023f9e <drv_pollSCat1Events+0x182>
								}break;

			case COMPLETED     :
								{
									/*重连机制*/
									if(strstr(pdescriptor->r_buffer, "NO CARRIER")!=0)
 8023f72:	687b      	ldr	r3, [r7, #4]
 8023f74:	689b      	ldr	r3, [r3, #8]
 8023f76:	4968      	ldr	r1, [pc, #416]	; (8024118 <drv_pollSCat1Events+0x2fc>)
 8023f78:	4618      	mov	r0, r3
 8023f7a:	f009 f915 	bl	802d1a8 <strstr>
 8023f7e:	4603      	mov	r3, r0
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	d003      	beq.n	8023f8c <drv_pollSCat1Events+0x170>
									{
										pdescriptor->nwkstate = POWERSWITCH;
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	2209      	movs	r2, #9
 8023f88:	705a      	strb	r2, [r3, #1]
									{
										pdescriptor->read(pdescriptor->r_buffer, pdescriptor->r_tail);
									}
								}

			default:                            break;
 8023f8a:	e007      	b.n	8023f9c <drv_pollSCat1Events+0x180>
										pdescriptor->read(pdescriptor->r_buffer, pdescriptor->r_tail);
 8023f8c:	687b      	ldr	r3, [r7, #4]
 8023f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f90:	687a      	ldr	r2, [r7, #4]
 8023f92:	6890      	ldr	r0, [r2, #8]
 8023f94:	687a      	ldr	r2, [r7, #4]
 8023f96:	8992      	ldrh	r2, [r2, #12]
 8023f98:	4611      	mov	r1, r2
 8023f9a:	4798      	blx	r3
			default:                            break;
 8023f9c:	bf00      	nop

		}

		memset(pdescriptor->r_buffer, 0, CAT1_MAX_REVSIZE);
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	689b      	ldr	r3, [r3, #8]
 8023fa2:	f240 221e 	movw	r2, #542	; 0x21e
 8023fa6:	2100      	movs	r1, #0
 8023fa8:	4618      	mov	r0, r3
 8023faa:	f009 f867 	bl	802d07c <memset>
        pdescriptor->r_flag = 0;
 8023fae:	687b      	ldr	r3, [r7, #4]
 8023fb0:	2200      	movs	r2, #0
 8023fb2:	709a      	strb	r2, [r3, #2]
        pdescriptor->r_tail = 0;
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	819a      	strh	r2, [r3, #12]
	}

    /*网络状态处理 */
    if(pdescriptor->nwkstate!=COMPLETED)
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	785b      	ldrb	r3, [r3, #1]
 8023fbe:	2b08      	cmp	r3, #8
 8023fc0:	f000 8225 	beq.w	802440e <drv_pollSCat1Events+0x5f2>
    {
        switch (pdescriptor->nwkstate)
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	785b      	ldrb	r3, [r3, #1]
 8023fc8:	2b0c      	cmp	r3, #12
 8023fca:	f200 8222 	bhi.w	8024412 <drv_pollSCat1Events+0x5f6>
 8023fce:	a201      	add	r2, pc, #4	; (adr r2, 8023fd4 <drv_pollSCat1Events+0x1b8>)
 8023fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023fd4:	08024065 	.word	0x08024065
 8023fd8:	080240b1 	.word	0x080240b1
 8023fdc:	080240f1 	.word	0x080240f1
 8023fe0:	08024413 	.word	0x08024413
 8023fe4:	080241f1 	.word	0x080241f1
 8023fe8:	080242cb 	.word	0x080242cb
 8023fec:	08024339 	.word	0x08024339
 8023ff0:	080243d7 	.word	0x080243d7
 8023ff4:	08024413 	.word	0x08024413
 8023ff8:	08024009 	.word	0x08024009
 8023ffc:	08024413 	.word	0x08024413
 8024000:	08024265 	.word	0x08024265
 8024004:	08024183 	.word	0x08024183
        {
            /*掉电重启*/
            case POWERSWITCH:
            {
                if(waitcnts++<20000/DRV_POLL_PERIOD)  //拉低20S 放电完全
 8024008:	4b44      	ldr	r3, [pc, #272]	; (802411c <drv_pollSCat1Events+0x300>)
 802400a:	881b      	ldrh	r3, [r3, #0]
 802400c:	1c5a      	adds	r2, r3, #1
 802400e:	b291      	uxth	r1, r2
 8024010:	4a42      	ldr	r2, [pc, #264]	; (802411c <drv_pollSCat1Events+0x300>)
 8024012:	8011      	strh	r1, [r2, #0]
 8024014:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8024018:	d20f      	bcs.n	802403a <drv_pollSCat1Events+0x21e>
                {
                    if(waitcnts==1)
 802401a:	4b40      	ldr	r3, [pc, #256]	; (802411c <drv_pollSCat1Events+0x300>)
 802401c:	881b      	ldrh	r3, [r3, #0]
 802401e:	2b01      	cmp	r3, #1
 8024020:	d102      	bne.n	8024028 <drv_pollSCat1Events+0x20c>
                    {
                        pdescriptor->restart();
 8024022:	687b      	ldr	r3, [r7, #4]
 8024024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024026:	4798      	blx	r3
                    }
                	SHUTDOWN();
 8024028:	4b3d      	ldr	r3, [pc, #244]	; (8024120 <drv_pollSCat1Events+0x304>)
 802402a:	2200      	movs	r2, #0
 802402c:	9201      	str	r2, [sp, #4]
 802402e:	691a      	ldr	r2, [r3, #16]
 8024030:	9200      	str	r2, [sp, #0]
 8024032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024034:	f004 f9fc 	bl	8028430 <hal_setGPIOLevel>
                    waitcnts = 0;
                    atresult = 0;

                	pdescriptor->nwkstate = INIT;
                }           
            }break;
 8024038:	e1fc      	b.n	8024434 <drv_pollSCat1Events+0x618>
                	POWERON();
 802403a:	4b39      	ldr	r3, [pc, #228]	; (8024120 <drv_pollSCat1Events+0x304>)
 802403c:	2201      	movs	r2, #1
 802403e:	9201      	str	r2, [sp, #4]
 8024040:	691a      	ldr	r2, [r3, #16]
 8024042:	9200      	str	r2, [sp, #0]
 8024044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024046:	f004 f9f3 	bl	8028430 <hal_setGPIOLevel>
                    retrytimes = 0;
 802404a:	4b36      	ldr	r3, [pc, #216]	; (8024124 <drv_pollSCat1Events+0x308>)
 802404c:	2200      	movs	r2, #0
 802404e:	701a      	strb	r2, [r3, #0]
                    waitcnts = 0;
 8024050:	4b32      	ldr	r3, [pc, #200]	; (802411c <drv_pollSCat1Events+0x300>)
 8024052:	2200      	movs	r2, #0
 8024054:	801a      	strh	r2, [r3, #0]
                    atresult = 0;
 8024056:	4b2d      	ldr	r3, [pc, #180]	; (802410c <drv_pollSCat1Events+0x2f0>)
 8024058:	2200      	movs	r2, #0
 802405a:	701a      	strb	r2, [r3, #0]
                	pdescriptor->nwkstate = INIT;
 802405c:	687b      	ldr	r3, [r7, #4]
 802405e:	2201      	movs	r2, #1
 8024060:	705a      	strb	r2, [r3, #1]
            }break;
 8024062:	e1e7      	b.n	8024434 <drv_pollSCat1Events+0x618>
            
            /*硬件复位*/
            case RESET_1:
            {
                if(waitcnts++<1000/DRV_POLL_PERIOD)
 8024064:	4b2d      	ldr	r3, [pc, #180]	; (802411c <drv_pollSCat1Events+0x300>)
 8024066:	881b      	ldrh	r3, [r3, #0]
 8024068:	1c5a      	adds	r2, r3, #1
 802406a:	b291      	uxth	r1, r2
 802406c:	4a2b      	ldr	r2, [pc, #172]	; (802411c <drv_pollSCat1Events+0x300>)
 802406e:	8011      	strh	r1, [r2, #0]
 8024070:	2b63      	cmp	r3, #99	; 0x63
 8024072:	d808      	bhi.n	8024086 <drv_pollSCat1Events+0x26a>
                {
                	PULLDOWN_RSTPIN();
 8024074:	4b2c      	ldr	r3, [pc, #176]	; (8024128 <drv_pollSCat1Events+0x30c>)
 8024076:	2200      	movs	r2, #0
 8024078:	9201      	str	r2, [sp, #4]
 802407a:	691a      	ldr	r2, [r3, #16]
 802407c:	9200      	str	r2, [sp, #0]
 802407e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024080:	f004 f9d6 	bl	8028430 <hal_setGPIOLevel>
                    waitcnts = 0;
                    atresult = 0;

                    pdescriptor->nwkstate = INIT;
                }
            }break;
 8024084:	e1d6      	b.n	8024434 <drv_pollSCat1Events+0x618>
                	PULLUP_RSTPIN();
 8024086:	4b28      	ldr	r3, [pc, #160]	; (8024128 <drv_pollSCat1Events+0x30c>)
 8024088:	2201      	movs	r2, #1
 802408a:	9201      	str	r2, [sp, #4]
 802408c:	691a      	ldr	r2, [r3, #16]
 802408e:	9200      	str	r2, [sp, #0]
 8024090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024092:	f004 f9cd 	bl	8028430 <hal_setGPIOLevel>
                    retrytimes = 0;
 8024096:	4b23      	ldr	r3, [pc, #140]	; (8024124 <drv_pollSCat1Events+0x308>)
 8024098:	2200      	movs	r2, #0
 802409a:	701a      	strb	r2, [r3, #0]
                    waitcnts = 0;
 802409c:	4b1f      	ldr	r3, [pc, #124]	; (802411c <drv_pollSCat1Events+0x300>)
 802409e:	2200      	movs	r2, #0
 80240a0:	801a      	strh	r2, [r3, #0]
                    atresult = 0;
 80240a2:	4b1a      	ldr	r3, [pc, #104]	; (802410c <drv_pollSCat1Events+0x2f0>)
 80240a4:	2200      	movs	r2, #0
 80240a6:	701a      	strb	r2, [r3, #0]
                    pdescriptor->nwkstate = INIT;
 80240a8:	687b      	ldr	r3, [r7, #4]
 80240aa:	2201      	movs	r2, #1
 80240ac:	705a      	strb	r2, [r3, #1]
            }break;
 80240ae:	e1c1      	b.n	8024434 <drv_pollSCat1Events+0x618>

            /*模组初始化中 等待15S 模块会在该时间内返回RDY*/
            case INIT:
            {
                if(waitcnts++>=15000/DRV_POLL_PERIOD)
 80240b0:	4b1a      	ldr	r3, [pc, #104]	; (802411c <drv_pollSCat1Events+0x300>)
 80240b2:	881b      	ldrh	r3, [r3, #0]
 80240b4:	1c5a      	adds	r2, r3, #1
 80240b6:	b291      	uxth	r1, r2
 80240b8:	4a18      	ldr	r2, [pc, #96]	; (802411c <drv_pollSCat1Events+0x300>)
 80240ba:	8011      	strh	r1, [r2, #0]
 80240bc:	f240 52db 	movw	r2, #1499	; 0x5db
 80240c0:	4293      	cmp	r3, r2
 80240c2:	f240 81a8 	bls.w	8024416 <drv_pollSCat1Events+0x5fa>
                {
                    waitcnts = 0;
 80240c6:	4b15      	ldr	r3, [pc, #84]	; (802411c <drv_pollSCat1Events+0x300>)
 80240c8:	2200      	movs	r2, #0
 80240ca:	801a      	strh	r2, [r3, #0]
                    
                    if(atresult==1)
 80240cc:	4b0f      	ldr	r3, [pc, #60]	; (802410c <drv_pollSCat1Events+0x2f0>)
 80240ce:	781b      	ldrb	r3, [r3, #0]
 80240d0:	2b01      	cmp	r3, #1
 80240d2:	d109      	bne.n	80240e8 <drv_pollSCat1Events+0x2cc>
                    {
                        retrytimes = 0;
 80240d4:	4b13      	ldr	r3, [pc, #76]	; (8024124 <drv_pollSCat1Events+0x308>)
 80240d6:	2200      	movs	r2, #0
 80240d8:	701a      	strb	r2, [r3, #0]
                        atresult = 0;
 80240da:	4b0c      	ldr	r3, [pc, #48]	; (802410c <drv_pollSCat1Events+0x2f0>)
 80240dc:	2200      	movs	r2, #0
 80240de:	701a      	strb	r2, [r3, #0]

                        pdescriptor->nwkstate = AT_CHECK;
 80240e0:	687b      	ldr	r3, [r7, #4]
 80240e2:	2202      	movs	r2, #2
 80240e4:	705a      	strb	r2, [r3, #1]
                    }else  
                    {                        
                        pdescriptor->nwkstate = POWERSWITCH;
                    }
                }
            }break;
 80240e6:	e196      	b.n	8024416 <drv_pollSCat1Events+0x5fa>
                        pdescriptor->nwkstate = POWERSWITCH;
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	2209      	movs	r2, #9
 80240ec:	705a      	strb	r2, [r3, #1]
            }break;
 80240ee:	e192      	b.n	8024416 <drv_pollSCat1Events+0x5fa>

            case AT_CHECK:
            {
                if(waitcnts++==0)
 80240f0:	4b0a      	ldr	r3, [pc, #40]	; (802411c <drv_pollSCat1Events+0x300>)
 80240f2:	881b      	ldrh	r3, [r3, #0]
 80240f4:	1c5a      	adds	r2, r3, #1
 80240f6:	b291      	uxth	r1, r2
 80240f8:	4a08      	ldr	r2, [pc, #32]	; (802411c <drv_pollSCat1Events+0x300>)
 80240fa:	8011      	strh	r1, [r2, #0]
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d115      	bne.n	802412c <drv_pollSCat1Events+0x310>
                {
                    drv_sendATCmd(AT_CHECK);  //第一时刻发送
 8024100:	2002      	movs	r0, #2
 8024102:	f7ff fdc5 	bl	8023c90 <drv_sendATCmd>
                    }                     
                }else   
                {

                }
            }break; 
 8024106:	e188      	b.n	802441a <drv_pollSCat1Events+0x5fe>
 8024108:	0802e570 	.word	0x0802e570
 802410c:	200006e6 	.word	0x200006e6
 8024110:	0802e574 	.word	0x0802e574
 8024114:	0802e578 	.word	0x0802e578
 8024118:	0802e580 	.word	0x0802e580
 802411c:	200006e8 	.word	0x200006e8
 8024120:	2000030c 	.word	0x2000030c
 8024124:	200006ea 	.word	0x200006ea
 8024128:	20000320 	.word	0x20000320
                }else if(waitcnts>=1000/DRV_POLL_PERIOD)
 802412c:	4b9c      	ldr	r3, [pc, #624]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802412e:	881b      	ldrh	r3, [r3, #0]
 8024130:	2b63      	cmp	r3, #99	; 0x63
 8024132:	f240 8172 	bls.w	802441a <drv_pollSCat1Events+0x5fe>
                    waitcnts = 0;
 8024136:	4b9a      	ldr	r3, [pc, #616]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024138:	2200      	movs	r2, #0
 802413a:	801a      	strh	r2, [r3, #0]
                    if(atresult==1)
 802413c:	4b99      	ldr	r3, [pc, #612]	; (80243a4 <drv_pollSCat1Events+0x588>)
 802413e:	781b      	ldrb	r3, [r3, #0]
 8024140:	2b01      	cmp	r3, #1
 8024142:	d109      	bne.n	8024158 <drv_pollSCat1Events+0x33c>
                        retrytimes = 0;
 8024144:	4b98      	ldr	r3, [pc, #608]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024146:	2200      	movs	r2, #0
 8024148:	701a      	strb	r2, [r3, #0]
                        atresult = 0;
 802414a:	4b96      	ldr	r3, [pc, #600]	; (80243a4 <drv_pollSCat1Events+0x588>)
 802414c:	2200      	movs	r2, #0
 802414e:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = AT_ID;
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	220c      	movs	r2, #12
 8024154:	705a      	strb	r2, [r3, #1]
            }break; 
 8024156:	e160      	b.n	802441a <drv_pollSCat1Events+0x5fe>
                        if(++retrytimes>=5)
 8024158:	4b93      	ldr	r3, [pc, #588]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 802415a:	781b      	ldrb	r3, [r3, #0]
 802415c:	3301      	adds	r3, #1
 802415e:	b2da      	uxtb	r2, r3
 8024160:	4b91      	ldr	r3, [pc, #580]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024162:	701a      	strb	r2, [r3, #0]
 8024164:	4b90      	ldr	r3, [pc, #576]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024166:	781b      	ldrb	r3, [r3, #0]
 8024168:	2b04      	cmp	r3, #4
 802416a:	d906      	bls.n	802417a <drv_pollSCat1Events+0x35e>
                            retrytimes = 0;
 802416c:	4b8e      	ldr	r3, [pc, #568]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 802416e:	2200      	movs	r2, #0
 8024170:	701a      	strb	r2, [r3, #0]
                            pdescriptor->nwkstate = POWERSWITCH;
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	2209      	movs	r2, #9
 8024176:	705a      	strb	r2, [r3, #1]
            }break; 
 8024178:	e14f      	b.n	802441a <drv_pollSCat1Events+0x5fe>
                            pdescriptor->nwkstate = AT_CHECK;
 802417a:	687b      	ldr	r3, [r7, #4]
 802417c:	2202      	movs	r2, #2
 802417e:	705a      	strb	r2, [r3, #1]
            }break; 
 8024180:	e14b      	b.n	802441a <drv_pollSCat1Events+0x5fe>
                //暂时不用
            }break;  

            case AT_ID:
            {
                if(waitcnts++==0)
 8024182:	4b87      	ldr	r3, [pc, #540]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024184:	881b      	ldrh	r3, [r3, #0]
 8024186:	1c5a      	adds	r2, r3, #1
 8024188:	b291      	uxth	r1, r2
 802418a:	4a85      	ldr	r2, [pc, #532]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802418c:	8011      	strh	r1, [r2, #0]
 802418e:	2b00      	cmp	r3, #0
 8024190:	d103      	bne.n	802419a <drv_pollSCat1Events+0x37e>
                {
                    drv_sendATCmd(AT_ID);  //第一时刻发送
 8024192:	200c      	movs	r0, #12
 8024194:	f7ff fd7c 	bl	8023c90 <drv_sendATCmd>
                    }
                }else
                {

                }
            }break;
 8024198:	e141      	b.n	802441e <drv_pollSCat1Events+0x602>
                }else if(waitcnts>=1000/DRV_POLL_PERIOD)
 802419a:	4b81      	ldr	r3, [pc, #516]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802419c:	881b      	ldrh	r3, [r3, #0]
 802419e:	2b63      	cmp	r3, #99	; 0x63
 80241a0:	f240 813d 	bls.w	802441e <drv_pollSCat1Events+0x602>
                    waitcnts = 0;
 80241a4:	4b7e      	ldr	r3, [pc, #504]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80241a6:	2200      	movs	r2, #0
 80241a8:	801a      	strh	r2, [r3, #0]
                    if(atresult==1)
 80241aa:	4b7e      	ldr	r3, [pc, #504]	; (80243a4 <drv_pollSCat1Events+0x588>)
 80241ac:	781b      	ldrb	r3, [r3, #0]
 80241ae:	2b01      	cmp	r3, #1
 80241b0:	d109      	bne.n	80241c6 <drv_pollSCat1Events+0x3aa>
                        retrytimes = 0;
 80241b2:	4b7d      	ldr	r3, [pc, #500]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80241b4:	2200      	movs	r2, #0
 80241b6:	701a      	strb	r2, [r3, #0]
                        atresult = 0;
 80241b8:	4b7a      	ldr	r3, [pc, #488]	; (80243a4 <drv_pollSCat1Events+0x588>)
 80241ba:	2200      	movs	r2, #0
 80241bc:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = AT_ACTIVEPDP;
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	2204      	movs	r2, #4
 80241c2:	705a      	strb	r2, [r3, #1]
            }break;
 80241c4:	e12b      	b.n	802441e <drv_pollSCat1Events+0x602>
                        if(++retrytimes>=5)
 80241c6:	4b78      	ldr	r3, [pc, #480]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80241c8:	781b      	ldrb	r3, [r3, #0]
 80241ca:	3301      	adds	r3, #1
 80241cc:	b2da      	uxtb	r2, r3
 80241ce:	4b76      	ldr	r3, [pc, #472]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80241d0:	701a      	strb	r2, [r3, #0]
 80241d2:	4b75      	ldr	r3, [pc, #468]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80241d4:	781b      	ldrb	r3, [r3, #0]
 80241d6:	2b04      	cmp	r3, #4
 80241d8:	d906      	bls.n	80241e8 <drv_pollSCat1Events+0x3cc>
                            retrytimes = 0;
 80241da:	4b73      	ldr	r3, [pc, #460]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80241dc:	2200      	movs	r2, #0
 80241de:	701a      	strb	r2, [r3, #0]
                            pdescriptor->nwkstate = POWERSWITCH;
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	2209      	movs	r2, #9
 80241e4:	705a      	strb	r2, [r3, #1]
            }break;
 80241e6:	e11a      	b.n	802441e <drv_pollSCat1Events+0x602>
                            pdescriptor->nwkstate = AT_ID;
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	220c      	movs	r2, #12
 80241ec:	705a      	strb	r2, [r3, #1]
            }break;
 80241ee:	e116      	b.n	802441e <drv_pollSCat1Events+0x602>

            case AT_ACTIVEPDP:
            {
                if(waitcnts++==0)
 80241f0:	4b6b      	ldr	r3, [pc, #428]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80241f2:	881b      	ldrh	r3, [r3, #0]
 80241f4:	1c5a      	adds	r2, r3, #1
 80241f6:	b291      	uxth	r1, r2
 80241f8:	4a69      	ldr	r2, [pc, #420]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80241fa:	8011      	strh	r1, [r2, #0]
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	d103      	bne.n	8024208 <drv_pollSCat1Events+0x3ec>
                {
                    drv_sendATCmd(AT_ACTIVEPDP);  //第一时刻发送
 8024200:	2004      	movs	r0, #4
 8024202:	f7ff fd45 	bl	8023c90 <drv_sendATCmd>
                    }                     
                }else   
                {

                }
            }break;   
 8024206:	e10c      	b.n	8024422 <drv_pollSCat1Events+0x606>
                }else if(waitcnts>=2000/DRV_POLL_PERIOD)
 8024208:	4b65      	ldr	r3, [pc, #404]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802420a:	881b      	ldrh	r3, [r3, #0]
 802420c:	2bc7      	cmp	r3, #199	; 0xc7
 802420e:	f240 8108 	bls.w	8024422 <drv_pollSCat1Events+0x606>
                    waitcnts = 0;
 8024212:	4b63      	ldr	r3, [pc, #396]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024214:	2200      	movs	r2, #0
 8024216:	801a      	strh	r2, [r3, #0]
                    if(atresult==1)
 8024218:	4b62      	ldr	r3, [pc, #392]	; (80243a4 <drv_pollSCat1Events+0x588>)
 802421a:	781b      	ldrb	r3, [r3, #0]
 802421c:	2b01      	cmp	r3, #1
 802421e:	d10c      	bne.n	802423a <drv_pollSCat1Events+0x41e>
                        atresult = 0;
 8024220:	4b60      	ldr	r3, [pc, #384]	; (80243a4 <drv_pollSCat1Events+0x588>)
 8024222:	2200      	movs	r2, #0
 8024224:	701a      	strb	r2, [r3, #0]
                        retrytimes = 0;
 8024226:	4b60      	ldr	r3, [pc, #384]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024228:	2200      	movs	r2, #0
 802422a:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = AT_SLEEP;  //设置进入低功耗
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	220b      	movs	r2, #11
 8024230:	705a      	strb	r2, [r3, #1]
                        pdescriptor->regist();
 8024232:	687b      	ldr	r3, [r7, #4]
 8024234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024236:	4798      	blx	r3
            }break;   
 8024238:	e0f3      	b.n	8024422 <drv_pollSCat1Events+0x606>
                        if(++retrytimes>=90)  //最长等待3分钟
 802423a:	4b5b      	ldr	r3, [pc, #364]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 802423c:	781b      	ldrb	r3, [r3, #0]
 802423e:	3301      	adds	r3, #1
 8024240:	b2da      	uxtb	r2, r3
 8024242:	4b59      	ldr	r3, [pc, #356]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024244:	701a      	strb	r2, [r3, #0]
 8024246:	4b58      	ldr	r3, [pc, #352]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024248:	781b      	ldrb	r3, [r3, #0]
 802424a:	2b59      	cmp	r3, #89	; 0x59
 802424c:	d906      	bls.n	802425c <drv_pollSCat1Events+0x440>
                            retrytimes = 0;
 802424e:	4b56      	ldr	r3, [pc, #344]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024250:	2200      	movs	r2, #0
 8024252:	701a      	strb	r2, [r3, #0]
                            pdescriptor->nwkstate = POWERSWITCH;
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	2209      	movs	r2, #9
 8024258:	705a      	strb	r2, [r3, #1]
            }break;   
 802425a:	e0e2      	b.n	8024422 <drv_pollSCat1Events+0x606>
                            pdescriptor->nwkstate = AT_ACTIVEPDP;
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	2204      	movs	r2, #4
 8024260:	705a      	strb	r2, [r3, #1]
            }break;   
 8024262:	e0de      	b.n	8024422 <drv_pollSCat1Events+0x606>

            case AT_SLEEP:
            {
                if(waitcnts++==0)
 8024264:	4b4e      	ldr	r3, [pc, #312]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024266:	881b      	ldrh	r3, [r3, #0]
 8024268:	1c5a      	adds	r2, r3, #1
 802426a:	b291      	uxth	r1, r2
 802426c:	4a4c      	ldr	r2, [pc, #304]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802426e:	8011      	strh	r1, [r2, #0]
 8024270:	2b00      	cmp	r3, #0
 8024272:	d103      	bne.n	802427c <drv_pollSCat1Events+0x460>
                {
                    drv_sendATCmd(AT_SLEEP);  //第一时刻发送 300ms左右回复
 8024274:	200b      	movs	r0, #11
 8024276:	f7ff fd0b 	bl	8023c90 <drv_sendATCmd>
                    }
                }else
                {

                }
            }	break;
 802427a:	e0d4      	b.n	8024426 <drv_pollSCat1Events+0x60a>
                }else if(waitcnts>=1000/DRV_POLL_PERIOD)
 802427c:	4b48      	ldr	r3, [pc, #288]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802427e:	881b      	ldrh	r3, [r3, #0]
 8024280:	2b63      	cmp	r3, #99	; 0x63
 8024282:	f240 80d0 	bls.w	8024426 <drv_pollSCat1Events+0x60a>
                    waitcnts = 0;
 8024286:	4b46      	ldr	r3, [pc, #280]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024288:	2200      	movs	r2, #0
 802428a:	801a      	strh	r2, [r3, #0]
                    if(atresult==1)
 802428c:	4b45      	ldr	r3, [pc, #276]	; (80243a4 <drv_pollSCat1Events+0x588>)
 802428e:	781b      	ldrb	r3, [r3, #0]
 8024290:	2b01      	cmp	r3, #1
 8024292:	d109      	bne.n	80242a8 <drv_pollSCat1Events+0x48c>
                        atresult = 0;
 8024294:	4b43      	ldr	r3, [pc, #268]	; (80243a4 <drv_pollSCat1Events+0x588>)
 8024296:	2200      	movs	r2, #0
 8024298:	701a      	strb	r2, [r3, #0]
                        retrytimes = 0;
 802429a:	4b43      	ldr	r3, [pc, #268]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 802429c:	2200      	movs	r2, #0
 802429e:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = AT_CONNECT;
 80242a0:	687b      	ldr	r3, [r7, #4]
 80242a2:	2205      	movs	r2, #5
 80242a4:	705a      	strb	r2, [r3, #1]
            }	break;
 80242a6:	e0be      	b.n	8024426 <drv_pollSCat1Events+0x60a>
                        if(++retrytimes>=5)
 80242a8:	4b3f      	ldr	r3, [pc, #252]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80242aa:	781b      	ldrb	r3, [r3, #0]
 80242ac:	3301      	adds	r3, #1
 80242ae:	b2da      	uxtb	r2, r3
 80242b0:	4b3d      	ldr	r3, [pc, #244]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80242b2:	701a      	strb	r2, [r3, #0]
 80242b4:	4b3c      	ldr	r3, [pc, #240]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80242b6:	781b      	ldrb	r3, [r3, #0]
 80242b8:	2b04      	cmp	r3, #4
 80242ba:	d902      	bls.n	80242c2 <drv_pollSCat1Events+0x4a6>
                            retrytimes = 0;
 80242bc:	4b3a      	ldr	r3, [pc, #232]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 80242be:	2200      	movs	r2, #0
 80242c0:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = POWERSWITCH;
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	2209      	movs	r2, #9
 80242c6:	705a      	strb	r2, [r3, #1]
            }	break;
 80242c8:	e0ad      	b.n	8024426 <drv_pollSCat1Events+0x60a>

            case AT_CONNECT:
            {
                if(waitcnts++==0)
 80242ca:	4b35      	ldr	r3, [pc, #212]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80242cc:	881b      	ldrh	r3, [r3, #0]
 80242ce:	1c5a      	adds	r2, r3, #1
 80242d0:	b291      	uxth	r1, r2
 80242d2:	4a33      	ldr	r2, [pc, #204]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80242d4:	8011      	strh	r1, [r2, #0]
 80242d6:	2b00      	cmp	r3, #0
 80242d8:	d103      	bne.n	80242e2 <drv_pollSCat1Events+0x4c6>
                {
                    drv_sendATCmd(AT_CONNECT);  //第一时刻发送
 80242da:	2005      	movs	r0, #5
 80242dc:	f7ff fcd8 	bl	8023c90 <drv_sendATCmd>
                    }                     
                }else   
                {

                }
            }break;    
 80242e0:	e0a3      	b.n	802442a <drv_pollSCat1Events+0x60e>
                }else if(waitcnts>=3000/DRV_POLL_PERIOD)
 80242e2:	4b2f      	ldr	r3, [pc, #188]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80242e4:	881b      	ldrh	r3, [r3, #0]
 80242e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80242ea:	f0c0 809e 	bcc.w	802442a <drv_pollSCat1Events+0x60e>
                    waitcnts = 0;
 80242ee:	4b2c      	ldr	r3, [pc, #176]	; (80243a0 <drv_pollSCat1Events+0x584>)
 80242f0:	2200      	movs	r2, #0
 80242f2:	801a      	strh	r2, [r3, #0]
                    if(atresult==1)
 80242f4:	4b2b      	ldr	r3, [pc, #172]	; (80243a4 <drv_pollSCat1Events+0x588>)
 80242f6:	781b      	ldrb	r3, [r3, #0]
 80242f8:	2b01      	cmp	r3, #1
 80242fa:	d10c      	bne.n	8024316 <drv_pollSCat1Events+0x4fa>
                        atresult = 0;
 80242fc:	4b29      	ldr	r3, [pc, #164]	; (80243a4 <drv_pollSCat1Events+0x588>)
 80242fe:	2200      	movs	r2, #0
 8024300:	701a      	strb	r2, [r3, #0]
                        retrytimes = 0;
 8024302:	4b29      	ldr	r3, [pc, #164]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024304:	2200      	movs	r2, #0
 8024306:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = COMPLETED;
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	2208      	movs	r2, #8
 802430c:	705a      	strb	r2, [r3, #1]
                        pdescriptor->connectServerEvent();
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024312:	4798      	blx	r3
            }break;    
 8024314:	e089      	b.n	802442a <drv_pollSCat1Events+0x60e>
                        if(++retrytimes>=5)
 8024316:	4b24      	ldr	r3, [pc, #144]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024318:	781b      	ldrb	r3, [r3, #0]
 802431a:	3301      	adds	r3, #1
 802431c:	b2da      	uxtb	r2, r3
 802431e:	4b22      	ldr	r3, [pc, #136]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024320:	701a      	strb	r2, [r3, #0]
 8024322:	4b21      	ldr	r3, [pc, #132]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024324:	781b      	ldrb	r3, [r3, #0]
 8024326:	2b04      	cmp	r3, #4
 8024328:	d902      	bls.n	8024330 <drv_pollSCat1Events+0x514>
                            retrytimes = 0;
 802432a:	4b1f      	ldr	r3, [pc, #124]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 802432c:	2200      	movs	r2, #0
 802432e:	701a      	strb	r2, [r3, #0]
                        pdescriptor->nwkstate = POWERSWITCH;
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	2209      	movs	r2, #9
 8024334:	705a      	strb	r2, [r3, #1]
            }break;    
 8024336:	e078      	b.n	802442a <drv_pollSCat1Events+0x60e>

            case AT_DISCONNECT:
            {
                if(waitcnts++<1500/DRV_POLL_PERIOD)
 8024338:	4b19      	ldr	r3, [pc, #100]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802433a:	881b      	ldrh	r3, [r3, #0]
 802433c:	1c5a      	adds	r2, r3, #1
 802433e:	b291      	uxth	r1, r2
 8024340:	4a17      	ldr	r2, [pc, #92]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024342:	8011      	strh	r1, [r2, #0]
 8024344:	2b95      	cmp	r3, #149	; 0x95
 8024346:	d972      	bls.n	802442e <drv_pollSCat1Events+0x612>
                {
                    /*退出透传前1.5S无操作*/
                }else if(waitcnts==1600/DRV_POLL_PERIOD)
 8024348:	4b15      	ldr	r3, [pc, #84]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802434a:	881b      	ldrh	r3, [r3, #0]
 802434c:	2ba0      	cmp	r3, #160	; 0xa0
 802434e:	d103      	bne.n	8024358 <drv_pollSCat1Events+0x53c>
                {
                    /*退出透传*/
                    drv_sendATCmd(AT_QUITSEND); 
 8024350:	2007      	movs	r0, #7
 8024352:	f7ff fc9d 	bl	8023c90 <drv_sendATCmd>

                }else
                {

                }
            }break; 
 8024356:	e06a      	b.n	802442e <drv_pollSCat1Events+0x612>
                }else if(waitcnts>=3000/DRV_POLL_PERIOD) 
 8024358:	4b11      	ldr	r3, [pc, #68]	; (80243a0 <drv_pollSCat1Events+0x584>)
 802435a:	881b      	ldrh	r3, [r3, #0]
 802435c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8024360:	d365      	bcc.n	802442e <drv_pollSCat1Events+0x612>
                    if(waitcnts==3000/DRV_POLL_PERIOD)
 8024362:	4b0f      	ldr	r3, [pc, #60]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024364:	881b      	ldrh	r3, [r3, #0]
 8024366:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 802436a:	d103      	bne.n	8024374 <drv_pollSCat1Events+0x558>
                        drv_sendATCmd(AT_DISCONNECT); 
 802436c:	2006      	movs	r0, #6
 802436e:	f7ff fc8f 	bl	8023c90 <drv_sendATCmd>
            }break; 
 8024372:	e05c      	b.n	802442e <drv_pollSCat1Events+0x612>
                    }else if(waitcnts>=4000/DRV_POLL_PERIOD)
 8024374:	4b0a      	ldr	r3, [pc, #40]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024376:	881b      	ldrh	r3, [r3, #0]
 8024378:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 802437c:	d357      	bcc.n	802442e <drv_pollSCat1Events+0x612>
                        waitcnts = 0;
 802437e:	4b08      	ldr	r3, [pc, #32]	; (80243a0 <drv_pollSCat1Events+0x584>)
 8024380:	2200      	movs	r2, #0
 8024382:	801a      	strh	r2, [r3, #0]
                        if(atresult==1)
 8024384:	4b07      	ldr	r3, [pc, #28]	; (80243a4 <drv_pollSCat1Events+0x588>)
 8024386:	781b      	ldrb	r3, [r3, #0]
 8024388:	2b01      	cmp	r3, #1
 802438a:	d10f      	bne.n	80243ac <drv_pollSCat1Events+0x590>
                            atresult = 0;
 802438c:	4b05      	ldr	r3, [pc, #20]	; (80243a4 <drv_pollSCat1Events+0x588>)
 802438e:	2200      	movs	r2, #0
 8024390:	701a      	strb	r2, [r3, #0]
                            retrytimes = 0;
 8024392:	4b05      	ldr	r3, [pc, #20]	; (80243a8 <drv_pollSCat1Events+0x58c>)
 8024394:	2200      	movs	r2, #0
 8024396:	701a      	strb	r2, [r3, #0]
                            pdescriptor->nwkstate = NONEOP;
 8024398:	687b      	ldr	r3, [r7, #4]
 802439a:	220a      	movs	r2, #10
 802439c:	705a      	strb	r2, [r3, #1]
            }break; 
 802439e:	e046      	b.n	802442e <drv_pollSCat1Events+0x612>
 80243a0:	200006e8 	.word	0x200006e8
 80243a4:	200006e6 	.word	0x200006e6
 80243a8:	200006ea 	.word	0x200006ea
                            if(++retrytimes>=5)
 80243ac:	4b24      	ldr	r3, [pc, #144]	; (8024440 <drv_pollSCat1Events+0x624>)
 80243ae:	781b      	ldrb	r3, [r3, #0]
 80243b0:	3301      	adds	r3, #1
 80243b2:	b2da      	uxtb	r2, r3
 80243b4:	4b22      	ldr	r3, [pc, #136]	; (8024440 <drv_pollSCat1Events+0x624>)
 80243b6:	701a      	strb	r2, [r3, #0]
 80243b8:	4b21      	ldr	r3, [pc, #132]	; (8024440 <drv_pollSCat1Events+0x624>)
 80243ba:	781b      	ldrb	r3, [r3, #0]
 80243bc:	2b04      	cmp	r3, #4
 80243be:	d906      	bls.n	80243ce <drv_pollSCat1Events+0x5b2>
                                retrytimes = 0;
 80243c0:	4b1f      	ldr	r3, [pc, #124]	; (8024440 <drv_pollSCat1Events+0x624>)
 80243c2:	2200      	movs	r2, #0
 80243c4:	701a      	strb	r2, [r3, #0]
                                pdescriptor->nwkstate = POWERSWITCH;
 80243c6:	687b      	ldr	r3, [r7, #4]
 80243c8:	2209      	movs	r2, #9
 80243ca:	705a      	strb	r2, [r3, #1]
            }break; 
 80243cc:	e02f      	b.n	802442e <drv_pollSCat1Events+0x612>
                                pdescriptor->nwkstate = AT_DISCONNECT;
 80243ce:	687b      	ldr	r3, [r7, #4]
 80243d0:	2206      	movs	r2, #6
 80243d2:	705a      	strb	r2, [r3, #1]
            }break; 
 80243d4:	e02b      	b.n	802442e <drv_pollSCat1Events+0x612>

            case AT_QUITSEND:
            {
                if(waitcnts++<1500/DRV_POLL_PERIOD)
 80243d6:	4b1b      	ldr	r3, [pc, #108]	; (8024444 <drv_pollSCat1Events+0x628>)
 80243d8:	881b      	ldrh	r3, [r3, #0]
 80243da:	1c5a      	adds	r2, r3, #1
 80243dc:	b291      	uxth	r1, r2
 80243de:	4a19      	ldr	r2, [pc, #100]	; (8024444 <drv_pollSCat1Events+0x628>)
 80243e0:	8011      	strh	r1, [r2, #0]
 80243e2:	2b95      	cmp	r3, #149	; 0x95
 80243e4:	d925      	bls.n	8024432 <drv_pollSCat1Events+0x616>
                {
                    /*退出透传前1.5S无操作*/
                }else if(waitcnts==1500/DRV_POLL_PERIOD)
 80243e6:	4b17      	ldr	r3, [pc, #92]	; (8024444 <drv_pollSCat1Events+0x628>)
 80243e8:	881b      	ldrh	r3, [r3, #0]
 80243ea:	2b96      	cmp	r3, #150	; 0x96
 80243ec:	d106      	bne.n	80243fc <drv_pollSCat1Events+0x5e0>
                {
                    waitcnts = 0;
 80243ee:	4b15      	ldr	r3, [pc, #84]	; (8024444 <drv_pollSCat1Events+0x628>)
 80243f0:	2200      	movs	r2, #0
 80243f2:	801a      	strh	r2, [r3, #0]
                    
                    /*退出透传*/
                    drv_sendATCmd(AT_QUITSEND); 
 80243f4:	2007      	movs	r0, #7
 80243f6:	f7ff fc4b 	bl	8023c90 <drv_sendATCmd>
                    pdescriptor->nwkstate = NONEOP;
                }else
                {

                }
            }break;  
 80243fa:	e01a      	b.n	8024432 <drv_pollSCat1Events+0x616>
                }else if(waitcnts>=3000/DRV_POLL_PERIOD) 
 80243fc:	4b11      	ldr	r3, [pc, #68]	; (8024444 <drv_pollSCat1Events+0x628>)
 80243fe:	881b      	ldrh	r3, [r3, #0]
 8024400:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8024404:	d315      	bcc.n	8024432 <drv_pollSCat1Events+0x616>
                    pdescriptor->nwkstate = NONEOP;
 8024406:	687b      	ldr	r3, [r7, #4]
 8024408:	220a      	movs	r2, #10
 802440a:	705a      	strb	r2, [r3, #1]
            }break;  
 802440c:	e011      	b.n	8024432 <drv_pollSCat1Events+0x616>
                        
            default:break;
        }
    }
 802440e:	bf00      	nop
 8024410:	e010      	b.n	8024434 <drv_pollSCat1Events+0x618>
            default:break;
 8024412:	bf00      	nop
 8024414:	e00e      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break;
 8024416:	bf00      	nop
 8024418:	e00c      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break; 
 802441a:	bf00      	nop
 802441c:	e00a      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break;
 802441e:	bf00      	nop
 8024420:	e008      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break;   
 8024422:	bf00      	nop
 8024424:	e006      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }	break;
 8024426:	bf00      	nop
 8024428:	e004      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break;    
 802442a:	bf00      	nop
 802442c:	e002      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break; 
 802442e:	bf00      	nop
 8024430:	e000      	b.n	8024434 <drv_pollSCat1Events+0x618>
            }break;  
 8024432:	bf00      	nop

    return pdescriptor->nwkstate;
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	785b      	ldrb	r3, [r3, #1]
}
 8024438:	4618      	mov	r0, r3
 802443a:	3708      	adds	r7, #8
 802443c:	46bd      	mov	sp, r7
 802443e:	bd80      	pop	{r7, pc}
 8024440:	200006ea 	.word	0x200006ea
 8024444:	200006e8 	.word	0x200006e8

08024448 <drv_sendDebugData>:

/**
 * 发送debug 数据
 */
static void drv_sendDebugData(char * bytes, uint16_t len)
{
 8024448:	b580      	push	{r7, lr}
 802444a:	b082      	sub	sp, #8
 802444c:	af00      	add	r7, sp, #0
 802444e:	6078      	str	r0, [r7, #4]
 8024450:	460b      	mov	r3, r1
 8024452:	807b      	strh	r3, [r7, #2]
	hal_sendUARTBytes(UART_1, bytes, len);
 8024454:	887b      	ldrh	r3, [r7, #2]
 8024456:	461a      	mov	r2, r3
 8024458:	6879      	ldr	r1, [r7, #4]
 802445a:	2000      	movs	r0, #0
 802445c:	f004 fbcc 	bl	8028bf8 <hal_sendUARTBytes>
}
 8024460:	bf00      	nop
 8024462:	3708      	adds	r7, #8
 8024464:	46bd      	mov	sp, r7
 8024466:	bd80      	pop	{r7, pc}

08024468 <drv_initDebug>:

/**
 * 初始化Debug串口
 */
void drv_initDebug(Debug_Descriptor * pdescriptor)
{
 8024468:	b580      	push	{r7, lr}
 802446a:	b082      	sub	sp, #8
 802446c:	af00      	add	r7, sp, #0
 802446e:	6078      	str	r0, [r7, #4]
	hal_initUART(UART_1, pdescriptor->baudrate);
 8024470:	687b      	ldr	r3, [r7, #4]
 8024472:	681b      	ldr	r3, [r3, #0]
 8024474:	4619      	mov	r1, r3
 8024476:	2000      	movs	r0, #0
 8024478:	f004 fa9a 	bl	80289b0 <hal_initUART>
	pdescriptor->write = drv_sendDebugData;
 802447c:	687b      	ldr	r3, [r7, #4]
 802447e:	4a0a      	ldr	r2, [pc, #40]	; (80244a8 <drv_initDebug+0x40>)
 8024480:	611a      	str	r2, [r3, #16]

	pdescriptor->t_buffer = (char *)pvPortMalloc(DEBUG_MAX_SENDSIZE);
 8024482:	201e      	movs	r0, #30
 8024484:	f007 f898 	bl	802b5b8 <pvPortMalloc>
 8024488:	4603      	mov	r3, r0
 802448a:	461a      	mov	r2, r3
 802448c:	687b      	ldr	r3, [r7, #4]
 802448e:	609a      	str	r2, [r3, #8]
	pdescriptor->r_buffer = (char *)pvPortMalloc(DEBUG_MAX_REVSIZE);
 8024490:	201e      	movs	r0, #30
 8024492:	f007 f891 	bl	802b5b8 <pvPortMalloc>
 8024496:	4603      	mov	r3, r0
 8024498:	461a      	mov	r2, r3
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	60da      	str	r2, [r3, #12]
}
 802449e:	bf00      	nop
 80244a0:	3708      	adds	r7, #8
 80244a2:	46bd      	mov	sp, r7
 80244a4:	bd80      	pop	{r7, pc}
 80244a6:	bf00      	nop
 80244a8:	08024449 	.word	0x08024449

080244ac <drv_writeSysLED>:
GPIOs LED_Data_State = {OUTPUT, GPIOE, GPIO_PIN_2, 1, 0, 0, 0, 0}; //跳传数据指示灯
/**
 * 写Sys LED状态
 */
static void drv_writeSysLED(char level)
{
 80244ac:	b580      	push	{r7, lr}
 80244ae:	b084      	sub	sp, #16
 80244b0:	af02      	add	r7, sp, #8
 80244b2:	4603      	mov	r3, r0
 80244b4:	71fb      	strb	r3, [r7, #7]
    hal_setGPIOLevel(LED_Sys_State, level);
 80244b6:	4b06      	ldr	r3, [pc, #24]	; (80244d0 <drv_writeSysLED+0x24>)
 80244b8:	79fa      	ldrb	r2, [r7, #7]
 80244ba:	9201      	str	r2, [sp, #4]
 80244bc:	691a      	ldr	r2, [r3, #16]
 80244be:	9200      	str	r2, [sp, #0]
 80244c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80244c2:	f003 ffb5 	bl	8028430 <hal_setGPIOLevel>
}
 80244c6:	bf00      	nop
 80244c8:	3708      	adds	r7, #8
 80244ca:	46bd      	mov	sp, r7
 80244cc:	bd80      	pop	{r7, pc}
 80244ce:	bf00      	nop
 80244d0:	20000348 	.word	0x20000348

080244d4 <drv_writeNetLED>:

/**
 * 写Net LED状态
 */
static void drv_writeNetLED(char level)
{
 80244d4:	b580      	push	{r7, lr}
 80244d6:	b084      	sub	sp, #16
 80244d8:	af02      	add	r7, sp, #8
 80244da:	4603      	mov	r3, r0
 80244dc:	71fb      	strb	r3, [r7, #7]
    hal_setGPIOLevel(LED_Net_State, level);
 80244de:	4b06      	ldr	r3, [pc, #24]	; (80244f8 <drv_writeNetLED+0x24>)
 80244e0:	79fa      	ldrb	r2, [r7, #7]
 80244e2:	9201      	str	r2, [sp, #4]
 80244e4:	691a      	ldr	r2, [r3, #16]
 80244e6:	9200      	str	r2, [sp, #0]
 80244e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80244ea:	f003 ffa1 	bl	8028430 <hal_setGPIOLevel>
}
 80244ee:	bf00      	nop
 80244f0:	3708      	adds	r7, #8
 80244f2:	46bd      	mov	sp, r7
 80244f4:	bd80      	pop	{r7, pc}
 80244f6:	bf00      	nop
 80244f8:	2000035c 	.word	0x2000035c

080244fc <drv_writeDataLED>:

/**
 * 写跳传 LED状态
 */
static void drv_writeDataLED(char level)
{
 80244fc:	b580      	push	{r7, lr}
 80244fe:	b084      	sub	sp, #16
 8024500:	af02      	add	r7, sp, #8
 8024502:	4603      	mov	r3, r0
 8024504:	71fb      	strb	r3, [r7, #7]
    hal_setGPIOLevel(LED_Data_State, level);
 8024506:	4b06      	ldr	r3, [pc, #24]	; (8024520 <drv_writeDataLED+0x24>)
 8024508:	79fa      	ldrb	r2, [r7, #7]
 802450a:	9201      	str	r2, [sp, #4]
 802450c:	691a      	ldr	r2, [r3, #16]
 802450e:	9200      	str	r2, [sp, #0]
 8024510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024512:	f003 ff8d 	bl	8028430 <hal_setGPIOLevel>
}
 8024516:	bf00      	nop
 8024518:	3708      	adds	r7, #8
 802451a:	46bd      	mov	sp, r7
 802451c:	bd80      	pop	{r7, pc}
 802451e:	bf00      	nop
 8024520:	20000370 	.word	0x20000370

08024524 <drv_readSysLED>:

/**
 * 读Sys LED状态
 */
static char drv_readSysLED(void)
{
 8024524:	b480      	push	{r7}
 8024526:	af00      	add	r7, sp, #0
    return LED_Sys_State.gpio_port->ODR & LED_Sys_State.gpio_pin ? 1 : 0;
 8024528:	4b07      	ldr	r3, [pc, #28]	; (8024548 <drv_readSysLED+0x24>)
 802452a:	685b      	ldr	r3, [r3, #4]
 802452c:	695b      	ldr	r3, [r3, #20]
 802452e:	4a06      	ldr	r2, [pc, #24]	; (8024548 <drv_readSysLED+0x24>)
 8024530:	8912      	ldrh	r2, [r2, #8]
 8024532:	4013      	ands	r3, r2
 8024534:	2b00      	cmp	r3, #0
 8024536:	bf14      	ite	ne
 8024538:	2301      	movne	r3, #1
 802453a:	2300      	moveq	r3, #0
 802453c:	b2db      	uxtb	r3, r3
}
 802453e:	4618      	mov	r0, r3
 8024540:	46bd      	mov	sp, r7
 8024542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024546:	4770      	bx	lr
 8024548:	20000348 	.word	0x20000348

0802454c <drv_readNetLED>:

/**
 * 写Net LED状态
 */
static char drv_readNetLED(void)
{
 802454c:	b480      	push	{r7}
 802454e:	af00      	add	r7, sp, #0
    return LED_Net_State.gpio_port->ODR & LED_Sys_State.gpio_pin ? 1 : 0;
 8024550:	4b07      	ldr	r3, [pc, #28]	; (8024570 <drv_readNetLED+0x24>)
 8024552:	685b      	ldr	r3, [r3, #4]
 8024554:	695b      	ldr	r3, [r3, #20]
 8024556:	4a07      	ldr	r2, [pc, #28]	; (8024574 <drv_readNetLED+0x28>)
 8024558:	8912      	ldrh	r2, [r2, #8]
 802455a:	4013      	ands	r3, r2
 802455c:	2b00      	cmp	r3, #0
 802455e:	bf14      	ite	ne
 8024560:	2301      	movne	r3, #1
 8024562:	2300      	moveq	r3, #0
 8024564:	b2db      	uxtb	r3, r3
}
 8024566:	4618      	mov	r0, r3
 8024568:	46bd      	mov	sp, r7
 802456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802456e:	4770      	bx	lr
 8024570:	2000035c 	.word	0x2000035c
 8024574:	20000348 	.word	0x20000348

08024578 <drv_readDataLED>:

/**
 * 写跳传 LED状态
 */
static char drv_readDataLED(void)
{
 8024578:	b480      	push	{r7}
 802457a:	af00      	add	r7, sp, #0
    return LED_Data_State.gpio_port->ODR & LED_Sys_State.gpio_pin ? 1 : 0;
 802457c:	4b07      	ldr	r3, [pc, #28]	; (802459c <drv_readDataLED+0x24>)
 802457e:	685b      	ldr	r3, [r3, #4]
 8024580:	695b      	ldr	r3, [r3, #20]
 8024582:	4a07      	ldr	r2, [pc, #28]	; (80245a0 <drv_readDataLED+0x28>)
 8024584:	8912      	ldrh	r2, [r2, #8]
 8024586:	4013      	ands	r3, r2
 8024588:	2b00      	cmp	r3, #0
 802458a:	bf14      	ite	ne
 802458c:	2301      	movne	r3, #1
 802458e:	2300      	moveq	r3, #0
 8024590:	b2db      	uxtb	r3, r3
}
 8024592:	4618      	mov	r0, r3
 8024594:	46bd      	mov	sp, r7
 8024596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802459a:	4770      	bx	lr
 802459c:	20000370 	.word	0x20000370
 80245a0:	20000348 	.word	0x20000348

080245a4 <drv_initLED>:
/**
 * 初始化LED
 * 
 */
void drv_initLED(LED_Descriptor * pdescriptor)
{
 80245a4:	b580      	push	{r7, lr}
 80245a6:	b084      	sub	sp, #16
 80245a8:	af02      	add	r7, sp, #8
 80245aa:	6078      	str	r0, [r7, #4]
    if(pdescriptor->ledNmb==LED_SYS)
 80245ac:	687b      	ldr	r3, [r7, #4]
 80245ae:	785b      	ldrb	r3, [r3, #1]
 80245b0:	2b00      	cmp	r3, #0
 80245b2:	d10c      	bne.n	80245ce <drv_initLED+0x2a>
    {
        hal_initGPIO(LED_Sys_State);
 80245b4:	4b18      	ldr	r3, [pc, #96]	; (8024618 <drv_initLED+0x74>)
 80245b6:	691a      	ldr	r2, [r3, #16]
 80245b8:	9200      	str	r2, [sp, #0]
 80245ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80245bc:	f003 fe80 	bl	80282c0 <hal_initGPIO>
        pdescriptor->write = drv_writeSysLED;
 80245c0:	687b      	ldr	r3, [r7, #4]
 80245c2:	4a16      	ldr	r2, [pc, #88]	; (802461c <drv_initLED+0x78>)
 80245c4:	60da      	str	r2, [r3, #12]
        pdescriptor->read = drv_readSysLED;
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	4a15      	ldr	r2, [pc, #84]	; (8024620 <drv_initLED+0x7c>)
 80245ca:	611a      	str	r2, [r3, #16]
    {
        hal_initGPIO(LED_Data_State);
        pdescriptor->write = drv_writeDataLED;
        pdescriptor->read = drv_readDataLED;
    }
}
 80245cc:	e020      	b.n	8024610 <drv_initLED+0x6c>
    }else if(pdescriptor->ledNmb==LED_NET)
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	785b      	ldrb	r3, [r3, #1]
 80245d2:	2b01      	cmp	r3, #1
 80245d4:	d10c      	bne.n	80245f0 <drv_initLED+0x4c>
        hal_initGPIO(LED_Net_State);
 80245d6:	4b13      	ldr	r3, [pc, #76]	; (8024624 <drv_initLED+0x80>)
 80245d8:	691a      	ldr	r2, [r3, #16]
 80245da:	9200      	str	r2, [sp, #0]
 80245dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80245de:	f003 fe6f 	bl	80282c0 <hal_initGPIO>
        pdescriptor->write = drv_writeNetLED;
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	4a10      	ldr	r2, [pc, #64]	; (8024628 <drv_initLED+0x84>)
 80245e6:	60da      	str	r2, [r3, #12]
        pdescriptor->read = drv_readNetLED;
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	4a10      	ldr	r2, [pc, #64]	; (802462c <drv_initLED+0x88>)
 80245ec:	611a      	str	r2, [r3, #16]
}
 80245ee:	e00f      	b.n	8024610 <drv_initLED+0x6c>
    }else if(pdescriptor->ledNmb==LED_DATA)
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	785b      	ldrb	r3, [r3, #1]
 80245f4:	2b02      	cmp	r3, #2
 80245f6:	d10b      	bne.n	8024610 <drv_initLED+0x6c>
        hal_initGPIO(LED_Data_State);
 80245f8:	4b0d      	ldr	r3, [pc, #52]	; (8024630 <drv_initLED+0x8c>)
 80245fa:	691a      	ldr	r2, [r3, #16]
 80245fc:	9200      	str	r2, [sp, #0]
 80245fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024600:	f003 fe5e 	bl	80282c0 <hal_initGPIO>
        pdescriptor->write = drv_writeDataLED;
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	4a0b      	ldr	r2, [pc, #44]	; (8024634 <drv_initLED+0x90>)
 8024608:	60da      	str	r2, [r3, #12]
        pdescriptor->read = drv_readDataLED;
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	4a0a      	ldr	r2, [pc, #40]	; (8024638 <drv_initLED+0x94>)
 802460e:	611a      	str	r2, [r3, #16]
}
 8024610:	bf00      	nop
 8024612:	3708      	adds	r7, #8
 8024614:	46bd      	mov	sp, r7
 8024616:	bd80      	pop	{r7, pc}
 8024618:	20000348 	.word	0x20000348
 802461c:	080244ad 	.word	0x080244ad
 8024620:	08024525 	.word	0x08024525
 8024624:	2000035c 	.word	0x2000035c
 8024628:	080244d5 	.word	0x080244d5
 802462c:	0802454d 	.word	0x0802454d
 8024630:	20000370 	.word	0x20000370
 8024634:	080244fd 	.word	0x080244fd
 8024638:	08024579 	.word	0x08024579

0802463c <drv_pollLEDEvent>:
 * LED事件查询 1ms调用一次
 * 
 * 
 */
void drv_pollLEDEvent(LED_Descriptor * pdescriptor)
{
 802463c:	b580      	push	{r7, lr}
 802463e:	b082      	sub	sp, #8
 8024640:	af00      	add	r7, sp, #0
 8024642:	6078      	str	r0, [r7, #4]
	++pdescriptor->tick;
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	685b      	ldr	r3, [r3, #4]
 8024648:	1c5a      	adds	r2, r3, #1
 802464a:	687b      	ldr	r3, [r7, #4]
 802464c:	605a      	str	r2, [r3, #4]

    if(pdescriptor->period!=0 && pdescriptor->times)
 802464e:	687b      	ldr	r3, [r7, #4]
 8024650:	891b      	ldrh	r3, [r3, #8]
 8024652:	2b00      	cmp	r3, #0
 8024654:	d043      	beq.n	80246de <drv_pollLEDEvent+0xa2>
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802465c:	2b00      	cmp	r3, #0
 802465e:	d03e      	beq.n	80246de <drv_pollLEDEvent+0xa2>
    {
        if((pdescriptor->tick*DRV_POLL_PERIOD)%pdescriptor->period==0)
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	685a      	ldr	r2, [r3, #4]
 8024664:	4613      	mov	r3, r2
 8024666:	009b      	lsls	r3, r3, #2
 8024668:	4413      	add	r3, r2
 802466a:	005b      	lsls	r3, r3, #1
 802466c:	687a      	ldr	r2, [r7, #4]
 802466e:	8912      	ldrh	r2, [r2, #8]
 8024670:	fbb3 f1f2 	udiv	r1, r3, r2
 8024674:	fb02 f201 	mul.w	r2, r2, r1
 8024678:	1a9b      	subs	r3, r3, r2
 802467a:	2b00      	cmp	r3, #0
 802467c:	d12f      	bne.n	80246de <drv_pollLEDEvent+0xa2>
        {
            pdescriptor->write(pdescriptor->toggle);
 802467e:	687b      	ldr	r3, [r7, #4]
 8024680:	68db      	ldr	r3, [r3, #12]
 8024682:	687a      	ldr	r2, [r7, #4]
 8024684:	7812      	ldrb	r2, [r2, #0]
 8024686:	4610      	mov	r0, r2
 8024688:	4798      	blx	r3
            pdescriptor->toggle = !pdescriptor->toggle;
 802468a:	687b      	ldr	r3, [r7, #4]
 802468c:	781b      	ldrb	r3, [r3, #0]
 802468e:	2b00      	cmp	r3, #0
 8024690:	bf0c      	ite	eq
 8024692:	2301      	moveq	r3, #1
 8024694:	2300      	movne	r3, #0
 8024696:	b2db      	uxtb	r3, r3
 8024698:	461a      	mov	r2, r3
 802469a:	687b      	ldr	r3, [r7, #4]
 802469c:	701a      	strb	r2, [r3, #0]

            if(pdescriptor->times!=0xFFFF && (pdescriptor->tick*DRV_POLL_PERIOD)==pdescriptor->period)
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	685a      	ldr	r2, [r3, #4]
 80246a2:	4613      	mov	r3, r2
 80246a4:	009b      	lsls	r3, r3, #2
 80246a6:	4413      	add	r3, r2
 80246a8:	005b      	lsls	r3, r3, #1
 80246aa:	461a      	mov	r2, r3
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	891b      	ldrh	r3, [r3, #8]
 80246b0:	429a      	cmp	r2, r3
 80246b2:	d111      	bne.n	80246d8 <drv_pollLEDEvent+0x9c>
            {
                if(--pdescriptor->times==0)
 80246b4:	687b      	ldr	r3, [r7, #4]
 80246b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80246ba:	b29b      	uxth	r3, r3
 80246bc:	3b01      	subs	r3, #1
 80246be:	b29b      	uxth	r3, r3
 80246c0:	b21a      	sxth	r2, r3
 80246c2:	687b      	ldr	r3, [r7, #4]
 80246c4:	815a      	strh	r2, [r3, #10]
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80246cc:	2b00      	cmp	r3, #0
 80246ce:	d103      	bne.n	80246d8 <drv_pollLEDEvent+0x9c>
                {
    				pdescriptor->write(1);
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	68db      	ldr	r3, [r3, #12]
 80246d4:	2001      	movs	r0, #1
 80246d6:	4798      	blx	r3
                }
            }

            pdescriptor->tick = 0;
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	2200      	movs	r2, #0
 80246dc:	605a      	str	r2, [r3, #4]
        }
    }
}
 80246de:	bf00      	nop
 80246e0:	3708      	adds	r7, #8
 80246e2:	46bd      	mov	sp, r7
 80246e4:	bd80      	pop	{r7, pc}

080246e6 <drv_writeData>:
/**
 * 写数据 addr必须为4096整数倍
 * ret : FLASH_OK / FLASH_FAIL
 */
static char drv_writeData(unsigned int addr, char * data, unsigned short len)
{
 80246e6:	b580      	push	{r7, lr}
 80246e8:	b086      	sub	sp, #24
 80246ea:	af00      	add	r7, sp, #0
 80246ec:	60f8      	str	r0, [r7, #12]
 80246ee:	60b9      	str	r1, [r7, #8]
 80246f0:	4613      	mov	r3, r2
 80246f2:	80fb      	strh	r3, [r7, #6]
    unsigned short timeout = 100;
 80246f4:	2364      	movs	r3, #100	; 0x64
 80246f6:	82bb      	strh	r3, [r7, #20]

    if(len > 4096)
 80246f8:	88fb      	ldrh	r3, [r7, #6]
 80246fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80246fe:	d901      	bls.n	8024704 <drv_writeData+0x1e>
    {
        return FLASH_FAIL;
 8024700:	2301      	movs	r3, #1
 8024702:	e043      	b.n	802478c <drv_writeData+0xa6>
    } 

    if(addr%SECTOR_SIZE==0)  //只有在对新段编程时才擦除
 8024704:	68fb      	ldr	r3, [r7, #12]
 8024706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802470a:	2b00      	cmp	r3, #0
 802470c:	d107      	bne.n	802471e <drv_writeData+0x38>
    {
        if(CMD_SE(addr)!=FlashOperationSuccess)
 802470e:	68f8      	ldr	r0, [r7, #12]
 8024710:	f000 fa50 	bl	8024bb4 <CMD_SE>
 8024714:	4603      	mov	r3, r0
 8024716:	2b00      	cmp	r3, #0
 8024718:	d001      	beq.n	802471e <drv_writeData+0x38>
        {
            return FLASH_FAIL;
 802471a:	2301      	movs	r3, #1
 802471c:	e036      	b.n	802478c <drv_writeData+0xa6>
        }
    }

    //整数
    for(unsigned char i=0;i<len/256;++i)
 802471e:	2300      	movs	r3, #0
 8024720:	75fb      	strb	r3, [r7, #23]
 8024722:	e016      	b.n	8024752 <drv_writeData+0x6c>
    {
        if(CMD_PP(addr+i*256, data+i*256, 256)!=FlashOperationSuccess)
 8024724:	7dfb      	ldrb	r3, [r7, #23]
 8024726:	021b      	lsls	r3, r3, #8
 8024728:	461a      	mov	r2, r3
 802472a:	68fb      	ldr	r3, [r7, #12]
 802472c:	18d0      	adds	r0, r2, r3
 802472e:	7dfb      	ldrb	r3, [r7, #23]
 8024730:	021b      	lsls	r3, r3, #8
 8024732:	461a      	mov	r2, r3
 8024734:	68bb      	ldr	r3, [r7, #8]
 8024736:	4413      	add	r3, r2
 8024738:	f44f 7280 	mov.w	r2, #256	; 0x100
 802473c:	4619      	mov	r1, r3
 802473e:	f000 f9eb 	bl	8024b18 <CMD_PP>
 8024742:	4603      	mov	r3, r0
 8024744:	2b00      	cmp	r3, #0
 8024746:	d001      	beq.n	802474c <drv_writeData+0x66>
        {
            return FLASH_FAIL;
 8024748:	2301      	movs	r3, #1
 802474a:	e01f      	b.n	802478c <drv_writeData+0xa6>
    for(unsigned char i=0;i<len/256;++i)
 802474c:	7dfb      	ldrb	r3, [r7, #23]
 802474e:	3301      	adds	r3, #1
 8024750:	75fb      	strb	r3, [r7, #23]
 8024752:	7dfb      	ldrb	r3, [r7, #23]
 8024754:	b29a      	uxth	r2, r3
 8024756:	88fb      	ldrh	r3, [r7, #6]
 8024758:	0a1b      	lsrs	r3, r3, #8
 802475a:	b29b      	uxth	r3, r3
 802475c:	429a      	cmp	r2, r3
 802475e:	d3e1      	bcc.n	8024724 <drv_writeData+0x3e>
        }
    }
    
    if(CMD_PP(addr+len-len%256, data+len-len%256, len%256)!=FlashOperationSuccess)
 8024760:	88fa      	ldrh	r2, [r7, #6]
 8024762:	68fb      	ldr	r3, [r7, #12]
 8024764:	441a      	add	r2, r3
 8024766:	88fb      	ldrh	r3, [r7, #6]
 8024768:	b2db      	uxtb	r3, r3
 802476a:	1ad0      	subs	r0, r2, r3
 802476c:	88fb      	ldrh	r3, [r7, #6]
 802476e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8024772:	68ba      	ldr	r2, [r7, #8]
 8024774:	4413      	add	r3, r2
 8024776:	88fa      	ldrh	r2, [r7, #6]
 8024778:	b2d2      	uxtb	r2, r2
 802477a:	4619      	mov	r1, r3
 802477c:	f000 f9cc 	bl	8024b18 <CMD_PP>
 8024780:	4603      	mov	r3, r0
 8024782:	2b00      	cmp	r3, #0
 8024784:	d001      	beq.n	802478a <drv_writeData+0xa4>
    {
        return FLASH_FAIL;
 8024786:	2301      	movs	r3, #1
 8024788:	e000      	b.n	802478c <drv_writeData+0xa6>
    }
      
    return FLASH_OK;
 802478a:	2300      	movs	r3, #0
}
 802478c:	4618      	mov	r0, r3
 802478e:	3718      	adds	r7, #24
 8024790:	46bd      	mov	sp, r7
 8024792:	bd80      	pop	{r7, pc}

08024794 <drv_readData>:

/**
 *读数据 addr必须为4096整数倍
 */
static char drv_readData(unsigned int addr, char * rbuffer, unsigned short len)
{
 8024794:	b580      	push	{r7, lr}
 8024796:	b086      	sub	sp, #24
 8024798:	af00      	add	r7, sp, #0
 802479a:	60f8      	str	r0, [r7, #12]
 802479c:	60b9      	str	r1, [r7, #8]
 802479e:	4613      	mov	r3, r2
 80247a0:	80fb      	strh	r3, [r7, #6]
    unsigned char ret = 0;
 80247a2:	2300      	movs	r3, #0
 80247a4:	75bb      	strb	r3, [r7, #22]

    if(len > 4096)
 80247a6:	88fb      	ldrh	r3, [r7, #6]
 80247a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80247ac:	d901      	bls.n	80247b2 <drv_readData+0x1e>
    {
        return FALSE;
 80247ae:	2300      	movs	r3, #0
 80247b0:	e036      	b.n	8024820 <drv_readData+0x8c>
    }
    
    for(unsigned char i=0;i<len/256;++i)
 80247b2:	2300      	movs	r3, #0
 80247b4:	75fb      	strb	r3, [r7, #23]
 80247b6:	e016      	b.n	80247e6 <drv_readData+0x52>
    {
        if(CMD_READ(addr+i*256, rbuffer+i*256, 256)!=FlashOperationSuccess)
 80247b8:	7dfb      	ldrb	r3, [r7, #23]
 80247ba:	021b      	lsls	r3, r3, #8
 80247bc:	461a      	mov	r2, r3
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	18d0      	adds	r0, r2, r3
 80247c2:	7dfb      	ldrb	r3, [r7, #23]
 80247c4:	021b      	lsls	r3, r3, #8
 80247c6:	461a      	mov	r2, r3
 80247c8:	68bb      	ldr	r3, [r7, #8]
 80247ca:	4413      	add	r3, r2
 80247cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80247d0:	4619      	mov	r1, r3
 80247d2:	f000 f959 	bl	8024a88 <CMD_READ>
 80247d6:	4603      	mov	r3, r0
 80247d8:	2b00      	cmp	r3, #0
 80247da:	d001      	beq.n	80247e0 <drv_readData+0x4c>
        {
            return FLASH_FAIL;
 80247dc:	2301      	movs	r3, #1
 80247de:	e01f      	b.n	8024820 <drv_readData+0x8c>
    for(unsigned char i=0;i<len/256;++i)
 80247e0:	7dfb      	ldrb	r3, [r7, #23]
 80247e2:	3301      	adds	r3, #1
 80247e4:	75fb      	strb	r3, [r7, #23]
 80247e6:	7dfb      	ldrb	r3, [r7, #23]
 80247e8:	b29a      	uxth	r2, r3
 80247ea:	88fb      	ldrh	r3, [r7, #6]
 80247ec:	0a1b      	lsrs	r3, r3, #8
 80247ee:	b29b      	uxth	r3, r3
 80247f0:	429a      	cmp	r2, r3
 80247f2:	d3e1      	bcc.n	80247b8 <drv_readData+0x24>
        }
    }
    
    if(CMD_READ(addr+len-len%256, rbuffer+len-len%256, len%256)!=FlashOperationSuccess)
 80247f4:	88fa      	ldrh	r2, [r7, #6]
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	441a      	add	r2, r3
 80247fa:	88fb      	ldrh	r3, [r7, #6]
 80247fc:	b2db      	uxtb	r3, r3
 80247fe:	1ad0      	subs	r0, r2, r3
 8024800:	88fb      	ldrh	r3, [r7, #6]
 8024802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8024806:	68ba      	ldr	r2, [r7, #8]
 8024808:	4413      	add	r3, r2
 802480a:	88fa      	ldrh	r2, [r7, #6]
 802480c:	b2d2      	uxtb	r2, r2
 802480e:	4619      	mov	r1, r3
 8024810:	f000 f93a 	bl	8024a88 <CMD_READ>
 8024814:	4603      	mov	r3, r0
 8024816:	2b00      	cmp	r3, #0
 8024818:	d001      	beq.n	802481e <drv_readData+0x8a>
    {
        return FLASH_FAIL;
 802481a:	2301      	movs	r3, #1
 802481c:	e000      	b.n	8024820 <drv_readData+0x8c>
    }

    return FLASH_OK;
 802481e:	2300      	movs	r3, #0
}
 8024820:	4618      	mov	r0, r3
 8024822:	3718      	adds	r7, #24
 8024824:	46bd      	mov	sp, r7
 8024826:	bd80      	pop	{r7, pc}

08024828 <drv_initFlash>:

/**
 * 初始化flash 页组成扇区 扇区组成块 块组成最终的flash 数据读写最大单元为一个页
 */
void drv_initFlash(FLASH_Descriptor * pdescriptor)
{
 8024828:	b580      	push	{r7, lr}
 802482a:	b082      	sub	sp, #8
 802482c:	af00      	add	r7, sp, #0
 802482e:	6078      	str	r0, [r7, #4]
    Initial_Spi();
 8024830:	f000 f828 	bl	8024884 <Initial_Spi>

    CMD_RDID(&pdescriptor->id); //读取ID
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	4618      	mov	r0, r3
 8024838:	f000 f8e0 	bl	80249fc <CMD_RDID>
    pdescriptor->write = drv_writeData;
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	4a04      	ldr	r2, [pc, #16]	; (8024850 <drv_initFlash+0x28>)
 8024840:	605a      	str	r2, [r3, #4]
    pdescriptor->read = drv_readData;
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	4a03      	ldr	r2, [pc, #12]	; (8024854 <drv_initFlash+0x2c>)
 8024846:	609a      	str	r2, [r3, #8]
}
 8024848:	bf00      	nop
 802484a:	3708      	adds	r7, #8
 802484c:	46bd      	mov	sp, r7
 802484e:	bd80      	pop	{r7, pc}
 8024850:	080246e7 	.word	0x080246e7
 8024854:	08024795 	.word	0x08024795

08024858 <Wait_Flash_WarmUp>:
 * Arguments:      None.
 * Description:    Wait some time until flash read / write enable.
 * Return Message: None.
 */
void Wait_Flash_WarmUp(void)
{
 8024858:	b480      	push	{r7}
 802485a:	b083      	sub	sp, #12
 802485c:	af00      	add	r7, sp, #0
    unsigned int time_cnt = FlashFullAccessTime;
 802485e:	4b08      	ldr	r3, [pc, #32]	; (8024880 <Wait_Flash_WarmUp+0x28>)
 8024860:	607b      	str	r3, [r7, #4]
    while( time_cnt > 0 )
 8024862:	e002      	b.n	802486a <Wait_Flash_WarmUp+0x12>
    {
        time_cnt--;
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	3b01      	subs	r3, #1
 8024868:	607b      	str	r3, [r7, #4]
    while( time_cnt > 0 )
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	2b00      	cmp	r3, #0
 802486e:	d1f9      	bne.n	8024864 <Wait_Flash_WarmUp+0xc>
    }
}
 8024870:	bf00      	nop
 8024872:	bf00      	nop
 8024874:	370c      	adds	r7, #12
 8024876:	46bd      	mov	sp, r7
 8024878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802487c:	4770      	bx	lr
 802487e:	bf00      	nop
 8024880:	000bbcce 	.word	0x000bbcce

08024884 <Initial_Spi>:
 * Description:    Initial spi flash state and wait flash warm-up
 *                 (enable read/write).
 * Return Message: None
 */
void Initial_Spi(void)
{
 8024884:	b580      	push	{r7, lr}
 8024886:	b082      	sub	sp, #8
 8024888:	af02      	add	r7, sp, #8
    hal_initGPIO(MX25_SPI_NSS);
 802488a:	4b08      	ldr	r3, [pc, #32]	; (80248ac <Initial_Spi+0x28>)
 802488c:	691a      	ldr	r2, [r3, #16]
 802488e:	9200      	str	r2, [sp, #0]
 8024890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024892:	f003 fd15 	bl	80282c0 <hal_initGPIO>
    hal_initSPI(SPI_1, POLARITY_LOW, PHASE_1EGE);
 8024896:	2200      	movs	r2, #0
 8024898:	2100      	movs	r1, #0
 802489a:	2000      	movs	r0, #0
 802489c:	f003 fdf0 	bl	8028480 <hal_initSPI>
    // Wait flash warm-up
    Wait_Flash_WarmUp();
 80248a0:	f7ff ffda 	bl	8024858 <Wait_Flash_WarmUp>
}
 80248a4:	bf00      	nop
 80248a6:	46bd      	mov	sp, r7
 80248a8:	bd80      	pop	{r7, pc}
 80248aa:	bf00      	nop
 80248ac:	20000384 	.word	0x20000384

080248b0 <CS_Low>:
 * Arguments:      None.
 * Description:    Chip select go low / high.
 * Return Message: None.
 */
void CS_Low(void)
{
 80248b0:	b580      	push	{r7, lr}
 80248b2:	b082      	sub	sp, #8
 80248b4:	af02      	add	r7, sp, #8
#ifdef GPIO_SPI
    CSn = 0;
#else
    hal_setGPIOLevel(MX25_SPI_NSS, 0);
 80248b6:	4b05      	ldr	r3, [pc, #20]	; (80248cc <CS_Low+0x1c>)
 80248b8:	2200      	movs	r2, #0
 80248ba:	9201      	str	r2, [sp, #4]
 80248bc:	691a      	ldr	r2, [r3, #16]
 80248be:	9200      	str	r2, [sp, #0]
 80248c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80248c2:	f003 fdb5 	bl	8028430 <hal_setGPIOLevel>
#endif
}
 80248c6:	bf00      	nop
 80248c8:	46bd      	mov	sp, r7
 80248ca:	bd80      	pop	{r7, pc}
 80248cc:	20000384 	.word	0x20000384

080248d0 <CS_High>:

void CS_High(void)
{
 80248d0:	b580      	push	{r7, lr}
 80248d2:	b082      	sub	sp, #8
 80248d4:	af02      	add	r7, sp, #8
#ifdef GPIO_SPI
    CSn = 1;
    WPn = 1;
#else
    hal_setGPIOLevel(MX25_SPI_NSS, 1);
 80248d6:	4b05      	ldr	r3, [pc, #20]	; (80248ec <CS_High+0x1c>)
 80248d8:	2201      	movs	r2, #1
 80248da:	9201      	str	r2, [sp, #4]
 80248dc:	691a      	ldr	r2, [r3, #16]
 80248de:	9200      	str	r2, [sp, #0]
 80248e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80248e2:	f003 fda5 	bl	8028430 <hal_setGPIOLevel>
#endif
}
 80248e6:	bf00      	nop
 80248e8:	46bd      	mov	sp, r7
 80248ea:	bd80      	pop	{r7, pc}
 80248ec:	20000384 	.word	0x20000384

080248f0 <SendByte>:
 *                 DTQIO, double transfer rate QIO
 * Description:    Send one byte data to flash
 * Return Message: None.
 */
void SendByte( unsigned char byte_value, unsigned char transfer_type )
{
 80248f0:	b580      	push	{r7, lr}
 80248f2:	b082      	sub	sp, #8
 80248f4:	af00      	add	r7, sp, #0
 80248f6:	4603      	mov	r3, r0
 80248f8:	460a      	mov	r2, r1
 80248fa:	71fb      	strb	r3, [r7, #7]
 80248fc:	4613      	mov	r3, r2
 80248fe:	71bb      	strb	r3, [r7, #6]
    hal_sendSPIBytes(SPI_1, &byte_value, 1);
 8024900:	1dfb      	adds	r3, r7, #7
 8024902:	2201      	movs	r2, #1
 8024904:	4619      	mov	r1, r3
 8024906:	2000      	movs	r0, #0
 8024908:	f003 fe32 	bl	8028570 <hal_sendSPIBytes>
}
 802490c:	bf00      	nop
 802490e:	3708      	adds	r7, #8
 8024910:	46bd      	mov	sp, r7
 8024912:	bd80      	pop	{r7, pc}

08024914 <GetByte>:
 *                 DTQIO, double transfer rate QIO
 * Description:    Get one byte data to flash
 * Return Message: 8 bit data
 */
unsigned char GetByte( unsigned char transfer_type )
{
 8024914:	b580      	push	{r7, lr}
 8024916:	b084      	sub	sp, #16
 8024918:	af00      	add	r7, sp, #0
 802491a:	4603      	mov	r3, r0
 802491c:	71fb      	strb	r3, [r7, #7]
    char ret;

    hal_readSPIBytes(SPI_1, &ret, 1);
 802491e:	f107 030f 	add.w	r3, r7, #15
 8024922:	2201      	movs	r2, #1
 8024924:	4619      	mov	r1, r3
 8024926:	2000      	movs	r0, #0
 8024928:	f003 fe54 	bl	80285d4 <hal_readSPIBytes>

    return ret;
 802492c:	7bfb      	ldrb	r3, [r7, #15]
}
 802492e:	4618      	mov	r0, r3
 8024930:	3710      	adds	r7, #16
 8024932:	46bd      	mov	sp, r7
 8024934:	bd80      	pop	{r7, pc}

08024936 <WaitFlashReady>:
 *                 Non-synchronous IO:
 *                 Always return TRUE
 * Return Message: TRUE, FALSE
 */
unsigned char WaitFlashReady( unsigned int ExpectTime )
{
 8024936:	b580      	push	{r7, lr}
 8024938:	b084      	sub	sp, #16
 802493a:	af00      	add	r7, sp, #0
 802493c:	6078      	str	r0, [r7, #4]
#ifndef NON_SYNCHRONOUS_IO
    unsigned int temp = 0;
 802493e:	2300      	movs	r3, #0
 8024940:	60fb      	str	r3, [r7, #12]
    while( IsFlashBusy() )
 8024942:	e008      	b.n	8024956 <WaitFlashReady+0x20>
    {
        if( temp > ExpectTime )
 8024944:	68fa      	ldr	r2, [r7, #12]
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	429a      	cmp	r2, r3
 802494a:	d901      	bls.n	8024950 <WaitFlashReady+0x1a>
        {
            return FALSE;
 802494c:	2300      	movs	r3, #0
 802494e:	e008      	b.n	8024962 <WaitFlashReady+0x2c>
        }
        temp = temp + 1;
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	3301      	adds	r3, #1
 8024954:	60fb      	str	r3, [r7, #12]
    while( IsFlashBusy() )
 8024956:	f000 f808 	bl	802496a <IsFlashBusy>
 802495a:	4603      	mov	r3, r0
 802495c:	2b00      	cmp	r3, #0
 802495e:	d1f1      	bne.n	8024944 <WaitFlashReady+0xe>
    }
       return TRUE;
 8024960:	2301      	movs	r3, #1
#else
    return TRUE;
#endif
}
 8024962:	4618      	mov	r0, r3
 8024964:	3710      	adds	r7, #16
 8024966:	46bd      	mov	sp, r7
 8024968:	bd80      	pop	{r7, pc}

0802496a <IsFlashBusy>:
 *                 If  WIP bit = 1: return TRUE ( Busy )
 *                             = 0: return FALSE ( Ready ).
 * Return Message: TRUE, FALSE
 */
unsigned char IsFlashBusy( void )
{
 802496a:	b580      	push	{r7, lr}
 802496c:	b082      	sub	sp, #8
 802496e:	af00      	add	r7, sp, #0
    unsigned char  gDataBuffer;

    CMD_RDSR( &gDataBuffer );
 8024970:	1dfb      	adds	r3, r7, #7
 8024972:	4618      	mov	r0, r3
 8024974:	f000 f86f 	bl	8024a56 <CMD_RDSR>
    if( (gDataBuffer & FLASH_WIP_MASK)  == FLASH_WIP_MASK )
 8024978:	79fb      	ldrb	r3, [r7, #7]
 802497a:	f003 0301 	and.w	r3, r3, #1
 802497e:	2b00      	cmp	r3, #0
 8024980:	d001      	beq.n	8024986 <IsFlashBusy+0x1c>
        return TRUE;
 8024982:	2301      	movs	r3, #1
 8024984:	e000      	b.n	8024988 <IsFlashBusy+0x1e>
    else
        return FALSE;
 8024986:	2300      	movs	r3, #0
}
 8024988:	4618      	mov	r0, r3
 802498a:	3708      	adds	r7, #8
 802498c:	46bd      	mov	sp, r7
 802498e:	bd80      	pop	{r7, pc}

08024990 <IsFlash4Byte>:
 *                 If flash 4BYTE bit = 1: return TRUE
 *                                    = 0: return FALSE.
 * Return Message: TRUE, FALSE
 */
unsigned char IsFlash4Byte( void )
{
 8024990:	b480      	push	{r7}
 8024992:	af00      	add	r7, sp, #0
            return TRUE;
        else
            return FALSE;
    #endif
#else
    return FALSE;
 8024994:	2300      	movs	r3, #0
#endif
}
 8024996:	4618      	mov	r0, r3
 8024998:	46bd      	mov	sp, r7
 802499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802499e:	4770      	bx	lr

080249a0 <SendFlashAddr>:
 *                 addr_4byte_mode,
 * Description:    Send flash address with 3-byte or 4-byte mode.
 * Return Message: None
 */
void SendFlashAddr( unsigned int flash_address, unsigned char io_mode, unsigned char addr_4byte_mode )
{
 80249a0:	b580      	push	{r7, lr}
 80249a2:	b082      	sub	sp, #8
 80249a4:	af00      	add	r7, sp, #0
 80249a6:	6078      	str	r0, [r7, #4]
 80249a8:	460b      	mov	r3, r1
 80249aa:	70fb      	strb	r3, [r7, #3]
 80249ac:	4613      	mov	r3, r2
 80249ae:	70bb      	strb	r3, [r7, #2]
    /* Check flash is 3-byte or 4-byte mode.
       4-byte mode: Send 4-byte address (A31-A0)
       3-byte mode: Send 3-byte address (A23-A0) */
    if( addr_4byte_mode == TRUE ){
 80249b0:	78bb      	ldrb	r3, [r7, #2]
 80249b2:	2b01      	cmp	r3, #1
 80249b4:	d107      	bne.n	80249c6 <SendFlashAddr+0x26>
        SendByte( (flash_address >> 24), io_mode ); // A31-A24
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	0e1b      	lsrs	r3, r3, #24
 80249ba:	b2db      	uxtb	r3, r3
 80249bc:	78fa      	ldrb	r2, [r7, #3]
 80249be:	4611      	mov	r1, r2
 80249c0:	4618      	mov	r0, r3
 80249c2:	f7ff ff95 	bl	80248f0 <SendByte>
    }
    /* A23-A0 */
    SendByte( (flash_address >> 16), io_mode );
 80249c6:	687b      	ldr	r3, [r7, #4]
 80249c8:	0c1b      	lsrs	r3, r3, #16
 80249ca:	b2db      	uxtb	r3, r3
 80249cc:	78fa      	ldrb	r2, [r7, #3]
 80249ce:	4611      	mov	r1, r2
 80249d0:	4618      	mov	r0, r3
 80249d2:	f7ff ff8d 	bl	80248f0 <SendByte>
    SendByte( (flash_address >> 8), io_mode );
 80249d6:	687b      	ldr	r3, [r7, #4]
 80249d8:	0a1b      	lsrs	r3, r3, #8
 80249da:	b2db      	uxtb	r3, r3
 80249dc:	78fa      	ldrb	r2, [r7, #3]
 80249de:	4611      	mov	r1, r2
 80249e0:	4618      	mov	r0, r3
 80249e2:	f7ff ff85 	bl	80248f0 <SendByte>
    SendByte( (flash_address), io_mode );
 80249e6:	687b      	ldr	r3, [r7, #4]
 80249e8:	b2db      	uxtb	r3, r3
 80249ea:	78fa      	ldrb	r2, [r7, #3]
 80249ec:	4611      	mov	r1, r2
 80249ee:	4618      	mov	r0, r3
 80249f0:	f7ff ff7e 	bl	80248f0 <SendByte>
}
 80249f4:	bf00      	nop
 80249f6:	3708      	adds	r7, #8
 80249f8:	46bd      	mov	sp, r7
 80249fa:	bd80      	pop	{r7, pc}

080249fc <CMD_RDID>:
 * Description:    The RDID instruction is to read the manufacturer ID
 *                 of 1-byte and followed by Device ID of 2-byte.
 * Return Message: FlashOperationSuccess
 */
ReturnMsg CMD_RDID( unsigned int *Identification )
{
 80249fc:	b580      	push	{r7, lr}
 80249fe:	b084      	sub	sp, #16
 8024a00:	af00      	add	r7, sp, #0
 8024a02:	6078      	str	r0, [r7, #4]
    unsigned int temp;
    unsigned char  gDataBuffer[3];

    // Chip select go low to start a flash command
    CS_Low();
 8024a04:	f7ff ff54 	bl	80248b0 <CS_Low>

    // Send command
    SendByte( FLASH_CMD_RDID, SIO );
 8024a08:	2100      	movs	r1, #0
 8024a0a:	209f      	movs	r0, #159	; 0x9f
 8024a0c:	f7ff ff70 	bl	80248f0 <SendByte>

    // Get manufacturer identification, device identification
    gDataBuffer[0] = GetByte( SIO );
 8024a10:	2000      	movs	r0, #0
 8024a12:	f7ff ff7f 	bl	8024914 <GetByte>
 8024a16:	4603      	mov	r3, r0
 8024a18:	723b      	strb	r3, [r7, #8]
    gDataBuffer[1] = GetByte( SIO );
 8024a1a:	2000      	movs	r0, #0
 8024a1c:	f7ff ff7a 	bl	8024914 <GetByte>
 8024a20:	4603      	mov	r3, r0
 8024a22:	727b      	strb	r3, [r7, #9]
    gDataBuffer[2] = GetByte( SIO );
 8024a24:	2000      	movs	r0, #0
 8024a26:	f7ff ff75 	bl	8024914 <GetByte>
 8024a2a:	4603      	mov	r3, r0
 8024a2c:	72bb      	strb	r3, [r7, #10]

    // Chip select go high to end a command
    CS_High();
 8024a2e:	f7ff ff4f 	bl	80248d0 <CS_High>

    // Store identification
    temp =  gDataBuffer[0];
 8024a32:	7a3b      	ldrb	r3, [r7, #8]
 8024a34:	60fb      	str	r3, [r7, #12]
    temp =  (temp << 8) | gDataBuffer[1];
 8024a36:	68fb      	ldr	r3, [r7, #12]
 8024a38:	021b      	lsls	r3, r3, #8
 8024a3a:	7a7a      	ldrb	r2, [r7, #9]
 8024a3c:	4313      	orrs	r3, r2
 8024a3e:	60fb      	str	r3, [r7, #12]
    *Identification =  (temp << 8) | gDataBuffer[2];
 8024a40:	68fb      	ldr	r3, [r7, #12]
 8024a42:	021b      	lsls	r3, r3, #8
 8024a44:	7aba      	ldrb	r2, [r7, #10]
 8024a46:	431a      	orrs	r2, r3
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	601a      	str	r2, [r3, #0]

    return FlashOperationSuccess;
 8024a4c:	2300      	movs	r3, #0
}
 8024a4e:	4618      	mov	r0, r3
 8024a50:	3710      	adds	r7, #16
 8024a52:	46bd      	mov	sp, r7
 8024a54:	bd80      	pop	{r7, pc}

08024a56 <CMD_RDSR>:
 * Arguments:      StatusReg, 8 bit buffer to store status register value
 * Description:    The RDSR instruction is for reading Status Register Bits.
 * Return Message: FlashOperationSuccess
 */
ReturnMsg CMD_RDSR( unsigned char *StatusReg )
{
 8024a56:	b580      	push	{r7, lr}
 8024a58:	b084      	sub	sp, #16
 8024a5a:	af00      	add	r7, sp, #0
 8024a5c:	6078      	str	r0, [r7, #4]
    unsigned char  gDataBuffer;

    // Chip select go low to start a flash command
    CS_Low();
 8024a5e:	f7ff ff27 	bl	80248b0 <CS_Low>

    // Send command
    SendByte( FLASH_CMD_RDSR, SIO );
 8024a62:	2100      	movs	r1, #0
 8024a64:	2005      	movs	r0, #5
 8024a66:	f7ff ff43 	bl	80248f0 <SendByte>
    gDataBuffer = GetByte( SIO );
 8024a6a:	2000      	movs	r0, #0
 8024a6c:	f7ff ff52 	bl	8024914 <GetByte>
 8024a70:	4603      	mov	r3, r0
 8024a72:	73fb      	strb	r3, [r7, #15]

    // Chip select go high to end a flash command
    CS_High();
 8024a74:	f7ff ff2c 	bl	80248d0 <CS_High>

    *StatusReg = gDataBuffer;
 8024a78:	687b      	ldr	r3, [r7, #4]
 8024a7a:	7bfa      	ldrb	r2, [r7, #15]
 8024a7c:	701a      	strb	r2, [r3, #0]

    return FlashOperationSuccess;
 8024a7e:	2300      	movs	r3, #0
}
 8024a80:	4618      	mov	r0, r3
 8024a82:	3710      	adds	r7, #16
 8024a84:	46bd      	mov	sp, r7
 8024a86:	bd80      	pop	{r7, pc}

08024a88 <CMD_READ>:
 *                 byte_length, length of returned data in byte unit
 * Description:    The READ instruction is for reading data out.
 * Return Message: FlashAddressInvalid, FlashOperationSuccess
 */
ReturnMsg CMD_READ( unsigned int flash_address, unsigned char *target_address, unsigned int byte_length )
{
 8024a88:	b590      	push	{r4, r7, lr}
 8024a8a:	b087      	sub	sp, #28
 8024a8c:	af00      	add	r7, sp, #0
 8024a8e:	60f8      	str	r0, [r7, #12]
 8024a90:	60b9      	str	r1, [r7, #8]
 8024a92:	607a      	str	r2, [r7, #4]
    unsigned int index;
    unsigned char  addr_4byte_mode;

    // Check flash address
    if( flash_address > FlashSize ) return FlashAddressInvalid;
 8024a94:	68fb      	ldr	r3, [r7, #12]
 8024a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8024a9a:	d901      	bls.n	8024aa0 <CMD_READ+0x18>
 8024a9c:	2305      	movs	r3, #5
 8024a9e:	e02a      	b.n	8024af6 <CMD_READ+0x6e>

    // Check 3-byte or 4-byte mode
    if( IsFlash4Byte() )
 8024aa0:	f7ff ff76 	bl	8024990 <IsFlash4Byte>
 8024aa4:	4603      	mov	r3, r0
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	d002      	beq.n	8024ab0 <CMD_READ+0x28>
        addr_4byte_mode = TRUE;  // 4-byte mode
 8024aaa:	2301      	movs	r3, #1
 8024aac:	74fb      	strb	r3, [r7, #19]
 8024aae:	e001      	b.n	8024ab4 <CMD_READ+0x2c>
    else
        addr_4byte_mode = FALSE; // 3-byte mode
 8024ab0:	2300      	movs	r3, #0
 8024ab2:	74fb      	strb	r3, [r7, #19]

    // Chip select go low to start a flash command
    CS_Low();
 8024ab4:	f7ff fefc 	bl	80248b0 <CS_Low>

    // Write READ command and address
    SendByte( FLASH_CMD_READ, SIO );
 8024ab8:	2100      	movs	r1, #0
 8024aba:	2003      	movs	r0, #3
 8024abc:	f7ff ff18 	bl	80248f0 <SendByte>
    SendFlashAddr( flash_address, SIO, addr_4byte_mode );
 8024ac0:	7cfb      	ldrb	r3, [r7, #19]
 8024ac2:	461a      	mov	r2, r3
 8024ac4:	2100      	movs	r1, #0
 8024ac6:	68f8      	ldr	r0, [r7, #12]
 8024ac8:	f7ff ff6a 	bl	80249a0 <SendFlashAddr>

    // Set a loop to read data into buffer
    for( index=0; index < byte_length; index++ )
 8024acc:	2300      	movs	r3, #0
 8024ace:	617b      	str	r3, [r7, #20]
 8024ad0:	e00a      	b.n	8024ae8 <CMD_READ+0x60>
    {
        // Read data one byte at a time
        *(target_address + index) = GetByte( SIO );
 8024ad2:	68ba      	ldr	r2, [r7, #8]
 8024ad4:	697b      	ldr	r3, [r7, #20]
 8024ad6:	18d4      	adds	r4, r2, r3
 8024ad8:	2000      	movs	r0, #0
 8024ada:	f7ff ff1b 	bl	8024914 <GetByte>
 8024ade:	4603      	mov	r3, r0
 8024ae0:	7023      	strb	r3, [r4, #0]
    for( index=0; index < byte_length; index++ )
 8024ae2:	697b      	ldr	r3, [r7, #20]
 8024ae4:	3301      	adds	r3, #1
 8024ae6:	617b      	str	r3, [r7, #20]
 8024ae8:	697a      	ldr	r2, [r7, #20]
 8024aea:	687b      	ldr	r3, [r7, #4]
 8024aec:	429a      	cmp	r2, r3
 8024aee:	d3f0      	bcc.n	8024ad2 <CMD_READ+0x4a>
    }

    // Chip select go high to end a flash command
    CS_High();
 8024af0:	f7ff feee 	bl	80248d0 <CS_High>

    return FlashOperationSuccess;
 8024af4:	2300      	movs	r3, #0
}
 8024af6:	4618      	mov	r0, r3
 8024af8:	371c      	adds	r7, #28
 8024afa:	46bd      	mov	sp, r7
 8024afc:	bd90      	pop	{r4, r7, pc}

08024afe <CMD_WREN>:
 * Description:    The WREN instruction is for setting
 *                 Write Enable Latch (WEL) bit.
 * Return Message: FlashOperationSuccess
 */
ReturnMsg CMD_WREN( void )
{
 8024afe:	b580      	push	{r7, lr}
 8024b00:	af00      	add	r7, sp, #0
    // Chip select go low to start a flash command
    CS_Low();
 8024b02:	f7ff fed5 	bl	80248b0 <CS_Low>

    // Write Enable command = 0x06, Setting Write Enable Latch Bit
    SendByte( FLASH_CMD_WREN, SIO );
 8024b06:	2100      	movs	r1, #0
 8024b08:	2006      	movs	r0, #6
 8024b0a:	f7ff fef1 	bl	80248f0 <SendByte>

    // Chip select go high to end a flash command
    CS_High();
 8024b0e:	f7ff fedf 	bl	80248d0 <CS_High>

    return FlashOperationSuccess;
 8024b12:	2300      	movs	r3, #0
}
 8024b14:	4618      	mov	r0, r3
 8024b16:	bd80      	pop	{r7, pc}

08024b18 <CMD_PP>:
 *                 Some products have smaller page size ( 32 byte )
 * Return Message: FlashAddressInvalid, FlashIsBusy, FlashOperationSuccess,
 *                 FlashTimeOut
 */
ReturnMsg CMD_PP( unsigned int flash_address, unsigned char *source_address, unsigned int byte_length )
{
 8024b18:	b580      	push	{r7, lr}
 8024b1a:	b086      	sub	sp, #24
 8024b1c:	af00      	add	r7, sp, #0
 8024b1e:	60f8      	str	r0, [r7, #12]
 8024b20:	60b9      	str	r1, [r7, #8]
 8024b22:	607a      	str	r2, [r7, #4]
    unsigned int index;
    unsigned char  addr_4byte_mode;

    // Check flash address
    if( flash_address > FlashSize ) return FlashAddressInvalid;
 8024b24:	68fb      	ldr	r3, [r7, #12]
 8024b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8024b2a:	d901      	bls.n	8024b30 <CMD_PP+0x18>
 8024b2c:	2305      	movs	r3, #5
 8024b2e:	e03b      	b.n	8024ba8 <CMD_PP+0x90>

    // Check flash is busy or not
    if( IsFlashBusy() )    return FlashIsBusy;
 8024b30:	f7ff ff1b 	bl	802496a <IsFlashBusy>
 8024b34:	4603      	mov	r3, r0
 8024b36:	2b00      	cmp	r3, #0
 8024b38:	d001      	beq.n	8024b3e <CMD_PP+0x26>
 8024b3a:	2303      	movs	r3, #3
 8024b3c:	e034      	b.n	8024ba8 <CMD_PP+0x90>

    // Check 3-byte or 4-byte mode
    if( IsFlash4Byte() )
 8024b3e:	f7ff ff27 	bl	8024990 <IsFlash4Byte>
 8024b42:	4603      	mov	r3, r0
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	d002      	beq.n	8024b4e <CMD_PP+0x36>
        addr_4byte_mode = TRUE;  // 4-byte mode
 8024b48:	2301      	movs	r3, #1
 8024b4a:	74fb      	strb	r3, [r7, #19]
 8024b4c:	e001      	b.n	8024b52 <CMD_PP+0x3a>
    else
        addr_4byte_mode = FALSE; // 3-byte mode
 8024b4e:	2300      	movs	r3, #0
 8024b50:	74fb      	strb	r3, [r7, #19]

    // Setting Write Enable Latch bit
    CMD_WREN();
 8024b52:	f7ff ffd4 	bl	8024afe <CMD_WREN>

    // Chip select go low to start a flash command
    CS_Low();
 8024b56:	f7ff feab 	bl	80248b0 <CS_Low>

    // Write Page Program command
    SendByte( FLASH_CMD_PP, SIO );
 8024b5a:	2100      	movs	r1, #0
 8024b5c:	2002      	movs	r0, #2
 8024b5e:	f7ff fec7 	bl	80248f0 <SendByte>
    SendFlashAddr( flash_address, SIO, addr_4byte_mode );
 8024b62:	7cfb      	ldrb	r3, [r7, #19]
 8024b64:	461a      	mov	r2, r3
 8024b66:	2100      	movs	r1, #0
 8024b68:	68f8      	ldr	r0, [r7, #12]
 8024b6a:	f7ff ff19 	bl	80249a0 <SendFlashAddr>

    // Set a loop to down load whole page data into flash's buffer
    // Note: only last 256 byte ( or 32 byte ) will be programmed
    for( index=0; index < byte_length; index++ )
 8024b6e:	2300      	movs	r3, #0
 8024b70:	617b      	str	r3, [r7, #20]
 8024b72:	e00a      	b.n	8024b8a <CMD_PP+0x72>
    {
        SendByte( *(source_address + index), SIO );
 8024b74:	68ba      	ldr	r2, [r7, #8]
 8024b76:	697b      	ldr	r3, [r7, #20]
 8024b78:	4413      	add	r3, r2
 8024b7a:	781b      	ldrb	r3, [r3, #0]
 8024b7c:	2100      	movs	r1, #0
 8024b7e:	4618      	mov	r0, r3
 8024b80:	f7ff feb6 	bl	80248f0 <SendByte>
    for( index=0; index < byte_length; index++ )
 8024b84:	697b      	ldr	r3, [r7, #20]
 8024b86:	3301      	adds	r3, #1
 8024b88:	617b      	str	r3, [r7, #20]
 8024b8a:	697a      	ldr	r2, [r7, #20]
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	429a      	cmp	r2, r3
 8024b90:	d3f0      	bcc.n	8024b74 <CMD_PP+0x5c>
    }

    // Chip select go high to end a flash command
    CS_High();
 8024b92:	f7ff fe9d 	bl	80248d0 <CS_High>

    if( WaitFlashReady( PageProgramCycleTime ) )
 8024b96:	4806      	ldr	r0, [pc, #24]	; (8024bb0 <CMD_PP+0x98>)
 8024b98:	f7ff fecd 	bl	8024936 <WaitFlashReady>
 8024b9c:	4603      	mov	r3, r0
 8024b9e:	2b00      	cmp	r3, #0
 8024ba0:	d001      	beq.n	8024ba6 <CMD_PP+0x8e>
        return FlashOperationSuccess;
 8024ba2:	2300      	movs	r3, #0
 8024ba4:	e000      	b.n	8024ba8 <CMD_PP+0x90>
    else
        return FlashTimeOut;
 8024ba6:	2302      	movs	r3, #2
}
 8024ba8:	4618      	mov	r0, r3
 8024baa:	3718      	adds	r7, #24
 8024bac:	46bd      	mov	sp, r7
 8024bae:	bd80      	pop	{r7, pc}
 8024bb0:	00038571 	.word	0x00038571

08024bb4 <CMD_SE>:
 *                 of the chosen sector (4KB) to be "1".
 * Return Message: FlashAddressInvalid, FlashIsBusy, FlashOperationSuccess,
 *                 FlashTimeOut
 */
ReturnMsg CMD_SE( unsigned int flash_address )
{
 8024bb4:	b580      	push	{r7, lr}
 8024bb6:	b084      	sub	sp, #16
 8024bb8:	af00      	add	r7, sp, #0
 8024bba:	6078      	str	r0, [r7, #4]
    unsigned char  addr_4byte_mode;

    // Check flash address
    if( flash_address > FlashSize ) return FlashAddressInvalid;
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8024bc2:	d901      	bls.n	8024bc8 <CMD_SE+0x14>
 8024bc4:	2305      	movs	r3, #5
 8024bc6:	e029      	b.n	8024c1c <CMD_SE+0x68>

    // Check flash is busy or not
    if(IsFlashBusy())    return FlashIsBusy;
 8024bc8:	f7ff fecf 	bl	802496a <IsFlashBusy>
 8024bcc:	4603      	mov	r3, r0
 8024bce:	2b00      	cmp	r3, #0
 8024bd0:	d001      	beq.n	8024bd6 <CMD_SE+0x22>
 8024bd2:	2303      	movs	r3, #3
 8024bd4:	e022      	b.n	8024c1c <CMD_SE+0x68>

    // Check 3-byte or 4-byte mode
    if( IsFlash4Byte() )
 8024bd6:	f7ff fedb 	bl	8024990 <IsFlash4Byte>
 8024bda:	4603      	mov	r3, r0
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	d002      	beq.n	8024be6 <CMD_SE+0x32>
        addr_4byte_mode = TRUE;  // 4-byte mode
 8024be0:	2301      	movs	r3, #1
 8024be2:	73fb      	strb	r3, [r7, #15]
 8024be4:	e001      	b.n	8024bea <CMD_SE+0x36>
    else
        addr_4byte_mode = FALSE; // 3-byte mode
 8024be6:	2300      	movs	r3, #0
 8024be8:	73fb      	strb	r3, [r7, #15]

    // Setting Write Enable Latch bit
    CMD_WREN();
 8024bea:	f7ff ff88 	bl	8024afe <CMD_WREN>

    // Chip select go low to start a flash command
    CS_Low();
 8024bee:	f7ff fe5f 	bl	80248b0 <CS_Low>

    //Write Sector Erase command = 0x20;
    SendByte( FLASH_CMD_SE, SIO );
 8024bf2:	2100      	movs	r1, #0
 8024bf4:	2020      	movs	r0, #32
 8024bf6:	f7ff fe7b 	bl	80248f0 <SendByte>
    SendFlashAddr( flash_address, SIO, addr_4byte_mode );
 8024bfa:	7bfb      	ldrb	r3, [r7, #15]
 8024bfc:	461a      	mov	r2, r3
 8024bfe:	2100      	movs	r1, #0
 8024c00:	6878      	ldr	r0, [r7, #4]
 8024c02:	f7ff fecd 	bl	80249a0 <SendFlashAddr>

    // Chip select go high to end a flash command
    CS_High();
 8024c06:	f7ff fe63 	bl	80248d0 <CS_High>

    if( WaitFlashReady( SectorEraseCycleTime ) )
 8024c0a:	4806      	ldr	r0, [pc, #24]	; (8024c24 <CMD_SE+0x70>)
 8024c0c:	f7ff fe93 	bl	8024936 <WaitFlashReady>
 8024c10:	4603      	mov	r3, r0
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	d001      	beq.n	8024c1a <CMD_SE+0x66>
        return FlashOperationSuccess;
 8024c16:	2300      	movs	r3, #0
 8024c18:	e000      	b.n	8024c1c <CMD_SE+0x68>
    else
        return FlashTimeOut;
 8024c1a:	2302      	movs	r3, #2
}
 8024c1c:	4618      	mov	r0, r3
 8024c1e:	3710      	adds	r7, #16
 8024c20:	46bd      	mov	sp, r7
 8024c22:	bd80      	pop	{r7, pc}
 8024c24:	00eac027 	.word	0x00eac027

08024c28 <drv_setPWM2IV>:

/**
 * 设置电流输出通道占空比
 */
static void drv_setPWM2IV(PWM2IVn ch, uint8_t per)
{
 8024c28:	b580      	push	{r7, lr}
 8024c2a:	b082      	sub	sp, #8
 8024c2c:	af00      	add	r7, sp, #0
 8024c2e:	4603      	mov	r3, r0
 8024c30:	460a      	mov	r2, r1
 8024c32:	71fb      	strb	r3, [r7, #7]
 8024c34:	4613      	mov	r3, r2
 8024c36:	71bb      	strb	r3, [r7, #6]
	if(per>100)
 8024c38:	79bb      	ldrb	r3, [r7, #6]
 8024c3a:	2b64      	cmp	r3, #100	; 0x64
 8024c3c:	d806      	bhi.n	8024c4c <drv_setPWM2IV+0x24>
	{
		return ;
	}
	
	hal_setPulse(ch, per);
 8024c3e:	79ba      	ldrb	r2, [r7, #6]
 8024c40:	79fb      	ldrb	r3, [r7, #7]
 8024c42:	4611      	mov	r1, r2
 8024c44:	4618      	mov	r0, r3
 8024c46:	f003 fe33 	bl	80288b0 <hal_setPulse>
 8024c4a:	e000      	b.n	8024c4e <drv_setPWM2IV+0x26>
		return ;
 8024c4c:	bf00      	nop
}
 8024c4e:	3708      	adds	r7, #8
 8024c50:	46bd      	mov	sp, r7
 8024c52:	bd80      	pop	{r7, pc}

08024c54 <drv_initPWM2IV>:

/**
 * 初始化
 */
void drv_initPWM2IV(PWM2IV_Descriptor * pdescriptor)
{
 8024c54:	b580      	push	{r7, lr}
 8024c56:	b084      	sub	sp, #16
 8024c58:	af00      	add	r7, sp, #0
 8024c5a:	6078      	str	r0, [r7, #4]
	hal_initTimer();
 8024c5c:	f003 fcec 	bl	8028638 <hal_initTimer>

	pdescriptor->write = drv_setPWM2IV;
 8024c60:	687b      	ldr	r3, [r7, #4]
 8024c62:	4a0c      	ldr	r2, [pc, #48]	; (8024c94 <drv_initPWM2IV+0x40>)
 8024c64:	609a      	str	r2, [r3, #8]

	for(uint8_t i=0;i<sizeof(pdescriptor->ch);++i)
 8024c66:	2300      	movs	r3, #0
 8024c68:	73fb      	strb	r3, [r7, #15]
 8024c6a:	e00a      	b.n	8024c82 <drv_initPWM2IV+0x2e>
	{
		pdescriptor->write(i, pdescriptor->ch[i]);
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	689b      	ldr	r3, [r3, #8]
 8024c70:	7bfa      	ldrb	r2, [r7, #15]
 8024c72:	6879      	ldr	r1, [r7, #4]
 8024c74:	5c89      	ldrb	r1, [r1, r2]
 8024c76:	7bfa      	ldrb	r2, [r7, #15]
 8024c78:	4610      	mov	r0, r2
 8024c7a:	4798      	blx	r3
	for(uint8_t i=0;i<sizeof(pdescriptor->ch);++i)
 8024c7c:	7bfb      	ldrb	r3, [r7, #15]
 8024c7e:	3301      	adds	r3, #1
 8024c80:	73fb      	strb	r3, [r7, #15]
 8024c82:	7bfb      	ldrb	r3, [r7, #15]
 8024c84:	2b07      	cmp	r3, #7
 8024c86:	d9f1      	bls.n	8024c6c <drv_initPWM2IV+0x18>
	}
}
 8024c88:	bf00      	nop
 8024c8a:	bf00      	nop
 8024c8c:	3710      	adds	r7, #16
 8024c8e:	46bd      	mov	sp, r7
 8024c90:	bd80      	pop	{r7, pc}
 8024c92:	bf00      	nop
 8024c94:	08024c29 	.word	0x08024c29

08024c98 <drv_switchReceiveMode>:
/**
 * 切换到接收模式 当发送完成 调用该函数切换至接收
 * 
 */
static void drv_switchReceiveMode(void)
{
 8024c98:	b580      	push	{r7, lr}
 8024c9a:	af00      	add	r7, sp, #0
	SX1276LoRaSetRFState(RFLR_STATE_RX_INIT);
 8024c9c:	2001      	movs	r0, #1
 8024c9e:	f007 f8ad 	bl	802bdfc <SX1276LoRaSetRFState>
}
 8024ca2:	bf00      	nop
 8024ca4:	bd80      	pop	{r7, pc}

08024ca6 <drv_sendLoRaData>:

/**
 * 发送SX1278数据
 */
static void drv_sendLoRaData(char * buffer, uint16_t size)
{
 8024ca6:	b580      	push	{r7, lr}
 8024ca8:	b082      	sub	sp, #8
 8024caa:	af00      	add	r7, sp, #0
 8024cac:	6078      	str	r0, [r7, #4]
 8024cae:	460b      	mov	r3, r1
 8024cb0:	807b      	strh	r3, [r7, #2]
	SX1276LoRaSetTxPacket(buffer, size);
 8024cb2:	887b      	ldrh	r3, [r7, #2]
 8024cb4:	4619      	mov	r1, r3
 8024cb6:	6878      	ldr	r0, [r7, #4]
 8024cb8:	f007 f882 	bl	802bdc0 <SX1276LoRaSetTxPacket>
}
 8024cbc:	bf00      	nop
 8024cbe:	3708      	adds	r7, #8
 8024cc0:	46bd      	mov	sp, r7
 8024cc2:	bd80      	pop	{r7, pc}

08024cc4 <drv_setLoRaResetLevel>:

/**
 * LoRa 复位
 */
static void  drv_setLoRaResetLevel(LoRan lora, char level)
{
 8024cc4:	b580      	push	{r7, lr}
 8024cc6:	b084      	sub	sp, #16
 8024cc8:	af02      	add	r7, sp, #8
 8024cca:	4603      	mov	r3, r0
 8024ccc:	460a      	mov	r2, r1
 8024cce:	71fb      	strb	r3, [r7, #7]
 8024cd0:	4613      	mov	r3, r2
 8024cd2:	71bb      	strb	r3, [r7, #6]
	if(lora==LoRa_1)
 8024cd4:	79fb      	ldrb	r3, [r7, #7]
 8024cd6:	2b01      	cmp	r3, #1
 8024cd8:	d107      	bne.n	8024cea <drv_setLoRaResetLevel+0x26>
	{
		hal_setGPIOLevel(LoRa_1_RST, level);
 8024cda:	4b06      	ldr	r3, [pc, #24]	; (8024cf4 <drv_setLoRaResetLevel+0x30>)
 8024cdc:	79ba      	ldrb	r2, [r7, #6]
 8024cde:	9201      	str	r2, [sp, #4]
 8024ce0:	691a      	ldr	r2, [r3, #16]
 8024ce2:	9200      	str	r2, [sp, #0]
 8024ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024ce6:	f003 fba3 	bl	8028430 <hal_setGPIOLevel>
	}else  
	{

	}
}
 8024cea:	bf00      	nop
 8024cec:	3708      	adds	r7, #8
 8024cee:	46bd      	mov	sp, r7
 8024cf0:	bd80      	pop	{r7, pc}
 8024cf2:	bf00      	nop
 8024cf4:	200003c0 	.word	0x200003c0

08024cf8 <drv_getDIO0Level>:

/**
 * LoRa 获取DIO0状态
 */
static char drv_getDIO0Level(LoRan lora)
{
 8024cf8:	b580      	push	{r7, lr}
 8024cfa:	b086      	sub	sp, #24
 8024cfc:	af02      	add	r7, sp, #8
 8024cfe:	4603      	mov	r3, r0
 8024d00:	71fb      	strb	r3, [r7, #7]
	char level;

	if(lora==LoRa_1)
 8024d02:	79fb      	ldrb	r3, [r7, #7]
 8024d04:	2b01      	cmp	r3, #1
 8024d06:	d107      	bne.n	8024d18 <drv_getDIO0Level+0x20>
	{
		level = hal_getGPIOLevel(LoRa_1_DIO0);
 8024d08:	4b06      	ldr	r3, [pc, #24]	; (8024d24 <drv_getDIO0Level+0x2c>)
 8024d0a:	691a      	ldr	r2, [r3, #16]
 8024d0c:	9200      	str	r2, [sp, #0]
 8024d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d10:	f003 fba1 	bl	8028456 <hal_getGPIOLevel>
 8024d14:	4603      	mov	r3, r0
 8024d16:	73fb      	strb	r3, [r7, #15]
	}else  
	{

	}
}
 8024d18:	bf00      	nop
 8024d1a:	4618      	mov	r0, r3
 8024d1c:	3710      	adds	r7, #16
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	bd80      	pop	{r7, pc}
 8024d22:	bf00      	nop
 8024d24:	200003ac 	.word	0x200003ac

08024d28 <drv_setLoRaNSSLevel>:

/**
 * 设置NSS
 */
static void  drv_setLoRaNSSLevel(LoRan lora, char level)
{
 8024d28:	b580      	push	{r7, lr}
 8024d2a:	b084      	sub	sp, #16
 8024d2c:	af02      	add	r7, sp, #8
 8024d2e:	4603      	mov	r3, r0
 8024d30:	460a      	mov	r2, r1
 8024d32:	71fb      	strb	r3, [r7, #7]
 8024d34:	4613      	mov	r3, r2
 8024d36:	71bb      	strb	r3, [r7, #6]
	if(lora==LoRa_1)
 8024d38:	79fb      	ldrb	r3, [r7, #7]
 8024d3a:	2b01      	cmp	r3, #1
 8024d3c:	d107      	bne.n	8024d4e <drv_setLoRaNSSLevel+0x26>
	{
		hal_setGPIOLevel(LoRa_1_NSS, level);
 8024d3e:	4b06      	ldr	r3, [pc, #24]	; (8024d58 <drv_setLoRaNSSLevel+0x30>)
 8024d40:	79ba      	ldrb	r2, [r7, #6]
 8024d42:	9201      	str	r2, [sp, #4]
 8024d44:	691a      	ldr	r2, [r3, #16]
 8024d46:	9200      	str	r2, [sp, #0]
 8024d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d4a:	f003 fb71 	bl	8028430 <hal_setGPIOLevel>
	}else  
	{

	}
}
 8024d4e:	bf00      	nop
 8024d50:	3708      	adds	r7, #8
 8024d52:	46bd      	mov	sp, r7
 8024d54:	bd80      	pop	{r7, pc}
 8024d56:	bf00      	nop
 8024d58:	20000398 	.word	0x20000398

08024d5c <drv_initSX1278>:
 * 初始化SX1278
 * 
 * 
 */
void drv_initSX1278(LoRa_Descriptor * pdescriptor)
{
 8024d5c:	b580      	push	{r7, lr}
 8024d5e:	b084      	sub	sp, #16
 8024d60:	af02      	add	r7, sp, #8
 8024d62:	6078      	str	r0, [r7, #4]
	/*初始化相关IO*/
	if(pdescriptor->loraNmb==LoRa_1)
 8024d64:	687b      	ldr	r3, [r7, #4]
 8024d66:	781b      	ldrb	r3, [r3, #0]
 8024d68:	2b01      	cmp	r3, #1
 8024d6a:	d132      	bne.n	8024dd2 <drv_initSX1278+0x76>
	{
		hal_initGPIO(LoRa_1_NSS);
 8024d6c:	4b2a      	ldr	r3, [pc, #168]	; (8024e18 <drv_initSX1278+0xbc>)
 8024d6e:	691a      	ldr	r2, [r3, #16]
 8024d70:	9200      	str	r2, [sp, #0]
 8024d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d74:	f003 faa4 	bl	80282c0 <hal_initGPIO>
		hal_initGPIO(LoRa_1_RST);
 8024d78:	4b28      	ldr	r3, [pc, #160]	; (8024e1c <drv_initSX1278+0xc0>)
 8024d7a:	691a      	ldr	r2, [r3, #16]
 8024d7c:	9200      	str	r2, [sp, #0]
 8024d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d80:	f003 fa9e 	bl	80282c0 <hal_initGPIO>
		hal_initGPIO(LoRa_1_DIO0);
 8024d84:	4b26      	ldr	r3, [pc, #152]	; (8024e20 <drv_initSX1278+0xc4>)
 8024d86:	691a      	ldr	r2, [r3, #16]
 8024d88:	9200      	str	r2, [sp, #0]
 8024d8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d8c:	f003 fa98 	bl	80282c0 <hal_initGPIO>
		hal_initGPIO(LoRa_1_PWR);
 8024d90:	4b24      	ldr	r3, [pc, #144]	; (8024e24 <drv_initSX1278+0xc8>)
 8024d92:	691a      	ldr	r2, [r3, #16]
 8024d94:	9200      	str	r2, [sp, #0]
 8024d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024d98:	f003 fa92 	bl	80282c0 <hal_initGPIO>

		pdescriptor->write = drv_sendLoRaData;
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	4a22      	ldr	r2, [pc, #136]	; (8024e28 <drv_initSX1278+0xcc>)
 8024da0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

		hal_initSPI(LoRa_1, POLARITY_LOW, PHASE_1EGE);
 8024da4:	2200      	movs	r2, #0
 8024da6:	2100      	movs	r1, #0
 8024da8:	2001      	movs	r0, #1
 8024daa:	f003 fb69 	bl	8028480 <hal_initSPI>

		pdescriptor->t_buffer = (char *)pvPortMalloc(LORA_1_MAX_SENDSIZE);
 8024dae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8024db2:	f006 fc01 	bl	802b5b8 <pvPortMalloc>
 8024db6:	4603      	mov	r3, r0
 8024db8:	461a      	mov	r2, r3
 8024dba:	687b      	ldr	r3, [r7, #4]
 8024dbc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		pdescriptor->r_buffer = (char *)pvPortMalloc(LORA_1_MAX_REVSIZE);
 8024dc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8024dc4:	f006 fbf8 	bl	802b5b8 <pvPortMalloc>
 8024dc8:	4603      	mov	r3, r0
 8024dca:	461a      	mov	r2, r3
 8024dcc:	687b      	ldr	r3, [r7, #4]
 8024dce:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	{

	}

	/*初始化SX1278*/
	pdescriptor->loraparam.spi_nmb = pdescriptor->loraNmb;
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	781a      	ldrb	r2, [r3, #0]
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	721a      	strb	r2, [r3, #8]
	pdescriptor->loraparam.writeSPIData = hal_sendSPIBytes;
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	4a13      	ldr	r2, [pc, #76]	; (8024e2c <drv_initSX1278+0xd0>)
 8024dde:	619a      	str	r2, [r3, #24]
	pdescriptor->loraparam.readSPIData = hal_readSPIBytes;
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	4a13      	ldr	r2, [pc, #76]	; (8024e30 <drv_initSX1278+0xd4>)
 8024de4:	61da      	str	r2, [r3, #28]
	pdescriptor->loraparam.setReset = drv_setLoRaResetLevel;
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	4a12      	ldr	r2, [pc, #72]	; (8024e34 <drv_initSX1278+0xd8>)
 8024dea:	60da      	str	r2, [r3, #12]
	pdescriptor->loraparam.readDIO0 = drv_getDIO0Level;
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	4a12      	ldr	r2, [pc, #72]	; (8024e38 <drv_initSX1278+0xdc>)
 8024df0:	611a      	str	r2, [r3, #16]
	pdescriptor->loraparam.setSPINSS = drv_setLoRaNSSLevel;
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	4a11      	ldr	r2, [pc, #68]	; (8024e3c <drv_initSX1278+0xe0>)
 8024df6:	615a      	str	r2, [r3, #20]

	sx1278 = &pdescriptor->loraparam;
 8024df8:	687b      	ldr	r3, [r7, #4]
 8024dfa:	3308      	adds	r3, #8
 8024dfc:	4a10      	ldr	r2, [pc, #64]	; (8024e40 <drv_initSX1278+0xe4>)
 8024dfe:	6013      	str	r3, [r2, #0]

	HAL_Delay(1000);
 8024e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024e04:	f000 f8c4 	bl	8024f90 <HAL_Delay>
	SX1276Init();
 8024e08:	f008 f82c 	bl	802ce64 <SX1276Init>
	drv_switchReceiveMode();
 8024e0c:	f7ff ff44 	bl	8024c98 <drv_switchReceiveMode>
//	SX1276LoRaSetOpMode( RFLR_OPMODE_SLEEP );
}
 8024e10:	bf00      	nop
 8024e12:	3708      	adds	r7, #8
 8024e14:	46bd      	mov	sp, r7
 8024e16:	bd80      	pop	{r7, pc}
 8024e18:	20000398 	.word	0x20000398
 8024e1c:	200003c0 	.word	0x200003c0
 8024e20:	200003ac 	.word	0x200003ac
 8024e24:	200003d4 	.word	0x200003d4
 8024e28:	08024ca7 	.word	0x08024ca7
 8024e2c:	08028571 	.word	0x08028571
 8024e30:	080285d5 	.word	0x080285d5
 8024e34:	08024cc5 	.word	0x08024cc5
 8024e38:	08024cf9 	.word	0x08024cf9
 8024e3c:	08024d29 	.word	0x08024d29
 8024e40:	20005028 	.word	0x20005028

08024e44 <drv_pollLoRaEvents>:

/**
 * 驱动事件轮询处理函数
 */
uint32_t drv_pollLoRaEvents(LoRa_Descriptor * pdescriptor)
{
 8024e44:	b580      	push	{r7, lr}
 8024e46:	b084      	sub	sp, #16
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
	uint32_t ret;
	uint16_t size = 0;
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	81fb      	strh	r3, [r7, #14]

	sx1278 = &pdescriptor->loraparam; //切换为自身LoRa
 8024e50:	687b      	ldr	r3, [r7, #4]
 8024e52:	3308      	adds	r3, #8
 8024e54:	4a14      	ldr	r2, [pc, #80]	; (8024ea8 <drv_pollLoRaEvents+0x64>)
 8024e56:	6013      	str	r3, [r2, #0]

	ret = SX1276LoRaProcess();
 8024e58:	f006 ffe2 	bl	802be20 <SX1276LoRaProcess>
 8024e5c:	60b8      	str	r0, [r7, #8]

	switch (ret)
 8024e5e:	68bb      	ldr	r3, [r7, #8]
 8024e60:	2b02      	cmp	r3, #2
 8024e62:	d003      	beq.n	8024e6c <drv_pollLoRaEvents+0x28>
 8024e64:	68bb      	ldr	r3, [r7, #8]
 8024e66:	2b04      	cmp	r3, #4
 8024e68:	d016      	beq.n	8024e98 <drv_pollLoRaEvents+0x54>
		case RF_TX_DONE:
		{
			drv_switchReceiveMode();
		}                       break;

		default:                break;
 8024e6a:	e018      	b.n	8024e9e <drv_pollLoRaEvents+0x5a>
			SX1276GetRxPacket(pdescriptor->r_buffer, &pdescriptor->r_tail);
 8024e6c:	687b      	ldr	r3, [r7, #4]
 8024e6e:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 8024e72:	687b      	ldr	r3, [r7, #4]
 8024e74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8024e78:	4619      	mov	r1, r3
 8024e7a:	4610      	mov	r0, r2
 8024e7c:	f008 f8ae 	bl	802cfdc <SX1276GetRxPacket>
			pdescriptor->read(pdescriptor->r_buffer, pdescriptor->r_tail);
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8024e86:	687a      	ldr	r2, [r7, #4]
 8024e88:	f8d2 01e4 	ldr.w	r0, [r2, #484]	; 0x1e4
 8024e8c:	687a      	ldr	r2, [r7, #4]
 8024e8e:	f8b2 21e8 	ldrh.w	r2, [r2, #488]	; 0x1e8
 8024e92:	4611      	mov	r1, r2
 8024e94:	4798      	blx	r3
		}                       break;
 8024e96:	e002      	b.n	8024e9e <drv_pollLoRaEvents+0x5a>
			drv_switchReceiveMode();
 8024e98:	f7ff fefe 	bl	8024c98 <drv_switchReceiveMode>
		}                       break;
 8024e9c:	bf00      	nop
	}

	return ret;
 8024e9e:	68bb      	ldr	r3, [r7, #8]
}
 8024ea0:	4618      	mov	r0, r3
 8024ea2:	3710      	adds	r7, #16
 8024ea4:	46bd      	mov	sp, r7
 8024ea6:	bd80      	pop	{r7, pc}
 8024ea8:	20005028 	.word	0x20005028

08024eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8024eac:	b580      	push	{r7, lr}
 8024eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024eb0:	4b0e      	ldr	r3, [pc, #56]	; (8024eec <HAL_Init+0x40>)
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	4a0d      	ldr	r2, [pc, #52]	; (8024eec <HAL_Init+0x40>)
 8024eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8024eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8024ebc:	4b0b      	ldr	r3, [pc, #44]	; (8024eec <HAL_Init+0x40>)
 8024ebe:	681b      	ldr	r3, [r3, #0]
 8024ec0:	4a0a      	ldr	r2, [pc, #40]	; (8024eec <HAL_Init+0x40>)
 8024ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8024ec8:	4b08      	ldr	r3, [pc, #32]	; (8024eec <HAL_Init+0x40>)
 8024eca:	681b      	ldr	r3, [r3, #0]
 8024ecc:	4a07      	ldr	r2, [pc, #28]	; (8024eec <HAL_Init+0x40>)
 8024ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8024ed4:	2003      	movs	r0, #3
 8024ed6:	f000 f97d 	bl	80251d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8024eda:	2000      	movs	r0, #0
 8024edc:	f000 f808 	bl	8024ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8024ee0:	f7fe f83e 	bl	8022f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8024ee4:	2300      	movs	r3, #0
}
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	bd80      	pop	{r7, pc}
 8024eea:	bf00      	nop
 8024eec:	40023c00 	.word	0x40023c00

08024ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8024ef0:	b580      	push	{r7, lr}
 8024ef2:	b082      	sub	sp, #8
 8024ef4:	af00      	add	r7, sp, #0
 8024ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8024ef8:	4b12      	ldr	r3, [pc, #72]	; (8024f44 <HAL_InitTick+0x54>)
 8024efa:	681a      	ldr	r2, [r3, #0]
 8024efc:	4b12      	ldr	r3, [pc, #72]	; (8024f48 <HAL_InitTick+0x58>)
 8024efe:	781b      	ldrb	r3, [r3, #0]
 8024f00:	4619      	mov	r1, r3
 8024f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8024f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8024f0e:	4618      	mov	r0, r3
 8024f10:	f000 f999 	bl	8025246 <HAL_SYSTICK_Config>
 8024f14:	4603      	mov	r3, r0
 8024f16:	2b00      	cmp	r3, #0
 8024f18:	d001      	beq.n	8024f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8024f1a:	2301      	movs	r3, #1
 8024f1c:	e00e      	b.n	8024f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8024f1e:	687b      	ldr	r3, [r7, #4]
 8024f20:	2b0f      	cmp	r3, #15
 8024f22:	d80a      	bhi.n	8024f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8024f24:	2200      	movs	r2, #0
 8024f26:	6879      	ldr	r1, [r7, #4]
 8024f28:	f04f 30ff 	mov.w	r0, #4294967295
 8024f2c:	f000 f95d 	bl	80251ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8024f30:	4a06      	ldr	r2, [pc, #24]	; (8024f4c <HAL_InitTick+0x5c>)
 8024f32:	687b      	ldr	r3, [r7, #4]
 8024f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8024f36:	2300      	movs	r3, #0
 8024f38:	e000      	b.n	8024f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8024f3a:	2301      	movs	r3, #1
}
 8024f3c:	4618      	mov	r0, r3
 8024f3e:	3708      	adds	r7, #8
 8024f40:	46bd      	mov	sp, r7
 8024f42:	bd80      	pop	{r7, pc}
 8024f44:	200002e0 	.word	0x200002e0
 8024f48:	200003ec 	.word	0x200003ec
 8024f4c:	200003e8 	.word	0x200003e8

08024f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024f50:	b480      	push	{r7}
 8024f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8024f54:	4b06      	ldr	r3, [pc, #24]	; (8024f70 <HAL_IncTick+0x20>)
 8024f56:	781b      	ldrb	r3, [r3, #0]
 8024f58:	461a      	mov	r2, r3
 8024f5a:	4b06      	ldr	r3, [pc, #24]	; (8024f74 <HAL_IncTick+0x24>)
 8024f5c:	681b      	ldr	r3, [r3, #0]
 8024f5e:	4413      	add	r3, r2
 8024f60:	4a04      	ldr	r2, [pc, #16]	; (8024f74 <HAL_IncTick+0x24>)
 8024f62:	6013      	str	r3, [r2, #0]
}
 8024f64:	bf00      	nop
 8024f66:	46bd      	mov	sp, r7
 8024f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f6c:	4770      	bx	lr
 8024f6e:	bf00      	nop
 8024f70:	200003ec 	.word	0x200003ec
 8024f74:	20004cc8 	.word	0x20004cc8

08024f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8024f78:	b480      	push	{r7}
 8024f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8024f7c:	4b03      	ldr	r3, [pc, #12]	; (8024f8c <HAL_GetTick+0x14>)
 8024f7e:	681b      	ldr	r3, [r3, #0]
}
 8024f80:	4618      	mov	r0, r3
 8024f82:	46bd      	mov	sp, r7
 8024f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f88:	4770      	bx	lr
 8024f8a:	bf00      	nop
 8024f8c:	20004cc8 	.word	0x20004cc8

08024f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8024f90:	b580      	push	{r7, lr}
 8024f92:	b084      	sub	sp, #16
 8024f94:	af00      	add	r7, sp, #0
 8024f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8024f98:	f7ff ffee 	bl	8024f78 <HAL_GetTick>
 8024f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8024fa2:	68fb      	ldr	r3, [r7, #12]
 8024fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024fa8:	d005      	beq.n	8024fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8024faa:	4b0a      	ldr	r3, [pc, #40]	; (8024fd4 <HAL_Delay+0x44>)
 8024fac:	781b      	ldrb	r3, [r3, #0]
 8024fae:	461a      	mov	r2, r3
 8024fb0:	68fb      	ldr	r3, [r7, #12]
 8024fb2:	4413      	add	r3, r2
 8024fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8024fb6:	bf00      	nop
 8024fb8:	f7ff ffde 	bl	8024f78 <HAL_GetTick>
 8024fbc:	4602      	mov	r2, r0
 8024fbe:	68bb      	ldr	r3, [r7, #8]
 8024fc0:	1ad3      	subs	r3, r2, r3
 8024fc2:	68fa      	ldr	r2, [r7, #12]
 8024fc4:	429a      	cmp	r2, r3
 8024fc6:	d8f7      	bhi.n	8024fb8 <HAL_Delay+0x28>
  {
  }
}
 8024fc8:	bf00      	nop
 8024fca:	bf00      	nop
 8024fcc:	3710      	adds	r7, #16
 8024fce:	46bd      	mov	sp, r7
 8024fd0:	bd80      	pop	{r7, pc}
 8024fd2:	bf00      	nop
 8024fd4:	200003ec 	.word	0x200003ec

08024fd8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8024fd8:	b480      	push	{r7}
 8024fda:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8024fdc:	4b03      	ldr	r3, [pc, #12]	; (8024fec <HAL_GetUIDw0+0x14>)
 8024fde:	681b      	ldr	r3, [r3, #0]
}
 8024fe0:	4618      	mov	r0, r3
 8024fe2:	46bd      	mov	sp, r7
 8024fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fe8:	4770      	bx	lr
 8024fea:	bf00      	nop
 8024fec:	1fff7a10 	.word	0x1fff7a10

08024ff0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8024ff0:	b480      	push	{r7}
 8024ff2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8024ff4:	4b03      	ldr	r3, [pc, #12]	; (8025004 <HAL_GetUIDw1+0x14>)
 8024ff6:	681b      	ldr	r3, [r3, #0]
}
 8024ff8:	4618      	mov	r0, r3
 8024ffa:	46bd      	mov	sp, r7
 8024ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025000:	4770      	bx	lr
 8025002:	bf00      	nop
 8025004:	1fff7a14 	.word	0x1fff7a14

08025008 <__NVIC_SetPriorityGrouping>:
{
 8025008:	b480      	push	{r7}
 802500a:	b085      	sub	sp, #20
 802500c:	af00      	add	r7, sp, #0
 802500e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	f003 0307 	and.w	r3, r3, #7
 8025016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8025018:	4b0c      	ldr	r3, [pc, #48]	; (802504c <__NVIC_SetPriorityGrouping+0x44>)
 802501a:	68db      	ldr	r3, [r3, #12]
 802501c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802501e:	68ba      	ldr	r2, [r7, #8]
 8025020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8025024:	4013      	ands	r3, r2
 8025026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8025028:	68fb      	ldr	r3, [r7, #12]
 802502a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802502c:	68bb      	ldr	r3, [r7, #8]
 802502e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8025030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8025034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8025038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802503a:	4a04      	ldr	r2, [pc, #16]	; (802504c <__NVIC_SetPriorityGrouping+0x44>)
 802503c:	68bb      	ldr	r3, [r7, #8]
 802503e:	60d3      	str	r3, [r2, #12]
}
 8025040:	bf00      	nop
 8025042:	3714      	adds	r7, #20
 8025044:	46bd      	mov	sp, r7
 8025046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802504a:	4770      	bx	lr
 802504c:	e000ed00 	.word	0xe000ed00

08025050 <__NVIC_GetPriorityGrouping>:
{
 8025050:	b480      	push	{r7}
 8025052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8025054:	4b04      	ldr	r3, [pc, #16]	; (8025068 <__NVIC_GetPriorityGrouping+0x18>)
 8025056:	68db      	ldr	r3, [r3, #12]
 8025058:	0a1b      	lsrs	r3, r3, #8
 802505a:	f003 0307 	and.w	r3, r3, #7
}
 802505e:	4618      	mov	r0, r3
 8025060:	46bd      	mov	sp, r7
 8025062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025066:	4770      	bx	lr
 8025068:	e000ed00 	.word	0xe000ed00

0802506c <__NVIC_EnableIRQ>:
{
 802506c:	b480      	push	{r7}
 802506e:	b083      	sub	sp, #12
 8025070:	af00      	add	r7, sp, #0
 8025072:	4603      	mov	r3, r0
 8025074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8025076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802507a:	2b00      	cmp	r3, #0
 802507c:	db0b      	blt.n	8025096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802507e:	79fb      	ldrb	r3, [r7, #7]
 8025080:	f003 021f 	and.w	r2, r3, #31
 8025084:	4907      	ldr	r1, [pc, #28]	; (80250a4 <__NVIC_EnableIRQ+0x38>)
 8025086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802508a:	095b      	lsrs	r3, r3, #5
 802508c:	2001      	movs	r0, #1
 802508e:	fa00 f202 	lsl.w	r2, r0, r2
 8025092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8025096:	bf00      	nop
 8025098:	370c      	adds	r7, #12
 802509a:	46bd      	mov	sp, r7
 802509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250a0:	4770      	bx	lr
 80250a2:	bf00      	nop
 80250a4:	e000e100 	.word	0xe000e100

080250a8 <__NVIC_SetPriority>:
{
 80250a8:	b480      	push	{r7}
 80250aa:	b083      	sub	sp, #12
 80250ac:	af00      	add	r7, sp, #0
 80250ae:	4603      	mov	r3, r0
 80250b0:	6039      	str	r1, [r7, #0]
 80250b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80250b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80250b8:	2b00      	cmp	r3, #0
 80250ba:	db0a      	blt.n	80250d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80250bc:	683b      	ldr	r3, [r7, #0]
 80250be:	b2da      	uxtb	r2, r3
 80250c0:	490c      	ldr	r1, [pc, #48]	; (80250f4 <__NVIC_SetPriority+0x4c>)
 80250c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80250c6:	0112      	lsls	r2, r2, #4
 80250c8:	b2d2      	uxtb	r2, r2
 80250ca:	440b      	add	r3, r1
 80250cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80250d0:	e00a      	b.n	80250e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80250d2:	683b      	ldr	r3, [r7, #0]
 80250d4:	b2da      	uxtb	r2, r3
 80250d6:	4908      	ldr	r1, [pc, #32]	; (80250f8 <__NVIC_SetPriority+0x50>)
 80250d8:	79fb      	ldrb	r3, [r7, #7]
 80250da:	f003 030f 	and.w	r3, r3, #15
 80250de:	3b04      	subs	r3, #4
 80250e0:	0112      	lsls	r2, r2, #4
 80250e2:	b2d2      	uxtb	r2, r2
 80250e4:	440b      	add	r3, r1
 80250e6:	761a      	strb	r2, [r3, #24]
}
 80250e8:	bf00      	nop
 80250ea:	370c      	adds	r7, #12
 80250ec:	46bd      	mov	sp, r7
 80250ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250f2:	4770      	bx	lr
 80250f4:	e000e100 	.word	0xe000e100
 80250f8:	e000ed00 	.word	0xe000ed00

080250fc <NVIC_EncodePriority>:
{
 80250fc:	b480      	push	{r7}
 80250fe:	b089      	sub	sp, #36	; 0x24
 8025100:	af00      	add	r7, sp, #0
 8025102:	60f8      	str	r0, [r7, #12]
 8025104:	60b9      	str	r1, [r7, #8]
 8025106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8025108:	68fb      	ldr	r3, [r7, #12]
 802510a:	f003 0307 	and.w	r3, r3, #7
 802510e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8025110:	69fb      	ldr	r3, [r7, #28]
 8025112:	f1c3 0307 	rsb	r3, r3, #7
 8025116:	2b04      	cmp	r3, #4
 8025118:	bf28      	it	cs
 802511a:	2304      	movcs	r3, #4
 802511c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802511e:	69fb      	ldr	r3, [r7, #28]
 8025120:	3304      	adds	r3, #4
 8025122:	2b06      	cmp	r3, #6
 8025124:	d902      	bls.n	802512c <NVIC_EncodePriority+0x30>
 8025126:	69fb      	ldr	r3, [r7, #28]
 8025128:	3b03      	subs	r3, #3
 802512a:	e000      	b.n	802512e <NVIC_EncodePriority+0x32>
 802512c:	2300      	movs	r3, #0
 802512e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025130:	f04f 32ff 	mov.w	r2, #4294967295
 8025134:	69bb      	ldr	r3, [r7, #24]
 8025136:	fa02 f303 	lsl.w	r3, r2, r3
 802513a:	43da      	mvns	r2, r3
 802513c:	68bb      	ldr	r3, [r7, #8]
 802513e:	401a      	ands	r2, r3
 8025140:	697b      	ldr	r3, [r7, #20]
 8025142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8025144:	f04f 31ff 	mov.w	r1, #4294967295
 8025148:	697b      	ldr	r3, [r7, #20]
 802514a:	fa01 f303 	lsl.w	r3, r1, r3
 802514e:	43d9      	mvns	r1, r3
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025154:	4313      	orrs	r3, r2
}
 8025156:	4618      	mov	r0, r3
 8025158:	3724      	adds	r7, #36	; 0x24
 802515a:	46bd      	mov	sp, r7
 802515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025160:	4770      	bx	lr
	...

08025164 <__NVIC_SystemReset>:
{
 8025164:	b480      	push	{r7}
 8025166:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8025168:	f3bf 8f4f 	dsb	sy
}
 802516c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802516e:	4b06      	ldr	r3, [pc, #24]	; (8025188 <__NVIC_SystemReset+0x24>)
 8025170:	68db      	ldr	r3, [r3, #12]
 8025172:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8025176:	4904      	ldr	r1, [pc, #16]	; (8025188 <__NVIC_SystemReset+0x24>)
 8025178:	4b04      	ldr	r3, [pc, #16]	; (802518c <__NVIC_SystemReset+0x28>)
 802517a:	4313      	orrs	r3, r2
 802517c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802517e:	f3bf 8f4f 	dsb	sy
}
 8025182:	bf00      	nop
    __NOP();
 8025184:	bf00      	nop
 8025186:	e7fd      	b.n	8025184 <__NVIC_SystemReset+0x20>
 8025188:	e000ed00 	.word	0xe000ed00
 802518c:	05fa0004 	.word	0x05fa0004

08025190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8025190:	b580      	push	{r7, lr}
 8025192:	b082      	sub	sp, #8
 8025194:	af00      	add	r7, sp, #0
 8025196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8025198:	687b      	ldr	r3, [r7, #4]
 802519a:	3b01      	subs	r3, #1
 802519c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80251a0:	d301      	bcc.n	80251a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80251a2:	2301      	movs	r3, #1
 80251a4:	e00f      	b.n	80251c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80251a6:	4a0a      	ldr	r2, [pc, #40]	; (80251d0 <SysTick_Config+0x40>)
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	3b01      	subs	r3, #1
 80251ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80251ae:	210f      	movs	r1, #15
 80251b0:	f04f 30ff 	mov.w	r0, #4294967295
 80251b4:	f7ff ff78 	bl	80250a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80251b8:	4b05      	ldr	r3, [pc, #20]	; (80251d0 <SysTick_Config+0x40>)
 80251ba:	2200      	movs	r2, #0
 80251bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80251be:	4b04      	ldr	r3, [pc, #16]	; (80251d0 <SysTick_Config+0x40>)
 80251c0:	2207      	movs	r2, #7
 80251c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80251c4:	2300      	movs	r3, #0
}
 80251c6:	4618      	mov	r0, r3
 80251c8:	3708      	adds	r7, #8
 80251ca:	46bd      	mov	sp, r7
 80251cc:	bd80      	pop	{r7, pc}
 80251ce:	bf00      	nop
 80251d0:	e000e010 	.word	0xe000e010

080251d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80251d4:	b580      	push	{r7, lr}
 80251d6:	b082      	sub	sp, #8
 80251d8:	af00      	add	r7, sp, #0
 80251da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80251dc:	6878      	ldr	r0, [r7, #4]
 80251de:	f7ff ff13 	bl	8025008 <__NVIC_SetPriorityGrouping>
}
 80251e2:	bf00      	nop
 80251e4:	3708      	adds	r7, #8
 80251e6:	46bd      	mov	sp, r7
 80251e8:	bd80      	pop	{r7, pc}

080251ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80251ea:	b580      	push	{r7, lr}
 80251ec:	b086      	sub	sp, #24
 80251ee:	af00      	add	r7, sp, #0
 80251f0:	4603      	mov	r3, r0
 80251f2:	60b9      	str	r1, [r7, #8]
 80251f4:	607a      	str	r2, [r7, #4]
 80251f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80251f8:	2300      	movs	r3, #0
 80251fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80251fc:	f7ff ff28 	bl	8025050 <__NVIC_GetPriorityGrouping>
 8025200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8025202:	687a      	ldr	r2, [r7, #4]
 8025204:	68b9      	ldr	r1, [r7, #8]
 8025206:	6978      	ldr	r0, [r7, #20]
 8025208:	f7ff ff78 	bl	80250fc <NVIC_EncodePriority>
 802520c:	4602      	mov	r2, r0
 802520e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8025212:	4611      	mov	r1, r2
 8025214:	4618      	mov	r0, r3
 8025216:	f7ff ff47 	bl	80250a8 <__NVIC_SetPriority>
}
 802521a:	bf00      	nop
 802521c:	3718      	adds	r7, #24
 802521e:	46bd      	mov	sp, r7
 8025220:	bd80      	pop	{r7, pc}

08025222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8025222:	b580      	push	{r7, lr}
 8025224:	b082      	sub	sp, #8
 8025226:	af00      	add	r7, sp, #0
 8025228:	4603      	mov	r3, r0
 802522a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025230:	4618      	mov	r0, r3
 8025232:	f7ff ff1b 	bl	802506c <__NVIC_EnableIRQ>
}
 8025236:	bf00      	nop
 8025238:	3708      	adds	r7, #8
 802523a:	46bd      	mov	sp, r7
 802523c:	bd80      	pop	{r7, pc}

0802523e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 802523e:	b580      	push	{r7, lr}
 8025240:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8025242:	f7ff ff8f 	bl	8025164 <__NVIC_SystemReset>

08025246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8025246:	b580      	push	{r7, lr}
 8025248:	b082      	sub	sp, #8
 802524a:	af00      	add	r7, sp, #0
 802524c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802524e:	6878      	ldr	r0, [r7, #4]
 8025250:	f7ff ff9e 	bl	8025190 <SysTick_Config>
 8025254:	4603      	mov	r3, r0
}
 8025256:	4618      	mov	r0, r3
 8025258:	3708      	adds	r7, #8
 802525a:	46bd      	mov	sp, r7
 802525c:	bd80      	pop	{r7, pc}
	...

08025260 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8025260:	b580      	push	{r7, lr}
 8025262:	b086      	sub	sp, #24
 8025264:	af00      	add	r7, sp, #0
 8025266:	60f8      	str	r0, [r7, #12]
 8025268:	60b9      	str	r1, [r7, #8]
 802526a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802526e:	2301      	movs	r3, #1
 8025270:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8025272:	4b23      	ldr	r3, [pc, #140]	; (8025300 <HAL_FLASH_Program+0xa0>)
 8025274:	7e1b      	ldrb	r3, [r3, #24]
 8025276:	2b01      	cmp	r3, #1
 8025278:	d101      	bne.n	802527e <HAL_FLASH_Program+0x1e>
 802527a:	2302      	movs	r3, #2
 802527c:	e03b      	b.n	80252f6 <HAL_FLASH_Program+0x96>
 802527e:	4b20      	ldr	r3, [pc, #128]	; (8025300 <HAL_FLASH_Program+0xa0>)
 8025280:	2201      	movs	r2, #1
 8025282:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8025284:	f24c 3050 	movw	r0, #50000	; 0xc350
 8025288:	f000 f870 	bl	802536c <FLASH_WaitForLastOperation>
 802528c:	4603      	mov	r3, r0
 802528e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8025290:	7dfb      	ldrb	r3, [r7, #23]
 8025292:	2b00      	cmp	r3, #0
 8025294:	d12b      	bne.n	80252ee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8025296:	68fb      	ldr	r3, [r7, #12]
 8025298:	2b00      	cmp	r3, #0
 802529a:	d105      	bne.n	80252a8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802529c:	783b      	ldrb	r3, [r7, #0]
 802529e:	4619      	mov	r1, r3
 80252a0:	68b8      	ldr	r0, [r7, #8]
 80252a2:	f000 f91b 	bl	80254dc <FLASH_Program_Byte>
 80252a6:	e016      	b.n	80252d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80252a8:	68fb      	ldr	r3, [r7, #12]
 80252aa:	2b01      	cmp	r3, #1
 80252ac:	d105      	bne.n	80252ba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80252ae:	883b      	ldrh	r3, [r7, #0]
 80252b0:	4619      	mov	r1, r3
 80252b2:	68b8      	ldr	r0, [r7, #8]
 80252b4:	f000 f8ee 	bl	8025494 <FLASH_Program_HalfWord>
 80252b8:	e00d      	b.n	80252d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80252ba:	68fb      	ldr	r3, [r7, #12]
 80252bc:	2b02      	cmp	r3, #2
 80252be:	d105      	bne.n	80252cc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80252c0:	683b      	ldr	r3, [r7, #0]
 80252c2:	4619      	mov	r1, r3
 80252c4:	68b8      	ldr	r0, [r7, #8]
 80252c6:	f000 f8c3 	bl	8025450 <FLASH_Program_Word>
 80252ca:	e004      	b.n	80252d6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80252cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80252d0:	68b8      	ldr	r0, [r7, #8]
 80252d2:	f000 f88b 	bl	80253ec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80252d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80252da:	f000 f847 	bl	802536c <FLASH_WaitForLastOperation>
 80252de:	4603      	mov	r3, r0
 80252e0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80252e2:	4b08      	ldr	r3, [pc, #32]	; (8025304 <HAL_FLASH_Program+0xa4>)
 80252e4:	691b      	ldr	r3, [r3, #16]
 80252e6:	4a07      	ldr	r2, [pc, #28]	; (8025304 <HAL_FLASH_Program+0xa4>)
 80252e8:	f023 0301 	bic.w	r3, r3, #1
 80252ec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80252ee:	4b04      	ldr	r3, [pc, #16]	; (8025300 <HAL_FLASH_Program+0xa0>)
 80252f0:	2200      	movs	r2, #0
 80252f2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80252f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80252f6:	4618      	mov	r0, r3
 80252f8:	3718      	adds	r7, #24
 80252fa:	46bd      	mov	sp, r7
 80252fc:	bd80      	pop	{r7, pc}
 80252fe:	bf00      	nop
 8025300:	20004ccc 	.word	0x20004ccc
 8025304:	40023c00 	.word	0x40023c00

08025308 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8025308:	b480      	push	{r7}
 802530a:	b083      	sub	sp, #12
 802530c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802530e:	2300      	movs	r3, #0
 8025310:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8025312:	4b0b      	ldr	r3, [pc, #44]	; (8025340 <HAL_FLASH_Unlock+0x38>)
 8025314:	691b      	ldr	r3, [r3, #16]
 8025316:	2b00      	cmp	r3, #0
 8025318:	da0b      	bge.n	8025332 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802531a:	4b09      	ldr	r3, [pc, #36]	; (8025340 <HAL_FLASH_Unlock+0x38>)
 802531c:	4a09      	ldr	r2, [pc, #36]	; (8025344 <HAL_FLASH_Unlock+0x3c>)
 802531e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8025320:	4b07      	ldr	r3, [pc, #28]	; (8025340 <HAL_FLASH_Unlock+0x38>)
 8025322:	4a09      	ldr	r2, [pc, #36]	; (8025348 <HAL_FLASH_Unlock+0x40>)
 8025324:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8025326:	4b06      	ldr	r3, [pc, #24]	; (8025340 <HAL_FLASH_Unlock+0x38>)
 8025328:	691b      	ldr	r3, [r3, #16]
 802532a:	2b00      	cmp	r3, #0
 802532c:	da01      	bge.n	8025332 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802532e:	2301      	movs	r3, #1
 8025330:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8025332:	79fb      	ldrb	r3, [r7, #7]
}
 8025334:	4618      	mov	r0, r3
 8025336:	370c      	adds	r7, #12
 8025338:	46bd      	mov	sp, r7
 802533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802533e:	4770      	bx	lr
 8025340:	40023c00 	.word	0x40023c00
 8025344:	45670123 	.word	0x45670123
 8025348:	cdef89ab 	.word	0xcdef89ab

0802534c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 802534c:	b480      	push	{r7}
 802534e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8025350:	4b05      	ldr	r3, [pc, #20]	; (8025368 <HAL_FLASH_Lock+0x1c>)
 8025352:	691b      	ldr	r3, [r3, #16]
 8025354:	4a04      	ldr	r2, [pc, #16]	; (8025368 <HAL_FLASH_Lock+0x1c>)
 8025356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802535a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 802535c:	2300      	movs	r3, #0
}
 802535e:	4618      	mov	r0, r3
 8025360:	46bd      	mov	sp, r7
 8025362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025366:	4770      	bx	lr
 8025368:	40023c00 	.word	0x40023c00

0802536c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 802536c:	b580      	push	{r7, lr}
 802536e:	b084      	sub	sp, #16
 8025370:	af00      	add	r7, sp, #0
 8025372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8025374:	2300      	movs	r3, #0
 8025376:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8025378:	4b1a      	ldr	r3, [pc, #104]	; (80253e4 <FLASH_WaitForLastOperation+0x78>)
 802537a:	2200      	movs	r2, #0
 802537c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802537e:	f7ff fdfb 	bl	8024f78 <HAL_GetTick>
 8025382:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8025384:	e010      	b.n	80253a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8025386:	687b      	ldr	r3, [r7, #4]
 8025388:	f1b3 3fff 	cmp.w	r3, #4294967295
 802538c:	d00c      	beq.n	80253a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802538e:	687b      	ldr	r3, [r7, #4]
 8025390:	2b00      	cmp	r3, #0
 8025392:	d007      	beq.n	80253a4 <FLASH_WaitForLastOperation+0x38>
 8025394:	f7ff fdf0 	bl	8024f78 <HAL_GetTick>
 8025398:	4602      	mov	r2, r0
 802539a:	68fb      	ldr	r3, [r7, #12]
 802539c:	1ad3      	subs	r3, r2, r3
 802539e:	687a      	ldr	r2, [r7, #4]
 80253a0:	429a      	cmp	r2, r3
 80253a2:	d201      	bcs.n	80253a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80253a4:	2303      	movs	r3, #3
 80253a6:	e019      	b.n	80253dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80253a8:	4b0f      	ldr	r3, [pc, #60]	; (80253e8 <FLASH_WaitForLastOperation+0x7c>)
 80253aa:	68db      	ldr	r3, [r3, #12]
 80253ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d1e8      	bne.n	8025386 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80253b4:	4b0c      	ldr	r3, [pc, #48]	; (80253e8 <FLASH_WaitForLastOperation+0x7c>)
 80253b6:	68db      	ldr	r3, [r3, #12]
 80253b8:	f003 0301 	and.w	r3, r3, #1
 80253bc:	2b00      	cmp	r3, #0
 80253be:	d002      	beq.n	80253c6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80253c0:	4b09      	ldr	r3, [pc, #36]	; (80253e8 <FLASH_WaitForLastOperation+0x7c>)
 80253c2:	2201      	movs	r2, #1
 80253c4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80253c6:	4b08      	ldr	r3, [pc, #32]	; (80253e8 <FLASH_WaitForLastOperation+0x7c>)
 80253c8:	68db      	ldr	r3, [r3, #12]
 80253ca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80253ce:	2b00      	cmp	r3, #0
 80253d0:	d003      	beq.n	80253da <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80253d2:	f000 f8a5 	bl	8025520 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80253d6:	2301      	movs	r3, #1
 80253d8:	e000      	b.n	80253dc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80253da:	2300      	movs	r3, #0
  
}  
 80253dc:	4618      	mov	r0, r3
 80253de:	3710      	adds	r7, #16
 80253e0:	46bd      	mov	sp, r7
 80253e2:	bd80      	pop	{r7, pc}
 80253e4:	20004ccc 	.word	0x20004ccc
 80253e8:	40023c00 	.word	0x40023c00

080253ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80253ec:	b480      	push	{r7}
 80253ee:	b085      	sub	sp, #20
 80253f0:	af00      	add	r7, sp, #0
 80253f2:	60f8      	str	r0, [r7, #12]
 80253f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80253f8:	4b14      	ldr	r3, [pc, #80]	; (802544c <FLASH_Program_DoubleWord+0x60>)
 80253fa:	691b      	ldr	r3, [r3, #16]
 80253fc:	4a13      	ldr	r2, [pc, #76]	; (802544c <FLASH_Program_DoubleWord+0x60>)
 80253fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8025404:	4b11      	ldr	r3, [pc, #68]	; (802544c <FLASH_Program_DoubleWord+0x60>)
 8025406:	691b      	ldr	r3, [r3, #16]
 8025408:	4a10      	ldr	r2, [pc, #64]	; (802544c <FLASH_Program_DoubleWord+0x60>)
 802540a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802540e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8025410:	4b0e      	ldr	r3, [pc, #56]	; (802544c <FLASH_Program_DoubleWord+0x60>)
 8025412:	691b      	ldr	r3, [r3, #16]
 8025414:	4a0d      	ldr	r2, [pc, #52]	; (802544c <FLASH_Program_DoubleWord+0x60>)
 8025416:	f043 0301 	orr.w	r3, r3, #1
 802541a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 802541c:	68fb      	ldr	r3, [r7, #12]
 802541e:	683a      	ldr	r2, [r7, #0]
 8025420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8025422:	f3bf 8f6f 	isb	sy
}
 8025426:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8025428:	e9d7 0100 	ldrd	r0, r1, [r7]
 802542c:	f04f 0200 	mov.w	r2, #0
 8025430:	f04f 0300 	mov.w	r3, #0
 8025434:	000a      	movs	r2, r1
 8025436:	2300      	movs	r3, #0
 8025438:	68f9      	ldr	r1, [r7, #12]
 802543a:	3104      	adds	r1, #4
 802543c:	4613      	mov	r3, r2
 802543e:	600b      	str	r3, [r1, #0]
}
 8025440:	bf00      	nop
 8025442:	3714      	adds	r7, #20
 8025444:	46bd      	mov	sp, r7
 8025446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802544a:	4770      	bx	lr
 802544c:	40023c00 	.word	0x40023c00

08025450 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8025450:	b480      	push	{r7}
 8025452:	b083      	sub	sp, #12
 8025454:	af00      	add	r7, sp, #0
 8025456:	6078      	str	r0, [r7, #4]
 8025458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802545a:	4b0d      	ldr	r3, [pc, #52]	; (8025490 <FLASH_Program_Word+0x40>)
 802545c:	691b      	ldr	r3, [r3, #16]
 802545e:	4a0c      	ldr	r2, [pc, #48]	; (8025490 <FLASH_Program_Word+0x40>)
 8025460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025464:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8025466:	4b0a      	ldr	r3, [pc, #40]	; (8025490 <FLASH_Program_Word+0x40>)
 8025468:	691b      	ldr	r3, [r3, #16]
 802546a:	4a09      	ldr	r2, [pc, #36]	; (8025490 <FLASH_Program_Word+0x40>)
 802546c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8025470:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8025472:	4b07      	ldr	r3, [pc, #28]	; (8025490 <FLASH_Program_Word+0x40>)
 8025474:	691b      	ldr	r3, [r3, #16]
 8025476:	4a06      	ldr	r2, [pc, #24]	; (8025490 <FLASH_Program_Word+0x40>)
 8025478:	f043 0301 	orr.w	r3, r3, #1
 802547c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802547e:	687b      	ldr	r3, [r7, #4]
 8025480:	683a      	ldr	r2, [r7, #0]
 8025482:	601a      	str	r2, [r3, #0]
}
 8025484:	bf00      	nop
 8025486:	370c      	adds	r7, #12
 8025488:	46bd      	mov	sp, r7
 802548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802548e:	4770      	bx	lr
 8025490:	40023c00 	.word	0x40023c00

08025494 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8025494:	b480      	push	{r7}
 8025496:	b083      	sub	sp, #12
 8025498:	af00      	add	r7, sp, #0
 802549a:	6078      	str	r0, [r7, #4]
 802549c:	460b      	mov	r3, r1
 802549e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80254a0:	4b0d      	ldr	r3, [pc, #52]	; (80254d8 <FLASH_Program_HalfWord+0x44>)
 80254a2:	691b      	ldr	r3, [r3, #16]
 80254a4:	4a0c      	ldr	r2, [pc, #48]	; (80254d8 <FLASH_Program_HalfWord+0x44>)
 80254a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80254aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80254ac:	4b0a      	ldr	r3, [pc, #40]	; (80254d8 <FLASH_Program_HalfWord+0x44>)
 80254ae:	691b      	ldr	r3, [r3, #16]
 80254b0:	4a09      	ldr	r2, [pc, #36]	; (80254d8 <FLASH_Program_HalfWord+0x44>)
 80254b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80254b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80254b8:	4b07      	ldr	r3, [pc, #28]	; (80254d8 <FLASH_Program_HalfWord+0x44>)
 80254ba:	691b      	ldr	r3, [r3, #16]
 80254bc:	4a06      	ldr	r2, [pc, #24]	; (80254d8 <FLASH_Program_HalfWord+0x44>)
 80254be:	f043 0301 	orr.w	r3, r3, #1
 80254c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80254c4:	687b      	ldr	r3, [r7, #4]
 80254c6:	887a      	ldrh	r2, [r7, #2]
 80254c8:	801a      	strh	r2, [r3, #0]
}
 80254ca:	bf00      	nop
 80254cc:	370c      	adds	r7, #12
 80254ce:	46bd      	mov	sp, r7
 80254d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254d4:	4770      	bx	lr
 80254d6:	bf00      	nop
 80254d8:	40023c00 	.word	0x40023c00

080254dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80254dc:	b480      	push	{r7}
 80254de:	b083      	sub	sp, #12
 80254e0:	af00      	add	r7, sp, #0
 80254e2:	6078      	str	r0, [r7, #4]
 80254e4:	460b      	mov	r3, r1
 80254e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80254e8:	4b0c      	ldr	r3, [pc, #48]	; (802551c <FLASH_Program_Byte+0x40>)
 80254ea:	691b      	ldr	r3, [r3, #16]
 80254ec:	4a0b      	ldr	r2, [pc, #44]	; (802551c <FLASH_Program_Byte+0x40>)
 80254ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80254f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80254f4:	4b09      	ldr	r3, [pc, #36]	; (802551c <FLASH_Program_Byte+0x40>)
 80254f6:	4a09      	ldr	r2, [pc, #36]	; (802551c <FLASH_Program_Byte+0x40>)
 80254f8:	691b      	ldr	r3, [r3, #16]
 80254fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80254fc:	4b07      	ldr	r3, [pc, #28]	; (802551c <FLASH_Program_Byte+0x40>)
 80254fe:	691b      	ldr	r3, [r3, #16]
 8025500:	4a06      	ldr	r2, [pc, #24]	; (802551c <FLASH_Program_Byte+0x40>)
 8025502:	f043 0301 	orr.w	r3, r3, #1
 8025506:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	78fa      	ldrb	r2, [r7, #3]
 802550c:	701a      	strb	r2, [r3, #0]
}
 802550e:	bf00      	nop
 8025510:	370c      	adds	r7, #12
 8025512:	46bd      	mov	sp, r7
 8025514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025518:	4770      	bx	lr
 802551a:	bf00      	nop
 802551c:	40023c00 	.word	0x40023c00

08025520 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8025520:	b480      	push	{r7}
 8025522:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8025524:	4b27      	ldr	r3, [pc, #156]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 8025526:	68db      	ldr	r3, [r3, #12]
 8025528:	f003 0310 	and.w	r3, r3, #16
 802552c:	2b00      	cmp	r3, #0
 802552e:	d008      	beq.n	8025542 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8025530:	4b25      	ldr	r3, [pc, #148]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 8025532:	69db      	ldr	r3, [r3, #28]
 8025534:	f043 0310 	orr.w	r3, r3, #16
 8025538:	4a23      	ldr	r2, [pc, #140]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 802553a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802553c:	4b21      	ldr	r3, [pc, #132]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 802553e:	2210      	movs	r2, #16
 8025540:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8025542:	4b20      	ldr	r3, [pc, #128]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 8025544:	68db      	ldr	r3, [r3, #12]
 8025546:	f003 0320 	and.w	r3, r3, #32
 802554a:	2b00      	cmp	r3, #0
 802554c:	d008      	beq.n	8025560 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802554e:	4b1e      	ldr	r3, [pc, #120]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 8025550:	69db      	ldr	r3, [r3, #28]
 8025552:	f043 0308 	orr.w	r3, r3, #8
 8025556:	4a1c      	ldr	r2, [pc, #112]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 8025558:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802555a:	4b1a      	ldr	r3, [pc, #104]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 802555c:	2220      	movs	r2, #32
 802555e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8025560:	4b18      	ldr	r3, [pc, #96]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 8025562:	68db      	ldr	r3, [r3, #12]
 8025564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025568:	2b00      	cmp	r3, #0
 802556a:	d008      	beq.n	802557e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802556c:	4b16      	ldr	r3, [pc, #88]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 802556e:	69db      	ldr	r3, [r3, #28]
 8025570:	f043 0304 	orr.w	r3, r3, #4
 8025574:	4a14      	ldr	r2, [pc, #80]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 8025576:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8025578:	4b12      	ldr	r3, [pc, #72]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 802557a:	2240      	movs	r2, #64	; 0x40
 802557c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802557e:	4b11      	ldr	r3, [pc, #68]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 8025580:	68db      	ldr	r3, [r3, #12]
 8025582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025586:	2b00      	cmp	r3, #0
 8025588:	d008      	beq.n	802559c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802558a:	4b0f      	ldr	r3, [pc, #60]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 802558c:	69db      	ldr	r3, [r3, #28]
 802558e:	f043 0302 	orr.w	r3, r3, #2
 8025592:	4a0d      	ldr	r2, [pc, #52]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 8025594:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8025596:	4b0b      	ldr	r3, [pc, #44]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 8025598:	2280      	movs	r2, #128	; 0x80
 802559a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802559c:	4b09      	ldr	r3, [pc, #36]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 802559e:	68db      	ldr	r3, [r3, #12]
 80255a0:	f003 0302 	and.w	r3, r3, #2
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	d008      	beq.n	80255ba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80255a8:	4b07      	ldr	r3, [pc, #28]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 80255aa:	69db      	ldr	r3, [r3, #28]
 80255ac:	f043 0320 	orr.w	r3, r3, #32
 80255b0:	4a05      	ldr	r2, [pc, #20]	; (80255c8 <FLASH_SetErrorCode+0xa8>)
 80255b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80255b4:	4b03      	ldr	r3, [pc, #12]	; (80255c4 <FLASH_SetErrorCode+0xa4>)
 80255b6:	2202      	movs	r2, #2
 80255b8:	60da      	str	r2, [r3, #12]
  }
}
 80255ba:	bf00      	nop
 80255bc:	46bd      	mov	sp, r7
 80255be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255c2:	4770      	bx	lr
 80255c4:	40023c00 	.word	0x40023c00
 80255c8:	20004ccc 	.word	0x20004ccc

080255cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80255cc:	b580      	push	{r7, lr}
 80255ce:	b084      	sub	sp, #16
 80255d0:	af00      	add	r7, sp, #0
 80255d2:	6078      	str	r0, [r7, #4]
 80255d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80255d6:	2301      	movs	r3, #1
 80255d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80255da:	2300      	movs	r3, #0
 80255dc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80255de:	4b31      	ldr	r3, [pc, #196]	; (80256a4 <HAL_FLASHEx_Erase+0xd8>)
 80255e0:	7e1b      	ldrb	r3, [r3, #24]
 80255e2:	2b01      	cmp	r3, #1
 80255e4:	d101      	bne.n	80255ea <HAL_FLASHEx_Erase+0x1e>
 80255e6:	2302      	movs	r3, #2
 80255e8:	e058      	b.n	802569c <HAL_FLASHEx_Erase+0xd0>
 80255ea:	4b2e      	ldr	r3, [pc, #184]	; (80256a4 <HAL_FLASHEx_Erase+0xd8>)
 80255ec:	2201      	movs	r2, #1
 80255ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80255f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80255f4:	f7ff feba 	bl	802536c <FLASH_WaitForLastOperation>
 80255f8:	4603      	mov	r3, r0
 80255fa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80255fc:	7bfb      	ldrb	r3, [r7, #15]
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d148      	bne.n	8025694 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8025602:	683b      	ldr	r3, [r7, #0]
 8025604:	f04f 32ff 	mov.w	r2, #4294967295
 8025608:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	681b      	ldr	r3, [r3, #0]
 802560e:	2b01      	cmp	r3, #1
 8025610:	d115      	bne.n	802563e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8025612:	687b      	ldr	r3, [r7, #4]
 8025614:	691b      	ldr	r3, [r3, #16]
 8025616:	b2da      	uxtb	r2, r3
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	685b      	ldr	r3, [r3, #4]
 802561c:	4619      	mov	r1, r3
 802561e:	4610      	mov	r0, r2
 8025620:	f000 f844 	bl	80256ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8025624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8025628:	f7ff fea0 	bl	802536c <FLASH_WaitForLastOperation>
 802562c:	4603      	mov	r3, r0
 802562e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8025630:	4b1d      	ldr	r3, [pc, #116]	; (80256a8 <HAL_FLASHEx_Erase+0xdc>)
 8025632:	691b      	ldr	r3, [r3, #16]
 8025634:	4a1c      	ldr	r2, [pc, #112]	; (80256a8 <HAL_FLASHEx_Erase+0xdc>)
 8025636:	f023 0304 	bic.w	r3, r3, #4
 802563a:	6113      	str	r3, [r2, #16]
 802563c:	e028      	b.n	8025690 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802563e:	687b      	ldr	r3, [r7, #4]
 8025640:	689b      	ldr	r3, [r3, #8]
 8025642:	60bb      	str	r3, [r7, #8]
 8025644:	e01c      	b.n	8025680 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	691b      	ldr	r3, [r3, #16]
 802564a:	b2db      	uxtb	r3, r3
 802564c:	4619      	mov	r1, r3
 802564e:	68b8      	ldr	r0, [r7, #8]
 8025650:	f000 f850 	bl	80256f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8025654:	f24c 3050 	movw	r0, #50000	; 0xc350
 8025658:	f7ff fe88 	bl	802536c <FLASH_WaitForLastOperation>
 802565c:	4603      	mov	r3, r0
 802565e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8025660:	4b11      	ldr	r3, [pc, #68]	; (80256a8 <HAL_FLASHEx_Erase+0xdc>)
 8025662:	691b      	ldr	r3, [r3, #16]
 8025664:	4a10      	ldr	r2, [pc, #64]	; (80256a8 <HAL_FLASHEx_Erase+0xdc>)
 8025666:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802566a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 802566c:	7bfb      	ldrb	r3, [r7, #15]
 802566e:	2b00      	cmp	r3, #0
 8025670:	d003      	beq.n	802567a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8025672:	683b      	ldr	r3, [r7, #0]
 8025674:	68ba      	ldr	r2, [r7, #8]
 8025676:	601a      	str	r2, [r3, #0]
          break;
 8025678:	e00a      	b.n	8025690 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802567a:	68bb      	ldr	r3, [r7, #8]
 802567c:	3301      	adds	r3, #1
 802567e:	60bb      	str	r3, [r7, #8]
 8025680:	687b      	ldr	r3, [r7, #4]
 8025682:	68da      	ldr	r2, [r3, #12]
 8025684:	687b      	ldr	r3, [r7, #4]
 8025686:	689b      	ldr	r3, [r3, #8]
 8025688:	4413      	add	r3, r2
 802568a:	68ba      	ldr	r2, [r7, #8]
 802568c:	429a      	cmp	r2, r3
 802568e:	d3da      	bcc.n	8025646 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8025690:	f000 f878 	bl	8025784 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8025694:	4b03      	ldr	r3, [pc, #12]	; (80256a4 <HAL_FLASHEx_Erase+0xd8>)
 8025696:	2200      	movs	r2, #0
 8025698:	761a      	strb	r2, [r3, #24]

  return status;
 802569a:	7bfb      	ldrb	r3, [r7, #15]
}
 802569c:	4618      	mov	r0, r3
 802569e:	3710      	adds	r7, #16
 80256a0:	46bd      	mov	sp, r7
 80256a2:	bd80      	pop	{r7, pc}
 80256a4:	20004ccc 	.word	0x20004ccc
 80256a8:	40023c00 	.word	0x40023c00

080256ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80256ac:	b480      	push	{r7}
 80256ae:	b083      	sub	sp, #12
 80256b0:	af00      	add	r7, sp, #0
 80256b2:	4603      	mov	r3, r0
 80256b4:	6039      	str	r1, [r7, #0]
 80256b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80256b8:	4b0d      	ldr	r3, [pc, #52]	; (80256f0 <FLASH_MassErase+0x44>)
 80256ba:	691b      	ldr	r3, [r3, #16]
 80256bc:	4a0c      	ldr	r2, [pc, #48]	; (80256f0 <FLASH_MassErase+0x44>)
 80256be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80256c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80256c4:	4b0a      	ldr	r3, [pc, #40]	; (80256f0 <FLASH_MassErase+0x44>)
 80256c6:	691b      	ldr	r3, [r3, #16]
 80256c8:	4a09      	ldr	r2, [pc, #36]	; (80256f0 <FLASH_MassErase+0x44>)
 80256ca:	f043 0304 	orr.w	r3, r3, #4
 80256ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80256d0:	4b07      	ldr	r3, [pc, #28]	; (80256f0 <FLASH_MassErase+0x44>)
 80256d2:	691a      	ldr	r2, [r3, #16]
 80256d4:	79fb      	ldrb	r3, [r7, #7]
 80256d6:	021b      	lsls	r3, r3, #8
 80256d8:	4313      	orrs	r3, r2
 80256da:	4a05      	ldr	r2, [pc, #20]	; (80256f0 <FLASH_MassErase+0x44>)
 80256dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80256e0:	6113      	str	r3, [r2, #16]
}
 80256e2:	bf00      	nop
 80256e4:	370c      	adds	r7, #12
 80256e6:	46bd      	mov	sp, r7
 80256e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256ec:	4770      	bx	lr
 80256ee:	bf00      	nop
 80256f0:	40023c00 	.word	0x40023c00

080256f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80256f4:	b480      	push	{r7}
 80256f6:	b085      	sub	sp, #20
 80256f8:	af00      	add	r7, sp, #0
 80256fa:	6078      	str	r0, [r7, #4]
 80256fc:	460b      	mov	r3, r1
 80256fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8025700:	2300      	movs	r3, #0
 8025702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8025704:	78fb      	ldrb	r3, [r7, #3]
 8025706:	2b00      	cmp	r3, #0
 8025708:	d102      	bne.n	8025710 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 802570a:	2300      	movs	r3, #0
 802570c:	60fb      	str	r3, [r7, #12]
 802570e:	e010      	b.n	8025732 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8025710:	78fb      	ldrb	r3, [r7, #3]
 8025712:	2b01      	cmp	r3, #1
 8025714:	d103      	bne.n	802571e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8025716:	f44f 7380 	mov.w	r3, #256	; 0x100
 802571a:	60fb      	str	r3, [r7, #12]
 802571c:	e009      	b.n	8025732 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802571e:	78fb      	ldrb	r3, [r7, #3]
 8025720:	2b02      	cmp	r3, #2
 8025722:	d103      	bne.n	802572c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8025724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025728:	60fb      	str	r3, [r7, #12]
 802572a:	e002      	b.n	8025732 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 802572c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025730:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8025732:	4b13      	ldr	r3, [pc, #76]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025734:	691b      	ldr	r3, [r3, #16]
 8025736:	4a12      	ldr	r2, [pc, #72]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802573c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802573e:	4b10      	ldr	r3, [pc, #64]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025740:	691a      	ldr	r2, [r3, #16]
 8025742:	490f      	ldr	r1, [pc, #60]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025744:	68fb      	ldr	r3, [r7, #12]
 8025746:	4313      	orrs	r3, r2
 8025748:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 802574a:	4b0d      	ldr	r3, [pc, #52]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 802574c:	691b      	ldr	r3, [r3, #16]
 802574e:	4a0c      	ldr	r2, [pc, #48]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025750:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8025754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8025756:	4b0a      	ldr	r3, [pc, #40]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025758:	691a      	ldr	r2, [r3, #16]
 802575a:	687b      	ldr	r3, [r7, #4]
 802575c:	00db      	lsls	r3, r3, #3
 802575e:	4313      	orrs	r3, r2
 8025760:	4a07      	ldr	r2, [pc, #28]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 8025762:	f043 0302 	orr.w	r3, r3, #2
 8025766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8025768:	4b05      	ldr	r3, [pc, #20]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 802576a:	691b      	ldr	r3, [r3, #16]
 802576c:	4a04      	ldr	r2, [pc, #16]	; (8025780 <FLASH_Erase_Sector+0x8c>)
 802576e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025772:	6113      	str	r3, [r2, #16]
}
 8025774:	bf00      	nop
 8025776:	3714      	adds	r7, #20
 8025778:	46bd      	mov	sp, r7
 802577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802577e:	4770      	bx	lr
 8025780:	40023c00 	.word	0x40023c00

08025784 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8025784:	b480      	push	{r7}
 8025786:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8025788:	4b20      	ldr	r3, [pc, #128]	; (802580c <FLASH_FlushCaches+0x88>)
 802578a:	681b      	ldr	r3, [r3, #0]
 802578c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025790:	2b00      	cmp	r3, #0
 8025792:	d017      	beq.n	80257c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8025794:	4b1d      	ldr	r3, [pc, #116]	; (802580c <FLASH_FlushCaches+0x88>)
 8025796:	681b      	ldr	r3, [r3, #0]
 8025798:	4a1c      	ldr	r2, [pc, #112]	; (802580c <FLASH_FlushCaches+0x88>)
 802579a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802579e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80257a0:	4b1a      	ldr	r3, [pc, #104]	; (802580c <FLASH_FlushCaches+0x88>)
 80257a2:	681b      	ldr	r3, [r3, #0]
 80257a4:	4a19      	ldr	r2, [pc, #100]	; (802580c <FLASH_FlushCaches+0x88>)
 80257a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80257aa:	6013      	str	r3, [r2, #0]
 80257ac:	4b17      	ldr	r3, [pc, #92]	; (802580c <FLASH_FlushCaches+0x88>)
 80257ae:	681b      	ldr	r3, [r3, #0]
 80257b0:	4a16      	ldr	r2, [pc, #88]	; (802580c <FLASH_FlushCaches+0x88>)
 80257b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80257b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80257b8:	4b14      	ldr	r3, [pc, #80]	; (802580c <FLASH_FlushCaches+0x88>)
 80257ba:	681b      	ldr	r3, [r3, #0]
 80257bc:	4a13      	ldr	r2, [pc, #76]	; (802580c <FLASH_FlushCaches+0x88>)
 80257be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80257c2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80257c4:	4b11      	ldr	r3, [pc, #68]	; (802580c <FLASH_FlushCaches+0x88>)
 80257c6:	681b      	ldr	r3, [r3, #0]
 80257c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80257cc:	2b00      	cmp	r3, #0
 80257ce:	d017      	beq.n	8025800 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80257d0:	4b0e      	ldr	r3, [pc, #56]	; (802580c <FLASH_FlushCaches+0x88>)
 80257d2:	681b      	ldr	r3, [r3, #0]
 80257d4:	4a0d      	ldr	r2, [pc, #52]	; (802580c <FLASH_FlushCaches+0x88>)
 80257d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80257da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80257dc:	4b0b      	ldr	r3, [pc, #44]	; (802580c <FLASH_FlushCaches+0x88>)
 80257de:	681b      	ldr	r3, [r3, #0]
 80257e0:	4a0a      	ldr	r2, [pc, #40]	; (802580c <FLASH_FlushCaches+0x88>)
 80257e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80257e6:	6013      	str	r3, [r2, #0]
 80257e8:	4b08      	ldr	r3, [pc, #32]	; (802580c <FLASH_FlushCaches+0x88>)
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	4a07      	ldr	r2, [pc, #28]	; (802580c <FLASH_FlushCaches+0x88>)
 80257ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80257f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80257f4:	4b05      	ldr	r3, [pc, #20]	; (802580c <FLASH_FlushCaches+0x88>)
 80257f6:	681b      	ldr	r3, [r3, #0]
 80257f8:	4a04      	ldr	r2, [pc, #16]	; (802580c <FLASH_FlushCaches+0x88>)
 80257fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80257fe:	6013      	str	r3, [r2, #0]
  }
}
 8025800:	bf00      	nop
 8025802:	46bd      	mov	sp, r7
 8025804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025808:	4770      	bx	lr
 802580a:	bf00      	nop
 802580c:	40023c00 	.word	0x40023c00

08025810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8025810:	b480      	push	{r7}
 8025812:	b089      	sub	sp, #36	; 0x24
 8025814:	af00      	add	r7, sp, #0
 8025816:	6078      	str	r0, [r7, #4]
 8025818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802581a:	2300      	movs	r3, #0
 802581c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802581e:	2300      	movs	r3, #0
 8025820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8025822:	2300      	movs	r3, #0
 8025824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8025826:	2300      	movs	r3, #0
 8025828:	61fb      	str	r3, [r7, #28]
 802582a:	e16b      	b.n	8025b04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802582c:	2201      	movs	r2, #1
 802582e:	69fb      	ldr	r3, [r7, #28]
 8025830:	fa02 f303 	lsl.w	r3, r2, r3
 8025834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8025836:	683b      	ldr	r3, [r7, #0]
 8025838:	681b      	ldr	r3, [r3, #0]
 802583a:	697a      	ldr	r2, [r7, #20]
 802583c:	4013      	ands	r3, r2
 802583e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8025840:	693a      	ldr	r2, [r7, #16]
 8025842:	697b      	ldr	r3, [r7, #20]
 8025844:	429a      	cmp	r2, r3
 8025846:	f040 815a 	bne.w	8025afe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802584a:	683b      	ldr	r3, [r7, #0]
 802584c:	685b      	ldr	r3, [r3, #4]
 802584e:	2b01      	cmp	r3, #1
 8025850:	d00b      	beq.n	802586a <HAL_GPIO_Init+0x5a>
 8025852:	683b      	ldr	r3, [r7, #0]
 8025854:	685b      	ldr	r3, [r3, #4]
 8025856:	2b02      	cmp	r3, #2
 8025858:	d007      	beq.n	802586a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802585a:	683b      	ldr	r3, [r7, #0]
 802585c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802585e:	2b11      	cmp	r3, #17
 8025860:	d003      	beq.n	802586a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025862:	683b      	ldr	r3, [r7, #0]
 8025864:	685b      	ldr	r3, [r3, #4]
 8025866:	2b12      	cmp	r3, #18
 8025868:	d130      	bne.n	80258cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802586a:	687b      	ldr	r3, [r7, #4]
 802586c:	689b      	ldr	r3, [r3, #8]
 802586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8025870:	69fb      	ldr	r3, [r7, #28]
 8025872:	005b      	lsls	r3, r3, #1
 8025874:	2203      	movs	r2, #3
 8025876:	fa02 f303 	lsl.w	r3, r2, r3
 802587a:	43db      	mvns	r3, r3
 802587c:	69ba      	ldr	r2, [r7, #24]
 802587e:	4013      	ands	r3, r2
 8025880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8025882:	683b      	ldr	r3, [r7, #0]
 8025884:	68da      	ldr	r2, [r3, #12]
 8025886:	69fb      	ldr	r3, [r7, #28]
 8025888:	005b      	lsls	r3, r3, #1
 802588a:	fa02 f303 	lsl.w	r3, r2, r3
 802588e:	69ba      	ldr	r2, [r7, #24]
 8025890:	4313      	orrs	r3, r2
 8025892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025894:	687b      	ldr	r3, [r7, #4]
 8025896:	69ba      	ldr	r2, [r7, #24]
 8025898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	685b      	ldr	r3, [r3, #4]
 802589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80258a0:	2201      	movs	r2, #1
 80258a2:	69fb      	ldr	r3, [r7, #28]
 80258a4:	fa02 f303 	lsl.w	r3, r2, r3
 80258a8:	43db      	mvns	r3, r3
 80258aa:	69ba      	ldr	r2, [r7, #24]
 80258ac:	4013      	ands	r3, r2
 80258ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80258b0:	683b      	ldr	r3, [r7, #0]
 80258b2:	685b      	ldr	r3, [r3, #4]
 80258b4:	091b      	lsrs	r3, r3, #4
 80258b6:	f003 0201 	and.w	r2, r3, #1
 80258ba:	69fb      	ldr	r3, [r7, #28]
 80258bc:	fa02 f303 	lsl.w	r3, r2, r3
 80258c0:	69ba      	ldr	r2, [r7, #24]
 80258c2:	4313      	orrs	r3, r2
 80258c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80258c6:	687b      	ldr	r3, [r7, #4]
 80258c8:	69ba      	ldr	r2, [r7, #24]
 80258ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80258cc:	687b      	ldr	r3, [r7, #4]
 80258ce:	68db      	ldr	r3, [r3, #12]
 80258d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80258d2:	69fb      	ldr	r3, [r7, #28]
 80258d4:	005b      	lsls	r3, r3, #1
 80258d6:	2203      	movs	r2, #3
 80258d8:	fa02 f303 	lsl.w	r3, r2, r3
 80258dc:	43db      	mvns	r3, r3
 80258de:	69ba      	ldr	r2, [r7, #24]
 80258e0:	4013      	ands	r3, r2
 80258e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80258e4:	683b      	ldr	r3, [r7, #0]
 80258e6:	689a      	ldr	r2, [r3, #8]
 80258e8:	69fb      	ldr	r3, [r7, #28]
 80258ea:	005b      	lsls	r3, r3, #1
 80258ec:	fa02 f303 	lsl.w	r3, r2, r3
 80258f0:	69ba      	ldr	r2, [r7, #24]
 80258f2:	4313      	orrs	r3, r2
 80258f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80258f6:	687b      	ldr	r3, [r7, #4]
 80258f8:	69ba      	ldr	r2, [r7, #24]
 80258fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80258fc:	683b      	ldr	r3, [r7, #0]
 80258fe:	685b      	ldr	r3, [r3, #4]
 8025900:	2b02      	cmp	r3, #2
 8025902:	d003      	beq.n	802590c <HAL_GPIO_Init+0xfc>
 8025904:	683b      	ldr	r3, [r7, #0]
 8025906:	685b      	ldr	r3, [r3, #4]
 8025908:	2b12      	cmp	r3, #18
 802590a:	d123      	bne.n	8025954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802590c:	69fb      	ldr	r3, [r7, #28]
 802590e:	08da      	lsrs	r2, r3, #3
 8025910:	687b      	ldr	r3, [r7, #4]
 8025912:	3208      	adds	r2, #8
 8025914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802591a:	69fb      	ldr	r3, [r7, #28]
 802591c:	f003 0307 	and.w	r3, r3, #7
 8025920:	009b      	lsls	r3, r3, #2
 8025922:	220f      	movs	r2, #15
 8025924:	fa02 f303 	lsl.w	r3, r2, r3
 8025928:	43db      	mvns	r3, r3
 802592a:	69ba      	ldr	r2, [r7, #24]
 802592c:	4013      	ands	r3, r2
 802592e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8025930:	683b      	ldr	r3, [r7, #0]
 8025932:	691a      	ldr	r2, [r3, #16]
 8025934:	69fb      	ldr	r3, [r7, #28]
 8025936:	f003 0307 	and.w	r3, r3, #7
 802593a:	009b      	lsls	r3, r3, #2
 802593c:	fa02 f303 	lsl.w	r3, r2, r3
 8025940:	69ba      	ldr	r2, [r7, #24]
 8025942:	4313      	orrs	r3, r2
 8025944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8025946:	69fb      	ldr	r3, [r7, #28]
 8025948:	08da      	lsrs	r2, r3, #3
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	3208      	adds	r2, #8
 802594e:	69b9      	ldr	r1, [r7, #24]
 8025950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	681b      	ldr	r3, [r3, #0]
 8025958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802595a:	69fb      	ldr	r3, [r7, #28]
 802595c:	005b      	lsls	r3, r3, #1
 802595e:	2203      	movs	r2, #3
 8025960:	fa02 f303 	lsl.w	r3, r2, r3
 8025964:	43db      	mvns	r3, r3
 8025966:	69ba      	ldr	r2, [r7, #24]
 8025968:	4013      	ands	r3, r2
 802596a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802596c:	683b      	ldr	r3, [r7, #0]
 802596e:	685b      	ldr	r3, [r3, #4]
 8025970:	f003 0203 	and.w	r2, r3, #3
 8025974:	69fb      	ldr	r3, [r7, #28]
 8025976:	005b      	lsls	r3, r3, #1
 8025978:	fa02 f303 	lsl.w	r3, r2, r3
 802597c:	69ba      	ldr	r2, [r7, #24]
 802597e:	4313      	orrs	r3, r2
 8025980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025982:	687b      	ldr	r3, [r7, #4]
 8025984:	69ba      	ldr	r2, [r7, #24]
 8025986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8025988:	683b      	ldr	r3, [r7, #0]
 802598a:	685b      	ldr	r3, [r3, #4]
 802598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025990:	2b00      	cmp	r3, #0
 8025992:	f000 80b4 	beq.w	8025afe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025996:	2300      	movs	r3, #0
 8025998:	60fb      	str	r3, [r7, #12]
 802599a:	4b60      	ldr	r3, [pc, #384]	; (8025b1c <HAL_GPIO_Init+0x30c>)
 802599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802599e:	4a5f      	ldr	r2, [pc, #380]	; (8025b1c <HAL_GPIO_Init+0x30c>)
 80259a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80259a4:	6453      	str	r3, [r2, #68]	; 0x44
 80259a6:	4b5d      	ldr	r3, [pc, #372]	; (8025b1c <HAL_GPIO_Init+0x30c>)
 80259a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80259ae:	60fb      	str	r3, [r7, #12]
 80259b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80259b2:	4a5b      	ldr	r2, [pc, #364]	; (8025b20 <HAL_GPIO_Init+0x310>)
 80259b4:	69fb      	ldr	r3, [r7, #28]
 80259b6:	089b      	lsrs	r3, r3, #2
 80259b8:	3302      	adds	r3, #2
 80259ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80259be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80259c0:	69fb      	ldr	r3, [r7, #28]
 80259c2:	f003 0303 	and.w	r3, r3, #3
 80259c6:	009b      	lsls	r3, r3, #2
 80259c8:	220f      	movs	r2, #15
 80259ca:	fa02 f303 	lsl.w	r3, r2, r3
 80259ce:	43db      	mvns	r3, r3
 80259d0:	69ba      	ldr	r2, [r7, #24]
 80259d2:	4013      	ands	r3, r2
 80259d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80259d6:	687b      	ldr	r3, [r7, #4]
 80259d8:	4a52      	ldr	r2, [pc, #328]	; (8025b24 <HAL_GPIO_Init+0x314>)
 80259da:	4293      	cmp	r3, r2
 80259dc:	d02b      	beq.n	8025a36 <HAL_GPIO_Init+0x226>
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	4a51      	ldr	r2, [pc, #324]	; (8025b28 <HAL_GPIO_Init+0x318>)
 80259e2:	4293      	cmp	r3, r2
 80259e4:	d025      	beq.n	8025a32 <HAL_GPIO_Init+0x222>
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	4a50      	ldr	r2, [pc, #320]	; (8025b2c <HAL_GPIO_Init+0x31c>)
 80259ea:	4293      	cmp	r3, r2
 80259ec:	d01f      	beq.n	8025a2e <HAL_GPIO_Init+0x21e>
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	4a4f      	ldr	r2, [pc, #316]	; (8025b30 <HAL_GPIO_Init+0x320>)
 80259f2:	4293      	cmp	r3, r2
 80259f4:	d019      	beq.n	8025a2a <HAL_GPIO_Init+0x21a>
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	4a4e      	ldr	r2, [pc, #312]	; (8025b34 <HAL_GPIO_Init+0x324>)
 80259fa:	4293      	cmp	r3, r2
 80259fc:	d013      	beq.n	8025a26 <HAL_GPIO_Init+0x216>
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	4a4d      	ldr	r2, [pc, #308]	; (8025b38 <HAL_GPIO_Init+0x328>)
 8025a02:	4293      	cmp	r3, r2
 8025a04:	d00d      	beq.n	8025a22 <HAL_GPIO_Init+0x212>
 8025a06:	687b      	ldr	r3, [r7, #4]
 8025a08:	4a4c      	ldr	r2, [pc, #304]	; (8025b3c <HAL_GPIO_Init+0x32c>)
 8025a0a:	4293      	cmp	r3, r2
 8025a0c:	d007      	beq.n	8025a1e <HAL_GPIO_Init+0x20e>
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	4a4b      	ldr	r2, [pc, #300]	; (8025b40 <HAL_GPIO_Init+0x330>)
 8025a12:	4293      	cmp	r3, r2
 8025a14:	d101      	bne.n	8025a1a <HAL_GPIO_Init+0x20a>
 8025a16:	2307      	movs	r3, #7
 8025a18:	e00e      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a1a:	2308      	movs	r3, #8
 8025a1c:	e00c      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a1e:	2306      	movs	r3, #6
 8025a20:	e00a      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a22:	2305      	movs	r3, #5
 8025a24:	e008      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a26:	2304      	movs	r3, #4
 8025a28:	e006      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a2a:	2303      	movs	r3, #3
 8025a2c:	e004      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a2e:	2302      	movs	r3, #2
 8025a30:	e002      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a32:	2301      	movs	r3, #1
 8025a34:	e000      	b.n	8025a38 <HAL_GPIO_Init+0x228>
 8025a36:	2300      	movs	r3, #0
 8025a38:	69fa      	ldr	r2, [r7, #28]
 8025a3a:	f002 0203 	and.w	r2, r2, #3
 8025a3e:	0092      	lsls	r2, r2, #2
 8025a40:	4093      	lsls	r3, r2
 8025a42:	69ba      	ldr	r2, [r7, #24]
 8025a44:	4313      	orrs	r3, r2
 8025a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8025a48:	4935      	ldr	r1, [pc, #212]	; (8025b20 <HAL_GPIO_Init+0x310>)
 8025a4a:	69fb      	ldr	r3, [r7, #28]
 8025a4c:	089b      	lsrs	r3, r3, #2
 8025a4e:	3302      	adds	r3, #2
 8025a50:	69ba      	ldr	r2, [r7, #24]
 8025a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025a56:	4b3b      	ldr	r3, [pc, #236]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025a58:	681b      	ldr	r3, [r3, #0]
 8025a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025a5c:	693b      	ldr	r3, [r7, #16]
 8025a5e:	43db      	mvns	r3, r3
 8025a60:	69ba      	ldr	r2, [r7, #24]
 8025a62:	4013      	ands	r3, r2
 8025a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8025a66:	683b      	ldr	r3, [r7, #0]
 8025a68:	685b      	ldr	r3, [r3, #4]
 8025a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025a6e:	2b00      	cmp	r3, #0
 8025a70:	d003      	beq.n	8025a7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8025a72:	69ba      	ldr	r2, [r7, #24]
 8025a74:	693b      	ldr	r3, [r7, #16]
 8025a76:	4313      	orrs	r3, r2
 8025a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8025a7a:	4a32      	ldr	r2, [pc, #200]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025a7c:	69bb      	ldr	r3, [r7, #24]
 8025a7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8025a80:	4b30      	ldr	r3, [pc, #192]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025a82:	685b      	ldr	r3, [r3, #4]
 8025a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025a86:	693b      	ldr	r3, [r7, #16]
 8025a88:	43db      	mvns	r3, r3
 8025a8a:	69ba      	ldr	r2, [r7, #24]
 8025a8c:	4013      	ands	r3, r2
 8025a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8025a90:	683b      	ldr	r3, [r7, #0]
 8025a92:	685b      	ldr	r3, [r3, #4]
 8025a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025a98:	2b00      	cmp	r3, #0
 8025a9a:	d003      	beq.n	8025aa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8025a9c:	69ba      	ldr	r2, [r7, #24]
 8025a9e:	693b      	ldr	r3, [r7, #16]
 8025aa0:	4313      	orrs	r3, r2
 8025aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025aa4:	4a27      	ldr	r2, [pc, #156]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025aa6:	69bb      	ldr	r3, [r7, #24]
 8025aa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8025aaa:	4b26      	ldr	r3, [pc, #152]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025aac:	689b      	ldr	r3, [r3, #8]
 8025aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025ab0:	693b      	ldr	r3, [r7, #16]
 8025ab2:	43db      	mvns	r3, r3
 8025ab4:	69ba      	ldr	r2, [r7, #24]
 8025ab6:	4013      	ands	r3, r2
 8025ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8025aba:	683b      	ldr	r3, [r7, #0]
 8025abc:	685b      	ldr	r3, [r3, #4]
 8025abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	d003      	beq.n	8025ace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8025ac6:	69ba      	ldr	r2, [r7, #24]
 8025ac8:	693b      	ldr	r3, [r7, #16]
 8025aca:	4313      	orrs	r3, r2
 8025acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8025ace:	4a1d      	ldr	r2, [pc, #116]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025ad0:	69bb      	ldr	r3, [r7, #24]
 8025ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8025ad4:	4b1b      	ldr	r3, [pc, #108]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025ad6:	68db      	ldr	r3, [r3, #12]
 8025ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025ada:	693b      	ldr	r3, [r7, #16]
 8025adc:	43db      	mvns	r3, r3
 8025ade:	69ba      	ldr	r2, [r7, #24]
 8025ae0:	4013      	ands	r3, r2
 8025ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8025ae4:	683b      	ldr	r3, [r7, #0]
 8025ae6:	685b      	ldr	r3, [r3, #4]
 8025ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	d003      	beq.n	8025af8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8025af0:	69ba      	ldr	r2, [r7, #24]
 8025af2:	693b      	ldr	r3, [r7, #16]
 8025af4:	4313      	orrs	r3, r2
 8025af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8025af8:	4a12      	ldr	r2, [pc, #72]	; (8025b44 <HAL_GPIO_Init+0x334>)
 8025afa:	69bb      	ldr	r3, [r7, #24]
 8025afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8025afe:	69fb      	ldr	r3, [r7, #28]
 8025b00:	3301      	adds	r3, #1
 8025b02:	61fb      	str	r3, [r7, #28]
 8025b04:	69fb      	ldr	r3, [r7, #28]
 8025b06:	2b0f      	cmp	r3, #15
 8025b08:	f67f ae90 	bls.w	802582c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8025b0c:	bf00      	nop
 8025b0e:	bf00      	nop
 8025b10:	3724      	adds	r7, #36	; 0x24
 8025b12:	46bd      	mov	sp, r7
 8025b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b18:	4770      	bx	lr
 8025b1a:	bf00      	nop
 8025b1c:	40023800 	.word	0x40023800
 8025b20:	40013800 	.word	0x40013800
 8025b24:	40020000 	.word	0x40020000
 8025b28:	40020400 	.word	0x40020400
 8025b2c:	40020800 	.word	0x40020800
 8025b30:	40020c00 	.word	0x40020c00
 8025b34:	40021000 	.word	0x40021000
 8025b38:	40021400 	.word	0x40021400
 8025b3c:	40021800 	.word	0x40021800
 8025b40:	40021c00 	.word	0x40021c00
 8025b44:	40013c00 	.word	0x40013c00

08025b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8025b48:	b480      	push	{r7}
 8025b4a:	b085      	sub	sp, #20
 8025b4c:	af00      	add	r7, sp, #0
 8025b4e:	6078      	str	r0, [r7, #4]
 8025b50:	460b      	mov	r3, r1
 8025b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	691a      	ldr	r2, [r3, #16]
 8025b58:	887b      	ldrh	r3, [r7, #2]
 8025b5a:	4013      	ands	r3, r2
 8025b5c:	2b00      	cmp	r3, #0
 8025b5e:	d002      	beq.n	8025b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8025b60:	2301      	movs	r3, #1
 8025b62:	73fb      	strb	r3, [r7, #15]
 8025b64:	e001      	b.n	8025b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8025b66:	2300      	movs	r3, #0
 8025b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8025b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8025b6c:	4618      	mov	r0, r3
 8025b6e:	3714      	adds	r7, #20
 8025b70:	46bd      	mov	sp, r7
 8025b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b76:	4770      	bx	lr

08025b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025b78:	b480      	push	{r7}
 8025b7a:	b083      	sub	sp, #12
 8025b7c:	af00      	add	r7, sp, #0
 8025b7e:	6078      	str	r0, [r7, #4]
 8025b80:	460b      	mov	r3, r1
 8025b82:	807b      	strh	r3, [r7, #2]
 8025b84:	4613      	mov	r3, r2
 8025b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025b88:	787b      	ldrb	r3, [r7, #1]
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	d003      	beq.n	8025b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025b8e:	887a      	ldrh	r2, [r7, #2]
 8025b90:	687b      	ldr	r3, [r7, #4]
 8025b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8025b94:	e003      	b.n	8025b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8025b96:	887b      	ldrh	r3, [r7, #2]
 8025b98:	041a      	lsls	r2, r3, #16
 8025b9a:	687b      	ldr	r3, [r7, #4]
 8025b9c:	619a      	str	r2, [r3, #24]
}
 8025b9e:	bf00      	nop
 8025ba0:	370c      	adds	r7, #12
 8025ba2:	46bd      	mov	sp, r7
 8025ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ba8:	4770      	bx	lr

08025baa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8025baa:	b580      	push	{r7, lr}
 8025bac:	b084      	sub	sp, #16
 8025bae:	af00      	add	r7, sp, #0
 8025bb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8025bb2:	687b      	ldr	r3, [r7, #4]
 8025bb4:	2b00      	cmp	r3, #0
 8025bb6:	d101      	bne.n	8025bbc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8025bb8:	2301      	movs	r3, #1
 8025bba:	e02b      	b.n	8025c14 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8025bbc:	687b      	ldr	r3, [r7, #4]
 8025bbe:	681b      	ldr	r3, [r3, #0]
 8025bc0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8025bc4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	681b      	ldr	r3, [r3, #0]
 8025bca:	f245 5255 	movw	r2, #21845	; 0x5555
 8025bce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8025bd0:	687b      	ldr	r3, [r7, #4]
 8025bd2:	681b      	ldr	r3, [r3, #0]
 8025bd4:	687a      	ldr	r2, [r7, #4]
 8025bd6:	6852      	ldr	r2, [r2, #4]
 8025bd8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8025bda:	687b      	ldr	r3, [r7, #4]
 8025bdc:	681b      	ldr	r3, [r3, #0]
 8025bde:	687a      	ldr	r2, [r7, #4]
 8025be0:	6892      	ldr	r2, [r2, #8]
 8025be2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8025be4:	f7ff f9c8 	bl	8024f78 <HAL_GetTick>
 8025be8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8025bea:	e008      	b.n	8025bfe <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8025bec:	f7ff f9c4 	bl	8024f78 <HAL_GetTick>
 8025bf0:	4602      	mov	r2, r0
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	1ad3      	subs	r3, r2, r3
 8025bf6:	2b30      	cmp	r3, #48	; 0x30
 8025bf8:	d901      	bls.n	8025bfe <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8025bfa:	2303      	movs	r3, #3
 8025bfc:	e00a      	b.n	8025c14 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	681b      	ldr	r3, [r3, #0]
 8025c02:	68db      	ldr	r3, [r3, #12]
 8025c04:	2b00      	cmp	r3, #0
 8025c06:	d1f1      	bne.n	8025bec <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8025c08:	687b      	ldr	r3, [r7, #4]
 8025c0a:	681b      	ldr	r3, [r3, #0]
 8025c0c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8025c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8025c12:	2300      	movs	r3, #0
}
 8025c14:	4618      	mov	r0, r3
 8025c16:	3710      	adds	r7, #16
 8025c18:	46bd      	mov	sp, r7
 8025c1a:	bd80      	pop	{r7, pc}

08025c1c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8025c1c:	b480      	push	{r7}
 8025c1e:	b083      	sub	sp, #12
 8025c20:	af00      	add	r7, sp, #0
 8025c22:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8025c24:	687b      	ldr	r3, [r7, #4]
 8025c26:	681b      	ldr	r3, [r3, #0]
 8025c28:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8025c2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8025c2e:	2300      	movs	r3, #0
}
 8025c30:	4618      	mov	r0, r3
 8025c32:	370c      	adds	r7, #12
 8025c34:	46bd      	mov	sp, r7
 8025c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c3a:	4770      	bx	lr

08025c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8025c3c:	b580      	push	{r7, lr}
 8025c3e:	b086      	sub	sp, #24
 8025c40:	af00      	add	r7, sp, #0
 8025c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8025c44:	687b      	ldr	r3, [r7, #4]
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d101      	bne.n	8025c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8025c4a:	2301      	movs	r3, #1
 8025c4c:	e25b      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8025c4e:	687b      	ldr	r3, [r7, #4]
 8025c50:	681b      	ldr	r3, [r3, #0]
 8025c52:	f003 0301 	and.w	r3, r3, #1
 8025c56:	2b00      	cmp	r3, #0
 8025c58:	d075      	beq.n	8025d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025c5a:	4ba3      	ldr	r3, [pc, #652]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025c5c:	689b      	ldr	r3, [r3, #8]
 8025c5e:	f003 030c 	and.w	r3, r3, #12
 8025c62:	2b04      	cmp	r3, #4
 8025c64:	d00c      	beq.n	8025c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025c66:	4ba0      	ldr	r3, [pc, #640]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025c68:	689b      	ldr	r3, [r3, #8]
 8025c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025c6e:	2b08      	cmp	r3, #8
 8025c70:	d112      	bne.n	8025c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025c72:	4b9d      	ldr	r3, [pc, #628]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025c74:	685b      	ldr	r3, [r3, #4]
 8025c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8025c7e:	d10b      	bne.n	8025c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025c80:	4b99      	ldr	r3, [pc, #612]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025c82:	681b      	ldr	r3, [r3, #0]
 8025c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d05b      	beq.n	8025d44 <HAL_RCC_OscConfig+0x108>
 8025c8c:	687b      	ldr	r3, [r7, #4]
 8025c8e:	685b      	ldr	r3, [r3, #4]
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	d157      	bne.n	8025d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8025c94:	2301      	movs	r3, #1
 8025c96:	e236      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8025c98:	687b      	ldr	r3, [r7, #4]
 8025c9a:	685b      	ldr	r3, [r3, #4]
 8025c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025ca0:	d106      	bne.n	8025cb0 <HAL_RCC_OscConfig+0x74>
 8025ca2:	4b91      	ldr	r3, [pc, #580]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025ca4:	681b      	ldr	r3, [r3, #0]
 8025ca6:	4a90      	ldr	r2, [pc, #576]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025cac:	6013      	str	r3, [r2, #0]
 8025cae:	e01d      	b.n	8025cec <HAL_RCC_OscConfig+0xb0>
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	685b      	ldr	r3, [r3, #4]
 8025cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8025cb8:	d10c      	bne.n	8025cd4 <HAL_RCC_OscConfig+0x98>
 8025cba:	4b8b      	ldr	r3, [pc, #556]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025cbc:	681b      	ldr	r3, [r3, #0]
 8025cbe:	4a8a      	ldr	r2, [pc, #552]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025cc4:	6013      	str	r3, [r2, #0]
 8025cc6:	4b88      	ldr	r3, [pc, #544]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025cc8:	681b      	ldr	r3, [r3, #0]
 8025cca:	4a87      	ldr	r2, [pc, #540]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025cd0:	6013      	str	r3, [r2, #0]
 8025cd2:	e00b      	b.n	8025cec <HAL_RCC_OscConfig+0xb0>
 8025cd4:	4b84      	ldr	r3, [pc, #528]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025cd6:	681b      	ldr	r3, [r3, #0]
 8025cd8:	4a83      	ldr	r2, [pc, #524]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8025cde:	6013      	str	r3, [r2, #0]
 8025ce0:	4b81      	ldr	r3, [pc, #516]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025ce2:	681b      	ldr	r3, [r3, #0]
 8025ce4:	4a80      	ldr	r2, [pc, #512]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8025cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	685b      	ldr	r3, [r3, #4]
 8025cf0:	2b00      	cmp	r3, #0
 8025cf2:	d013      	beq.n	8025d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025cf4:	f7ff f940 	bl	8024f78 <HAL_GetTick>
 8025cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025cfa:	e008      	b.n	8025d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025cfc:	f7ff f93c 	bl	8024f78 <HAL_GetTick>
 8025d00:	4602      	mov	r2, r0
 8025d02:	693b      	ldr	r3, [r7, #16]
 8025d04:	1ad3      	subs	r3, r2, r3
 8025d06:	2b64      	cmp	r3, #100	; 0x64
 8025d08:	d901      	bls.n	8025d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8025d0a:	2303      	movs	r3, #3
 8025d0c:	e1fb      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025d0e:	4b76      	ldr	r3, [pc, #472]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025d16:	2b00      	cmp	r3, #0
 8025d18:	d0f0      	beq.n	8025cfc <HAL_RCC_OscConfig+0xc0>
 8025d1a:	e014      	b.n	8025d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025d1c:	f7ff f92c 	bl	8024f78 <HAL_GetTick>
 8025d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025d22:	e008      	b.n	8025d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025d24:	f7ff f928 	bl	8024f78 <HAL_GetTick>
 8025d28:	4602      	mov	r2, r0
 8025d2a:	693b      	ldr	r3, [r7, #16]
 8025d2c:	1ad3      	subs	r3, r2, r3
 8025d2e:	2b64      	cmp	r3, #100	; 0x64
 8025d30:	d901      	bls.n	8025d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8025d32:	2303      	movs	r3, #3
 8025d34:	e1e7      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025d36:	4b6c      	ldr	r3, [pc, #432]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d38:	681b      	ldr	r3, [r3, #0]
 8025d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	d1f0      	bne.n	8025d24 <HAL_RCC_OscConfig+0xe8>
 8025d42:	e000      	b.n	8025d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8025d46:	687b      	ldr	r3, [r7, #4]
 8025d48:	681b      	ldr	r3, [r3, #0]
 8025d4a:	f003 0302 	and.w	r3, r3, #2
 8025d4e:	2b00      	cmp	r3, #0
 8025d50:	d063      	beq.n	8025e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025d52:	4b65      	ldr	r3, [pc, #404]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d54:	689b      	ldr	r3, [r3, #8]
 8025d56:	f003 030c 	and.w	r3, r3, #12
 8025d5a:	2b00      	cmp	r3, #0
 8025d5c:	d00b      	beq.n	8025d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025d5e:	4b62      	ldr	r3, [pc, #392]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d60:	689b      	ldr	r3, [r3, #8]
 8025d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025d66:	2b08      	cmp	r3, #8
 8025d68:	d11c      	bne.n	8025da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025d6a:	4b5f      	ldr	r3, [pc, #380]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d6c:	685b      	ldr	r3, [r3, #4]
 8025d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	d116      	bne.n	8025da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025d76:	4b5c      	ldr	r3, [pc, #368]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d78:	681b      	ldr	r3, [r3, #0]
 8025d7a:	f003 0302 	and.w	r3, r3, #2
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	d005      	beq.n	8025d8e <HAL_RCC_OscConfig+0x152>
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	68db      	ldr	r3, [r3, #12]
 8025d86:	2b01      	cmp	r3, #1
 8025d88:	d001      	beq.n	8025d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8025d8a:	2301      	movs	r3, #1
 8025d8c:	e1bb      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025d8e:	4b56      	ldr	r3, [pc, #344]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d90:	681b      	ldr	r3, [r3, #0]
 8025d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025d96:	687b      	ldr	r3, [r7, #4]
 8025d98:	691b      	ldr	r3, [r3, #16]
 8025d9a:	00db      	lsls	r3, r3, #3
 8025d9c:	4952      	ldr	r1, [pc, #328]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025d9e:	4313      	orrs	r3, r2
 8025da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025da2:	e03a      	b.n	8025e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8025da4:	687b      	ldr	r3, [r7, #4]
 8025da6:	68db      	ldr	r3, [r3, #12]
 8025da8:	2b00      	cmp	r3, #0
 8025daa:	d020      	beq.n	8025dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8025dac:	4b4f      	ldr	r3, [pc, #316]	; (8025eec <HAL_RCC_OscConfig+0x2b0>)
 8025dae:	2201      	movs	r2, #1
 8025db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8025db2:	f7ff f8e1 	bl	8024f78 <HAL_GetTick>
 8025db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025db8:	e008      	b.n	8025dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025dba:	f7ff f8dd 	bl	8024f78 <HAL_GetTick>
 8025dbe:	4602      	mov	r2, r0
 8025dc0:	693b      	ldr	r3, [r7, #16]
 8025dc2:	1ad3      	subs	r3, r2, r3
 8025dc4:	2b02      	cmp	r3, #2
 8025dc6:	d901      	bls.n	8025dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8025dc8:	2303      	movs	r3, #3
 8025dca:	e19c      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025dcc:	4b46      	ldr	r3, [pc, #280]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025dce:	681b      	ldr	r3, [r3, #0]
 8025dd0:	f003 0302 	and.w	r3, r3, #2
 8025dd4:	2b00      	cmp	r3, #0
 8025dd6:	d0f0      	beq.n	8025dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025dd8:	4b43      	ldr	r3, [pc, #268]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	691b      	ldr	r3, [r3, #16]
 8025de4:	00db      	lsls	r3, r3, #3
 8025de6:	4940      	ldr	r1, [pc, #256]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025de8:	4313      	orrs	r3, r2
 8025dea:	600b      	str	r3, [r1, #0]
 8025dec:	e015      	b.n	8025e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8025dee:	4b3f      	ldr	r3, [pc, #252]	; (8025eec <HAL_RCC_OscConfig+0x2b0>)
 8025df0:	2200      	movs	r2, #0
 8025df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8025df4:	f7ff f8c0 	bl	8024f78 <HAL_GetTick>
 8025df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8025dfa:	e008      	b.n	8025e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025dfc:	f7ff f8bc 	bl	8024f78 <HAL_GetTick>
 8025e00:	4602      	mov	r2, r0
 8025e02:	693b      	ldr	r3, [r7, #16]
 8025e04:	1ad3      	subs	r3, r2, r3
 8025e06:	2b02      	cmp	r3, #2
 8025e08:	d901      	bls.n	8025e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8025e0a:	2303      	movs	r3, #3
 8025e0c:	e17b      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8025e0e:	4b36      	ldr	r3, [pc, #216]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025e10:	681b      	ldr	r3, [r3, #0]
 8025e12:	f003 0302 	and.w	r3, r3, #2
 8025e16:	2b00      	cmp	r3, #0
 8025e18:	d1f0      	bne.n	8025dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8025e1a:	687b      	ldr	r3, [r7, #4]
 8025e1c:	681b      	ldr	r3, [r3, #0]
 8025e1e:	f003 0308 	and.w	r3, r3, #8
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	d030      	beq.n	8025e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8025e26:	687b      	ldr	r3, [r7, #4]
 8025e28:	695b      	ldr	r3, [r3, #20]
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	d016      	beq.n	8025e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8025e2e:	4b30      	ldr	r3, [pc, #192]	; (8025ef0 <HAL_RCC_OscConfig+0x2b4>)
 8025e30:	2201      	movs	r2, #1
 8025e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025e34:	f7ff f8a0 	bl	8024f78 <HAL_GetTick>
 8025e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025e3a:	e008      	b.n	8025e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025e3c:	f7ff f89c 	bl	8024f78 <HAL_GetTick>
 8025e40:	4602      	mov	r2, r0
 8025e42:	693b      	ldr	r3, [r7, #16]
 8025e44:	1ad3      	subs	r3, r2, r3
 8025e46:	2b02      	cmp	r3, #2
 8025e48:	d901      	bls.n	8025e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8025e4a:	2303      	movs	r3, #3
 8025e4c:	e15b      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025e4e:	4b26      	ldr	r3, [pc, #152]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8025e52:	f003 0302 	and.w	r3, r3, #2
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	d0f0      	beq.n	8025e3c <HAL_RCC_OscConfig+0x200>
 8025e5a:	e015      	b.n	8025e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8025e5c:	4b24      	ldr	r3, [pc, #144]	; (8025ef0 <HAL_RCC_OscConfig+0x2b4>)
 8025e5e:	2200      	movs	r2, #0
 8025e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8025e62:	f7ff f889 	bl	8024f78 <HAL_GetTick>
 8025e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025e68:	e008      	b.n	8025e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025e6a:	f7ff f885 	bl	8024f78 <HAL_GetTick>
 8025e6e:	4602      	mov	r2, r0
 8025e70:	693b      	ldr	r3, [r7, #16]
 8025e72:	1ad3      	subs	r3, r2, r3
 8025e74:	2b02      	cmp	r3, #2
 8025e76:	d901      	bls.n	8025e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8025e78:	2303      	movs	r3, #3
 8025e7a:	e144      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025e7c:	4b1a      	ldr	r3, [pc, #104]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8025e80:	f003 0302 	and.w	r3, r3, #2
 8025e84:	2b00      	cmp	r3, #0
 8025e86:	d1f0      	bne.n	8025e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8025e88:	687b      	ldr	r3, [r7, #4]
 8025e8a:	681b      	ldr	r3, [r3, #0]
 8025e8c:	f003 0304 	and.w	r3, r3, #4
 8025e90:	2b00      	cmp	r3, #0
 8025e92:	f000 80a0 	beq.w	8025fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8025e96:	2300      	movs	r3, #0
 8025e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8025e9a:	4b13      	ldr	r3, [pc, #76]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025ea2:	2b00      	cmp	r3, #0
 8025ea4:	d10f      	bne.n	8025ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8025ea6:	2300      	movs	r3, #0
 8025ea8:	60bb      	str	r3, [r7, #8]
 8025eaa:	4b0f      	ldr	r3, [pc, #60]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025eae:	4a0e      	ldr	r2, [pc, #56]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8025eb6:	4b0c      	ldr	r3, [pc, #48]	; (8025ee8 <HAL_RCC_OscConfig+0x2ac>)
 8025eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025ebe:	60bb      	str	r3, [r7, #8]
 8025ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8025ec2:	2301      	movs	r3, #1
 8025ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8025ec6:	4b0b      	ldr	r3, [pc, #44]	; (8025ef4 <HAL_RCC_OscConfig+0x2b8>)
 8025ec8:	681b      	ldr	r3, [r3, #0]
 8025eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025ece:	2b00      	cmp	r3, #0
 8025ed0:	d121      	bne.n	8025f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8025ed2:	4b08      	ldr	r3, [pc, #32]	; (8025ef4 <HAL_RCC_OscConfig+0x2b8>)
 8025ed4:	681b      	ldr	r3, [r3, #0]
 8025ed6:	4a07      	ldr	r2, [pc, #28]	; (8025ef4 <HAL_RCC_OscConfig+0x2b8>)
 8025ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8025ede:	f7ff f84b 	bl	8024f78 <HAL_GetTick>
 8025ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8025ee4:	e011      	b.n	8025f0a <HAL_RCC_OscConfig+0x2ce>
 8025ee6:	bf00      	nop
 8025ee8:	40023800 	.word	0x40023800
 8025eec:	42470000 	.word	0x42470000
 8025ef0:	42470e80 	.word	0x42470e80
 8025ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8025ef8:	f7ff f83e 	bl	8024f78 <HAL_GetTick>
 8025efc:	4602      	mov	r2, r0
 8025efe:	693b      	ldr	r3, [r7, #16]
 8025f00:	1ad3      	subs	r3, r2, r3
 8025f02:	2b02      	cmp	r3, #2
 8025f04:	d901      	bls.n	8025f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8025f06:	2303      	movs	r3, #3
 8025f08:	e0fd      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8025f0a:	4b81      	ldr	r3, [pc, #516]	; (8026110 <HAL_RCC_OscConfig+0x4d4>)
 8025f0c:	681b      	ldr	r3, [r3, #0]
 8025f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	d0f0      	beq.n	8025ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8025f16:	687b      	ldr	r3, [r7, #4]
 8025f18:	689b      	ldr	r3, [r3, #8]
 8025f1a:	2b01      	cmp	r3, #1
 8025f1c:	d106      	bne.n	8025f2c <HAL_RCC_OscConfig+0x2f0>
 8025f1e:	4b7d      	ldr	r3, [pc, #500]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025f22:	4a7c      	ldr	r2, [pc, #496]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f24:	f043 0301 	orr.w	r3, r3, #1
 8025f28:	6713      	str	r3, [r2, #112]	; 0x70
 8025f2a:	e01c      	b.n	8025f66 <HAL_RCC_OscConfig+0x32a>
 8025f2c:	687b      	ldr	r3, [r7, #4]
 8025f2e:	689b      	ldr	r3, [r3, #8]
 8025f30:	2b05      	cmp	r3, #5
 8025f32:	d10c      	bne.n	8025f4e <HAL_RCC_OscConfig+0x312>
 8025f34:	4b77      	ldr	r3, [pc, #476]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025f38:	4a76      	ldr	r2, [pc, #472]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f3a:	f043 0304 	orr.w	r3, r3, #4
 8025f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8025f40:	4b74      	ldr	r3, [pc, #464]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025f44:	4a73      	ldr	r2, [pc, #460]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f46:	f043 0301 	orr.w	r3, r3, #1
 8025f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8025f4c:	e00b      	b.n	8025f66 <HAL_RCC_OscConfig+0x32a>
 8025f4e:	4b71      	ldr	r3, [pc, #452]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025f52:	4a70      	ldr	r2, [pc, #448]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f54:	f023 0301 	bic.w	r3, r3, #1
 8025f58:	6713      	str	r3, [r2, #112]	; 0x70
 8025f5a:	4b6e      	ldr	r3, [pc, #440]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025f5e:	4a6d      	ldr	r2, [pc, #436]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f60:	f023 0304 	bic.w	r3, r3, #4
 8025f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8025f66:	687b      	ldr	r3, [r7, #4]
 8025f68:	689b      	ldr	r3, [r3, #8]
 8025f6a:	2b00      	cmp	r3, #0
 8025f6c:	d015      	beq.n	8025f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025f6e:	f7ff f803 	bl	8024f78 <HAL_GetTick>
 8025f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025f74:	e00a      	b.n	8025f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8025f76:	f7fe ffff 	bl	8024f78 <HAL_GetTick>
 8025f7a:	4602      	mov	r2, r0
 8025f7c:	693b      	ldr	r3, [r7, #16]
 8025f7e:	1ad3      	subs	r3, r2, r3
 8025f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8025f84:	4293      	cmp	r3, r2
 8025f86:	d901      	bls.n	8025f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8025f88:	2303      	movs	r3, #3
 8025f8a:	e0bc      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025f8c:	4b61      	ldr	r3, [pc, #388]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025f90:	f003 0302 	and.w	r3, r3, #2
 8025f94:	2b00      	cmp	r3, #0
 8025f96:	d0ee      	beq.n	8025f76 <HAL_RCC_OscConfig+0x33a>
 8025f98:	e014      	b.n	8025fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8025f9a:	f7fe ffed 	bl	8024f78 <HAL_GetTick>
 8025f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8025fa0:	e00a      	b.n	8025fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8025fa2:	f7fe ffe9 	bl	8024f78 <HAL_GetTick>
 8025fa6:	4602      	mov	r2, r0
 8025fa8:	693b      	ldr	r3, [r7, #16]
 8025faa:	1ad3      	subs	r3, r2, r3
 8025fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8025fb0:	4293      	cmp	r3, r2
 8025fb2:	d901      	bls.n	8025fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8025fb4:	2303      	movs	r3, #3
 8025fb6:	e0a6      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8025fb8:	4b56      	ldr	r3, [pc, #344]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025fbc:	f003 0302 	and.w	r3, r3, #2
 8025fc0:	2b00      	cmp	r3, #0
 8025fc2:	d1ee      	bne.n	8025fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8025fc4:	7dfb      	ldrb	r3, [r7, #23]
 8025fc6:	2b01      	cmp	r3, #1
 8025fc8:	d105      	bne.n	8025fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8025fca:	4b52      	ldr	r3, [pc, #328]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025fce:	4a51      	ldr	r2, [pc, #324]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8025fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8025fd6:	687b      	ldr	r3, [r7, #4]
 8025fd8:	699b      	ldr	r3, [r3, #24]
 8025fda:	2b00      	cmp	r3, #0
 8025fdc:	f000 8092 	beq.w	8026104 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8025fe0:	4b4c      	ldr	r3, [pc, #304]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8025fe2:	689b      	ldr	r3, [r3, #8]
 8025fe4:	f003 030c 	and.w	r3, r3, #12
 8025fe8:	2b08      	cmp	r3, #8
 8025fea:	d05c      	beq.n	80260a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8025fec:	687b      	ldr	r3, [r7, #4]
 8025fee:	699b      	ldr	r3, [r3, #24]
 8025ff0:	2b02      	cmp	r3, #2
 8025ff2:	d141      	bne.n	8026078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8025ff4:	4b48      	ldr	r3, [pc, #288]	; (8026118 <HAL_RCC_OscConfig+0x4dc>)
 8025ff6:	2200      	movs	r2, #0
 8025ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025ffa:	f7fe ffbd 	bl	8024f78 <HAL_GetTick>
 8025ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026000:	e008      	b.n	8026014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026002:	f7fe ffb9 	bl	8024f78 <HAL_GetTick>
 8026006:	4602      	mov	r2, r0
 8026008:	693b      	ldr	r3, [r7, #16]
 802600a:	1ad3      	subs	r3, r2, r3
 802600c:	2b02      	cmp	r3, #2
 802600e:	d901      	bls.n	8026014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8026010:	2303      	movs	r3, #3
 8026012:	e078      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026014:	4b3f      	ldr	r3, [pc, #252]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8026016:	681b      	ldr	r3, [r3, #0]
 8026018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802601c:	2b00      	cmp	r3, #0
 802601e:	d1f0      	bne.n	8026002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8026020:	687b      	ldr	r3, [r7, #4]
 8026022:	69da      	ldr	r2, [r3, #28]
 8026024:	687b      	ldr	r3, [r7, #4]
 8026026:	6a1b      	ldr	r3, [r3, #32]
 8026028:	431a      	orrs	r2, r3
 802602a:	687b      	ldr	r3, [r7, #4]
 802602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802602e:	019b      	lsls	r3, r3, #6
 8026030:	431a      	orrs	r2, r3
 8026032:	687b      	ldr	r3, [r7, #4]
 8026034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026036:	085b      	lsrs	r3, r3, #1
 8026038:	3b01      	subs	r3, #1
 802603a:	041b      	lsls	r3, r3, #16
 802603c:	431a      	orrs	r2, r3
 802603e:	687b      	ldr	r3, [r7, #4]
 8026040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026042:	061b      	lsls	r3, r3, #24
 8026044:	4933      	ldr	r1, [pc, #204]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 8026046:	4313      	orrs	r3, r2
 8026048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802604a:	4b33      	ldr	r3, [pc, #204]	; (8026118 <HAL_RCC_OscConfig+0x4dc>)
 802604c:	2201      	movs	r2, #1
 802604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026050:	f7fe ff92 	bl	8024f78 <HAL_GetTick>
 8026054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026056:	e008      	b.n	802606a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026058:	f7fe ff8e 	bl	8024f78 <HAL_GetTick>
 802605c:	4602      	mov	r2, r0
 802605e:	693b      	ldr	r3, [r7, #16]
 8026060:	1ad3      	subs	r3, r2, r3
 8026062:	2b02      	cmp	r3, #2
 8026064:	d901      	bls.n	802606a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8026066:	2303      	movs	r3, #3
 8026068:	e04d      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802606a:	4b2a      	ldr	r3, [pc, #168]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 802606c:	681b      	ldr	r3, [r3, #0]
 802606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026072:	2b00      	cmp	r3, #0
 8026074:	d0f0      	beq.n	8026058 <HAL_RCC_OscConfig+0x41c>
 8026076:	e045      	b.n	8026104 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026078:	4b27      	ldr	r3, [pc, #156]	; (8026118 <HAL_RCC_OscConfig+0x4dc>)
 802607a:	2200      	movs	r2, #0
 802607c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802607e:	f7fe ff7b 	bl	8024f78 <HAL_GetTick>
 8026082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026084:	e008      	b.n	8026098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026086:	f7fe ff77 	bl	8024f78 <HAL_GetTick>
 802608a:	4602      	mov	r2, r0
 802608c:	693b      	ldr	r3, [r7, #16]
 802608e:	1ad3      	subs	r3, r2, r3
 8026090:	2b02      	cmp	r3, #2
 8026092:	d901      	bls.n	8026098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8026094:	2303      	movs	r3, #3
 8026096:	e036      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026098:	4b1e      	ldr	r3, [pc, #120]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 802609a:	681b      	ldr	r3, [r3, #0]
 802609c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80260a0:	2b00      	cmp	r3, #0
 80260a2:	d1f0      	bne.n	8026086 <HAL_RCC_OscConfig+0x44a>
 80260a4:	e02e      	b.n	8026104 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80260a6:	687b      	ldr	r3, [r7, #4]
 80260a8:	699b      	ldr	r3, [r3, #24]
 80260aa:	2b01      	cmp	r3, #1
 80260ac:	d101      	bne.n	80260b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80260ae:	2301      	movs	r3, #1
 80260b0:	e029      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80260b2:	4b18      	ldr	r3, [pc, #96]	; (8026114 <HAL_RCC_OscConfig+0x4d8>)
 80260b4:	685b      	ldr	r3, [r3, #4]
 80260b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80260be:	687b      	ldr	r3, [r7, #4]
 80260c0:	69db      	ldr	r3, [r3, #28]
 80260c2:	429a      	cmp	r2, r3
 80260c4:	d11c      	bne.n	8026100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80260c6:	68fb      	ldr	r3, [r7, #12]
 80260c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80260cc:	687b      	ldr	r3, [r7, #4]
 80260ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80260d0:	429a      	cmp	r2, r3
 80260d2:	d115      	bne.n	8026100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80260d4:	68fa      	ldr	r2, [r7, #12]
 80260d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80260da:	4013      	ands	r3, r2
 80260dc:	687a      	ldr	r2, [r7, #4]
 80260de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80260e0:	4293      	cmp	r3, r2
 80260e2:	d10d      	bne.n	8026100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80260e4:	68fb      	ldr	r3, [r7, #12]
 80260e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80260ee:	429a      	cmp	r2, r3
 80260f0:	d106      	bne.n	8026100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80260f2:	68fb      	ldr	r3, [r7, #12]
 80260f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80260fc:	429a      	cmp	r2, r3
 80260fe:	d001      	beq.n	8026104 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8026100:	2301      	movs	r3, #1
 8026102:	e000      	b.n	8026106 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8026104:	2300      	movs	r3, #0
}
 8026106:	4618      	mov	r0, r3
 8026108:	3718      	adds	r7, #24
 802610a:	46bd      	mov	sp, r7
 802610c:	bd80      	pop	{r7, pc}
 802610e:	bf00      	nop
 8026110:	40007000 	.word	0x40007000
 8026114:	40023800 	.word	0x40023800
 8026118:	42470060 	.word	0x42470060

0802611c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802611c:	b580      	push	{r7, lr}
 802611e:	b084      	sub	sp, #16
 8026120:	af00      	add	r7, sp, #0
 8026122:	6078      	str	r0, [r7, #4]
 8026124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8026126:	687b      	ldr	r3, [r7, #4]
 8026128:	2b00      	cmp	r3, #0
 802612a:	d101      	bne.n	8026130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802612c:	2301      	movs	r3, #1
 802612e:	e0cc      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8026130:	4b68      	ldr	r3, [pc, #416]	; (80262d4 <HAL_RCC_ClockConfig+0x1b8>)
 8026132:	681b      	ldr	r3, [r3, #0]
 8026134:	f003 030f 	and.w	r3, r3, #15
 8026138:	683a      	ldr	r2, [r7, #0]
 802613a:	429a      	cmp	r2, r3
 802613c:	d90c      	bls.n	8026158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802613e:	4b65      	ldr	r3, [pc, #404]	; (80262d4 <HAL_RCC_ClockConfig+0x1b8>)
 8026140:	683a      	ldr	r2, [r7, #0]
 8026142:	b2d2      	uxtb	r2, r2
 8026144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026146:	4b63      	ldr	r3, [pc, #396]	; (80262d4 <HAL_RCC_ClockConfig+0x1b8>)
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	f003 030f 	and.w	r3, r3, #15
 802614e:	683a      	ldr	r2, [r7, #0]
 8026150:	429a      	cmp	r2, r3
 8026152:	d001      	beq.n	8026158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8026154:	2301      	movs	r3, #1
 8026156:	e0b8      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	681b      	ldr	r3, [r3, #0]
 802615c:	f003 0302 	and.w	r3, r3, #2
 8026160:	2b00      	cmp	r3, #0
 8026162:	d020      	beq.n	80261a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026164:	687b      	ldr	r3, [r7, #4]
 8026166:	681b      	ldr	r3, [r3, #0]
 8026168:	f003 0304 	and.w	r3, r3, #4
 802616c:	2b00      	cmp	r3, #0
 802616e:	d005      	beq.n	802617c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8026170:	4b59      	ldr	r3, [pc, #356]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 8026172:	689b      	ldr	r3, [r3, #8]
 8026174:	4a58      	ldr	r2, [pc, #352]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 8026176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802617a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	681b      	ldr	r3, [r3, #0]
 8026180:	f003 0308 	and.w	r3, r3, #8
 8026184:	2b00      	cmp	r3, #0
 8026186:	d005      	beq.n	8026194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8026188:	4b53      	ldr	r3, [pc, #332]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 802618a:	689b      	ldr	r3, [r3, #8]
 802618c:	4a52      	ldr	r2, [pc, #328]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 802618e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8026192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026194:	4b50      	ldr	r3, [pc, #320]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 8026196:	689b      	ldr	r3, [r3, #8]
 8026198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	689b      	ldr	r3, [r3, #8]
 80261a0:	494d      	ldr	r1, [pc, #308]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 80261a2:	4313      	orrs	r3, r2
 80261a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80261a6:	687b      	ldr	r3, [r7, #4]
 80261a8:	681b      	ldr	r3, [r3, #0]
 80261aa:	f003 0301 	and.w	r3, r3, #1
 80261ae:	2b00      	cmp	r3, #0
 80261b0:	d044      	beq.n	802623c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80261b2:	687b      	ldr	r3, [r7, #4]
 80261b4:	685b      	ldr	r3, [r3, #4]
 80261b6:	2b01      	cmp	r3, #1
 80261b8:	d107      	bne.n	80261ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80261ba:	4b47      	ldr	r3, [pc, #284]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 80261bc:	681b      	ldr	r3, [r3, #0]
 80261be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d119      	bne.n	80261fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80261c6:	2301      	movs	r3, #1
 80261c8:	e07f      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	685b      	ldr	r3, [r3, #4]
 80261ce:	2b02      	cmp	r3, #2
 80261d0:	d003      	beq.n	80261da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80261d2:	687b      	ldr	r3, [r7, #4]
 80261d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80261d6:	2b03      	cmp	r3, #3
 80261d8:	d107      	bne.n	80261ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80261da:	4b3f      	ldr	r3, [pc, #252]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80261e2:	2b00      	cmp	r3, #0
 80261e4:	d109      	bne.n	80261fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80261e6:	2301      	movs	r3, #1
 80261e8:	e06f      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80261ea:	4b3b      	ldr	r3, [pc, #236]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 80261ec:	681b      	ldr	r3, [r3, #0]
 80261ee:	f003 0302 	and.w	r3, r3, #2
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	d101      	bne.n	80261fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80261f6:	2301      	movs	r3, #1
 80261f8:	e067      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80261fa:	4b37      	ldr	r3, [pc, #220]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 80261fc:	689b      	ldr	r3, [r3, #8]
 80261fe:	f023 0203 	bic.w	r2, r3, #3
 8026202:	687b      	ldr	r3, [r7, #4]
 8026204:	685b      	ldr	r3, [r3, #4]
 8026206:	4934      	ldr	r1, [pc, #208]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 8026208:	4313      	orrs	r3, r2
 802620a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802620c:	f7fe feb4 	bl	8024f78 <HAL_GetTick>
 8026210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026212:	e00a      	b.n	802622a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026214:	f7fe feb0 	bl	8024f78 <HAL_GetTick>
 8026218:	4602      	mov	r2, r0
 802621a:	68fb      	ldr	r3, [r7, #12]
 802621c:	1ad3      	subs	r3, r2, r3
 802621e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026222:	4293      	cmp	r3, r2
 8026224:	d901      	bls.n	802622a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8026226:	2303      	movs	r3, #3
 8026228:	e04f      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802622a:	4b2b      	ldr	r3, [pc, #172]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 802622c:	689b      	ldr	r3, [r3, #8]
 802622e:	f003 020c 	and.w	r2, r3, #12
 8026232:	687b      	ldr	r3, [r7, #4]
 8026234:	685b      	ldr	r3, [r3, #4]
 8026236:	009b      	lsls	r3, r3, #2
 8026238:	429a      	cmp	r2, r3
 802623a:	d1eb      	bne.n	8026214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802623c:	4b25      	ldr	r3, [pc, #148]	; (80262d4 <HAL_RCC_ClockConfig+0x1b8>)
 802623e:	681b      	ldr	r3, [r3, #0]
 8026240:	f003 030f 	and.w	r3, r3, #15
 8026244:	683a      	ldr	r2, [r7, #0]
 8026246:	429a      	cmp	r2, r3
 8026248:	d20c      	bcs.n	8026264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802624a:	4b22      	ldr	r3, [pc, #136]	; (80262d4 <HAL_RCC_ClockConfig+0x1b8>)
 802624c:	683a      	ldr	r2, [r7, #0]
 802624e:	b2d2      	uxtb	r2, r2
 8026250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026252:	4b20      	ldr	r3, [pc, #128]	; (80262d4 <HAL_RCC_ClockConfig+0x1b8>)
 8026254:	681b      	ldr	r3, [r3, #0]
 8026256:	f003 030f 	and.w	r3, r3, #15
 802625a:	683a      	ldr	r2, [r7, #0]
 802625c:	429a      	cmp	r2, r3
 802625e:	d001      	beq.n	8026264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8026260:	2301      	movs	r3, #1
 8026262:	e032      	b.n	80262ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026264:	687b      	ldr	r3, [r7, #4]
 8026266:	681b      	ldr	r3, [r3, #0]
 8026268:	f003 0304 	and.w	r3, r3, #4
 802626c:	2b00      	cmp	r3, #0
 802626e:	d008      	beq.n	8026282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026270:	4b19      	ldr	r3, [pc, #100]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 8026272:	689b      	ldr	r3, [r3, #8]
 8026274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026278:	687b      	ldr	r3, [r7, #4]
 802627a:	68db      	ldr	r3, [r3, #12]
 802627c:	4916      	ldr	r1, [pc, #88]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 802627e:	4313      	orrs	r3, r2
 8026280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026282:	687b      	ldr	r3, [r7, #4]
 8026284:	681b      	ldr	r3, [r3, #0]
 8026286:	f003 0308 	and.w	r3, r3, #8
 802628a:	2b00      	cmp	r3, #0
 802628c:	d009      	beq.n	80262a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802628e:	4b12      	ldr	r3, [pc, #72]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 8026290:	689b      	ldr	r3, [r3, #8]
 8026292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026296:	687b      	ldr	r3, [r7, #4]
 8026298:	691b      	ldr	r3, [r3, #16]
 802629a:	00db      	lsls	r3, r3, #3
 802629c:	490e      	ldr	r1, [pc, #56]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 802629e:	4313      	orrs	r3, r2
 80262a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80262a2:	f000 f821 	bl	80262e8 <HAL_RCC_GetSysClockFreq>
 80262a6:	4602      	mov	r2, r0
 80262a8:	4b0b      	ldr	r3, [pc, #44]	; (80262d8 <HAL_RCC_ClockConfig+0x1bc>)
 80262aa:	689b      	ldr	r3, [r3, #8]
 80262ac:	091b      	lsrs	r3, r3, #4
 80262ae:	f003 030f 	and.w	r3, r3, #15
 80262b2:	490a      	ldr	r1, [pc, #40]	; (80262dc <HAL_RCC_ClockConfig+0x1c0>)
 80262b4:	5ccb      	ldrb	r3, [r1, r3]
 80262b6:	fa22 f303 	lsr.w	r3, r2, r3
 80262ba:	4a09      	ldr	r2, [pc, #36]	; (80262e0 <HAL_RCC_ClockConfig+0x1c4>)
 80262bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80262be:	4b09      	ldr	r3, [pc, #36]	; (80262e4 <HAL_RCC_ClockConfig+0x1c8>)
 80262c0:	681b      	ldr	r3, [r3, #0]
 80262c2:	4618      	mov	r0, r3
 80262c4:	f7fe fe14 	bl	8024ef0 <HAL_InitTick>

  return HAL_OK;
 80262c8:	2300      	movs	r3, #0
}
 80262ca:	4618      	mov	r0, r3
 80262cc:	3710      	adds	r7, #16
 80262ce:	46bd      	mov	sp, r7
 80262d0:	bd80      	pop	{r7, pc}
 80262d2:	bf00      	nop
 80262d4:	40023c00 	.word	0x40023c00
 80262d8:	40023800 	.word	0x40023800
 80262dc:	0802e610 	.word	0x0802e610
 80262e0:	200002e0 	.word	0x200002e0
 80262e4:	200003e8 	.word	0x200003e8

080262e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80262e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80262ec:	b084      	sub	sp, #16
 80262ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80262f0:	2300      	movs	r3, #0
 80262f2:	607b      	str	r3, [r7, #4]
 80262f4:	2300      	movs	r3, #0
 80262f6:	60fb      	str	r3, [r7, #12]
 80262f8:	2300      	movs	r3, #0
 80262fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80262fc:	2300      	movs	r3, #0
 80262fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8026300:	4b67      	ldr	r3, [pc, #412]	; (80264a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8026302:	689b      	ldr	r3, [r3, #8]
 8026304:	f003 030c 	and.w	r3, r3, #12
 8026308:	2b08      	cmp	r3, #8
 802630a:	d00d      	beq.n	8026328 <HAL_RCC_GetSysClockFreq+0x40>
 802630c:	2b08      	cmp	r3, #8
 802630e:	f200 80bd 	bhi.w	802648c <HAL_RCC_GetSysClockFreq+0x1a4>
 8026312:	2b00      	cmp	r3, #0
 8026314:	d002      	beq.n	802631c <HAL_RCC_GetSysClockFreq+0x34>
 8026316:	2b04      	cmp	r3, #4
 8026318:	d003      	beq.n	8026322 <HAL_RCC_GetSysClockFreq+0x3a>
 802631a:	e0b7      	b.n	802648c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802631c:	4b61      	ldr	r3, [pc, #388]	; (80264a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 802631e:	60bb      	str	r3, [r7, #8]
       break;
 8026320:	e0b7      	b.n	8026492 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8026322:	4b61      	ldr	r3, [pc, #388]	; (80264a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8026324:	60bb      	str	r3, [r7, #8]
      break;
 8026326:	e0b4      	b.n	8026492 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8026328:	4b5d      	ldr	r3, [pc, #372]	; (80264a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 802632a:	685b      	ldr	r3, [r3, #4]
 802632c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026330:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8026332:	4b5b      	ldr	r3, [pc, #364]	; (80264a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8026334:	685b      	ldr	r3, [r3, #4]
 8026336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802633a:	2b00      	cmp	r3, #0
 802633c:	d04d      	beq.n	80263da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802633e:	4b58      	ldr	r3, [pc, #352]	; (80264a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8026340:	685b      	ldr	r3, [r3, #4]
 8026342:	099b      	lsrs	r3, r3, #6
 8026344:	461a      	mov	r2, r3
 8026346:	f04f 0300 	mov.w	r3, #0
 802634a:	f240 10ff 	movw	r0, #511	; 0x1ff
 802634e:	f04f 0100 	mov.w	r1, #0
 8026352:	ea02 0800 	and.w	r8, r2, r0
 8026356:	ea03 0901 	and.w	r9, r3, r1
 802635a:	4640      	mov	r0, r8
 802635c:	4649      	mov	r1, r9
 802635e:	f04f 0200 	mov.w	r2, #0
 8026362:	f04f 0300 	mov.w	r3, #0
 8026366:	014b      	lsls	r3, r1, #5
 8026368:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802636c:	0142      	lsls	r2, r0, #5
 802636e:	4610      	mov	r0, r2
 8026370:	4619      	mov	r1, r3
 8026372:	ebb0 0008 	subs.w	r0, r0, r8
 8026376:	eb61 0109 	sbc.w	r1, r1, r9
 802637a:	f04f 0200 	mov.w	r2, #0
 802637e:	f04f 0300 	mov.w	r3, #0
 8026382:	018b      	lsls	r3, r1, #6
 8026384:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8026388:	0182      	lsls	r2, r0, #6
 802638a:	1a12      	subs	r2, r2, r0
 802638c:	eb63 0301 	sbc.w	r3, r3, r1
 8026390:	f04f 0000 	mov.w	r0, #0
 8026394:	f04f 0100 	mov.w	r1, #0
 8026398:	00d9      	lsls	r1, r3, #3
 802639a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802639e:	00d0      	lsls	r0, r2, #3
 80263a0:	4602      	mov	r2, r0
 80263a2:	460b      	mov	r3, r1
 80263a4:	eb12 0208 	adds.w	r2, r2, r8
 80263a8:	eb43 0309 	adc.w	r3, r3, r9
 80263ac:	f04f 0000 	mov.w	r0, #0
 80263b0:	f04f 0100 	mov.w	r1, #0
 80263b4:	0259      	lsls	r1, r3, #9
 80263b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80263ba:	0250      	lsls	r0, r2, #9
 80263bc:	4602      	mov	r2, r0
 80263be:	460b      	mov	r3, r1
 80263c0:	4610      	mov	r0, r2
 80263c2:	4619      	mov	r1, r3
 80263c4:	687b      	ldr	r3, [r7, #4]
 80263c6:	461a      	mov	r2, r3
 80263c8:	f04f 0300 	mov.w	r3, #0
 80263cc:	f7fa fb46 	bl	8020a5c <__aeabi_uldivmod>
 80263d0:	4602      	mov	r2, r0
 80263d2:	460b      	mov	r3, r1
 80263d4:	4613      	mov	r3, r2
 80263d6:	60fb      	str	r3, [r7, #12]
 80263d8:	e04a      	b.n	8026470 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80263da:	4b31      	ldr	r3, [pc, #196]	; (80264a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80263dc:	685b      	ldr	r3, [r3, #4]
 80263de:	099b      	lsrs	r3, r3, #6
 80263e0:	461a      	mov	r2, r3
 80263e2:	f04f 0300 	mov.w	r3, #0
 80263e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80263ea:	f04f 0100 	mov.w	r1, #0
 80263ee:	ea02 0400 	and.w	r4, r2, r0
 80263f2:	ea03 0501 	and.w	r5, r3, r1
 80263f6:	4620      	mov	r0, r4
 80263f8:	4629      	mov	r1, r5
 80263fa:	f04f 0200 	mov.w	r2, #0
 80263fe:	f04f 0300 	mov.w	r3, #0
 8026402:	014b      	lsls	r3, r1, #5
 8026404:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8026408:	0142      	lsls	r2, r0, #5
 802640a:	4610      	mov	r0, r2
 802640c:	4619      	mov	r1, r3
 802640e:	1b00      	subs	r0, r0, r4
 8026410:	eb61 0105 	sbc.w	r1, r1, r5
 8026414:	f04f 0200 	mov.w	r2, #0
 8026418:	f04f 0300 	mov.w	r3, #0
 802641c:	018b      	lsls	r3, r1, #6
 802641e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8026422:	0182      	lsls	r2, r0, #6
 8026424:	1a12      	subs	r2, r2, r0
 8026426:	eb63 0301 	sbc.w	r3, r3, r1
 802642a:	f04f 0000 	mov.w	r0, #0
 802642e:	f04f 0100 	mov.w	r1, #0
 8026432:	00d9      	lsls	r1, r3, #3
 8026434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8026438:	00d0      	lsls	r0, r2, #3
 802643a:	4602      	mov	r2, r0
 802643c:	460b      	mov	r3, r1
 802643e:	1912      	adds	r2, r2, r4
 8026440:	eb45 0303 	adc.w	r3, r5, r3
 8026444:	f04f 0000 	mov.w	r0, #0
 8026448:	f04f 0100 	mov.w	r1, #0
 802644c:	0299      	lsls	r1, r3, #10
 802644e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8026452:	0290      	lsls	r0, r2, #10
 8026454:	4602      	mov	r2, r0
 8026456:	460b      	mov	r3, r1
 8026458:	4610      	mov	r0, r2
 802645a:	4619      	mov	r1, r3
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	461a      	mov	r2, r3
 8026460:	f04f 0300 	mov.w	r3, #0
 8026464:	f7fa fafa 	bl	8020a5c <__aeabi_uldivmod>
 8026468:	4602      	mov	r2, r0
 802646a:	460b      	mov	r3, r1
 802646c:	4613      	mov	r3, r2
 802646e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8026470:	4b0b      	ldr	r3, [pc, #44]	; (80264a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8026472:	685b      	ldr	r3, [r3, #4]
 8026474:	0c1b      	lsrs	r3, r3, #16
 8026476:	f003 0303 	and.w	r3, r3, #3
 802647a:	3301      	adds	r3, #1
 802647c:	005b      	lsls	r3, r3, #1
 802647e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8026480:	68fa      	ldr	r2, [r7, #12]
 8026482:	683b      	ldr	r3, [r7, #0]
 8026484:	fbb2 f3f3 	udiv	r3, r2, r3
 8026488:	60bb      	str	r3, [r7, #8]
      break;
 802648a:	e002      	b.n	8026492 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802648c:	4b05      	ldr	r3, [pc, #20]	; (80264a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 802648e:	60bb      	str	r3, [r7, #8]
      break;
 8026490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8026492:	68bb      	ldr	r3, [r7, #8]
}
 8026494:	4618      	mov	r0, r3
 8026496:	3710      	adds	r7, #16
 8026498:	46bd      	mov	sp, r7
 802649a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802649e:	bf00      	nop
 80264a0:	40023800 	.word	0x40023800
 80264a4:	00f42400 	.word	0x00f42400
 80264a8:	007a1200 	.word	0x007a1200

080264ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80264ac:	b480      	push	{r7}
 80264ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80264b0:	4b03      	ldr	r3, [pc, #12]	; (80264c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80264b2:	681b      	ldr	r3, [r3, #0]
}
 80264b4:	4618      	mov	r0, r3
 80264b6:	46bd      	mov	sp, r7
 80264b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264bc:	4770      	bx	lr
 80264be:	bf00      	nop
 80264c0:	200002e0 	.word	0x200002e0

080264c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80264c4:	b580      	push	{r7, lr}
 80264c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80264c8:	f7ff fff0 	bl	80264ac <HAL_RCC_GetHCLKFreq>
 80264cc:	4602      	mov	r2, r0
 80264ce:	4b05      	ldr	r3, [pc, #20]	; (80264e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80264d0:	689b      	ldr	r3, [r3, #8]
 80264d2:	0a9b      	lsrs	r3, r3, #10
 80264d4:	f003 0307 	and.w	r3, r3, #7
 80264d8:	4903      	ldr	r1, [pc, #12]	; (80264e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80264da:	5ccb      	ldrb	r3, [r1, r3]
 80264dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80264e0:	4618      	mov	r0, r3
 80264e2:	bd80      	pop	{r7, pc}
 80264e4:	40023800 	.word	0x40023800
 80264e8:	0802e620 	.word	0x0802e620

080264ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80264ec:	b580      	push	{r7, lr}
 80264ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80264f0:	f7ff ffdc 	bl	80264ac <HAL_RCC_GetHCLKFreq>
 80264f4:	4602      	mov	r2, r0
 80264f6:	4b05      	ldr	r3, [pc, #20]	; (802650c <HAL_RCC_GetPCLK2Freq+0x20>)
 80264f8:	689b      	ldr	r3, [r3, #8]
 80264fa:	0b5b      	lsrs	r3, r3, #13
 80264fc:	f003 0307 	and.w	r3, r3, #7
 8026500:	4903      	ldr	r1, [pc, #12]	; (8026510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8026502:	5ccb      	ldrb	r3, [r1, r3]
 8026504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8026508:	4618      	mov	r0, r3
 802650a:	bd80      	pop	{r7, pc}
 802650c:	40023800 	.word	0x40023800
 8026510:	0802e620 	.word	0x0802e620

08026514 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8026514:	b580      	push	{r7, lr}
 8026516:	b086      	sub	sp, #24
 8026518:	af00      	add	r7, sp, #0
 802651a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802651c:	2300      	movs	r3, #0
 802651e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8026520:	2300      	movs	r3, #0
 8026522:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8026524:	687b      	ldr	r3, [r7, #4]
 8026526:	681b      	ldr	r3, [r3, #0]
 8026528:	f003 0301 	and.w	r3, r3, #1
 802652c:	2b00      	cmp	r3, #0
 802652e:	d105      	bne.n	802653c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	681b      	ldr	r3, [r3, #0]
 8026534:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8026538:	2b00      	cmp	r3, #0
 802653a:	d035      	beq.n	80265a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802653c:	4b62      	ldr	r3, [pc, #392]	; (80266c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802653e:	2200      	movs	r2, #0
 8026540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8026542:	f7fe fd19 	bl	8024f78 <HAL_GetTick>
 8026546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8026548:	e008      	b.n	802655c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802654a:	f7fe fd15 	bl	8024f78 <HAL_GetTick>
 802654e:	4602      	mov	r2, r0
 8026550:	697b      	ldr	r3, [r7, #20]
 8026552:	1ad3      	subs	r3, r2, r3
 8026554:	2b02      	cmp	r3, #2
 8026556:	d901      	bls.n	802655c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026558:	2303      	movs	r3, #3
 802655a:	e0b0      	b.n	80266be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802655c:	4b5b      	ldr	r3, [pc, #364]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802655e:	681b      	ldr	r3, [r3, #0]
 8026560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8026564:	2b00      	cmp	r3, #0
 8026566:	d1f0      	bne.n	802654a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8026568:	687b      	ldr	r3, [r7, #4]
 802656a:	685b      	ldr	r3, [r3, #4]
 802656c:	019a      	lsls	r2, r3, #6
 802656e:	687b      	ldr	r3, [r7, #4]
 8026570:	689b      	ldr	r3, [r3, #8]
 8026572:	071b      	lsls	r3, r3, #28
 8026574:	4955      	ldr	r1, [pc, #340]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8026576:	4313      	orrs	r3, r2
 8026578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802657c:	4b52      	ldr	r3, [pc, #328]	; (80266c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802657e:	2201      	movs	r2, #1
 8026580:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8026582:	f7fe fcf9 	bl	8024f78 <HAL_GetTick>
 8026586:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8026588:	e008      	b.n	802659c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802658a:	f7fe fcf5 	bl	8024f78 <HAL_GetTick>
 802658e:	4602      	mov	r2, r0
 8026590:	697b      	ldr	r3, [r7, #20]
 8026592:	1ad3      	subs	r3, r2, r3
 8026594:	2b02      	cmp	r3, #2
 8026596:	d901      	bls.n	802659c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026598:	2303      	movs	r3, #3
 802659a:	e090      	b.n	80266be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802659c:	4b4b      	ldr	r3, [pc, #300]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802659e:	681b      	ldr	r3, [r3, #0]
 80265a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80265a4:	2b00      	cmp	r3, #0
 80265a6:	d0f0      	beq.n	802658a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80265a8:	687b      	ldr	r3, [r7, #4]
 80265aa:	681b      	ldr	r3, [r3, #0]
 80265ac:	f003 0302 	and.w	r3, r3, #2
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	f000 8083 	beq.w	80266bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80265b6:	2300      	movs	r3, #0
 80265b8:	60fb      	str	r3, [r7, #12]
 80265ba:	4b44      	ldr	r3, [pc, #272]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80265bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265be:	4a43      	ldr	r2, [pc, #268]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80265c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80265c4:	6413      	str	r3, [r2, #64]	; 0x40
 80265c6:	4b41      	ldr	r3, [pc, #260]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80265c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80265ce:	60fb      	str	r3, [r7, #12]
 80265d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80265d2:	4b3f      	ldr	r3, [pc, #252]	; (80266d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80265d4:	681b      	ldr	r3, [r3, #0]
 80265d6:	4a3e      	ldr	r2, [pc, #248]	; (80266d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80265d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80265dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80265de:	f7fe fccb 	bl	8024f78 <HAL_GetTick>
 80265e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80265e4:	e008      	b.n	80265f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80265e6:	f7fe fcc7 	bl	8024f78 <HAL_GetTick>
 80265ea:	4602      	mov	r2, r0
 80265ec:	697b      	ldr	r3, [r7, #20]
 80265ee:	1ad3      	subs	r3, r2, r3
 80265f0:	2b02      	cmp	r3, #2
 80265f2:	d901      	bls.n	80265f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80265f4:	2303      	movs	r3, #3
 80265f6:	e062      	b.n	80266be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80265f8:	4b35      	ldr	r3, [pc, #212]	; (80266d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80265fa:	681b      	ldr	r3, [r3, #0]
 80265fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026600:	2b00      	cmp	r3, #0
 8026602:	d0f0      	beq.n	80265e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8026604:	4b31      	ldr	r3, [pc, #196]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8026606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802660c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802660e:	693b      	ldr	r3, [r7, #16]
 8026610:	2b00      	cmp	r3, #0
 8026612:	d02f      	beq.n	8026674 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8026614:	687b      	ldr	r3, [r7, #4]
 8026616:	68db      	ldr	r3, [r3, #12]
 8026618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802661c:	693a      	ldr	r2, [r7, #16]
 802661e:	429a      	cmp	r2, r3
 8026620:	d028      	beq.n	8026674 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8026622:	4b2a      	ldr	r3, [pc, #168]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8026624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802662a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 802662c:	4b29      	ldr	r3, [pc, #164]	; (80266d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802662e:	2201      	movs	r2, #1
 8026630:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8026632:	4b28      	ldr	r3, [pc, #160]	; (80266d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8026634:	2200      	movs	r2, #0
 8026636:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8026638:	4a24      	ldr	r2, [pc, #144]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802663a:	693b      	ldr	r3, [r7, #16]
 802663c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802663e:	4b23      	ldr	r3, [pc, #140]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8026640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026642:	f003 0301 	and.w	r3, r3, #1
 8026646:	2b01      	cmp	r3, #1
 8026648:	d114      	bne.n	8026674 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802664a:	f7fe fc95 	bl	8024f78 <HAL_GetTick>
 802664e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026650:	e00a      	b.n	8026668 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026652:	f7fe fc91 	bl	8024f78 <HAL_GetTick>
 8026656:	4602      	mov	r2, r0
 8026658:	697b      	ldr	r3, [r7, #20]
 802665a:	1ad3      	subs	r3, r2, r3
 802665c:	f241 3288 	movw	r2, #5000	; 0x1388
 8026660:	4293      	cmp	r3, r2
 8026662:	d901      	bls.n	8026668 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8026664:	2303      	movs	r3, #3
 8026666:	e02a      	b.n	80266be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026668:	4b18      	ldr	r3, [pc, #96]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802666c:	f003 0302 	and.w	r3, r3, #2
 8026670:	2b00      	cmp	r3, #0
 8026672:	d0ee      	beq.n	8026652 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	68db      	ldr	r3, [r3, #12]
 8026678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802667c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8026680:	d10d      	bne.n	802669e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8026682:	4b12      	ldr	r3, [pc, #72]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8026684:	689b      	ldr	r3, [r3, #8]
 8026686:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802668a:	687b      	ldr	r3, [r7, #4]
 802668c:	68db      	ldr	r3, [r3, #12]
 802668e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026696:	490d      	ldr	r1, [pc, #52]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8026698:	4313      	orrs	r3, r2
 802669a:	608b      	str	r3, [r1, #8]
 802669c:	e005      	b.n	80266aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 802669e:	4b0b      	ldr	r3, [pc, #44]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80266a0:	689b      	ldr	r3, [r3, #8]
 80266a2:	4a0a      	ldr	r2, [pc, #40]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80266a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80266a8:	6093      	str	r3, [r2, #8]
 80266aa:	4b08      	ldr	r3, [pc, #32]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80266ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80266ae:	687b      	ldr	r3, [r7, #4]
 80266b0:	68db      	ldr	r3, [r3, #12]
 80266b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80266b6:	4905      	ldr	r1, [pc, #20]	; (80266cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80266b8:	4313      	orrs	r3, r2
 80266ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80266bc:	2300      	movs	r3, #0
}
 80266be:	4618      	mov	r0, r3
 80266c0:	3718      	adds	r7, #24
 80266c2:	46bd      	mov	sp, r7
 80266c4:	bd80      	pop	{r7, pc}
 80266c6:	bf00      	nop
 80266c8:	42470068 	.word	0x42470068
 80266cc:	40023800 	.word	0x40023800
 80266d0:	40007000 	.word	0x40007000
 80266d4:	42470e40 	.word	0x42470e40

080266d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80266d8:	b580      	push	{r7, lr}
 80266da:	b082      	sub	sp, #8
 80266dc:	af00      	add	r7, sp, #0
 80266de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	2b00      	cmp	r3, #0
 80266e4:	d101      	bne.n	80266ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80266e6:	2301      	movs	r3, #1
 80266e8:	e056      	b.n	8026798 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80266ea:	687b      	ldr	r3, [r7, #4]
 80266ec:	2200      	movs	r2, #0
 80266ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80266f6:	b2db      	uxtb	r3, r3
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d106      	bne.n	802670a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	2200      	movs	r2, #0
 8026700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8026704:	6878      	ldr	r0, [r7, #4]
 8026706:	f7fc fd27 	bl	8023158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	2202      	movs	r2, #2
 802670e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	681b      	ldr	r3, [r3, #0]
 8026716:	681a      	ldr	r2, [r3, #0]
 8026718:	687b      	ldr	r3, [r7, #4]
 802671a:	681b      	ldr	r3, [r3, #0]
 802671c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026720:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8026722:	687b      	ldr	r3, [r7, #4]
 8026724:	685a      	ldr	r2, [r3, #4]
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	689b      	ldr	r3, [r3, #8]
 802672a:	431a      	orrs	r2, r3
 802672c:	687b      	ldr	r3, [r7, #4]
 802672e:	68db      	ldr	r3, [r3, #12]
 8026730:	431a      	orrs	r2, r3
 8026732:	687b      	ldr	r3, [r7, #4]
 8026734:	691b      	ldr	r3, [r3, #16]
 8026736:	431a      	orrs	r2, r3
 8026738:	687b      	ldr	r3, [r7, #4]
 802673a:	695b      	ldr	r3, [r3, #20]
 802673c:	431a      	orrs	r2, r3
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	699b      	ldr	r3, [r3, #24]
 8026742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026746:	431a      	orrs	r2, r3
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	69db      	ldr	r3, [r3, #28]
 802674c:	431a      	orrs	r2, r3
 802674e:	687b      	ldr	r3, [r7, #4]
 8026750:	6a1b      	ldr	r3, [r3, #32]
 8026752:	ea42 0103 	orr.w	r1, r2, r3
 8026756:	687b      	ldr	r3, [r7, #4]
 8026758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802675a:	687b      	ldr	r3, [r7, #4]
 802675c:	681b      	ldr	r3, [r3, #0]
 802675e:	430a      	orrs	r2, r1
 8026760:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	699b      	ldr	r3, [r3, #24]
 8026766:	0c1b      	lsrs	r3, r3, #16
 8026768:	f003 0104 	and.w	r1, r3, #4
 802676c:	687b      	ldr	r3, [r7, #4]
 802676e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	681b      	ldr	r3, [r3, #0]
 8026774:	430a      	orrs	r2, r1
 8026776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8026778:	687b      	ldr	r3, [r7, #4]
 802677a:	681b      	ldr	r3, [r3, #0]
 802677c:	69da      	ldr	r2, [r3, #28]
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8026788:	687b      	ldr	r3, [r7, #4]
 802678a:	2200      	movs	r2, #0
 802678c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802678e:	687b      	ldr	r3, [r7, #4]
 8026790:	2201      	movs	r2, #1
 8026792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8026796:	2300      	movs	r3, #0
}
 8026798:	4618      	mov	r0, r3
 802679a:	3708      	adds	r7, #8
 802679c:	46bd      	mov	sp, r7
 802679e:	bd80      	pop	{r7, pc}

080267a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80267a0:	b580      	push	{r7, lr}
 80267a2:	b088      	sub	sp, #32
 80267a4:	af00      	add	r7, sp, #0
 80267a6:	60f8      	str	r0, [r7, #12]
 80267a8:	60b9      	str	r1, [r7, #8]
 80267aa:	603b      	str	r3, [r7, #0]
 80267ac:	4613      	mov	r3, r2
 80267ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80267b0:	2300      	movs	r3, #0
 80267b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80267b4:	68fb      	ldr	r3, [r7, #12]
 80267b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80267ba:	2b01      	cmp	r3, #1
 80267bc:	d101      	bne.n	80267c2 <HAL_SPI_Transmit+0x22>
 80267be:	2302      	movs	r3, #2
 80267c0:	e11e      	b.n	8026a00 <HAL_SPI_Transmit+0x260>
 80267c2:	68fb      	ldr	r3, [r7, #12]
 80267c4:	2201      	movs	r2, #1
 80267c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80267ca:	f7fe fbd5 	bl	8024f78 <HAL_GetTick>
 80267ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80267d0:	88fb      	ldrh	r3, [r7, #6]
 80267d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80267da:	b2db      	uxtb	r3, r3
 80267dc:	2b01      	cmp	r3, #1
 80267de:	d002      	beq.n	80267e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80267e0:	2302      	movs	r3, #2
 80267e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80267e4:	e103      	b.n	80269ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80267e6:	68bb      	ldr	r3, [r7, #8]
 80267e8:	2b00      	cmp	r3, #0
 80267ea:	d002      	beq.n	80267f2 <HAL_SPI_Transmit+0x52>
 80267ec:	88fb      	ldrh	r3, [r7, #6]
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	d102      	bne.n	80267f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80267f2:	2301      	movs	r3, #1
 80267f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80267f6:	e0fa      	b.n	80269ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80267f8:	68fb      	ldr	r3, [r7, #12]
 80267fa:	2203      	movs	r2, #3
 80267fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8026800:	68fb      	ldr	r3, [r7, #12]
 8026802:	2200      	movs	r2, #0
 8026804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8026806:	68fb      	ldr	r3, [r7, #12]
 8026808:	68ba      	ldr	r2, [r7, #8]
 802680a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802680c:	68fb      	ldr	r3, [r7, #12]
 802680e:	88fa      	ldrh	r2, [r7, #6]
 8026810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8026812:	68fb      	ldr	r3, [r7, #12]
 8026814:	88fa      	ldrh	r2, [r7, #6]
 8026816:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8026818:	68fb      	ldr	r3, [r7, #12]
 802681a:	2200      	movs	r2, #0
 802681c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802681e:	68fb      	ldr	r3, [r7, #12]
 8026820:	2200      	movs	r2, #0
 8026822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8026824:	68fb      	ldr	r3, [r7, #12]
 8026826:	2200      	movs	r2, #0
 8026828:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802682a:	68fb      	ldr	r3, [r7, #12]
 802682c:	2200      	movs	r2, #0
 802682e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8026830:	68fb      	ldr	r3, [r7, #12]
 8026832:	2200      	movs	r2, #0
 8026834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8026836:	68fb      	ldr	r3, [r7, #12]
 8026838:	689b      	ldr	r3, [r3, #8]
 802683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802683e:	d107      	bne.n	8026850 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8026840:	68fb      	ldr	r3, [r7, #12]
 8026842:	681b      	ldr	r3, [r3, #0]
 8026844:	681a      	ldr	r2, [r3, #0]
 8026846:	68fb      	ldr	r3, [r7, #12]
 8026848:	681b      	ldr	r3, [r3, #0]
 802684a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802684e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8026850:	68fb      	ldr	r3, [r7, #12]
 8026852:	681b      	ldr	r3, [r3, #0]
 8026854:	681b      	ldr	r3, [r3, #0]
 8026856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802685a:	2b40      	cmp	r3, #64	; 0x40
 802685c:	d007      	beq.n	802686e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802685e:	68fb      	ldr	r3, [r7, #12]
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	681a      	ldr	r2, [r3, #0]
 8026864:	68fb      	ldr	r3, [r7, #12]
 8026866:	681b      	ldr	r3, [r3, #0]
 8026868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802686c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802686e:	68fb      	ldr	r3, [r7, #12]
 8026870:	68db      	ldr	r3, [r3, #12]
 8026872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8026876:	d14b      	bne.n	8026910 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8026878:	68fb      	ldr	r3, [r7, #12]
 802687a:	685b      	ldr	r3, [r3, #4]
 802687c:	2b00      	cmp	r3, #0
 802687e:	d002      	beq.n	8026886 <HAL_SPI_Transmit+0xe6>
 8026880:	8afb      	ldrh	r3, [r7, #22]
 8026882:	2b01      	cmp	r3, #1
 8026884:	d13e      	bne.n	8026904 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8026886:	68fb      	ldr	r3, [r7, #12]
 8026888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802688a:	881a      	ldrh	r2, [r3, #0]
 802688c:	68fb      	ldr	r3, [r7, #12]
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8026892:	68fb      	ldr	r3, [r7, #12]
 8026894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026896:	1c9a      	adds	r2, r3, #2
 8026898:	68fb      	ldr	r3, [r7, #12]
 802689a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802689c:	68fb      	ldr	r3, [r7, #12]
 802689e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80268a0:	b29b      	uxth	r3, r3
 80268a2:	3b01      	subs	r3, #1
 80268a4:	b29a      	uxth	r2, r3
 80268a6:	68fb      	ldr	r3, [r7, #12]
 80268a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80268aa:	e02b      	b.n	8026904 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80268ac:	68fb      	ldr	r3, [r7, #12]
 80268ae:	681b      	ldr	r3, [r3, #0]
 80268b0:	689b      	ldr	r3, [r3, #8]
 80268b2:	f003 0302 	and.w	r3, r3, #2
 80268b6:	2b02      	cmp	r3, #2
 80268b8:	d112      	bne.n	80268e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80268ba:	68fb      	ldr	r3, [r7, #12]
 80268bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80268be:	881a      	ldrh	r2, [r3, #0]
 80268c0:	68fb      	ldr	r3, [r7, #12]
 80268c2:	681b      	ldr	r3, [r3, #0]
 80268c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80268c6:	68fb      	ldr	r3, [r7, #12]
 80268c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80268ca:	1c9a      	adds	r2, r3, #2
 80268cc:	68fb      	ldr	r3, [r7, #12]
 80268ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80268d0:	68fb      	ldr	r3, [r7, #12]
 80268d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80268d4:	b29b      	uxth	r3, r3
 80268d6:	3b01      	subs	r3, #1
 80268d8:	b29a      	uxth	r2, r3
 80268da:	68fb      	ldr	r3, [r7, #12]
 80268dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80268de:	e011      	b.n	8026904 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80268e0:	f7fe fb4a 	bl	8024f78 <HAL_GetTick>
 80268e4:	4602      	mov	r2, r0
 80268e6:	69bb      	ldr	r3, [r7, #24]
 80268e8:	1ad3      	subs	r3, r2, r3
 80268ea:	683a      	ldr	r2, [r7, #0]
 80268ec:	429a      	cmp	r2, r3
 80268ee:	d803      	bhi.n	80268f8 <HAL_SPI_Transmit+0x158>
 80268f0:	683b      	ldr	r3, [r7, #0]
 80268f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80268f6:	d102      	bne.n	80268fe <HAL_SPI_Transmit+0x15e>
 80268f8:	683b      	ldr	r3, [r7, #0]
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	d102      	bne.n	8026904 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80268fe:	2303      	movs	r3, #3
 8026900:	77fb      	strb	r3, [r7, #31]
          goto error;
 8026902:	e074      	b.n	80269ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8026904:	68fb      	ldr	r3, [r7, #12]
 8026906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026908:	b29b      	uxth	r3, r3
 802690a:	2b00      	cmp	r3, #0
 802690c:	d1ce      	bne.n	80268ac <HAL_SPI_Transmit+0x10c>
 802690e:	e04c      	b.n	80269aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8026910:	68fb      	ldr	r3, [r7, #12]
 8026912:	685b      	ldr	r3, [r3, #4]
 8026914:	2b00      	cmp	r3, #0
 8026916:	d002      	beq.n	802691e <HAL_SPI_Transmit+0x17e>
 8026918:	8afb      	ldrh	r3, [r7, #22]
 802691a:	2b01      	cmp	r3, #1
 802691c:	d140      	bne.n	80269a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802691e:	68fb      	ldr	r3, [r7, #12]
 8026920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026922:	68fb      	ldr	r3, [r7, #12]
 8026924:	681b      	ldr	r3, [r3, #0]
 8026926:	330c      	adds	r3, #12
 8026928:	7812      	ldrb	r2, [r2, #0]
 802692a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026930:	1c5a      	adds	r2, r3, #1
 8026932:	68fb      	ldr	r3, [r7, #12]
 8026934:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8026936:	68fb      	ldr	r3, [r7, #12]
 8026938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802693a:	b29b      	uxth	r3, r3
 802693c:	3b01      	subs	r3, #1
 802693e:	b29a      	uxth	r2, r3
 8026940:	68fb      	ldr	r3, [r7, #12]
 8026942:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8026944:	e02c      	b.n	80269a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8026946:	68fb      	ldr	r3, [r7, #12]
 8026948:	681b      	ldr	r3, [r3, #0]
 802694a:	689b      	ldr	r3, [r3, #8]
 802694c:	f003 0302 	and.w	r3, r3, #2
 8026950:	2b02      	cmp	r3, #2
 8026952:	d113      	bne.n	802697c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026958:	68fb      	ldr	r3, [r7, #12]
 802695a:	681b      	ldr	r3, [r3, #0]
 802695c:	330c      	adds	r3, #12
 802695e:	7812      	ldrb	r2, [r2, #0]
 8026960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8026962:	68fb      	ldr	r3, [r7, #12]
 8026964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026966:	1c5a      	adds	r2, r3, #1
 8026968:	68fb      	ldr	r3, [r7, #12]
 802696a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802696c:	68fb      	ldr	r3, [r7, #12]
 802696e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026970:	b29b      	uxth	r3, r3
 8026972:	3b01      	subs	r3, #1
 8026974:	b29a      	uxth	r2, r3
 8026976:	68fb      	ldr	r3, [r7, #12]
 8026978:	86da      	strh	r2, [r3, #54]	; 0x36
 802697a:	e011      	b.n	80269a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802697c:	f7fe fafc 	bl	8024f78 <HAL_GetTick>
 8026980:	4602      	mov	r2, r0
 8026982:	69bb      	ldr	r3, [r7, #24]
 8026984:	1ad3      	subs	r3, r2, r3
 8026986:	683a      	ldr	r2, [r7, #0]
 8026988:	429a      	cmp	r2, r3
 802698a:	d803      	bhi.n	8026994 <HAL_SPI_Transmit+0x1f4>
 802698c:	683b      	ldr	r3, [r7, #0]
 802698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026992:	d102      	bne.n	802699a <HAL_SPI_Transmit+0x1fa>
 8026994:	683b      	ldr	r3, [r7, #0]
 8026996:	2b00      	cmp	r3, #0
 8026998:	d102      	bne.n	80269a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 802699a:	2303      	movs	r3, #3
 802699c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802699e:	e026      	b.n	80269ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80269a0:	68fb      	ldr	r3, [r7, #12]
 80269a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80269a4:	b29b      	uxth	r3, r3
 80269a6:	2b00      	cmp	r3, #0
 80269a8:	d1cd      	bne.n	8026946 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80269aa:	69ba      	ldr	r2, [r7, #24]
 80269ac:	6839      	ldr	r1, [r7, #0]
 80269ae:	68f8      	ldr	r0, [r7, #12]
 80269b0:	f000 fba4 	bl	80270fc <SPI_EndRxTxTransaction>
 80269b4:	4603      	mov	r3, r0
 80269b6:	2b00      	cmp	r3, #0
 80269b8:	d002      	beq.n	80269c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80269ba:	68fb      	ldr	r3, [r7, #12]
 80269bc:	2220      	movs	r2, #32
 80269be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80269c0:	68fb      	ldr	r3, [r7, #12]
 80269c2:	689b      	ldr	r3, [r3, #8]
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	d10a      	bne.n	80269de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80269c8:	2300      	movs	r3, #0
 80269ca:	613b      	str	r3, [r7, #16]
 80269cc:	68fb      	ldr	r3, [r7, #12]
 80269ce:	681b      	ldr	r3, [r3, #0]
 80269d0:	68db      	ldr	r3, [r3, #12]
 80269d2:	613b      	str	r3, [r7, #16]
 80269d4:	68fb      	ldr	r3, [r7, #12]
 80269d6:	681b      	ldr	r3, [r3, #0]
 80269d8:	689b      	ldr	r3, [r3, #8]
 80269da:	613b      	str	r3, [r7, #16]
 80269dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80269de:	68fb      	ldr	r3, [r7, #12]
 80269e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80269e2:	2b00      	cmp	r3, #0
 80269e4:	d002      	beq.n	80269ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80269e6:	2301      	movs	r3, #1
 80269e8:	77fb      	strb	r3, [r7, #31]
 80269ea:	e000      	b.n	80269ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80269ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80269ee:	68fb      	ldr	r3, [r7, #12]
 80269f0:	2201      	movs	r2, #1
 80269f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80269f6:	68fb      	ldr	r3, [r7, #12]
 80269f8:	2200      	movs	r2, #0
 80269fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80269fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8026a00:	4618      	mov	r0, r3
 8026a02:	3720      	adds	r7, #32
 8026a04:	46bd      	mov	sp, r7
 8026a06:	bd80      	pop	{r7, pc}

08026a08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8026a08:	b580      	push	{r7, lr}
 8026a0a:	b088      	sub	sp, #32
 8026a0c:	af02      	add	r7, sp, #8
 8026a0e:	60f8      	str	r0, [r7, #12]
 8026a10:	60b9      	str	r1, [r7, #8]
 8026a12:	603b      	str	r3, [r7, #0]
 8026a14:	4613      	mov	r3, r2
 8026a16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8026a18:	2300      	movs	r3, #0
 8026a1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8026a1c:	68fb      	ldr	r3, [r7, #12]
 8026a1e:	685b      	ldr	r3, [r3, #4]
 8026a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026a24:	d112      	bne.n	8026a4c <HAL_SPI_Receive+0x44>
 8026a26:	68fb      	ldr	r3, [r7, #12]
 8026a28:	689b      	ldr	r3, [r3, #8]
 8026a2a:	2b00      	cmp	r3, #0
 8026a2c:	d10e      	bne.n	8026a4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8026a2e:	68fb      	ldr	r3, [r7, #12]
 8026a30:	2204      	movs	r2, #4
 8026a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8026a36:	88fa      	ldrh	r2, [r7, #6]
 8026a38:	683b      	ldr	r3, [r7, #0]
 8026a3a:	9300      	str	r3, [sp, #0]
 8026a3c:	4613      	mov	r3, r2
 8026a3e:	68ba      	ldr	r2, [r7, #8]
 8026a40:	68b9      	ldr	r1, [r7, #8]
 8026a42:	68f8      	ldr	r0, [r7, #12]
 8026a44:	f000 f8e9 	bl	8026c1a <HAL_SPI_TransmitReceive>
 8026a48:	4603      	mov	r3, r0
 8026a4a:	e0e2      	b.n	8026c12 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8026a4c:	68fb      	ldr	r3, [r7, #12]
 8026a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8026a52:	2b01      	cmp	r3, #1
 8026a54:	d101      	bne.n	8026a5a <HAL_SPI_Receive+0x52>
 8026a56:	2302      	movs	r3, #2
 8026a58:	e0db      	b.n	8026c12 <HAL_SPI_Receive+0x20a>
 8026a5a:	68fb      	ldr	r3, [r7, #12]
 8026a5c:	2201      	movs	r2, #1
 8026a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8026a62:	f7fe fa89 	bl	8024f78 <HAL_GetTick>
 8026a66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8026a68:	68fb      	ldr	r3, [r7, #12]
 8026a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8026a6e:	b2db      	uxtb	r3, r3
 8026a70:	2b01      	cmp	r3, #1
 8026a72:	d002      	beq.n	8026a7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8026a74:	2302      	movs	r3, #2
 8026a76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8026a78:	e0c2      	b.n	8026c00 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8026a7a:	68bb      	ldr	r3, [r7, #8]
 8026a7c:	2b00      	cmp	r3, #0
 8026a7e:	d002      	beq.n	8026a86 <HAL_SPI_Receive+0x7e>
 8026a80:	88fb      	ldrh	r3, [r7, #6]
 8026a82:	2b00      	cmp	r3, #0
 8026a84:	d102      	bne.n	8026a8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8026a86:	2301      	movs	r3, #1
 8026a88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8026a8a:	e0b9      	b.n	8026c00 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8026a8c:	68fb      	ldr	r3, [r7, #12]
 8026a8e:	2204      	movs	r2, #4
 8026a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8026a94:	68fb      	ldr	r3, [r7, #12]
 8026a96:	2200      	movs	r2, #0
 8026a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8026a9a:	68fb      	ldr	r3, [r7, #12]
 8026a9c:	68ba      	ldr	r2, [r7, #8]
 8026a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8026aa0:	68fb      	ldr	r3, [r7, #12]
 8026aa2:	88fa      	ldrh	r2, [r7, #6]
 8026aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8026aa6:	68fb      	ldr	r3, [r7, #12]
 8026aa8:	88fa      	ldrh	r2, [r7, #6]
 8026aaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8026aac:	68fb      	ldr	r3, [r7, #12]
 8026aae:	2200      	movs	r2, #0
 8026ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8026ab2:	68fb      	ldr	r3, [r7, #12]
 8026ab4:	2200      	movs	r2, #0
 8026ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8026ab8:	68fb      	ldr	r3, [r7, #12]
 8026aba:	2200      	movs	r2, #0
 8026abc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8026abe:	68fb      	ldr	r3, [r7, #12]
 8026ac0:	2200      	movs	r2, #0
 8026ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8026ac4:	68fb      	ldr	r3, [r7, #12]
 8026ac6:	2200      	movs	r2, #0
 8026ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8026aca:	68fb      	ldr	r3, [r7, #12]
 8026acc:	689b      	ldr	r3, [r3, #8]
 8026ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026ad2:	d107      	bne.n	8026ae4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8026ad4:	68fb      	ldr	r3, [r7, #12]
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	681a      	ldr	r2, [r3, #0]
 8026ada:	68fb      	ldr	r3, [r7, #12]
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8026ae2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8026ae4:	68fb      	ldr	r3, [r7, #12]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	681b      	ldr	r3, [r3, #0]
 8026aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026aee:	2b40      	cmp	r3, #64	; 0x40
 8026af0:	d007      	beq.n	8026b02 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8026af2:	68fb      	ldr	r3, [r7, #12]
 8026af4:	681b      	ldr	r3, [r3, #0]
 8026af6:	681a      	ldr	r2, [r3, #0]
 8026af8:	68fb      	ldr	r3, [r7, #12]
 8026afa:	681b      	ldr	r3, [r3, #0]
 8026afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026b00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8026b02:	68fb      	ldr	r3, [r7, #12]
 8026b04:	68db      	ldr	r3, [r3, #12]
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	d162      	bne.n	8026bd0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8026b0a:	e02e      	b.n	8026b6a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8026b0c:	68fb      	ldr	r3, [r7, #12]
 8026b0e:	681b      	ldr	r3, [r3, #0]
 8026b10:	689b      	ldr	r3, [r3, #8]
 8026b12:	f003 0301 	and.w	r3, r3, #1
 8026b16:	2b01      	cmp	r3, #1
 8026b18:	d115      	bne.n	8026b46 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8026b1a:	68fb      	ldr	r3, [r7, #12]
 8026b1c:	681b      	ldr	r3, [r3, #0]
 8026b1e:	f103 020c 	add.w	r2, r3, #12
 8026b22:	68fb      	ldr	r3, [r7, #12]
 8026b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b26:	7812      	ldrb	r2, [r2, #0]
 8026b28:	b2d2      	uxtb	r2, r2
 8026b2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8026b2c:	68fb      	ldr	r3, [r7, #12]
 8026b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b30:	1c5a      	adds	r2, r3, #1
 8026b32:	68fb      	ldr	r3, [r7, #12]
 8026b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8026b36:	68fb      	ldr	r3, [r7, #12]
 8026b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026b3a:	b29b      	uxth	r3, r3
 8026b3c:	3b01      	subs	r3, #1
 8026b3e:	b29a      	uxth	r2, r3
 8026b40:	68fb      	ldr	r3, [r7, #12]
 8026b42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8026b44:	e011      	b.n	8026b6a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8026b46:	f7fe fa17 	bl	8024f78 <HAL_GetTick>
 8026b4a:	4602      	mov	r2, r0
 8026b4c:	693b      	ldr	r3, [r7, #16]
 8026b4e:	1ad3      	subs	r3, r2, r3
 8026b50:	683a      	ldr	r2, [r7, #0]
 8026b52:	429a      	cmp	r2, r3
 8026b54:	d803      	bhi.n	8026b5e <HAL_SPI_Receive+0x156>
 8026b56:	683b      	ldr	r3, [r7, #0]
 8026b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026b5c:	d102      	bne.n	8026b64 <HAL_SPI_Receive+0x15c>
 8026b5e:	683b      	ldr	r3, [r7, #0]
 8026b60:	2b00      	cmp	r3, #0
 8026b62:	d102      	bne.n	8026b6a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8026b64:	2303      	movs	r3, #3
 8026b66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8026b68:	e04a      	b.n	8026c00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8026b6a:	68fb      	ldr	r3, [r7, #12]
 8026b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026b6e:	b29b      	uxth	r3, r3
 8026b70:	2b00      	cmp	r3, #0
 8026b72:	d1cb      	bne.n	8026b0c <HAL_SPI_Receive+0x104>
 8026b74:	e031      	b.n	8026bda <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8026b76:	68fb      	ldr	r3, [r7, #12]
 8026b78:	681b      	ldr	r3, [r3, #0]
 8026b7a:	689b      	ldr	r3, [r3, #8]
 8026b7c:	f003 0301 	and.w	r3, r3, #1
 8026b80:	2b01      	cmp	r3, #1
 8026b82:	d113      	bne.n	8026bac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8026b84:	68fb      	ldr	r3, [r7, #12]
 8026b86:	681b      	ldr	r3, [r3, #0]
 8026b88:	68da      	ldr	r2, [r3, #12]
 8026b8a:	68fb      	ldr	r3, [r7, #12]
 8026b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b8e:	b292      	uxth	r2, r2
 8026b90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8026b92:	68fb      	ldr	r3, [r7, #12]
 8026b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b96:	1c9a      	adds	r2, r3, #2
 8026b98:	68fb      	ldr	r3, [r7, #12]
 8026b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8026b9c:	68fb      	ldr	r3, [r7, #12]
 8026b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026ba0:	b29b      	uxth	r3, r3
 8026ba2:	3b01      	subs	r3, #1
 8026ba4:	b29a      	uxth	r2, r3
 8026ba6:	68fb      	ldr	r3, [r7, #12]
 8026ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8026baa:	e011      	b.n	8026bd0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8026bac:	f7fe f9e4 	bl	8024f78 <HAL_GetTick>
 8026bb0:	4602      	mov	r2, r0
 8026bb2:	693b      	ldr	r3, [r7, #16]
 8026bb4:	1ad3      	subs	r3, r2, r3
 8026bb6:	683a      	ldr	r2, [r7, #0]
 8026bb8:	429a      	cmp	r2, r3
 8026bba:	d803      	bhi.n	8026bc4 <HAL_SPI_Receive+0x1bc>
 8026bbc:	683b      	ldr	r3, [r7, #0]
 8026bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026bc2:	d102      	bne.n	8026bca <HAL_SPI_Receive+0x1c2>
 8026bc4:	683b      	ldr	r3, [r7, #0]
 8026bc6:	2b00      	cmp	r3, #0
 8026bc8:	d102      	bne.n	8026bd0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8026bca:	2303      	movs	r3, #3
 8026bcc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8026bce:	e017      	b.n	8026c00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8026bd0:	68fb      	ldr	r3, [r7, #12]
 8026bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026bd4:	b29b      	uxth	r3, r3
 8026bd6:	2b00      	cmp	r3, #0
 8026bd8:	d1cd      	bne.n	8026b76 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8026bda:	693a      	ldr	r2, [r7, #16]
 8026bdc:	6839      	ldr	r1, [r7, #0]
 8026bde:	68f8      	ldr	r0, [r7, #12]
 8026be0:	f000 fa27 	bl	8027032 <SPI_EndRxTransaction>
 8026be4:	4603      	mov	r3, r0
 8026be6:	2b00      	cmp	r3, #0
 8026be8:	d002      	beq.n	8026bf0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8026bea:	68fb      	ldr	r3, [r7, #12]
 8026bec:	2220      	movs	r2, #32
 8026bee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8026bf0:	68fb      	ldr	r3, [r7, #12]
 8026bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	d002      	beq.n	8026bfe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8026bf8:	2301      	movs	r3, #1
 8026bfa:	75fb      	strb	r3, [r7, #23]
 8026bfc:	e000      	b.n	8026c00 <HAL_SPI_Receive+0x1f8>
  }

error :
 8026bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8026c00:	68fb      	ldr	r3, [r7, #12]
 8026c02:	2201      	movs	r2, #1
 8026c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8026c08:	68fb      	ldr	r3, [r7, #12]
 8026c0a:	2200      	movs	r2, #0
 8026c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8026c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8026c12:	4618      	mov	r0, r3
 8026c14:	3718      	adds	r7, #24
 8026c16:	46bd      	mov	sp, r7
 8026c18:	bd80      	pop	{r7, pc}

08026c1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8026c1a:	b580      	push	{r7, lr}
 8026c1c:	b08c      	sub	sp, #48	; 0x30
 8026c1e:	af00      	add	r7, sp, #0
 8026c20:	60f8      	str	r0, [r7, #12]
 8026c22:	60b9      	str	r1, [r7, #8]
 8026c24:	607a      	str	r2, [r7, #4]
 8026c26:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8026c28:	2301      	movs	r3, #1
 8026c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8026c2c:	2300      	movs	r3, #0
 8026c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8026c32:	68fb      	ldr	r3, [r7, #12]
 8026c34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8026c38:	2b01      	cmp	r3, #1
 8026c3a:	d101      	bne.n	8026c40 <HAL_SPI_TransmitReceive+0x26>
 8026c3c:	2302      	movs	r3, #2
 8026c3e:	e18a      	b.n	8026f56 <HAL_SPI_TransmitReceive+0x33c>
 8026c40:	68fb      	ldr	r3, [r7, #12]
 8026c42:	2201      	movs	r2, #1
 8026c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8026c48:	f7fe f996 	bl	8024f78 <HAL_GetTick>
 8026c4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8026c4e:	68fb      	ldr	r3, [r7, #12]
 8026c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8026c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8026c58:	68fb      	ldr	r3, [r7, #12]
 8026c5a:	685b      	ldr	r3, [r3, #4]
 8026c5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8026c5e:	887b      	ldrh	r3, [r7, #2]
 8026c60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8026c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026c66:	2b01      	cmp	r3, #1
 8026c68:	d00f      	beq.n	8026c8a <HAL_SPI_TransmitReceive+0x70>
 8026c6a:	69fb      	ldr	r3, [r7, #28]
 8026c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026c70:	d107      	bne.n	8026c82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8026c72:	68fb      	ldr	r3, [r7, #12]
 8026c74:	689b      	ldr	r3, [r3, #8]
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	d103      	bne.n	8026c82 <HAL_SPI_TransmitReceive+0x68>
 8026c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026c7e:	2b04      	cmp	r3, #4
 8026c80:	d003      	beq.n	8026c8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8026c82:	2302      	movs	r3, #2
 8026c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8026c88:	e15b      	b.n	8026f42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8026c8a:	68bb      	ldr	r3, [r7, #8]
 8026c8c:	2b00      	cmp	r3, #0
 8026c8e:	d005      	beq.n	8026c9c <HAL_SPI_TransmitReceive+0x82>
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	2b00      	cmp	r3, #0
 8026c94:	d002      	beq.n	8026c9c <HAL_SPI_TransmitReceive+0x82>
 8026c96:	887b      	ldrh	r3, [r7, #2]
 8026c98:	2b00      	cmp	r3, #0
 8026c9a:	d103      	bne.n	8026ca4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8026c9c:	2301      	movs	r3, #1
 8026c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8026ca2:	e14e      	b.n	8026f42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8026ca4:	68fb      	ldr	r3, [r7, #12]
 8026ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8026caa:	b2db      	uxtb	r3, r3
 8026cac:	2b04      	cmp	r3, #4
 8026cae:	d003      	beq.n	8026cb8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8026cb0:	68fb      	ldr	r3, [r7, #12]
 8026cb2:	2205      	movs	r2, #5
 8026cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8026cb8:	68fb      	ldr	r3, [r7, #12]
 8026cba:	2200      	movs	r2, #0
 8026cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8026cbe:	68fb      	ldr	r3, [r7, #12]
 8026cc0:	687a      	ldr	r2, [r7, #4]
 8026cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8026cc4:	68fb      	ldr	r3, [r7, #12]
 8026cc6:	887a      	ldrh	r2, [r7, #2]
 8026cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8026cca:	68fb      	ldr	r3, [r7, #12]
 8026ccc:	887a      	ldrh	r2, [r7, #2]
 8026cce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8026cd0:	68fb      	ldr	r3, [r7, #12]
 8026cd2:	68ba      	ldr	r2, [r7, #8]
 8026cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8026cd6:	68fb      	ldr	r3, [r7, #12]
 8026cd8:	887a      	ldrh	r2, [r7, #2]
 8026cda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8026cdc:	68fb      	ldr	r3, [r7, #12]
 8026cde:	887a      	ldrh	r2, [r7, #2]
 8026ce0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8026ce2:	68fb      	ldr	r3, [r7, #12]
 8026ce4:	2200      	movs	r2, #0
 8026ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8026ce8:	68fb      	ldr	r3, [r7, #12]
 8026cea:	2200      	movs	r2, #0
 8026cec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8026cee:	68fb      	ldr	r3, [r7, #12]
 8026cf0:	681b      	ldr	r3, [r3, #0]
 8026cf2:	681b      	ldr	r3, [r3, #0]
 8026cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026cf8:	2b40      	cmp	r3, #64	; 0x40
 8026cfa:	d007      	beq.n	8026d0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8026cfc:	68fb      	ldr	r3, [r7, #12]
 8026cfe:	681b      	ldr	r3, [r3, #0]
 8026d00:	681a      	ldr	r2, [r3, #0]
 8026d02:	68fb      	ldr	r3, [r7, #12]
 8026d04:	681b      	ldr	r3, [r3, #0]
 8026d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8026d0c:	68fb      	ldr	r3, [r7, #12]
 8026d0e:	68db      	ldr	r3, [r3, #12]
 8026d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8026d14:	d178      	bne.n	8026e08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8026d16:	68fb      	ldr	r3, [r7, #12]
 8026d18:	685b      	ldr	r3, [r3, #4]
 8026d1a:	2b00      	cmp	r3, #0
 8026d1c:	d002      	beq.n	8026d24 <HAL_SPI_TransmitReceive+0x10a>
 8026d1e:	8b7b      	ldrh	r3, [r7, #26]
 8026d20:	2b01      	cmp	r3, #1
 8026d22:	d166      	bne.n	8026df2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8026d24:	68fb      	ldr	r3, [r7, #12]
 8026d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026d28:	881a      	ldrh	r2, [r3, #0]
 8026d2a:	68fb      	ldr	r3, [r7, #12]
 8026d2c:	681b      	ldr	r3, [r3, #0]
 8026d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8026d30:	68fb      	ldr	r3, [r7, #12]
 8026d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026d34:	1c9a      	adds	r2, r3, #2
 8026d36:	68fb      	ldr	r3, [r7, #12]
 8026d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8026d3a:	68fb      	ldr	r3, [r7, #12]
 8026d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026d3e:	b29b      	uxth	r3, r3
 8026d40:	3b01      	subs	r3, #1
 8026d42:	b29a      	uxth	r2, r3
 8026d44:	68fb      	ldr	r3, [r7, #12]
 8026d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8026d48:	e053      	b.n	8026df2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8026d4a:	68fb      	ldr	r3, [r7, #12]
 8026d4c:	681b      	ldr	r3, [r3, #0]
 8026d4e:	689b      	ldr	r3, [r3, #8]
 8026d50:	f003 0302 	and.w	r3, r3, #2
 8026d54:	2b02      	cmp	r3, #2
 8026d56:	d11b      	bne.n	8026d90 <HAL_SPI_TransmitReceive+0x176>
 8026d58:	68fb      	ldr	r3, [r7, #12]
 8026d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026d5c:	b29b      	uxth	r3, r3
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	d016      	beq.n	8026d90 <HAL_SPI_TransmitReceive+0x176>
 8026d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026d64:	2b01      	cmp	r3, #1
 8026d66:	d113      	bne.n	8026d90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8026d68:	68fb      	ldr	r3, [r7, #12]
 8026d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026d6c:	881a      	ldrh	r2, [r3, #0]
 8026d6e:	68fb      	ldr	r3, [r7, #12]
 8026d70:	681b      	ldr	r3, [r3, #0]
 8026d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8026d74:	68fb      	ldr	r3, [r7, #12]
 8026d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026d78:	1c9a      	adds	r2, r3, #2
 8026d7a:	68fb      	ldr	r3, [r7, #12]
 8026d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8026d7e:	68fb      	ldr	r3, [r7, #12]
 8026d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026d82:	b29b      	uxth	r3, r3
 8026d84:	3b01      	subs	r3, #1
 8026d86:	b29a      	uxth	r2, r3
 8026d88:	68fb      	ldr	r3, [r7, #12]
 8026d8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8026d8c:	2300      	movs	r3, #0
 8026d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8026d90:	68fb      	ldr	r3, [r7, #12]
 8026d92:	681b      	ldr	r3, [r3, #0]
 8026d94:	689b      	ldr	r3, [r3, #8]
 8026d96:	f003 0301 	and.w	r3, r3, #1
 8026d9a:	2b01      	cmp	r3, #1
 8026d9c:	d119      	bne.n	8026dd2 <HAL_SPI_TransmitReceive+0x1b8>
 8026d9e:	68fb      	ldr	r3, [r7, #12]
 8026da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026da2:	b29b      	uxth	r3, r3
 8026da4:	2b00      	cmp	r3, #0
 8026da6:	d014      	beq.n	8026dd2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8026da8:	68fb      	ldr	r3, [r7, #12]
 8026daa:	681b      	ldr	r3, [r3, #0]
 8026dac:	68da      	ldr	r2, [r3, #12]
 8026dae:	68fb      	ldr	r3, [r7, #12]
 8026db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026db2:	b292      	uxth	r2, r2
 8026db4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8026db6:	68fb      	ldr	r3, [r7, #12]
 8026db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026dba:	1c9a      	adds	r2, r3, #2
 8026dbc:	68fb      	ldr	r3, [r7, #12]
 8026dbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8026dc0:	68fb      	ldr	r3, [r7, #12]
 8026dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026dc4:	b29b      	uxth	r3, r3
 8026dc6:	3b01      	subs	r3, #1
 8026dc8:	b29a      	uxth	r2, r3
 8026dca:	68fb      	ldr	r3, [r7, #12]
 8026dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8026dce:	2301      	movs	r3, #1
 8026dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8026dd2:	f7fe f8d1 	bl	8024f78 <HAL_GetTick>
 8026dd6:	4602      	mov	r2, r0
 8026dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026dda:	1ad3      	subs	r3, r2, r3
 8026ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026dde:	429a      	cmp	r2, r3
 8026de0:	d807      	bhi.n	8026df2 <HAL_SPI_TransmitReceive+0x1d8>
 8026de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026de8:	d003      	beq.n	8026df2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8026dea:	2303      	movs	r3, #3
 8026dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8026df0:	e0a7      	b.n	8026f42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8026df2:	68fb      	ldr	r3, [r7, #12]
 8026df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026df6:	b29b      	uxth	r3, r3
 8026df8:	2b00      	cmp	r3, #0
 8026dfa:	d1a6      	bne.n	8026d4a <HAL_SPI_TransmitReceive+0x130>
 8026dfc:	68fb      	ldr	r3, [r7, #12]
 8026dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026e00:	b29b      	uxth	r3, r3
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d1a1      	bne.n	8026d4a <HAL_SPI_TransmitReceive+0x130>
 8026e06:	e07c      	b.n	8026f02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8026e08:	68fb      	ldr	r3, [r7, #12]
 8026e0a:	685b      	ldr	r3, [r3, #4]
 8026e0c:	2b00      	cmp	r3, #0
 8026e0e:	d002      	beq.n	8026e16 <HAL_SPI_TransmitReceive+0x1fc>
 8026e10:	8b7b      	ldrh	r3, [r7, #26]
 8026e12:	2b01      	cmp	r3, #1
 8026e14:	d16b      	bne.n	8026eee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8026e16:	68fb      	ldr	r3, [r7, #12]
 8026e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026e1a:	68fb      	ldr	r3, [r7, #12]
 8026e1c:	681b      	ldr	r3, [r3, #0]
 8026e1e:	330c      	adds	r3, #12
 8026e20:	7812      	ldrb	r2, [r2, #0]
 8026e22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8026e24:	68fb      	ldr	r3, [r7, #12]
 8026e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026e28:	1c5a      	adds	r2, r3, #1
 8026e2a:	68fb      	ldr	r3, [r7, #12]
 8026e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8026e2e:	68fb      	ldr	r3, [r7, #12]
 8026e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026e32:	b29b      	uxth	r3, r3
 8026e34:	3b01      	subs	r3, #1
 8026e36:	b29a      	uxth	r2, r3
 8026e38:	68fb      	ldr	r3, [r7, #12]
 8026e3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8026e3c:	e057      	b.n	8026eee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8026e3e:	68fb      	ldr	r3, [r7, #12]
 8026e40:	681b      	ldr	r3, [r3, #0]
 8026e42:	689b      	ldr	r3, [r3, #8]
 8026e44:	f003 0302 	and.w	r3, r3, #2
 8026e48:	2b02      	cmp	r3, #2
 8026e4a:	d11c      	bne.n	8026e86 <HAL_SPI_TransmitReceive+0x26c>
 8026e4c:	68fb      	ldr	r3, [r7, #12]
 8026e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026e50:	b29b      	uxth	r3, r3
 8026e52:	2b00      	cmp	r3, #0
 8026e54:	d017      	beq.n	8026e86 <HAL_SPI_TransmitReceive+0x26c>
 8026e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e58:	2b01      	cmp	r3, #1
 8026e5a:	d114      	bne.n	8026e86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8026e5c:	68fb      	ldr	r3, [r7, #12]
 8026e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026e60:	68fb      	ldr	r3, [r7, #12]
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	330c      	adds	r3, #12
 8026e66:	7812      	ldrb	r2, [r2, #0]
 8026e68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8026e6a:	68fb      	ldr	r3, [r7, #12]
 8026e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026e6e:	1c5a      	adds	r2, r3, #1
 8026e70:	68fb      	ldr	r3, [r7, #12]
 8026e72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8026e74:	68fb      	ldr	r3, [r7, #12]
 8026e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026e78:	b29b      	uxth	r3, r3
 8026e7a:	3b01      	subs	r3, #1
 8026e7c:	b29a      	uxth	r2, r3
 8026e7e:	68fb      	ldr	r3, [r7, #12]
 8026e80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8026e82:	2300      	movs	r3, #0
 8026e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8026e86:	68fb      	ldr	r3, [r7, #12]
 8026e88:	681b      	ldr	r3, [r3, #0]
 8026e8a:	689b      	ldr	r3, [r3, #8]
 8026e8c:	f003 0301 	and.w	r3, r3, #1
 8026e90:	2b01      	cmp	r3, #1
 8026e92:	d119      	bne.n	8026ec8 <HAL_SPI_TransmitReceive+0x2ae>
 8026e94:	68fb      	ldr	r3, [r7, #12]
 8026e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026e98:	b29b      	uxth	r3, r3
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d014      	beq.n	8026ec8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8026e9e:	68fb      	ldr	r3, [r7, #12]
 8026ea0:	681b      	ldr	r3, [r3, #0]
 8026ea2:	68da      	ldr	r2, [r3, #12]
 8026ea4:	68fb      	ldr	r3, [r7, #12]
 8026ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026ea8:	b2d2      	uxtb	r2, r2
 8026eaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026eb0:	1c5a      	adds	r2, r3, #1
 8026eb2:	68fb      	ldr	r3, [r7, #12]
 8026eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8026eb6:	68fb      	ldr	r3, [r7, #12]
 8026eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026eba:	b29b      	uxth	r3, r3
 8026ebc:	3b01      	subs	r3, #1
 8026ebe:	b29a      	uxth	r2, r3
 8026ec0:	68fb      	ldr	r3, [r7, #12]
 8026ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8026ec4:	2301      	movs	r3, #1
 8026ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8026ec8:	f7fe f856 	bl	8024f78 <HAL_GetTick>
 8026ecc:	4602      	mov	r2, r0
 8026ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026ed0:	1ad3      	subs	r3, r2, r3
 8026ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026ed4:	429a      	cmp	r2, r3
 8026ed6:	d803      	bhi.n	8026ee0 <HAL_SPI_TransmitReceive+0x2c6>
 8026ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026ede:	d102      	bne.n	8026ee6 <HAL_SPI_TransmitReceive+0x2cc>
 8026ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d103      	bne.n	8026eee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8026ee6:	2303      	movs	r3, #3
 8026ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8026eec:	e029      	b.n	8026f42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8026eee:	68fb      	ldr	r3, [r7, #12]
 8026ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8026ef2:	b29b      	uxth	r3, r3
 8026ef4:	2b00      	cmp	r3, #0
 8026ef6:	d1a2      	bne.n	8026e3e <HAL_SPI_TransmitReceive+0x224>
 8026ef8:	68fb      	ldr	r3, [r7, #12]
 8026efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8026efc:	b29b      	uxth	r3, r3
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	d19d      	bne.n	8026e3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8026f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8026f06:	68f8      	ldr	r0, [r7, #12]
 8026f08:	f000 f8f8 	bl	80270fc <SPI_EndRxTxTransaction>
 8026f0c:	4603      	mov	r3, r0
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	d006      	beq.n	8026f20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8026f12:	2301      	movs	r3, #1
 8026f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8026f18:	68fb      	ldr	r3, [r7, #12]
 8026f1a:	2220      	movs	r2, #32
 8026f1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8026f1e:	e010      	b.n	8026f42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8026f20:	68fb      	ldr	r3, [r7, #12]
 8026f22:	689b      	ldr	r3, [r3, #8]
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	d10b      	bne.n	8026f40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8026f28:	2300      	movs	r3, #0
 8026f2a:	617b      	str	r3, [r7, #20]
 8026f2c:	68fb      	ldr	r3, [r7, #12]
 8026f2e:	681b      	ldr	r3, [r3, #0]
 8026f30:	68db      	ldr	r3, [r3, #12]
 8026f32:	617b      	str	r3, [r7, #20]
 8026f34:	68fb      	ldr	r3, [r7, #12]
 8026f36:	681b      	ldr	r3, [r3, #0]
 8026f38:	689b      	ldr	r3, [r3, #8]
 8026f3a:	617b      	str	r3, [r7, #20]
 8026f3c:	697b      	ldr	r3, [r7, #20]
 8026f3e:	e000      	b.n	8026f42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8026f40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8026f42:	68fb      	ldr	r3, [r7, #12]
 8026f44:	2201      	movs	r2, #1
 8026f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8026f4a:	68fb      	ldr	r3, [r7, #12]
 8026f4c:	2200      	movs	r2, #0
 8026f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8026f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8026f56:	4618      	mov	r0, r3
 8026f58:	3730      	adds	r7, #48	; 0x30
 8026f5a:	46bd      	mov	sp, r7
 8026f5c:	bd80      	pop	{r7, pc}

08026f5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8026f5e:	b580      	push	{r7, lr}
 8026f60:	b084      	sub	sp, #16
 8026f62:	af00      	add	r7, sp, #0
 8026f64:	60f8      	str	r0, [r7, #12]
 8026f66:	60b9      	str	r1, [r7, #8]
 8026f68:	603b      	str	r3, [r7, #0]
 8026f6a:	4613      	mov	r3, r2
 8026f6c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8026f6e:	e04c      	b.n	802700a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8026f70:	683b      	ldr	r3, [r7, #0]
 8026f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026f76:	d048      	beq.n	802700a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8026f78:	f7fd fffe 	bl	8024f78 <HAL_GetTick>
 8026f7c:	4602      	mov	r2, r0
 8026f7e:	69bb      	ldr	r3, [r7, #24]
 8026f80:	1ad3      	subs	r3, r2, r3
 8026f82:	683a      	ldr	r2, [r7, #0]
 8026f84:	429a      	cmp	r2, r3
 8026f86:	d902      	bls.n	8026f8e <SPI_WaitFlagStateUntilTimeout+0x30>
 8026f88:	683b      	ldr	r3, [r7, #0]
 8026f8a:	2b00      	cmp	r3, #0
 8026f8c:	d13d      	bne.n	802700a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8026f8e:	68fb      	ldr	r3, [r7, #12]
 8026f90:	681b      	ldr	r3, [r3, #0]
 8026f92:	685a      	ldr	r2, [r3, #4]
 8026f94:	68fb      	ldr	r3, [r7, #12]
 8026f96:	681b      	ldr	r3, [r3, #0]
 8026f98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8026f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8026f9e:	68fb      	ldr	r3, [r7, #12]
 8026fa0:	685b      	ldr	r3, [r3, #4]
 8026fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026fa6:	d111      	bne.n	8026fcc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8026fa8:	68fb      	ldr	r3, [r7, #12]
 8026faa:	689b      	ldr	r3, [r3, #8]
 8026fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026fb0:	d004      	beq.n	8026fbc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8026fb2:	68fb      	ldr	r3, [r7, #12]
 8026fb4:	689b      	ldr	r3, [r3, #8]
 8026fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8026fba:	d107      	bne.n	8026fcc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8026fbc:	68fb      	ldr	r3, [r7, #12]
 8026fbe:	681b      	ldr	r3, [r3, #0]
 8026fc0:	681a      	ldr	r2, [r3, #0]
 8026fc2:	68fb      	ldr	r3, [r7, #12]
 8026fc4:	681b      	ldr	r3, [r3, #0]
 8026fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8026fcc:	68fb      	ldr	r3, [r7, #12]
 8026fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026fd4:	d10f      	bne.n	8026ff6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8026fd6:	68fb      	ldr	r3, [r7, #12]
 8026fd8:	681b      	ldr	r3, [r3, #0]
 8026fda:	681a      	ldr	r2, [r3, #0]
 8026fdc:	68fb      	ldr	r3, [r7, #12]
 8026fde:	681b      	ldr	r3, [r3, #0]
 8026fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8026fe4:	601a      	str	r2, [r3, #0]
 8026fe6:	68fb      	ldr	r3, [r7, #12]
 8026fe8:	681b      	ldr	r3, [r3, #0]
 8026fea:	681a      	ldr	r2, [r3, #0]
 8026fec:	68fb      	ldr	r3, [r7, #12]
 8026fee:	681b      	ldr	r3, [r3, #0]
 8026ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8026ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8026ff6:	68fb      	ldr	r3, [r7, #12]
 8026ff8:	2201      	movs	r2, #1
 8026ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8026ffe:	68fb      	ldr	r3, [r7, #12]
 8027000:	2200      	movs	r2, #0
 8027002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027006:	2303      	movs	r3, #3
 8027008:	e00f      	b.n	802702a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802700a:	68fb      	ldr	r3, [r7, #12]
 802700c:	681b      	ldr	r3, [r3, #0]
 802700e:	689a      	ldr	r2, [r3, #8]
 8027010:	68bb      	ldr	r3, [r7, #8]
 8027012:	4013      	ands	r3, r2
 8027014:	68ba      	ldr	r2, [r7, #8]
 8027016:	429a      	cmp	r2, r3
 8027018:	bf0c      	ite	eq
 802701a:	2301      	moveq	r3, #1
 802701c:	2300      	movne	r3, #0
 802701e:	b2db      	uxtb	r3, r3
 8027020:	461a      	mov	r2, r3
 8027022:	79fb      	ldrb	r3, [r7, #7]
 8027024:	429a      	cmp	r2, r3
 8027026:	d1a3      	bne.n	8026f70 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8027028:	2300      	movs	r3, #0
}
 802702a:	4618      	mov	r0, r3
 802702c:	3710      	adds	r7, #16
 802702e:	46bd      	mov	sp, r7
 8027030:	bd80      	pop	{r7, pc}

08027032 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8027032:	b580      	push	{r7, lr}
 8027034:	b086      	sub	sp, #24
 8027036:	af02      	add	r7, sp, #8
 8027038:	60f8      	str	r0, [r7, #12]
 802703a:	60b9      	str	r1, [r7, #8]
 802703c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802703e:	68fb      	ldr	r3, [r7, #12]
 8027040:	685b      	ldr	r3, [r3, #4]
 8027042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027046:	d111      	bne.n	802706c <SPI_EndRxTransaction+0x3a>
 8027048:	68fb      	ldr	r3, [r7, #12]
 802704a:	689b      	ldr	r3, [r3, #8]
 802704c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027050:	d004      	beq.n	802705c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027052:	68fb      	ldr	r3, [r7, #12]
 8027054:	689b      	ldr	r3, [r3, #8]
 8027056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802705a:	d107      	bne.n	802706c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802705c:	68fb      	ldr	r3, [r7, #12]
 802705e:	681b      	ldr	r3, [r3, #0]
 8027060:	681a      	ldr	r2, [r3, #0]
 8027062:	68fb      	ldr	r3, [r7, #12]
 8027064:	681b      	ldr	r3, [r3, #0]
 8027066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802706a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802706c:	68fb      	ldr	r3, [r7, #12]
 802706e:	685b      	ldr	r3, [r3, #4]
 8027070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027074:	d12a      	bne.n	80270cc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8027076:	68fb      	ldr	r3, [r7, #12]
 8027078:	689b      	ldr	r3, [r3, #8]
 802707a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802707e:	d012      	beq.n	80270a6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	9300      	str	r3, [sp, #0]
 8027084:	68bb      	ldr	r3, [r7, #8]
 8027086:	2200      	movs	r2, #0
 8027088:	2180      	movs	r1, #128	; 0x80
 802708a:	68f8      	ldr	r0, [r7, #12]
 802708c:	f7ff ff67 	bl	8026f5e <SPI_WaitFlagStateUntilTimeout>
 8027090:	4603      	mov	r3, r0
 8027092:	2b00      	cmp	r3, #0
 8027094:	d02d      	beq.n	80270f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027096:	68fb      	ldr	r3, [r7, #12]
 8027098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802709a:	f043 0220 	orr.w	r2, r3, #32
 802709e:	68fb      	ldr	r3, [r7, #12]
 80270a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80270a2:	2303      	movs	r3, #3
 80270a4:	e026      	b.n	80270f4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	9300      	str	r3, [sp, #0]
 80270aa:	68bb      	ldr	r3, [r7, #8]
 80270ac:	2200      	movs	r2, #0
 80270ae:	2101      	movs	r1, #1
 80270b0:	68f8      	ldr	r0, [r7, #12]
 80270b2:	f7ff ff54 	bl	8026f5e <SPI_WaitFlagStateUntilTimeout>
 80270b6:	4603      	mov	r3, r0
 80270b8:	2b00      	cmp	r3, #0
 80270ba:	d01a      	beq.n	80270f2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80270bc:	68fb      	ldr	r3, [r7, #12]
 80270be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80270c0:	f043 0220 	orr.w	r2, r3, #32
 80270c4:	68fb      	ldr	r3, [r7, #12]
 80270c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80270c8:	2303      	movs	r3, #3
 80270ca:	e013      	b.n	80270f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	9300      	str	r3, [sp, #0]
 80270d0:	68bb      	ldr	r3, [r7, #8]
 80270d2:	2200      	movs	r2, #0
 80270d4:	2101      	movs	r1, #1
 80270d6:	68f8      	ldr	r0, [r7, #12]
 80270d8:	f7ff ff41 	bl	8026f5e <SPI_WaitFlagStateUntilTimeout>
 80270dc:	4603      	mov	r3, r0
 80270de:	2b00      	cmp	r3, #0
 80270e0:	d007      	beq.n	80270f2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80270e2:	68fb      	ldr	r3, [r7, #12]
 80270e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80270e6:	f043 0220 	orr.w	r2, r3, #32
 80270ea:	68fb      	ldr	r3, [r7, #12]
 80270ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80270ee:	2303      	movs	r3, #3
 80270f0:	e000      	b.n	80270f4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80270f2:	2300      	movs	r3, #0
}
 80270f4:	4618      	mov	r0, r3
 80270f6:	3710      	adds	r7, #16
 80270f8:	46bd      	mov	sp, r7
 80270fa:	bd80      	pop	{r7, pc}

080270fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80270fc:	b580      	push	{r7, lr}
 80270fe:	b088      	sub	sp, #32
 8027100:	af02      	add	r7, sp, #8
 8027102:	60f8      	str	r0, [r7, #12]
 8027104:	60b9      	str	r1, [r7, #8]
 8027106:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8027108:	4b1b      	ldr	r3, [pc, #108]	; (8027178 <SPI_EndRxTxTransaction+0x7c>)
 802710a:	681b      	ldr	r3, [r3, #0]
 802710c:	4a1b      	ldr	r2, [pc, #108]	; (802717c <SPI_EndRxTxTransaction+0x80>)
 802710e:	fba2 2303 	umull	r2, r3, r2, r3
 8027112:	0d5b      	lsrs	r3, r3, #21
 8027114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027118:	fb02 f303 	mul.w	r3, r2, r3
 802711c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802711e:	68fb      	ldr	r3, [r7, #12]
 8027120:	685b      	ldr	r3, [r3, #4]
 8027122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027126:	d112      	bne.n	802714e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027128:	687b      	ldr	r3, [r7, #4]
 802712a:	9300      	str	r3, [sp, #0]
 802712c:	68bb      	ldr	r3, [r7, #8]
 802712e:	2200      	movs	r2, #0
 8027130:	2180      	movs	r1, #128	; 0x80
 8027132:	68f8      	ldr	r0, [r7, #12]
 8027134:	f7ff ff13 	bl	8026f5e <SPI_WaitFlagStateUntilTimeout>
 8027138:	4603      	mov	r3, r0
 802713a:	2b00      	cmp	r3, #0
 802713c:	d016      	beq.n	802716c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802713e:	68fb      	ldr	r3, [r7, #12]
 8027140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027142:	f043 0220 	orr.w	r2, r3, #32
 8027146:	68fb      	ldr	r3, [r7, #12]
 8027148:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802714a:	2303      	movs	r3, #3
 802714c:	e00f      	b.n	802716e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802714e:	697b      	ldr	r3, [r7, #20]
 8027150:	2b00      	cmp	r3, #0
 8027152:	d00a      	beq.n	802716a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8027154:	697b      	ldr	r3, [r7, #20]
 8027156:	3b01      	subs	r3, #1
 8027158:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802715a:	68fb      	ldr	r3, [r7, #12]
 802715c:	681b      	ldr	r3, [r3, #0]
 802715e:	689b      	ldr	r3, [r3, #8]
 8027160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027164:	2b80      	cmp	r3, #128	; 0x80
 8027166:	d0f2      	beq.n	802714e <SPI_EndRxTxTransaction+0x52>
 8027168:	e000      	b.n	802716c <SPI_EndRxTxTransaction+0x70>
        break;
 802716a:	bf00      	nop
  }

  return HAL_OK;
 802716c:	2300      	movs	r3, #0
}
 802716e:	4618      	mov	r0, r3
 8027170:	3718      	adds	r7, #24
 8027172:	46bd      	mov	sp, r7
 8027174:	bd80      	pop	{r7, pc}
 8027176:	bf00      	nop
 8027178:	200002e0 	.word	0x200002e0
 802717c:	165e9f81 	.word	0x165e9f81

08027180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8027180:	b580      	push	{r7, lr}
 8027182:	b082      	sub	sp, #8
 8027184:	af00      	add	r7, sp, #0
 8027186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027188:	687b      	ldr	r3, [r7, #4]
 802718a:	2b00      	cmp	r3, #0
 802718c:	d101      	bne.n	8027192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802718e:	2301      	movs	r3, #1
 8027190:	e01d      	b.n	80271ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027192:	687b      	ldr	r3, [r7, #4]
 8027194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027198:	b2db      	uxtb	r3, r3
 802719a:	2b00      	cmp	r3, #0
 802719c:	d106      	bne.n	80271ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802719e:	687b      	ldr	r3, [r7, #4]
 80271a0:	2200      	movs	r2, #0
 80271a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80271a6:	6878      	ldr	r0, [r7, #4]
 80271a8:	f7fb ff02 	bl	8022fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80271ac:	687b      	ldr	r3, [r7, #4]
 80271ae:	2202      	movs	r2, #2
 80271b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	681a      	ldr	r2, [r3, #0]
 80271b8:	687b      	ldr	r3, [r7, #4]
 80271ba:	3304      	adds	r3, #4
 80271bc:	4619      	mov	r1, r3
 80271be:	4610      	mov	r0, r2
 80271c0:	f000 f8a8 	bl	8027314 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80271c4:	687b      	ldr	r3, [r7, #4]
 80271c6:	2201      	movs	r2, #1
 80271c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80271cc:	2300      	movs	r3, #0
}
 80271ce:	4618      	mov	r0, r3
 80271d0:	3708      	adds	r7, #8
 80271d2:	46bd      	mov	sp, r7
 80271d4:	bd80      	pop	{r7, pc}
	...

080271d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80271d8:	b580      	push	{r7, lr}
 80271da:	b084      	sub	sp, #16
 80271dc:	af00      	add	r7, sp, #0
 80271de:	6078      	str	r0, [r7, #4]
 80271e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	681b      	ldr	r3, [r3, #0]
 80271e6:	2201      	movs	r2, #1
 80271e8:	6839      	ldr	r1, [r7, #0]
 80271ea:	4618      	mov	r0, r3
 80271ec:	f000 fae2 	bl	80277b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80271f0:	687b      	ldr	r3, [r7, #4]
 80271f2:	681b      	ldr	r3, [r3, #0]
 80271f4:	4a15      	ldr	r2, [pc, #84]	; (802724c <HAL_TIM_PWM_Start+0x74>)
 80271f6:	4293      	cmp	r3, r2
 80271f8:	d004      	beq.n	8027204 <HAL_TIM_PWM_Start+0x2c>
 80271fa:	687b      	ldr	r3, [r7, #4]
 80271fc:	681b      	ldr	r3, [r3, #0]
 80271fe:	4a14      	ldr	r2, [pc, #80]	; (8027250 <HAL_TIM_PWM_Start+0x78>)
 8027200:	4293      	cmp	r3, r2
 8027202:	d101      	bne.n	8027208 <HAL_TIM_PWM_Start+0x30>
 8027204:	2301      	movs	r3, #1
 8027206:	e000      	b.n	802720a <HAL_TIM_PWM_Start+0x32>
 8027208:	2300      	movs	r3, #0
 802720a:	2b00      	cmp	r3, #0
 802720c:	d007      	beq.n	802721e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802720e:	687b      	ldr	r3, [r7, #4]
 8027210:	681b      	ldr	r3, [r3, #0]
 8027212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8027214:	687b      	ldr	r3, [r7, #4]
 8027216:	681b      	ldr	r3, [r3, #0]
 8027218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802721c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802721e:	687b      	ldr	r3, [r7, #4]
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	689b      	ldr	r3, [r3, #8]
 8027224:	f003 0307 	and.w	r3, r3, #7
 8027228:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802722a:	68fb      	ldr	r3, [r7, #12]
 802722c:	2b06      	cmp	r3, #6
 802722e:	d007      	beq.n	8027240 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8027230:	687b      	ldr	r3, [r7, #4]
 8027232:	681b      	ldr	r3, [r3, #0]
 8027234:	681a      	ldr	r2, [r3, #0]
 8027236:	687b      	ldr	r3, [r7, #4]
 8027238:	681b      	ldr	r3, [r3, #0]
 802723a:	f042 0201 	orr.w	r2, r2, #1
 802723e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8027240:	2300      	movs	r3, #0
}
 8027242:	4618      	mov	r0, r3
 8027244:	3710      	adds	r7, #16
 8027246:	46bd      	mov	sp, r7
 8027248:	bd80      	pop	{r7, pc}
 802724a:	bf00      	nop
 802724c:	40010000 	.word	0x40010000
 8027250:	40010400 	.word	0x40010400

08027254 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8027254:	b580      	push	{r7, lr}
 8027256:	b084      	sub	sp, #16
 8027258:	af00      	add	r7, sp, #0
 802725a:	60f8      	str	r0, [r7, #12]
 802725c:	60b9      	str	r1, [r7, #8]
 802725e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8027260:	68fb      	ldr	r3, [r7, #12]
 8027262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8027266:	2b01      	cmp	r3, #1
 8027268:	d101      	bne.n	802726e <HAL_TIM_OC_ConfigChannel+0x1a>
 802726a:	2302      	movs	r3, #2
 802726c:	e04e      	b.n	802730c <HAL_TIM_OC_ConfigChannel+0xb8>
 802726e:	68fb      	ldr	r3, [r7, #12]
 8027270:	2201      	movs	r2, #1
 8027272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8027276:	68fb      	ldr	r3, [r7, #12]
 8027278:	2202      	movs	r2, #2
 802727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	2b0c      	cmp	r3, #12
 8027282:	d839      	bhi.n	80272f8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8027284:	a201      	add	r2, pc, #4	; (adr r2, 802728c <HAL_TIM_OC_ConfigChannel+0x38>)
 8027286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802728a:	bf00      	nop
 802728c:	080272c1 	.word	0x080272c1
 8027290:	080272f9 	.word	0x080272f9
 8027294:	080272f9 	.word	0x080272f9
 8027298:	080272f9 	.word	0x080272f9
 802729c:	080272cf 	.word	0x080272cf
 80272a0:	080272f9 	.word	0x080272f9
 80272a4:	080272f9 	.word	0x080272f9
 80272a8:	080272f9 	.word	0x080272f9
 80272ac:	080272dd 	.word	0x080272dd
 80272b0:	080272f9 	.word	0x080272f9
 80272b4:	080272f9 	.word	0x080272f9
 80272b8:	080272f9 	.word	0x080272f9
 80272bc:	080272eb 	.word	0x080272eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80272c0:	68fb      	ldr	r3, [r7, #12]
 80272c2:	681b      	ldr	r3, [r3, #0]
 80272c4:	68b9      	ldr	r1, [r7, #8]
 80272c6:	4618      	mov	r0, r3
 80272c8:	f000 f8c4 	bl	8027454 <TIM_OC1_SetConfig>
      break;
 80272cc:	e015      	b.n	80272fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80272ce:	68fb      	ldr	r3, [r7, #12]
 80272d0:	681b      	ldr	r3, [r3, #0]
 80272d2:	68b9      	ldr	r1, [r7, #8]
 80272d4:	4618      	mov	r0, r3
 80272d6:	f000 f92d 	bl	8027534 <TIM_OC2_SetConfig>
      break;
 80272da:	e00e      	b.n	80272fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80272dc:	68fb      	ldr	r3, [r7, #12]
 80272de:	681b      	ldr	r3, [r3, #0]
 80272e0:	68b9      	ldr	r1, [r7, #8]
 80272e2:	4618      	mov	r0, r3
 80272e4:	f000 f99c 	bl	8027620 <TIM_OC3_SetConfig>
      break;
 80272e8:	e007      	b.n	80272fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80272ea:	68fb      	ldr	r3, [r7, #12]
 80272ec:	681b      	ldr	r3, [r3, #0]
 80272ee:	68b9      	ldr	r1, [r7, #8]
 80272f0:	4618      	mov	r0, r3
 80272f2:	f000 fa09 	bl	8027708 <TIM_OC4_SetConfig>
      break;
 80272f6:	e000      	b.n	80272fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80272f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80272fa:	68fb      	ldr	r3, [r7, #12]
 80272fc:	2201      	movs	r2, #1
 80272fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8027302:	68fb      	ldr	r3, [r7, #12]
 8027304:	2200      	movs	r2, #0
 8027306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802730a:	2300      	movs	r3, #0
}
 802730c:	4618      	mov	r0, r3
 802730e:	3710      	adds	r7, #16
 8027310:	46bd      	mov	sp, r7
 8027312:	bd80      	pop	{r7, pc}

08027314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8027314:	b480      	push	{r7}
 8027316:	b085      	sub	sp, #20
 8027318:	af00      	add	r7, sp, #0
 802731a:	6078      	str	r0, [r7, #4]
 802731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802731e:	687b      	ldr	r3, [r7, #4]
 8027320:	681b      	ldr	r3, [r3, #0]
 8027322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8027324:	687b      	ldr	r3, [r7, #4]
 8027326:	4a40      	ldr	r2, [pc, #256]	; (8027428 <TIM_Base_SetConfig+0x114>)
 8027328:	4293      	cmp	r3, r2
 802732a:	d013      	beq.n	8027354 <TIM_Base_SetConfig+0x40>
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027332:	d00f      	beq.n	8027354 <TIM_Base_SetConfig+0x40>
 8027334:	687b      	ldr	r3, [r7, #4]
 8027336:	4a3d      	ldr	r2, [pc, #244]	; (802742c <TIM_Base_SetConfig+0x118>)
 8027338:	4293      	cmp	r3, r2
 802733a:	d00b      	beq.n	8027354 <TIM_Base_SetConfig+0x40>
 802733c:	687b      	ldr	r3, [r7, #4]
 802733e:	4a3c      	ldr	r2, [pc, #240]	; (8027430 <TIM_Base_SetConfig+0x11c>)
 8027340:	4293      	cmp	r3, r2
 8027342:	d007      	beq.n	8027354 <TIM_Base_SetConfig+0x40>
 8027344:	687b      	ldr	r3, [r7, #4]
 8027346:	4a3b      	ldr	r2, [pc, #236]	; (8027434 <TIM_Base_SetConfig+0x120>)
 8027348:	4293      	cmp	r3, r2
 802734a:	d003      	beq.n	8027354 <TIM_Base_SetConfig+0x40>
 802734c:	687b      	ldr	r3, [r7, #4]
 802734e:	4a3a      	ldr	r2, [pc, #232]	; (8027438 <TIM_Base_SetConfig+0x124>)
 8027350:	4293      	cmp	r3, r2
 8027352:	d108      	bne.n	8027366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8027354:	68fb      	ldr	r3, [r7, #12]
 8027356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802735a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802735c:	683b      	ldr	r3, [r7, #0]
 802735e:	685b      	ldr	r3, [r3, #4]
 8027360:	68fa      	ldr	r2, [r7, #12]
 8027362:	4313      	orrs	r3, r2
 8027364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8027366:	687b      	ldr	r3, [r7, #4]
 8027368:	4a2f      	ldr	r2, [pc, #188]	; (8027428 <TIM_Base_SetConfig+0x114>)
 802736a:	4293      	cmp	r3, r2
 802736c:	d02b      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 802736e:	687b      	ldr	r3, [r7, #4]
 8027370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027374:	d027      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 8027376:	687b      	ldr	r3, [r7, #4]
 8027378:	4a2c      	ldr	r2, [pc, #176]	; (802742c <TIM_Base_SetConfig+0x118>)
 802737a:	4293      	cmp	r3, r2
 802737c:	d023      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 802737e:	687b      	ldr	r3, [r7, #4]
 8027380:	4a2b      	ldr	r2, [pc, #172]	; (8027430 <TIM_Base_SetConfig+0x11c>)
 8027382:	4293      	cmp	r3, r2
 8027384:	d01f      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	4a2a      	ldr	r2, [pc, #168]	; (8027434 <TIM_Base_SetConfig+0x120>)
 802738a:	4293      	cmp	r3, r2
 802738c:	d01b      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 802738e:	687b      	ldr	r3, [r7, #4]
 8027390:	4a29      	ldr	r2, [pc, #164]	; (8027438 <TIM_Base_SetConfig+0x124>)
 8027392:	4293      	cmp	r3, r2
 8027394:	d017      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 8027396:	687b      	ldr	r3, [r7, #4]
 8027398:	4a28      	ldr	r2, [pc, #160]	; (802743c <TIM_Base_SetConfig+0x128>)
 802739a:	4293      	cmp	r3, r2
 802739c:	d013      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 802739e:	687b      	ldr	r3, [r7, #4]
 80273a0:	4a27      	ldr	r2, [pc, #156]	; (8027440 <TIM_Base_SetConfig+0x12c>)
 80273a2:	4293      	cmp	r3, r2
 80273a4:	d00f      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 80273a6:	687b      	ldr	r3, [r7, #4]
 80273a8:	4a26      	ldr	r2, [pc, #152]	; (8027444 <TIM_Base_SetConfig+0x130>)
 80273aa:	4293      	cmp	r3, r2
 80273ac:	d00b      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 80273ae:	687b      	ldr	r3, [r7, #4]
 80273b0:	4a25      	ldr	r2, [pc, #148]	; (8027448 <TIM_Base_SetConfig+0x134>)
 80273b2:	4293      	cmp	r3, r2
 80273b4:	d007      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 80273b6:	687b      	ldr	r3, [r7, #4]
 80273b8:	4a24      	ldr	r2, [pc, #144]	; (802744c <TIM_Base_SetConfig+0x138>)
 80273ba:	4293      	cmp	r3, r2
 80273bc:	d003      	beq.n	80273c6 <TIM_Base_SetConfig+0xb2>
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	4a23      	ldr	r2, [pc, #140]	; (8027450 <TIM_Base_SetConfig+0x13c>)
 80273c2:	4293      	cmp	r3, r2
 80273c4:	d108      	bne.n	80273d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80273c6:	68fb      	ldr	r3, [r7, #12]
 80273c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80273cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80273ce:	683b      	ldr	r3, [r7, #0]
 80273d0:	68db      	ldr	r3, [r3, #12]
 80273d2:	68fa      	ldr	r2, [r7, #12]
 80273d4:	4313      	orrs	r3, r2
 80273d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80273d8:	68fb      	ldr	r3, [r7, #12]
 80273da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80273de:	683b      	ldr	r3, [r7, #0]
 80273e0:	695b      	ldr	r3, [r3, #20]
 80273e2:	4313      	orrs	r3, r2
 80273e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80273e6:	687b      	ldr	r3, [r7, #4]
 80273e8:	68fa      	ldr	r2, [r7, #12]
 80273ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80273ec:	683b      	ldr	r3, [r7, #0]
 80273ee:	689a      	ldr	r2, [r3, #8]
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80273f4:	683b      	ldr	r3, [r7, #0]
 80273f6:	681a      	ldr	r2, [r3, #0]
 80273f8:	687b      	ldr	r3, [r7, #4]
 80273fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80273fc:	687b      	ldr	r3, [r7, #4]
 80273fe:	4a0a      	ldr	r2, [pc, #40]	; (8027428 <TIM_Base_SetConfig+0x114>)
 8027400:	4293      	cmp	r3, r2
 8027402:	d003      	beq.n	802740c <TIM_Base_SetConfig+0xf8>
 8027404:	687b      	ldr	r3, [r7, #4]
 8027406:	4a0c      	ldr	r2, [pc, #48]	; (8027438 <TIM_Base_SetConfig+0x124>)
 8027408:	4293      	cmp	r3, r2
 802740a:	d103      	bne.n	8027414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802740c:	683b      	ldr	r3, [r7, #0]
 802740e:	691a      	ldr	r2, [r3, #16]
 8027410:	687b      	ldr	r3, [r7, #4]
 8027412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8027414:	687b      	ldr	r3, [r7, #4]
 8027416:	2201      	movs	r2, #1
 8027418:	615a      	str	r2, [r3, #20]
}
 802741a:	bf00      	nop
 802741c:	3714      	adds	r7, #20
 802741e:	46bd      	mov	sp, r7
 8027420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027424:	4770      	bx	lr
 8027426:	bf00      	nop
 8027428:	40010000 	.word	0x40010000
 802742c:	40000400 	.word	0x40000400
 8027430:	40000800 	.word	0x40000800
 8027434:	40000c00 	.word	0x40000c00
 8027438:	40010400 	.word	0x40010400
 802743c:	40014000 	.word	0x40014000
 8027440:	40014400 	.word	0x40014400
 8027444:	40014800 	.word	0x40014800
 8027448:	40001800 	.word	0x40001800
 802744c:	40001c00 	.word	0x40001c00
 8027450:	40002000 	.word	0x40002000

08027454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027454:	b480      	push	{r7}
 8027456:	b087      	sub	sp, #28
 8027458:	af00      	add	r7, sp, #0
 802745a:	6078      	str	r0, [r7, #4]
 802745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802745e:	687b      	ldr	r3, [r7, #4]
 8027460:	6a1b      	ldr	r3, [r3, #32]
 8027462:	f023 0201 	bic.w	r2, r3, #1
 8027466:	687b      	ldr	r3, [r7, #4]
 8027468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802746a:	687b      	ldr	r3, [r7, #4]
 802746c:	6a1b      	ldr	r3, [r3, #32]
 802746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027470:	687b      	ldr	r3, [r7, #4]
 8027472:	685b      	ldr	r3, [r3, #4]
 8027474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8027476:	687b      	ldr	r3, [r7, #4]
 8027478:	699b      	ldr	r3, [r3, #24]
 802747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802747c:	68fb      	ldr	r3, [r7, #12]
 802747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8027482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8027484:	68fb      	ldr	r3, [r7, #12]
 8027486:	f023 0303 	bic.w	r3, r3, #3
 802748a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802748c:	683b      	ldr	r3, [r7, #0]
 802748e:	681b      	ldr	r3, [r3, #0]
 8027490:	68fa      	ldr	r2, [r7, #12]
 8027492:	4313      	orrs	r3, r2
 8027494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8027496:	697b      	ldr	r3, [r7, #20]
 8027498:	f023 0302 	bic.w	r3, r3, #2
 802749c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802749e:	683b      	ldr	r3, [r7, #0]
 80274a0:	689b      	ldr	r3, [r3, #8]
 80274a2:	697a      	ldr	r2, [r7, #20]
 80274a4:	4313      	orrs	r3, r2
 80274a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	4a20      	ldr	r2, [pc, #128]	; (802752c <TIM_OC1_SetConfig+0xd8>)
 80274ac:	4293      	cmp	r3, r2
 80274ae:	d003      	beq.n	80274b8 <TIM_OC1_SetConfig+0x64>
 80274b0:	687b      	ldr	r3, [r7, #4]
 80274b2:	4a1f      	ldr	r2, [pc, #124]	; (8027530 <TIM_OC1_SetConfig+0xdc>)
 80274b4:	4293      	cmp	r3, r2
 80274b6:	d10c      	bne.n	80274d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80274b8:	697b      	ldr	r3, [r7, #20]
 80274ba:	f023 0308 	bic.w	r3, r3, #8
 80274be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80274c0:	683b      	ldr	r3, [r7, #0]
 80274c2:	68db      	ldr	r3, [r3, #12]
 80274c4:	697a      	ldr	r2, [r7, #20]
 80274c6:	4313      	orrs	r3, r2
 80274c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80274ca:	697b      	ldr	r3, [r7, #20]
 80274cc:	f023 0304 	bic.w	r3, r3, #4
 80274d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80274d2:	687b      	ldr	r3, [r7, #4]
 80274d4:	4a15      	ldr	r2, [pc, #84]	; (802752c <TIM_OC1_SetConfig+0xd8>)
 80274d6:	4293      	cmp	r3, r2
 80274d8:	d003      	beq.n	80274e2 <TIM_OC1_SetConfig+0x8e>
 80274da:	687b      	ldr	r3, [r7, #4]
 80274dc:	4a14      	ldr	r2, [pc, #80]	; (8027530 <TIM_OC1_SetConfig+0xdc>)
 80274de:	4293      	cmp	r3, r2
 80274e0:	d111      	bne.n	8027506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80274e2:	693b      	ldr	r3, [r7, #16]
 80274e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80274e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80274ea:	693b      	ldr	r3, [r7, #16]
 80274ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80274f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80274f2:	683b      	ldr	r3, [r7, #0]
 80274f4:	695b      	ldr	r3, [r3, #20]
 80274f6:	693a      	ldr	r2, [r7, #16]
 80274f8:	4313      	orrs	r3, r2
 80274fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80274fc:	683b      	ldr	r3, [r7, #0]
 80274fe:	699b      	ldr	r3, [r3, #24]
 8027500:	693a      	ldr	r2, [r7, #16]
 8027502:	4313      	orrs	r3, r2
 8027504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027506:	687b      	ldr	r3, [r7, #4]
 8027508:	693a      	ldr	r2, [r7, #16]
 802750a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802750c:	687b      	ldr	r3, [r7, #4]
 802750e:	68fa      	ldr	r2, [r7, #12]
 8027510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8027512:	683b      	ldr	r3, [r7, #0]
 8027514:	685a      	ldr	r2, [r3, #4]
 8027516:	687b      	ldr	r3, [r7, #4]
 8027518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802751a:	687b      	ldr	r3, [r7, #4]
 802751c:	697a      	ldr	r2, [r7, #20]
 802751e:	621a      	str	r2, [r3, #32]
}
 8027520:	bf00      	nop
 8027522:	371c      	adds	r7, #28
 8027524:	46bd      	mov	sp, r7
 8027526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802752a:	4770      	bx	lr
 802752c:	40010000 	.word	0x40010000
 8027530:	40010400 	.word	0x40010400

08027534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027534:	b480      	push	{r7}
 8027536:	b087      	sub	sp, #28
 8027538:	af00      	add	r7, sp, #0
 802753a:	6078      	str	r0, [r7, #4]
 802753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	6a1b      	ldr	r3, [r3, #32]
 8027542:	f023 0210 	bic.w	r2, r3, #16
 8027546:	687b      	ldr	r3, [r7, #4]
 8027548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802754a:	687b      	ldr	r3, [r7, #4]
 802754c:	6a1b      	ldr	r3, [r3, #32]
 802754e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027550:	687b      	ldr	r3, [r7, #4]
 8027552:	685b      	ldr	r3, [r3, #4]
 8027554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8027556:	687b      	ldr	r3, [r7, #4]
 8027558:	699b      	ldr	r3, [r3, #24]
 802755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802755c:	68fb      	ldr	r3, [r7, #12]
 802755e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8027562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8027564:	68fb      	ldr	r3, [r7, #12]
 8027566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802756a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802756c:	683b      	ldr	r3, [r7, #0]
 802756e:	681b      	ldr	r3, [r3, #0]
 8027570:	021b      	lsls	r3, r3, #8
 8027572:	68fa      	ldr	r2, [r7, #12]
 8027574:	4313      	orrs	r3, r2
 8027576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8027578:	697b      	ldr	r3, [r7, #20]
 802757a:	f023 0320 	bic.w	r3, r3, #32
 802757e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8027580:	683b      	ldr	r3, [r7, #0]
 8027582:	689b      	ldr	r3, [r3, #8]
 8027584:	011b      	lsls	r3, r3, #4
 8027586:	697a      	ldr	r2, [r7, #20]
 8027588:	4313      	orrs	r3, r2
 802758a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802758c:	687b      	ldr	r3, [r7, #4]
 802758e:	4a22      	ldr	r2, [pc, #136]	; (8027618 <TIM_OC2_SetConfig+0xe4>)
 8027590:	4293      	cmp	r3, r2
 8027592:	d003      	beq.n	802759c <TIM_OC2_SetConfig+0x68>
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	4a21      	ldr	r2, [pc, #132]	; (802761c <TIM_OC2_SetConfig+0xe8>)
 8027598:	4293      	cmp	r3, r2
 802759a:	d10d      	bne.n	80275b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802759c:	697b      	ldr	r3, [r7, #20]
 802759e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80275a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80275a4:	683b      	ldr	r3, [r7, #0]
 80275a6:	68db      	ldr	r3, [r3, #12]
 80275a8:	011b      	lsls	r3, r3, #4
 80275aa:	697a      	ldr	r2, [r7, #20]
 80275ac:	4313      	orrs	r3, r2
 80275ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80275b0:	697b      	ldr	r3, [r7, #20]
 80275b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80275b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80275b8:	687b      	ldr	r3, [r7, #4]
 80275ba:	4a17      	ldr	r2, [pc, #92]	; (8027618 <TIM_OC2_SetConfig+0xe4>)
 80275bc:	4293      	cmp	r3, r2
 80275be:	d003      	beq.n	80275c8 <TIM_OC2_SetConfig+0x94>
 80275c0:	687b      	ldr	r3, [r7, #4]
 80275c2:	4a16      	ldr	r2, [pc, #88]	; (802761c <TIM_OC2_SetConfig+0xe8>)
 80275c4:	4293      	cmp	r3, r2
 80275c6:	d113      	bne.n	80275f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80275c8:	693b      	ldr	r3, [r7, #16]
 80275ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80275ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80275d0:	693b      	ldr	r3, [r7, #16]
 80275d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80275d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80275d8:	683b      	ldr	r3, [r7, #0]
 80275da:	695b      	ldr	r3, [r3, #20]
 80275dc:	009b      	lsls	r3, r3, #2
 80275de:	693a      	ldr	r2, [r7, #16]
 80275e0:	4313      	orrs	r3, r2
 80275e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80275e4:	683b      	ldr	r3, [r7, #0]
 80275e6:	699b      	ldr	r3, [r3, #24]
 80275e8:	009b      	lsls	r3, r3, #2
 80275ea:	693a      	ldr	r2, [r7, #16]
 80275ec:	4313      	orrs	r3, r2
 80275ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80275f0:	687b      	ldr	r3, [r7, #4]
 80275f2:	693a      	ldr	r2, [r7, #16]
 80275f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80275f6:	687b      	ldr	r3, [r7, #4]
 80275f8:	68fa      	ldr	r2, [r7, #12]
 80275fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80275fc:	683b      	ldr	r3, [r7, #0]
 80275fe:	685a      	ldr	r2, [r3, #4]
 8027600:	687b      	ldr	r3, [r7, #4]
 8027602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027604:	687b      	ldr	r3, [r7, #4]
 8027606:	697a      	ldr	r2, [r7, #20]
 8027608:	621a      	str	r2, [r3, #32]
}
 802760a:	bf00      	nop
 802760c:	371c      	adds	r7, #28
 802760e:	46bd      	mov	sp, r7
 8027610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027614:	4770      	bx	lr
 8027616:	bf00      	nop
 8027618:	40010000 	.word	0x40010000
 802761c:	40010400 	.word	0x40010400

08027620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027620:	b480      	push	{r7}
 8027622:	b087      	sub	sp, #28
 8027624:	af00      	add	r7, sp, #0
 8027626:	6078      	str	r0, [r7, #4]
 8027628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802762a:	687b      	ldr	r3, [r7, #4]
 802762c:	6a1b      	ldr	r3, [r3, #32]
 802762e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8027632:	687b      	ldr	r3, [r7, #4]
 8027634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8027636:	687b      	ldr	r3, [r7, #4]
 8027638:	6a1b      	ldr	r3, [r3, #32]
 802763a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802763c:	687b      	ldr	r3, [r7, #4]
 802763e:	685b      	ldr	r3, [r3, #4]
 8027640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8027642:	687b      	ldr	r3, [r7, #4]
 8027644:	69db      	ldr	r3, [r3, #28]
 8027646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8027648:	68fb      	ldr	r3, [r7, #12]
 802764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802764e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8027650:	68fb      	ldr	r3, [r7, #12]
 8027652:	f023 0303 	bic.w	r3, r3, #3
 8027656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8027658:	683b      	ldr	r3, [r7, #0]
 802765a:	681b      	ldr	r3, [r3, #0]
 802765c:	68fa      	ldr	r2, [r7, #12]
 802765e:	4313      	orrs	r3, r2
 8027660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8027662:	697b      	ldr	r3, [r7, #20]
 8027664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802766a:	683b      	ldr	r3, [r7, #0]
 802766c:	689b      	ldr	r3, [r3, #8]
 802766e:	021b      	lsls	r3, r3, #8
 8027670:	697a      	ldr	r2, [r7, #20]
 8027672:	4313      	orrs	r3, r2
 8027674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8027676:	687b      	ldr	r3, [r7, #4]
 8027678:	4a21      	ldr	r2, [pc, #132]	; (8027700 <TIM_OC3_SetConfig+0xe0>)
 802767a:	4293      	cmp	r3, r2
 802767c:	d003      	beq.n	8027686 <TIM_OC3_SetConfig+0x66>
 802767e:	687b      	ldr	r3, [r7, #4]
 8027680:	4a20      	ldr	r2, [pc, #128]	; (8027704 <TIM_OC3_SetConfig+0xe4>)
 8027682:	4293      	cmp	r3, r2
 8027684:	d10d      	bne.n	80276a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8027686:	697b      	ldr	r3, [r7, #20]
 8027688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802768c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802768e:	683b      	ldr	r3, [r7, #0]
 8027690:	68db      	ldr	r3, [r3, #12]
 8027692:	021b      	lsls	r3, r3, #8
 8027694:	697a      	ldr	r2, [r7, #20]
 8027696:	4313      	orrs	r3, r2
 8027698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802769a:	697b      	ldr	r3, [r7, #20]
 802769c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80276a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80276a2:	687b      	ldr	r3, [r7, #4]
 80276a4:	4a16      	ldr	r2, [pc, #88]	; (8027700 <TIM_OC3_SetConfig+0xe0>)
 80276a6:	4293      	cmp	r3, r2
 80276a8:	d003      	beq.n	80276b2 <TIM_OC3_SetConfig+0x92>
 80276aa:	687b      	ldr	r3, [r7, #4]
 80276ac:	4a15      	ldr	r2, [pc, #84]	; (8027704 <TIM_OC3_SetConfig+0xe4>)
 80276ae:	4293      	cmp	r3, r2
 80276b0:	d113      	bne.n	80276da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80276b2:	693b      	ldr	r3, [r7, #16]
 80276b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80276b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80276ba:	693b      	ldr	r3, [r7, #16]
 80276bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80276c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80276c2:	683b      	ldr	r3, [r7, #0]
 80276c4:	695b      	ldr	r3, [r3, #20]
 80276c6:	011b      	lsls	r3, r3, #4
 80276c8:	693a      	ldr	r2, [r7, #16]
 80276ca:	4313      	orrs	r3, r2
 80276cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80276ce:	683b      	ldr	r3, [r7, #0]
 80276d0:	699b      	ldr	r3, [r3, #24]
 80276d2:	011b      	lsls	r3, r3, #4
 80276d4:	693a      	ldr	r2, [r7, #16]
 80276d6:	4313      	orrs	r3, r2
 80276d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80276da:	687b      	ldr	r3, [r7, #4]
 80276dc:	693a      	ldr	r2, [r7, #16]
 80276de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80276e0:	687b      	ldr	r3, [r7, #4]
 80276e2:	68fa      	ldr	r2, [r7, #12]
 80276e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80276e6:	683b      	ldr	r3, [r7, #0]
 80276e8:	685a      	ldr	r2, [r3, #4]
 80276ea:	687b      	ldr	r3, [r7, #4]
 80276ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80276ee:	687b      	ldr	r3, [r7, #4]
 80276f0:	697a      	ldr	r2, [r7, #20]
 80276f2:	621a      	str	r2, [r3, #32]
}
 80276f4:	bf00      	nop
 80276f6:	371c      	adds	r7, #28
 80276f8:	46bd      	mov	sp, r7
 80276fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276fe:	4770      	bx	lr
 8027700:	40010000 	.word	0x40010000
 8027704:	40010400 	.word	0x40010400

08027708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027708:	b480      	push	{r7}
 802770a:	b087      	sub	sp, #28
 802770c:	af00      	add	r7, sp, #0
 802770e:	6078      	str	r0, [r7, #4]
 8027710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	6a1b      	ldr	r3, [r3, #32]
 8027716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802771a:	687b      	ldr	r3, [r7, #4]
 802771c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	6a1b      	ldr	r3, [r3, #32]
 8027722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027724:	687b      	ldr	r3, [r7, #4]
 8027726:	685b      	ldr	r3, [r3, #4]
 8027728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802772a:	687b      	ldr	r3, [r7, #4]
 802772c:	69db      	ldr	r3, [r3, #28]
 802772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8027730:	68fb      	ldr	r3, [r7, #12]
 8027732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8027736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8027738:	68fb      	ldr	r3, [r7, #12]
 802773a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802773e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8027740:	683b      	ldr	r3, [r7, #0]
 8027742:	681b      	ldr	r3, [r3, #0]
 8027744:	021b      	lsls	r3, r3, #8
 8027746:	68fa      	ldr	r2, [r7, #12]
 8027748:	4313      	orrs	r3, r2
 802774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802774c:	693b      	ldr	r3, [r7, #16]
 802774e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8027752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8027754:	683b      	ldr	r3, [r7, #0]
 8027756:	689b      	ldr	r3, [r3, #8]
 8027758:	031b      	lsls	r3, r3, #12
 802775a:	693a      	ldr	r2, [r7, #16]
 802775c:	4313      	orrs	r3, r2
 802775e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	4a12      	ldr	r2, [pc, #72]	; (80277ac <TIM_OC4_SetConfig+0xa4>)
 8027764:	4293      	cmp	r3, r2
 8027766:	d003      	beq.n	8027770 <TIM_OC4_SetConfig+0x68>
 8027768:	687b      	ldr	r3, [r7, #4]
 802776a:	4a11      	ldr	r2, [pc, #68]	; (80277b0 <TIM_OC4_SetConfig+0xa8>)
 802776c:	4293      	cmp	r3, r2
 802776e:	d109      	bne.n	8027784 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8027770:	697b      	ldr	r3, [r7, #20]
 8027772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8027776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8027778:	683b      	ldr	r3, [r7, #0]
 802777a:	695b      	ldr	r3, [r3, #20]
 802777c:	019b      	lsls	r3, r3, #6
 802777e:	697a      	ldr	r2, [r7, #20]
 8027780:	4313      	orrs	r3, r2
 8027782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027784:	687b      	ldr	r3, [r7, #4]
 8027786:	697a      	ldr	r2, [r7, #20]
 8027788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802778a:	687b      	ldr	r3, [r7, #4]
 802778c:	68fa      	ldr	r2, [r7, #12]
 802778e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8027790:	683b      	ldr	r3, [r7, #0]
 8027792:	685a      	ldr	r2, [r3, #4]
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027798:	687b      	ldr	r3, [r7, #4]
 802779a:	693a      	ldr	r2, [r7, #16]
 802779c:	621a      	str	r2, [r3, #32]
}
 802779e:	bf00      	nop
 80277a0:	371c      	adds	r7, #28
 80277a2:	46bd      	mov	sp, r7
 80277a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277a8:	4770      	bx	lr
 80277aa:	bf00      	nop
 80277ac:	40010000 	.word	0x40010000
 80277b0:	40010400 	.word	0x40010400

080277b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80277b4:	b480      	push	{r7}
 80277b6:	b087      	sub	sp, #28
 80277b8:	af00      	add	r7, sp, #0
 80277ba:	60f8      	str	r0, [r7, #12]
 80277bc:	60b9      	str	r1, [r7, #8]
 80277be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80277c0:	68bb      	ldr	r3, [r7, #8]
 80277c2:	f003 031f 	and.w	r3, r3, #31
 80277c6:	2201      	movs	r2, #1
 80277c8:	fa02 f303 	lsl.w	r3, r2, r3
 80277cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80277ce:	68fb      	ldr	r3, [r7, #12]
 80277d0:	6a1a      	ldr	r2, [r3, #32]
 80277d2:	697b      	ldr	r3, [r7, #20]
 80277d4:	43db      	mvns	r3, r3
 80277d6:	401a      	ands	r2, r3
 80277d8:	68fb      	ldr	r3, [r7, #12]
 80277da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	6a1a      	ldr	r2, [r3, #32]
 80277e0:	68bb      	ldr	r3, [r7, #8]
 80277e2:	f003 031f 	and.w	r3, r3, #31
 80277e6:	6879      	ldr	r1, [r7, #4]
 80277e8:	fa01 f303 	lsl.w	r3, r1, r3
 80277ec:	431a      	orrs	r2, r3
 80277ee:	68fb      	ldr	r3, [r7, #12]
 80277f0:	621a      	str	r2, [r3, #32]
}
 80277f2:	bf00      	nop
 80277f4:	371c      	adds	r7, #28
 80277f6:	46bd      	mov	sp, r7
 80277f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277fc:	4770      	bx	lr

080277fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80277fe:	b580      	push	{r7, lr}
 8027800:	b082      	sub	sp, #8
 8027802:	af00      	add	r7, sp, #0
 8027804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8027806:	687b      	ldr	r3, [r7, #4]
 8027808:	2b00      	cmp	r3, #0
 802780a:	d101      	bne.n	8027810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802780c:	2301      	movs	r3, #1
 802780e:	e03f      	b.n	8027890 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8027810:	687b      	ldr	r3, [r7, #4]
 8027812:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8027816:	b2db      	uxtb	r3, r3
 8027818:	2b00      	cmp	r3, #0
 802781a:	d106      	bne.n	802782a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802781c:	687b      	ldr	r3, [r7, #4]
 802781e:	2200      	movs	r2, #0
 8027820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8027824:	6878      	ldr	r0, [r7, #4]
 8027826:	f7fb fd53 	bl	80232d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	2224      	movs	r2, #36	; 0x24
 802782e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8027832:	687b      	ldr	r3, [r7, #4]
 8027834:	681b      	ldr	r3, [r3, #0]
 8027836:	68da      	ldr	r2, [r3, #12]
 8027838:	687b      	ldr	r3, [r7, #4]
 802783a:	681b      	ldr	r3, [r3, #0]
 802783c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027840:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8027842:	6878      	ldr	r0, [r7, #4]
 8027844:	f000 f90c 	bl	8027a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	681b      	ldr	r3, [r3, #0]
 802784c:	691a      	ldr	r2, [r3, #16]
 802784e:	687b      	ldr	r3, [r7, #4]
 8027850:	681b      	ldr	r3, [r3, #0]
 8027852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8027856:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8027858:	687b      	ldr	r3, [r7, #4]
 802785a:	681b      	ldr	r3, [r3, #0]
 802785c:	695a      	ldr	r2, [r3, #20]
 802785e:	687b      	ldr	r3, [r7, #4]
 8027860:	681b      	ldr	r3, [r3, #0]
 8027862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8027866:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	681b      	ldr	r3, [r3, #0]
 802786c:	68da      	ldr	r2, [r3, #12]
 802786e:	687b      	ldr	r3, [r7, #4]
 8027870:	681b      	ldr	r3, [r3, #0]
 8027872:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027876:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8027878:	687b      	ldr	r3, [r7, #4]
 802787a:	2200      	movs	r2, #0
 802787c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 802787e:	687b      	ldr	r3, [r7, #4]
 8027880:	2220      	movs	r2, #32
 8027882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8027886:	687b      	ldr	r3, [r7, #4]
 8027888:	2220      	movs	r2, #32
 802788a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 802788e:	2300      	movs	r3, #0
}
 8027890:	4618      	mov	r0, r3
 8027892:	3708      	adds	r7, #8
 8027894:	46bd      	mov	sp, r7
 8027896:	bd80      	pop	{r7, pc}

08027898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027898:	b580      	push	{r7, lr}
 802789a:	b088      	sub	sp, #32
 802789c:	af02      	add	r7, sp, #8
 802789e:	60f8      	str	r0, [r7, #12]
 80278a0:	60b9      	str	r1, [r7, #8]
 80278a2:	603b      	str	r3, [r7, #0]
 80278a4:	4613      	mov	r3, r2
 80278a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80278a8:	2300      	movs	r3, #0
 80278aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80278ac:	68fb      	ldr	r3, [r7, #12]
 80278ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80278b2:	b2db      	uxtb	r3, r3
 80278b4:	2b20      	cmp	r3, #32
 80278b6:	f040 8083 	bne.w	80279c0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80278ba:	68bb      	ldr	r3, [r7, #8]
 80278bc:	2b00      	cmp	r3, #0
 80278be:	d002      	beq.n	80278c6 <HAL_UART_Transmit+0x2e>
 80278c0:	88fb      	ldrh	r3, [r7, #6]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d101      	bne.n	80278ca <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80278c6:	2301      	movs	r3, #1
 80278c8:	e07b      	b.n	80279c2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80278ca:	68fb      	ldr	r3, [r7, #12]
 80278cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80278d0:	2b01      	cmp	r3, #1
 80278d2:	d101      	bne.n	80278d8 <HAL_UART_Transmit+0x40>
 80278d4:	2302      	movs	r3, #2
 80278d6:	e074      	b.n	80279c2 <HAL_UART_Transmit+0x12a>
 80278d8:	68fb      	ldr	r3, [r7, #12]
 80278da:	2201      	movs	r2, #1
 80278dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80278e0:	68fb      	ldr	r3, [r7, #12]
 80278e2:	2200      	movs	r2, #0
 80278e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80278e6:	68fb      	ldr	r3, [r7, #12]
 80278e8:	2221      	movs	r2, #33	; 0x21
 80278ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80278ee:	f7fd fb43 	bl	8024f78 <HAL_GetTick>
 80278f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80278f4:	68fb      	ldr	r3, [r7, #12]
 80278f6:	88fa      	ldrh	r2, [r7, #6]
 80278f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80278fa:	68fb      	ldr	r3, [r7, #12]
 80278fc:	88fa      	ldrh	r2, [r7, #6]
 80278fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8027900:	68fb      	ldr	r3, [r7, #12]
 8027902:	2200      	movs	r2, #0
 8027904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8027908:	e042      	b.n	8027990 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 802790a:	68fb      	ldr	r3, [r7, #12]
 802790c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802790e:	b29b      	uxth	r3, r3
 8027910:	3b01      	subs	r3, #1
 8027912:	b29a      	uxth	r2, r3
 8027914:	68fb      	ldr	r3, [r7, #12]
 8027916:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8027918:	68fb      	ldr	r3, [r7, #12]
 802791a:	689b      	ldr	r3, [r3, #8]
 802791c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8027920:	d122      	bne.n	8027968 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8027922:	683b      	ldr	r3, [r7, #0]
 8027924:	9300      	str	r3, [sp, #0]
 8027926:	697b      	ldr	r3, [r7, #20]
 8027928:	2200      	movs	r2, #0
 802792a:	2180      	movs	r1, #128	; 0x80
 802792c:	68f8      	ldr	r0, [r7, #12]
 802792e:	f000 f84c 	bl	80279ca <UART_WaitOnFlagUntilTimeout>
 8027932:	4603      	mov	r3, r0
 8027934:	2b00      	cmp	r3, #0
 8027936:	d001      	beq.n	802793c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8027938:	2303      	movs	r3, #3
 802793a:	e042      	b.n	80279c2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 802793c:	68bb      	ldr	r3, [r7, #8]
 802793e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8027940:	693b      	ldr	r3, [r7, #16]
 8027942:	881b      	ldrh	r3, [r3, #0]
 8027944:	461a      	mov	r2, r3
 8027946:	68fb      	ldr	r3, [r7, #12]
 8027948:	681b      	ldr	r3, [r3, #0]
 802794a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802794e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8027950:	68fb      	ldr	r3, [r7, #12]
 8027952:	691b      	ldr	r3, [r3, #16]
 8027954:	2b00      	cmp	r3, #0
 8027956:	d103      	bne.n	8027960 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8027958:	68bb      	ldr	r3, [r7, #8]
 802795a:	3302      	adds	r3, #2
 802795c:	60bb      	str	r3, [r7, #8]
 802795e:	e017      	b.n	8027990 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8027960:	68bb      	ldr	r3, [r7, #8]
 8027962:	3301      	adds	r3, #1
 8027964:	60bb      	str	r3, [r7, #8]
 8027966:	e013      	b.n	8027990 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8027968:	683b      	ldr	r3, [r7, #0]
 802796a:	9300      	str	r3, [sp, #0]
 802796c:	697b      	ldr	r3, [r7, #20]
 802796e:	2200      	movs	r2, #0
 8027970:	2180      	movs	r1, #128	; 0x80
 8027972:	68f8      	ldr	r0, [r7, #12]
 8027974:	f000 f829 	bl	80279ca <UART_WaitOnFlagUntilTimeout>
 8027978:	4603      	mov	r3, r0
 802797a:	2b00      	cmp	r3, #0
 802797c:	d001      	beq.n	8027982 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 802797e:	2303      	movs	r3, #3
 8027980:	e01f      	b.n	80279c2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8027982:	68bb      	ldr	r3, [r7, #8]
 8027984:	1c5a      	adds	r2, r3, #1
 8027986:	60ba      	str	r2, [r7, #8]
 8027988:	781a      	ldrb	r2, [r3, #0]
 802798a:	68fb      	ldr	r3, [r7, #12]
 802798c:	681b      	ldr	r3, [r3, #0]
 802798e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8027990:	68fb      	ldr	r3, [r7, #12]
 8027992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8027994:	b29b      	uxth	r3, r3
 8027996:	2b00      	cmp	r3, #0
 8027998:	d1b7      	bne.n	802790a <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802799a:	683b      	ldr	r3, [r7, #0]
 802799c:	9300      	str	r3, [sp, #0]
 802799e:	697b      	ldr	r3, [r7, #20]
 80279a0:	2200      	movs	r2, #0
 80279a2:	2140      	movs	r1, #64	; 0x40
 80279a4:	68f8      	ldr	r0, [r7, #12]
 80279a6:	f000 f810 	bl	80279ca <UART_WaitOnFlagUntilTimeout>
 80279aa:	4603      	mov	r3, r0
 80279ac:	2b00      	cmp	r3, #0
 80279ae:	d001      	beq.n	80279b4 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80279b0:	2303      	movs	r3, #3
 80279b2:	e006      	b.n	80279c2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80279b4:	68fb      	ldr	r3, [r7, #12]
 80279b6:	2220      	movs	r2, #32
 80279b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80279bc:	2300      	movs	r3, #0
 80279be:	e000      	b.n	80279c2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80279c0:	2302      	movs	r3, #2
  }
}
 80279c2:	4618      	mov	r0, r3
 80279c4:	3718      	adds	r7, #24
 80279c6:	46bd      	mov	sp, r7
 80279c8:	bd80      	pop	{r7, pc}

080279ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80279ca:	b580      	push	{r7, lr}
 80279cc:	b084      	sub	sp, #16
 80279ce:	af00      	add	r7, sp, #0
 80279d0:	60f8      	str	r0, [r7, #12]
 80279d2:	60b9      	str	r1, [r7, #8]
 80279d4:	603b      	str	r3, [r7, #0]
 80279d6:	4613      	mov	r3, r2
 80279d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80279da:	e02c      	b.n	8027a36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80279dc:	69bb      	ldr	r3, [r7, #24]
 80279de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80279e2:	d028      	beq.n	8027a36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80279e4:	69bb      	ldr	r3, [r7, #24]
 80279e6:	2b00      	cmp	r3, #0
 80279e8:	d007      	beq.n	80279fa <UART_WaitOnFlagUntilTimeout+0x30>
 80279ea:	f7fd fac5 	bl	8024f78 <HAL_GetTick>
 80279ee:	4602      	mov	r2, r0
 80279f0:	683b      	ldr	r3, [r7, #0]
 80279f2:	1ad3      	subs	r3, r2, r3
 80279f4:	69ba      	ldr	r2, [r7, #24]
 80279f6:	429a      	cmp	r2, r3
 80279f8:	d21d      	bcs.n	8027a36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80279fa:	68fb      	ldr	r3, [r7, #12]
 80279fc:	681b      	ldr	r3, [r3, #0]
 80279fe:	68da      	ldr	r2, [r3, #12]
 8027a00:	68fb      	ldr	r3, [r7, #12]
 8027a02:	681b      	ldr	r3, [r3, #0]
 8027a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8027a08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8027a0a:	68fb      	ldr	r3, [r7, #12]
 8027a0c:	681b      	ldr	r3, [r3, #0]
 8027a0e:	695a      	ldr	r2, [r3, #20]
 8027a10:	68fb      	ldr	r3, [r7, #12]
 8027a12:	681b      	ldr	r3, [r3, #0]
 8027a14:	f022 0201 	bic.w	r2, r2, #1
 8027a18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8027a1a:	68fb      	ldr	r3, [r7, #12]
 8027a1c:	2220      	movs	r2, #32
 8027a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8027a22:	68fb      	ldr	r3, [r7, #12]
 8027a24:	2220      	movs	r2, #32
 8027a26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8027a2a:	68fb      	ldr	r3, [r7, #12]
 8027a2c:	2200      	movs	r2, #0
 8027a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8027a32:	2303      	movs	r3, #3
 8027a34:	e00f      	b.n	8027a56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8027a36:	68fb      	ldr	r3, [r7, #12]
 8027a38:	681b      	ldr	r3, [r3, #0]
 8027a3a:	681a      	ldr	r2, [r3, #0]
 8027a3c:	68bb      	ldr	r3, [r7, #8]
 8027a3e:	4013      	ands	r3, r2
 8027a40:	68ba      	ldr	r2, [r7, #8]
 8027a42:	429a      	cmp	r2, r3
 8027a44:	bf0c      	ite	eq
 8027a46:	2301      	moveq	r3, #1
 8027a48:	2300      	movne	r3, #0
 8027a4a:	b2db      	uxtb	r3, r3
 8027a4c:	461a      	mov	r2, r3
 8027a4e:	79fb      	ldrb	r3, [r7, #7]
 8027a50:	429a      	cmp	r2, r3
 8027a52:	d0c3      	beq.n	80279dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8027a54:	2300      	movs	r3, #0
}
 8027a56:	4618      	mov	r0, r3
 8027a58:	3710      	adds	r7, #16
 8027a5a:	46bd      	mov	sp, r7
 8027a5c:	bd80      	pop	{r7, pc}
	...

08027a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8027a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a64:	b0bd      	sub	sp, #244	; 0xf4
 8027a66:	af00      	add	r7, sp, #0
 8027a68:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8027a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027a70:	681b      	ldr	r3, [r3, #0]
 8027a72:	691b      	ldr	r3, [r3, #16]
 8027a74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8027a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027a7c:	68d9      	ldr	r1, [r3, #12]
 8027a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027a82:	681a      	ldr	r2, [r3, #0]
 8027a84:	ea40 0301 	orr.w	r3, r0, r1
 8027a88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8027a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027a8e:	689a      	ldr	r2, [r3, #8]
 8027a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027a94:	691b      	ldr	r3, [r3, #16]
 8027a96:	431a      	orrs	r2, r3
 8027a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027a9c:	695b      	ldr	r3, [r3, #20]
 8027a9e:	431a      	orrs	r2, r3
 8027aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027aa4:	69db      	ldr	r3, [r3, #28]
 8027aa6:	4313      	orrs	r3, r2
 8027aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8027aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027ab0:	681b      	ldr	r3, [r3, #0]
 8027ab2:	68db      	ldr	r3, [r3, #12]
 8027ab4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8027ab8:	f021 010c 	bic.w	r1, r1, #12
 8027abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027ac0:	681a      	ldr	r2, [r3, #0]
 8027ac2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8027ac6:	430b      	orrs	r3, r1
 8027ac8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8027aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027ace:	681b      	ldr	r3, [r3, #0]
 8027ad0:	695b      	ldr	r3, [r3, #20]
 8027ad2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8027ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027ada:	6999      	ldr	r1, [r3, #24]
 8027adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027ae0:	681a      	ldr	r2, [r3, #0]
 8027ae2:	ea40 0301 	orr.w	r3, r0, r1
 8027ae6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8027ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027aec:	69db      	ldr	r3, [r3, #28]
 8027aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027af2:	f040 81a5 	bne.w	8027e40 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8027af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027afa:	681a      	ldr	r2, [r3, #0]
 8027afc:	4bcd      	ldr	r3, [pc, #820]	; (8027e34 <UART_SetConfig+0x3d4>)
 8027afe:	429a      	cmp	r2, r3
 8027b00:	d006      	beq.n	8027b10 <UART_SetConfig+0xb0>
 8027b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027b06:	681a      	ldr	r2, [r3, #0]
 8027b08:	4bcb      	ldr	r3, [pc, #812]	; (8027e38 <UART_SetConfig+0x3d8>)
 8027b0a:	429a      	cmp	r2, r3
 8027b0c:	f040 80cb 	bne.w	8027ca6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8027b10:	f7fe fcec 	bl	80264ec <HAL_RCC_GetPCLK2Freq>
 8027b14:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8027b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027b1c:	461c      	mov	r4, r3
 8027b1e:	f04f 0500 	mov.w	r5, #0
 8027b22:	4622      	mov	r2, r4
 8027b24:	462b      	mov	r3, r5
 8027b26:	1891      	adds	r1, r2, r2
 8027b28:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8027b2c:	415b      	adcs	r3, r3
 8027b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8027b32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8027b36:	1912      	adds	r2, r2, r4
 8027b38:	eb45 0303 	adc.w	r3, r5, r3
 8027b3c:	f04f 0000 	mov.w	r0, #0
 8027b40:	f04f 0100 	mov.w	r1, #0
 8027b44:	00d9      	lsls	r1, r3, #3
 8027b46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027b4a:	00d0      	lsls	r0, r2, #3
 8027b4c:	4602      	mov	r2, r0
 8027b4e:	460b      	mov	r3, r1
 8027b50:	1911      	adds	r1, r2, r4
 8027b52:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8027b56:	416b      	adcs	r3, r5
 8027b58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8027b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027b60:	685b      	ldr	r3, [r3, #4]
 8027b62:	461a      	mov	r2, r3
 8027b64:	f04f 0300 	mov.w	r3, #0
 8027b68:	1891      	adds	r1, r2, r2
 8027b6a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8027b6e:	415b      	adcs	r3, r3
 8027b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8027b74:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8027b78:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8027b7c:	f7f8 ff6e 	bl	8020a5c <__aeabi_uldivmod>
 8027b80:	4602      	mov	r2, r0
 8027b82:	460b      	mov	r3, r1
 8027b84:	4bad      	ldr	r3, [pc, #692]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027b86:	fba3 2302 	umull	r2, r3, r3, r2
 8027b8a:	095b      	lsrs	r3, r3, #5
 8027b8c:	011e      	lsls	r6, r3, #4
 8027b8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027b92:	461c      	mov	r4, r3
 8027b94:	f04f 0500 	mov.w	r5, #0
 8027b98:	4622      	mov	r2, r4
 8027b9a:	462b      	mov	r3, r5
 8027b9c:	1891      	adds	r1, r2, r2
 8027b9e:	67b9      	str	r1, [r7, #120]	; 0x78
 8027ba0:	415b      	adcs	r3, r3
 8027ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8027ba4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8027ba8:	1912      	adds	r2, r2, r4
 8027baa:	eb45 0303 	adc.w	r3, r5, r3
 8027bae:	f04f 0000 	mov.w	r0, #0
 8027bb2:	f04f 0100 	mov.w	r1, #0
 8027bb6:	00d9      	lsls	r1, r3, #3
 8027bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027bbc:	00d0      	lsls	r0, r2, #3
 8027bbe:	4602      	mov	r2, r0
 8027bc0:	460b      	mov	r3, r1
 8027bc2:	1911      	adds	r1, r2, r4
 8027bc4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8027bc8:	416b      	adcs	r3, r5
 8027bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8027bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027bd2:	685b      	ldr	r3, [r3, #4]
 8027bd4:	461a      	mov	r2, r3
 8027bd6:	f04f 0300 	mov.w	r3, #0
 8027bda:	1891      	adds	r1, r2, r2
 8027bdc:	6739      	str	r1, [r7, #112]	; 0x70
 8027bde:	415b      	adcs	r3, r3
 8027be0:	677b      	str	r3, [r7, #116]	; 0x74
 8027be2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8027be6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8027bea:	f7f8 ff37 	bl	8020a5c <__aeabi_uldivmod>
 8027bee:	4602      	mov	r2, r0
 8027bf0:	460b      	mov	r3, r1
 8027bf2:	4b92      	ldr	r3, [pc, #584]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8027bf8:	095b      	lsrs	r3, r3, #5
 8027bfa:	2164      	movs	r1, #100	; 0x64
 8027bfc:	fb01 f303 	mul.w	r3, r1, r3
 8027c00:	1ad3      	subs	r3, r2, r3
 8027c02:	00db      	lsls	r3, r3, #3
 8027c04:	3332      	adds	r3, #50	; 0x32
 8027c06:	4a8d      	ldr	r2, [pc, #564]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027c08:	fba2 2303 	umull	r2, r3, r2, r3
 8027c0c:	095b      	lsrs	r3, r3, #5
 8027c0e:	005b      	lsls	r3, r3, #1
 8027c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8027c14:	441e      	add	r6, r3
 8027c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027c1a:	4618      	mov	r0, r3
 8027c1c:	f04f 0100 	mov.w	r1, #0
 8027c20:	4602      	mov	r2, r0
 8027c22:	460b      	mov	r3, r1
 8027c24:	1894      	adds	r4, r2, r2
 8027c26:	66bc      	str	r4, [r7, #104]	; 0x68
 8027c28:	415b      	adcs	r3, r3
 8027c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8027c2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8027c30:	1812      	adds	r2, r2, r0
 8027c32:	eb41 0303 	adc.w	r3, r1, r3
 8027c36:	f04f 0400 	mov.w	r4, #0
 8027c3a:	f04f 0500 	mov.w	r5, #0
 8027c3e:	00dd      	lsls	r5, r3, #3
 8027c40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8027c44:	00d4      	lsls	r4, r2, #3
 8027c46:	4622      	mov	r2, r4
 8027c48:	462b      	mov	r3, r5
 8027c4a:	1814      	adds	r4, r2, r0
 8027c4c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8027c50:	414b      	adcs	r3, r1
 8027c52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8027c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027c5a:	685b      	ldr	r3, [r3, #4]
 8027c5c:	461a      	mov	r2, r3
 8027c5e:	f04f 0300 	mov.w	r3, #0
 8027c62:	1891      	adds	r1, r2, r2
 8027c64:	6639      	str	r1, [r7, #96]	; 0x60
 8027c66:	415b      	adcs	r3, r3
 8027c68:	667b      	str	r3, [r7, #100]	; 0x64
 8027c6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8027c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8027c72:	f7f8 fef3 	bl	8020a5c <__aeabi_uldivmod>
 8027c76:	4602      	mov	r2, r0
 8027c78:	460b      	mov	r3, r1
 8027c7a:	4b70      	ldr	r3, [pc, #448]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8027c80:	095b      	lsrs	r3, r3, #5
 8027c82:	2164      	movs	r1, #100	; 0x64
 8027c84:	fb01 f303 	mul.w	r3, r1, r3
 8027c88:	1ad3      	subs	r3, r2, r3
 8027c8a:	00db      	lsls	r3, r3, #3
 8027c8c:	3332      	adds	r3, #50	; 0x32
 8027c8e:	4a6b      	ldr	r2, [pc, #428]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027c90:	fba2 2303 	umull	r2, r3, r2, r3
 8027c94:	095b      	lsrs	r3, r3, #5
 8027c96:	f003 0207 	and.w	r2, r3, #7
 8027c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027c9e:	681b      	ldr	r3, [r3, #0]
 8027ca0:	4432      	add	r2, r6
 8027ca2:	609a      	str	r2, [r3, #8]
 8027ca4:	e26d      	b.n	8028182 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8027ca6:	f7fe fc0d 	bl	80264c4 <HAL_RCC_GetPCLK1Freq>
 8027caa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8027cae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027cb2:	461c      	mov	r4, r3
 8027cb4:	f04f 0500 	mov.w	r5, #0
 8027cb8:	4622      	mov	r2, r4
 8027cba:	462b      	mov	r3, r5
 8027cbc:	1891      	adds	r1, r2, r2
 8027cbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8027cc0:	415b      	adcs	r3, r3
 8027cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8027cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8027cc8:	1912      	adds	r2, r2, r4
 8027cca:	eb45 0303 	adc.w	r3, r5, r3
 8027cce:	f04f 0000 	mov.w	r0, #0
 8027cd2:	f04f 0100 	mov.w	r1, #0
 8027cd6:	00d9      	lsls	r1, r3, #3
 8027cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027cdc:	00d0      	lsls	r0, r2, #3
 8027cde:	4602      	mov	r2, r0
 8027ce0:	460b      	mov	r3, r1
 8027ce2:	1911      	adds	r1, r2, r4
 8027ce4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8027ce8:	416b      	adcs	r3, r5
 8027cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8027cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027cf2:	685b      	ldr	r3, [r3, #4]
 8027cf4:	461a      	mov	r2, r3
 8027cf6:	f04f 0300 	mov.w	r3, #0
 8027cfa:	1891      	adds	r1, r2, r2
 8027cfc:	6539      	str	r1, [r7, #80]	; 0x50
 8027cfe:	415b      	adcs	r3, r3
 8027d00:	657b      	str	r3, [r7, #84]	; 0x54
 8027d02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8027d06:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8027d0a:	f7f8 fea7 	bl	8020a5c <__aeabi_uldivmod>
 8027d0e:	4602      	mov	r2, r0
 8027d10:	460b      	mov	r3, r1
 8027d12:	4b4a      	ldr	r3, [pc, #296]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027d14:	fba3 2302 	umull	r2, r3, r3, r2
 8027d18:	095b      	lsrs	r3, r3, #5
 8027d1a:	011e      	lsls	r6, r3, #4
 8027d1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027d20:	461c      	mov	r4, r3
 8027d22:	f04f 0500 	mov.w	r5, #0
 8027d26:	4622      	mov	r2, r4
 8027d28:	462b      	mov	r3, r5
 8027d2a:	1891      	adds	r1, r2, r2
 8027d2c:	64b9      	str	r1, [r7, #72]	; 0x48
 8027d2e:	415b      	adcs	r3, r3
 8027d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027d32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8027d36:	1912      	adds	r2, r2, r4
 8027d38:	eb45 0303 	adc.w	r3, r5, r3
 8027d3c:	f04f 0000 	mov.w	r0, #0
 8027d40:	f04f 0100 	mov.w	r1, #0
 8027d44:	00d9      	lsls	r1, r3, #3
 8027d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027d4a:	00d0      	lsls	r0, r2, #3
 8027d4c:	4602      	mov	r2, r0
 8027d4e:	460b      	mov	r3, r1
 8027d50:	1911      	adds	r1, r2, r4
 8027d52:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8027d56:	416b      	adcs	r3, r5
 8027d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8027d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027d60:	685b      	ldr	r3, [r3, #4]
 8027d62:	461a      	mov	r2, r3
 8027d64:	f04f 0300 	mov.w	r3, #0
 8027d68:	1891      	adds	r1, r2, r2
 8027d6a:	6439      	str	r1, [r7, #64]	; 0x40
 8027d6c:	415b      	adcs	r3, r3
 8027d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8027d70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8027d74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8027d78:	f7f8 fe70 	bl	8020a5c <__aeabi_uldivmod>
 8027d7c:	4602      	mov	r2, r0
 8027d7e:	460b      	mov	r3, r1
 8027d80:	4b2e      	ldr	r3, [pc, #184]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027d82:	fba3 1302 	umull	r1, r3, r3, r2
 8027d86:	095b      	lsrs	r3, r3, #5
 8027d88:	2164      	movs	r1, #100	; 0x64
 8027d8a:	fb01 f303 	mul.w	r3, r1, r3
 8027d8e:	1ad3      	subs	r3, r2, r3
 8027d90:	00db      	lsls	r3, r3, #3
 8027d92:	3332      	adds	r3, #50	; 0x32
 8027d94:	4a29      	ldr	r2, [pc, #164]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027d96:	fba2 2303 	umull	r2, r3, r2, r3
 8027d9a:	095b      	lsrs	r3, r3, #5
 8027d9c:	005b      	lsls	r3, r3, #1
 8027d9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8027da2:	441e      	add	r6, r3
 8027da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027da8:	4618      	mov	r0, r3
 8027daa:	f04f 0100 	mov.w	r1, #0
 8027dae:	4602      	mov	r2, r0
 8027db0:	460b      	mov	r3, r1
 8027db2:	1894      	adds	r4, r2, r2
 8027db4:	63bc      	str	r4, [r7, #56]	; 0x38
 8027db6:	415b      	adcs	r3, r3
 8027db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027dba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8027dbe:	1812      	adds	r2, r2, r0
 8027dc0:	eb41 0303 	adc.w	r3, r1, r3
 8027dc4:	f04f 0400 	mov.w	r4, #0
 8027dc8:	f04f 0500 	mov.w	r5, #0
 8027dcc:	00dd      	lsls	r5, r3, #3
 8027dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8027dd2:	00d4      	lsls	r4, r2, #3
 8027dd4:	4622      	mov	r2, r4
 8027dd6:	462b      	mov	r3, r5
 8027dd8:	1814      	adds	r4, r2, r0
 8027dda:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8027dde:	414b      	adcs	r3, r1
 8027de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8027de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027de8:	685b      	ldr	r3, [r3, #4]
 8027dea:	461a      	mov	r2, r3
 8027dec:	f04f 0300 	mov.w	r3, #0
 8027df0:	1891      	adds	r1, r2, r2
 8027df2:	6339      	str	r1, [r7, #48]	; 0x30
 8027df4:	415b      	adcs	r3, r3
 8027df6:	637b      	str	r3, [r7, #52]	; 0x34
 8027df8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8027dfc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8027e00:	f7f8 fe2c 	bl	8020a5c <__aeabi_uldivmod>
 8027e04:	4602      	mov	r2, r0
 8027e06:	460b      	mov	r3, r1
 8027e08:	4b0c      	ldr	r3, [pc, #48]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8027e0e:	095b      	lsrs	r3, r3, #5
 8027e10:	2164      	movs	r1, #100	; 0x64
 8027e12:	fb01 f303 	mul.w	r3, r1, r3
 8027e16:	1ad3      	subs	r3, r2, r3
 8027e18:	00db      	lsls	r3, r3, #3
 8027e1a:	3332      	adds	r3, #50	; 0x32
 8027e1c:	4a07      	ldr	r2, [pc, #28]	; (8027e3c <UART_SetConfig+0x3dc>)
 8027e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8027e22:	095b      	lsrs	r3, r3, #5
 8027e24:	f003 0207 	and.w	r2, r3, #7
 8027e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027e2c:	681b      	ldr	r3, [r3, #0]
 8027e2e:	4432      	add	r2, r6
 8027e30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8027e32:	e1a6      	b.n	8028182 <UART_SetConfig+0x722>
 8027e34:	40011000 	.word	0x40011000
 8027e38:	40011400 	.word	0x40011400
 8027e3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8027e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027e44:	681a      	ldr	r2, [r3, #0]
 8027e46:	4bd1      	ldr	r3, [pc, #836]	; (802818c <UART_SetConfig+0x72c>)
 8027e48:	429a      	cmp	r2, r3
 8027e4a:	d006      	beq.n	8027e5a <UART_SetConfig+0x3fa>
 8027e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027e50:	681a      	ldr	r2, [r3, #0]
 8027e52:	4bcf      	ldr	r3, [pc, #828]	; (8028190 <UART_SetConfig+0x730>)
 8027e54:	429a      	cmp	r2, r3
 8027e56:	f040 80ca 	bne.w	8027fee <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8027e5a:	f7fe fb47 	bl	80264ec <HAL_RCC_GetPCLK2Freq>
 8027e5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8027e62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027e66:	461c      	mov	r4, r3
 8027e68:	f04f 0500 	mov.w	r5, #0
 8027e6c:	4622      	mov	r2, r4
 8027e6e:	462b      	mov	r3, r5
 8027e70:	1891      	adds	r1, r2, r2
 8027e72:	62b9      	str	r1, [r7, #40]	; 0x28
 8027e74:	415b      	adcs	r3, r3
 8027e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027e7c:	1912      	adds	r2, r2, r4
 8027e7e:	eb45 0303 	adc.w	r3, r5, r3
 8027e82:	f04f 0000 	mov.w	r0, #0
 8027e86:	f04f 0100 	mov.w	r1, #0
 8027e8a:	00d9      	lsls	r1, r3, #3
 8027e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027e90:	00d0      	lsls	r0, r2, #3
 8027e92:	4602      	mov	r2, r0
 8027e94:	460b      	mov	r3, r1
 8027e96:	eb12 0a04 	adds.w	sl, r2, r4
 8027e9a:	eb43 0b05 	adc.w	fp, r3, r5
 8027e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027ea2:	685b      	ldr	r3, [r3, #4]
 8027ea4:	4618      	mov	r0, r3
 8027ea6:	f04f 0100 	mov.w	r1, #0
 8027eaa:	f04f 0200 	mov.w	r2, #0
 8027eae:	f04f 0300 	mov.w	r3, #0
 8027eb2:	008b      	lsls	r3, r1, #2
 8027eb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027eb8:	0082      	lsls	r2, r0, #2
 8027eba:	4650      	mov	r0, sl
 8027ebc:	4659      	mov	r1, fp
 8027ebe:	f7f8 fdcd 	bl	8020a5c <__aeabi_uldivmod>
 8027ec2:	4602      	mov	r2, r0
 8027ec4:	460b      	mov	r3, r1
 8027ec6:	4bb3      	ldr	r3, [pc, #716]	; (8028194 <UART_SetConfig+0x734>)
 8027ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8027ecc:	095b      	lsrs	r3, r3, #5
 8027ece:	011e      	lsls	r6, r3, #4
 8027ed0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027ed4:	4618      	mov	r0, r3
 8027ed6:	f04f 0100 	mov.w	r1, #0
 8027eda:	4602      	mov	r2, r0
 8027edc:	460b      	mov	r3, r1
 8027ede:	1894      	adds	r4, r2, r2
 8027ee0:	623c      	str	r4, [r7, #32]
 8027ee2:	415b      	adcs	r3, r3
 8027ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8027ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8027eea:	1812      	adds	r2, r2, r0
 8027eec:	eb41 0303 	adc.w	r3, r1, r3
 8027ef0:	f04f 0400 	mov.w	r4, #0
 8027ef4:	f04f 0500 	mov.w	r5, #0
 8027ef8:	00dd      	lsls	r5, r3, #3
 8027efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8027efe:	00d4      	lsls	r4, r2, #3
 8027f00:	4622      	mov	r2, r4
 8027f02:	462b      	mov	r3, r5
 8027f04:	1814      	adds	r4, r2, r0
 8027f06:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8027f0a:	414b      	adcs	r3, r1
 8027f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8027f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027f14:	685b      	ldr	r3, [r3, #4]
 8027f16:	4618      	mov	r0, r3
 8027f18:	f04f 0100 	mov.w	r1, #0
 8027f1c:	f04f 0200 	mov.w	r2, #0
 8027f20:	f04f 0300 	mov.w	r3, #0
 8027f24:	008b      	lsls	r3, r1, #2
 8027f26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027f2a:	0082      	lsls	r2, r0, #2
 8027f2c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8027f30:	f7f8 fd94 	bl	8020a5c <__aeabi_uldivmod>
 8027f34:	4602      	mov	r2, r0
 8027f36:	460b      	mov	r3, r1
 8027f38:	4b96      	ldr	r3, [pc, #600]	; (8028194 <UART_SetConfig+0x734>)
 8027f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8027f3e:	095b      	lsrs	r3, r3, #5
 8027f40:	2164      	movs	r1, #100	; 0x64
 8027f42:	fb01 f303 	mul.w	r3, r1, r3
 8027f46:	1ad3      	subs	r3, r2, r3
 8027f48:	011b      	lsls	r3, r3, #4
 8027f4a:	3332      	adds	r3, #50	; 0x32
 8027f4c:	4a91      	ldr	r2, [pc, #580]	; (8028194 <UART_SetConfig+0x734>)
 8027f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8027f52:	095b      	lsrs	r3, r3, #5
 8027f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027f58:	441e      	add	r6, r3
 8027f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027f5e:	4618      	mov	r0, r3
 8027f60:	f04f 0100 	mov.w	r1, #0
 8027f64:	4602      	mov	r2, r0
 8027f66:	460b      	mov	r3, r1
 8027f68:	1894      	adds	r4, r2, r2
 8027f6a:	61bc      	str	r4, [r7, #24]
 8027f6c:	415b      	adcs	r3, r3
 8027f6e:	61fb      	str	r3, [r7, #28]
 8027f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027f74:	1812      	adds	r2, r2, r0
 8027f76:	eb41 0303 	adc.w	r3, r1, r3
 8027f7a:	f04f 0400 	mov.w	r4, #0
 8027f7e:	f04f 0500 	mov.w	r5, #0
 8027f82:	00dd      	lsls	r5, r3, #3
 8027f84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8027f88:	00d4      	lsls	r4, r2, #3
 8027f8a:	4622      	mov	r2, r4
 8027f8c:	462b      	mov	r3, r5
 8027f8e:	1814      	adds	r4, r2, r0
 8027f90:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8027f94:	414b      	adcs	r3, r1
 8027f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8027f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027f9e:	685b      	ldr	r3, [r3, #4]
 8027fa0:	4618      	mov	r0, r3
 8027fa2:	f04f 0100 	mov.w	r1, #0
 8027fa6:	f04f 0200 	mov.w	r2, #0
 8027faa:	f04f 0300 	mov.w	r3, #0
 8027fae:	008b      	lsls	r3, r1, #2
 8027fb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027fb4:	0082      	lsls	r2, r0, #2
 8027fb6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8027fba:	f7f8 fd4f 	bl	8020a5c <__aeabi_uldivmod>
 8027fbe:	4602      	mov	r2, r0
 8027fc0:	460b      	mov	r3, r1
 8027fc2:	4b74      	ldr	r3, [pc, #464]	; (8028194 <UART_SetConfig+0x734>)
 8027fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8027fc8:	095b      	lsrs	r3, r3, #5
 8027fca:	2164      	movs	r1, #100	; 0x64
 8027fcc:	fb01 f303 	mul.w	r3, r1, r3
 8027fd0:	1ad3      	subs	r3, r2, r3
 8027fd2:	011b      	lsls	r3, r3, #4
 8027fd4:	3332      	adds	r3, #50	; 0x32
 8027fd6:	4a6f      	ldr	r2, [pc, #444]	; (8028194 <UART_SetConfig+0x734>)
 8027fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8027fdc:	095b      	lsrs	r3, r3, #5
 8027fde:	f003 020f 	and.w	r2, r3, #15
 8027fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027fe6:	681b      	ldr	r3, [r3, #0]
 8027fe8:	4432      	add	r2, r6
 8027fea:	609a      	str	r2, [r3, #8]
 8027fec:	e0c9      	b.n	8028182 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8027fee:	f7fe fa69 	bl	80264c4 <HAL_RCC_GetPCLK1Freq>
 8027ff2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8027ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027ffa:	461c      	mov	r4, r3
 8027ffc:	f04f 0500 	mov.w	r5, #0
 8028000:	4622      	mov	r2, r4
 8028002:	462b      	mov	r3, r5
 8028004:	1891      	adds	r1, r2, r2
 8028006:	6139      	str	r1, [r7, #16]
 8028008:	415b      	adcs	r3, r3
 802800a:	617b      	str	r3, [r7, #20]
 802800c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8028010:	1912      	adds	r2, r2, r4
 8028012:	eb45 0303 	adc.w	r3, r5, r3
 8028016:	f04f 0000 	mov.w	r0, #0
 802801a:	f04f 0100 	mov.w	r1, #0
 802801e:	00d9      	lsls	r1, r3, #3
 8028020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8028024:	00d0      	lsls	r0, r2, #3
 8028026:	4602      	mov	r2, r0
 8028028:	460b      	mov	r3, r1
 802802a:	eb12 0804 	adds.w	r8, r2, r4
 802802e:	eb43 0905 	adc.w	r9, r3, r5
 8028032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028036:	685b      	ldr	r3, [r3, #4]
 8028038:	4618      	mov	r0, r3
 802803a:	f04f 0100 	mov.w	r1, #0
 802803e:	f04f 0200 	mov.w	r2, #0
 8028042:	f04f 0300 	mov.w	r3, #0
 8028046:	008b      	lsls	r3, r1, #2
 8028048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 802804c:	0082      	lsls	r2, r0, #2
 802804e:	4640      	mov	r0, r8
 8028050:	4649      	mov	r1, r9
 8028052:	f7f8 fd03 	bl	8020a5c <__aeabi_uldivmod>
 8028056:	4602      	mov	r2, r0
 8028058:	460b      	mov	r3, r1
 802805a:	4b4e      	ldr	r3, [pc, #312]	; (8028194 <UART_SetConfig+0x734>)
 802805c:	fba3 2302 	umull	r2, r3, r3, r2
 8028060:	095b      	lsrs	r3, r3, #5
 8028062:	011e      	lsls	r6, r3, #4
 8028064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8028068:	4618      	mov	r0, r3
 802806a:	f04f 0100 	mov.w	r1, #0
 802806e:	4602      	mov	r2, r0
 8028070:	460b      	mov	r3, r1
 8028072:	1894      	adds	r4, r2, r2
 8028074:	60bc      	str	r4, [r7, #8]
 8028076:	415b      	adcs	r3, r3
 8028078:	60fb      	str	r3, [r7, #12]
 802807a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802807e:	1812      	adds	r2, r2, r0
 8028080:	eb41 0303 	adc.w	r3, r1, r3
 8028084:	f04f 0400 	mov.w	r4, #0
 8028088:	f04f 0500 	mov.w	r5, #0
 802808c:	00dd      	lsls	r5, r3, #3
 802808e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8028092:	00d4      	lsls	r4, r2, #3
 8028094:	4622      	mov	r2, r4
 8028096:	462b      	mov	r3, r5
 8028098:	1814      	adds	r4, r2, r0
 802809a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 802809e:	414b      	adcs	r3, r1
 80280a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80280a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80280a8:	685b      	ldr	r3, [r3, #4]
 80280aa:	4618      	mov	r0, r3
 80280ac:	f04f 0100 	mov.w	r1, #0
 80280b0:	f04f 0200 	mov.w	r2, #0
 80280b4:	f04f 0300 	mov.w	r3, #0
 80280b8:	008b      	lsls	r3, r1, #2
 80280ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80280be:	0082      	lsls	r2, r0, #2
 80280c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80280c4:	f7f8 fcca 	bl	8020a5c <__aeabi_uldivmod>
 80280c8:	4602      	mov	r2, r0
 80280ca:	460b      	mov	r3, r1
 80280cc:	4b31      	ldr	r3, [pc, #196]	; (8028194 <UART_SetConfig+0x734>)
 80280ce:	fba3 1302 	umull	r1, r3, r3, r2
 80280d2:	095b      	lsrs	r3, r3, #5
 80280d4:	2164      	movs	r1, #100	; 0x64
 80280d6:	fb01 f303 	mul.w	r3, r1, r3
 80280da:	1ad3      	subs	r3, r2, r3
 80280dc:	011b      	lsls	r3, r3, #4
 80280de:	3332      	adds	r3, #50	; 0x32
 80280e0:	4a2c      	ldr	r2, [pc, #176]	; (8028194 <UART_SetConfig+0x734>)
 80280e2:	fba2 2303 	umull	r2, r3, r2, r3
 80280e6:	095b      	lsrs	r3, r3, #5
 80280e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80280ec:	441e      	add	r6, r3
 80280ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80280f2:	4618      	mov	r0, r3
 80280f4:	f04f 0100 	mov.w	r1, #0
 80280f8:	4602      	mov	r2, r0
 80280fa:	460b      	mov	r3, r1
 80280fc:	1894      	adds	r4, r2, r2
 80280fe:	603c      	str	r4, [r7, #0]
 8028100:	415b      	adcs	r3, r3
 8028102:	607b      	str	r3, [r7, #4]
 8028104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028108:	1812      	adds	r2, r2, r0
 802810a:	eb41 0303 	adc.w	r3, r1, r3
 802810e:	f04f 0400 	mov.w	r4, #0
 8028112:	f04f 0500 	mov.w	r5, #0
 8028116:	00dd      	lsls	r5, r3, #3
 8028118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802811c:	00d4      	lsls	r4, r2, #3
 802811e:	4622      	mov	r2, r4
 8028120:	462b      	mov	r3, r5
 8028122:	1814      	adds	r4, r2, r0
 8028124:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8028128:	414b      	adcs	r3, r1
 802812a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802812e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028132:	685b      	ldr	r3, [r3, #4]
 8028134:	4618      	mov	r0, r3
 8028136:	f04f 0100 	mov.w	r1, #0
 802813a:	f04f 0200 	mov.w	r2, #0
 802813e:	f04f 0300 	mov.w	r3, #0
 8028142:	008b      	lsls	r3, r1, #2
 8028144:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8028148:	0082      	lsls	r2, r0, #2
 802814a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 802814e:	f7f8 fc85 	bl	8020a5c <__aeabi_uldivmod>
 8028152:	4602      	mov	r2, r0
 8028154:	460b      	mov	r3, r1
 8028156:	4b0f      	ldr	r3, [pc, #60]	; (8028194 <UART_SetConfig+0x734>)
 8028158:	fba3 1302 	umull	r1, r3, r3, r2
 802815c:	095b      	lsrs	r3, r3, #5
 802815e:	2164      	movs	r1, #100	; 0x64
 8028160:	fb01 f303 	mul.w	r3, r1, r3
 8028164:	1ad3      	subs	r3, r2, r3
 8028166:	011b      	lsls	r3, r3, #4
 8028168:	3332      	adds	r3, #50	; 0x32
 802816a:	4a0a      	ldr	r2, [pc, #40]	; (8028194 <UART_SetConfig+0x734>)
 802816c:	fba2 2303 	umull	r2, r3, r2, r3
 8028170:	095b      	lsrs	r3, r3, #5
 8028172:	f003 020f 	and.w	r2, r3, #15
 8028176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802817a:	681b      	ldr	r3, [r3, #0]
 802817c:	4432      	add	r2, r6
 802817e:	609a      	str	r2, [r3, #8]
}
 8028180:	e7ff      	b.n	8028182 <UART_SetConfig+0x722>
 8028182:	bf00      	nop
 8028184:	37f4      	adds	r7, #244	; 0xf4
 8028186:	46bd      	mov	sp, r7
 8028188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802818c:	40011000 	.word	0x40011000
 8028190:	40011400 	.word	0x40011400
 8028194:	51eb851f 	.word	0x51eb851f

08028198 <hal_programFlash>:
/**
 * 向内部flash编程 size必须为4的整数倍
 * opt ERASE / xERASE
 */
char hal_programFlash(uint32_t addr, char *buffer, uint16_t size)
{
 8028198:	b580      	push	{r7, lr}
 802819a:	b086      	sub	sp, #24
 802819c:	af00      	add	r7, sp, #0
 802819e:	60f8      	str	r0, [r7, #12]
 80281a0:	60b9      	str	r1, [r7, #8]
 80281a2:	4613      	mov	r3, r2
 80281a4:	80fb      	strh	r3, [r7, #6]
    char ret = FLASH_FAIL;
 80281a6:	2301      	movs	r3, #1
 80281a8:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Unlock();
 80281aa:	f7fd f8ad 	bl	8025308 <HAL_FLASH_Unlock>

    uint16_t i;

    for(i=0;i<size/4;++i)
 80281ae:	2300      	movs	r3, #0
 80281b0:	82bb      	strh	r3, [r7, #20]
 80281b2:	e01d      	b.n	80281f0 <hal_programFlash+0x58>
    {
    	int val = *(uint32_t *)(buffer+i*4);
 80281b4:	8abb      	ldrh	r3, [r7, #20]
 80281b6:	009b      	lsls	r3, r3, #2
 80281b8:	461a      	mov	r2, r3
 80281ba:	68bb      	ldr	r3, [r7, #8]
 80281bc:	4413      	add	r3, r2
 80281be:	681b      	ldr	r3, [r3, #0]
 80281c0:	613b      	str	r3, [r7, #16]
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr+i*4, *(uint32_t *)(buffer+i*4))!=HAL_OK)
 80281c2:	8abb      	ldrh	r3, [r7, #20]
 80281c4:	009b      	lsls	r3, r3, #2
 80281c6:	461a      	mov	r2, r3
 80281c8:	68fb      	ldr	r3, [r7, #12]
 80281ca:	18d1      	adds	r1, r2, r3
 80281cc:	8abb      	ldrh	r3, [r7, #20]
 80281ce:	009b      	lsls	r3, r3, #2
 80281d0:	461a      	mov	r2, r3
 80281d2:	68bb      	ldr	r3, [r7, #8]
 80281d4:	4413      	add	r3, r2
 80281d6:	681b      	ldr	r3, [r3, #0]
 80281d8:	461a      	mov	r2, r3
 80281da:	f04f 0300 	mov.w	r3, #0
 80281de:	2002      	movs	r0, #2
 80281e0:	f7fd f83e 	bl	8025260 <HAL_FLASH_Program>
 80281e4:	4603      	mov	r3, r0
 80281e6:	2b00      	cmp	r3, #0
 80281e8:	d109      	bne.n	80281fe <hal_programFlash+0x66>
    for(i=0;i<size/4;++i)
 80281ea:	8abb      	ldrh	r3, [r7, #20]
 80281ec:	3301      	adds	r3, #1
 80281ee:	82bb      	strh	r3, [r7, #20]
 80281f0:	88fb      	ldrh	r3, [r7, #6]
 80281f2:	089b      	lsrs	r3, r3, #2
 80281f4:	b29b      	uxth	r3, r3
 80281f6:	8aba      	ldrh	r2, [r7, #20]
 80281f8:	429a      	cmp	r2, r3
 80281fa:	d3db      	bcc.n	80281b4 <hal_programFlash+0x1c>
 80281fc:	e000      	b.n	8028200 <hal_programFlash+0x68>
        {
            break;
 80281fe:	bf00      	nop
        }
    }

    if(i==size/4)
 8028200:	88fb      	ldrh	r3, [r7, #6]
 8028202:	089b      	lsrs	r3, r3, #2
 8028204:	b29b      	uxth	r3, r3
 8028206:	8aba      	ldrh	r2, [r7, #20]
 8028208:	429a      	cmp	r2, r3
 802820a:	d101      	bne.n	8028210 <hal_programFlash+0x78>
    {
        ret = FLASH_SUCCESS;
 802820c:	2300      	movs	r3, #0
 802820e:	75fb      	strb	r3, [r7, #23]
    }

	HAL_FLASH_Lock();
 8028210:	f7fd f89c 	bl	802534c <HAL_FLASH_Lock>

    return ret;
 8028214:	7dfb      	ldrb	r3, [r7, #23]
}
 8028216:	4618      	mov	r0, r3
 8028218:	3718      	adds	r7, #24
 802821a:	46bd      	mov	sp, r7
 802821c:	bd80      	pop	{r7, pc}

0802821e <hal_readFlash>:

/**
 * 读取内部flash数据 size必须为4字节整数倍
 */
void hal_readFlash(uint32_t addr, char *buffer, uint16_t size)
{
 802821e:	b480      	push	{r7}
 8028220:	b087      	sub	sp, #28
 8028222:	af00      	add	r7, sp, #0
 8028224:	60f8      	str	r0, [r7, #12]
 8028226:	60b9      	str	r1, [r7, #8]
 8028228:	4613      	mov	r3, r2
 802822a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0;i<size/4;++i)
 802822c:	2300      	movs	r3, #0
 802822e:	82fb      	strh	r3, [r7, #22]
 8028230:	e00d      	b.n	802824e <hal_readFlash+0x30>
	{
		*((uint32_t *)buffer+i) = *((__IO uint32_t *)addr+i);
 8028232:	8afb      	ldrh	r3, [r7, #22]
 8028234:	009a      	lsls	r2, r3, #2
 8028236:	68fb      	ldr	r3, [r7, #12]
 8028238:	4413      	add	r3, r2
 802823a:	4619      	mov	r1, r3
 802823c:	8afb      	ldrh	r3, [r7, #22]
 802823e:	009b      	lsls	r3, r3, #2
 8028240:	68ba      	ldr	r2, [r7, #8]
 8028242:	4413      	add	r3, r2
 8028244:	680a      	ldr	r2, [r1, #0]
 8028246:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<size/4;++i)
 8028248:	8afb      	ldrh	r3, [r7, #22]
 802824a:	3301      	adds	r3, #1
 802824c:	82fb      	strh	r3, [r7, #22]
 802824e:	88fb      	ldrh	r3, [r7, #6]
 8028250:	089b      	lsrs	r3, r3, #2
 8028252:	b29b      	uxth	r3, r3
 8028254:	8afa      	ldrh	r2, [r7, #22]
 8028256:	429a      	cmp	r2, r3
 8028258:	d3eb      	bcc.n	8028232 <hal_readFlash+0x14>
	}
}
 802825a:	bf00      	nop
 802825c:	bf00      	nop
 802825e:	371c      	adds	r7, #28
 8028260:	46bd      	mov	sp, r7
 8028262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028266:	4770      	bx	lr

08028268 <hal_eraseFlash>:
/**
 * 擦除指定flash
 *
 */
HAL_StatusTypeDef hal_eraseFlash(uint8_t sector, uint8_t sectornum)
{
 8028268:	b580      	push	{r7, lr}
 802826a:	b08a      	sub	sp, #40	; 0x28
 802826c:	af00      	add	r7, sp, #0
 802826e:	4603      	mov	r3, r0
 8028270:	460a      	mov	r2, r1
 8028272:	71fb      	strb	r3, [r7, #7]
 8028274:	4613      	mov	r3, r2
 8028276:	71bb      	strb	r3, [r7, #6]
	uint32_t flag;

	FLASH_EraseInitTypeDef erase =	{
 8028278:	f107 030c 	add.w	r3, r7, #12
 802827c:	2200      	movs	r2, #0
 802827e:	601a      	str	r2, [r3, #0]
 8028280:	605a      	str	r2, [r3, #4]
 8028282:	609a      	str	r2, [r3, #8]
 8028284:	60da      	str	r2, [r3, #12]
 8028286:	611a      	str	r2, [r3, #16]
 8028288:	79fb      	ldrb	r3, [r7, #7]
 802828a:	617b      	str	r3, [r7, #20]
 802828c:	79bb      	ldrb	r3, [r7, #6]
 802828e:	61bb      	str	r3, [r7, #24]
 8028290:	2302      	movs	r3, #2
 8028292:	61fb      	str	r3, [r7, #28]
										  .Sector = sector,
										  .NbSectors = sectornum,
										  .VoltageRange = FLASH_VOLTAGE_RANGE_3
									  };

	HAL_FLASH_Unlock();
 8028294:	f7fd f838 	bl	8025308 <HAL_FLASH_Unlock>

	HAL_StatusTypeDef ret = HAL_FLASHEx_Erase(&erase, &flag);
 8028298:	f107 0220 	add.w	r2, r7, #32
 802829c:	f107 030c 	add.w	r3, r7, #12
 80282a0:	4611      	mov	r1, r2
 80282a2:	4618      	mov	r0, r3
 80282a4:	f7fd f992 	bl	80255cc <HAL_FLASHEx_Erase>
 80282a8:	4603      	mov	r3, r0
 80282aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	HAL_FLASH_Lock();
 80282ae:	f7fd f84d 	bl	802534c <HAL_FLASH_Lock>

	return ret;
 80282b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80282b6:	4618      	mov	r0, r3
 80282b8:	3728      	adds	r7, #40	; 0x28
 80282ba:	46bd      	mov	sp, r7
 80282bc:	bd80      	pop	{r7, pc}
	...

080282c0 <hal_initGPIO>:
/**
 * 初始化IO
 * gpio 结构体  gpiocnt 要初始化GPIO的数量
 */
void hal_initGPIO(GPIOs gpio)
{
 80282c0:	b084      	sub	sp, #16
 80282c2:	b580      	push	{r7, lr}
 80282c4:	b08a      	sub	sp, #40	; 0x28
 80282c6:	af00      	add	r7, sp, #0
 80282c8:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 80282cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /*初始化时钟*/
    if(gpio.gpio_port==GPIOA)
 80282d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282d2:	4a51      	ldr	r2, [pc, #324]	; (8028418 <hal_initGPIO+0x158>)
 80282d4:	4293      	cmp	r3, r2
 80282d6:	d10e      	bne.n	80282f6 <hal_initGPIO+0x36>
    {
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80282d8:	2300      	movs	r3, #0
 80282da:	613b      	str	r3, [r7, #16]
 80282dc:	4b4f      	ldr	r3, [pc, #316]	; (802841c <hal_initGPIO+0x15c>)
 80282de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282e0:	4a4e      	ldr	r2, [pc, #312]	; (802841c <hal_initGPIO+0x15c>)
 80282e2:	f043 0301 	orr.w	r3, r3, #1
 80282e6:	6313      	str	r3, [r2, #48]	; 0x30
 80282e8:	4b4c      	ldr	r3, [pc, #304]	; (802841c <hal_initGPIO+0x15c>)
 80282ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282ec:	f003 0301 	and.w	r3, r3, #1
 80282f0:	613b      	str	r3, [r7, #16]
 80282f2:	693b      	ldr	r3, [r7, #16]
 80282f4:	e04a      	b.n	802838c <hal_initGPIO+0xcc>
    }else if(gpio.gpio_port==GPIOB)
 80282f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282f8:	4a49      	ldr	r2, [pc, #292]	; (8028420 <hal_initGPIO+0x160>)
 80282fa:	4293      	cmp	r3, r2
 80282fc:	d10e      	bne.n	802831c <hal_initGPIO+0x5c>
    {
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80282fe:	2300      	movs	r3, #0
 8028300:	60fb      	str	r3, [r7, #12]
 8028302:	4b46      	ldr	r3, [pc, #280]	; (802841c <hal_initGPIO+0x15c>)
 8028304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028306:	4a45      	ldr	r2, [pc, #276]	; (802841c <hal_initGPIO+0x15c>)
 8028308:	f043 0302 	orr.w	r3, r3, #2
 802830c:	6313      	str	r3, [r2, #48]	; 0x30
 802830e:	4b43      	ldr	r3, [pc, #268]	; (802841c <hal_initGPIO+0x15c>)
 8028310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028312:	f003 0302 	and.w	r3, r3, #2
 8028316:	60fb      	str	r3, [r7, #12]
 8028318:	68fb      	ldr	r3, [r7, #12]
 802831a:	e037      	b.n	802838c <hal_initGPIO+0xcc>
    }else if(gpio.gpio_port==GPIOC)
 802831c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802831e:	4a41      	ldr	r2, [pc, #260]	; (8028424 <hal_initGPIO+0x164>)
 8028320:	4293      	cmp	r3, r2
 8028322:	d10e      	bne.n	8028342 <hal_initGPIO+0x82>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8028324:	2300      	movs	r3, #0
 8028326:	60bb      	str	r3, [r7, #8]
 8028328:	4b3c      	ldr	r3, [pc, #240]	; (802841c <hal_initGPIO+0x15c>)
 802832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802832c:	4a3b      	ldr	r2, [pc, #236]	; (802841c <hal_initGPIO+0x15c>)
 802832e:	f043 0304 	orr.w	r3, r3, #4
 8028332:	6313      	str	r3, [r2, #48]	; 0x30
 8028334:	4b39      	ldr	r3, [pc, #228]	; (802841c <hal_initGPIO+0x15c>)
 8028336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028338:	f003 0304 	and.w	r3, r3, #4
 802833c:	60bb      	str	r3, [r7, #8]
 802833e:	68bb      	ldr	r3, [r7, #8]
 8028340:	e024      	b.n	802838c <hal_initGPIO+0xcc>
    }else if(gpio.gpio_port==GPIOD)
 8028342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028344:	4a38      	ldr	r2, [pc, #224]	; (8028428 <hal_initGPIO+0x168>)
 8028346:	4293      	cmp	r3, r2
 8028348:	d10e      	bne.n	8028368 <hal_initGPIO+0xa8>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 802834a:	2300      	movs	r3, #0
 802834c:	607b      	str	r3, [r7, #4]
 802834e:	4b33      	ldr	r3, [pc, #204]	; (802841c <hal_initGPIO+0x15c>)
 8028350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028352:	4a32      	ldr	r2, [pc, #200]	; (802841c <hal_initGPIO+0x15c>)
 8028354:	f043 0308 	orr.w	r3, r3, #8
 8028358:	6313      	str	r3, [r2, #48]	; 0x30
 802835a:	4b30      	ldr	r3, [pc, #192]	; (802841c <hal_initGPIO+0x15c>)
 802835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802835e:	f003 0308 	and.w	r3, r3, #8
 8028362:	607b      	str	r3, [r7, #4]
 8028364:	687b      	ldr	r3, [r7, #4]
 8028366:	e011      	b.n	802838c <hal_initGPIO+0xcc>
    }else if(gpio.gpio_port==GPIOE)
 8028368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802836a:	4a30      	ldr	r2, [pc, #192]	; (802842c <hal_initGPIO+0x16c>)
 802836c:	4293      	cmp	r3, r2
 802836e:	d10d      	bne.n	802838c <hal_initGPIO+0xcc>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8028370:	2300      	movs	r3, #0
 8028372:	603b      	str	r3, [r7, #0]
 8028374:	4b29      	ldr	r3, [pc, #164]	; (802841c <hal_initGPIO+0x15c>)
 8028376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028378:	4a28      	ldr	r2, [pc, #160]	; (802841c <hal_initGPIO+0x15c>)
 802837a:	f043 0310 	orr.w	r3, r3, #16
 802837e:	6313      	str	r3, [r2, #48]	; 0x30
 8028380:	4b26      	ldr	r3, [pc, #152]	; (802841c <hal_initGPIO+0x15c>)
 8028382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028384:	f003 0310 	and.w	r3, r3, #16
 8028388:	603b      	str	r3, [r7, #0]
 802838a:	683b      	ldr	r3, [r7, #0]
    }

    /*配置GPIO*/
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 802838c:	f107 0314 	add.w	r3, r7, #20
 8028390:	2200      	movs	r2, #0
 8028392:	601a      	str	r2, [r3, #0]
 8028394:	605a      	str	r2, [r3, #4]
 8028396:	609a      	str	r2, [r3, #8]
 8028398:	60da      	str	r2, [r3, #12]
 802839a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = gpio.gpio_pin;
 802839c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802839e:	617b      	str	r3, [r7, #20]

    if(gpio.gpio_mode==INPUT)
 80283a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	d104      	bne.n	80283b2 <hal_initGPIO+0xf2>
    {
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80283a8:	2300      	movs	r3, #0
 80283aa:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80283ac:	2301      	movs	r3, #1
 80283ae:	61fb      	str	r3, [r7, #28]
 80283b0:	e024      	b.n	80283fc <hal_initGPIO+0x13c>

    }else if(gpio.gpio_mode==OUTPUT)
 80283b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80283b6:	2b01      	cmp	r3, #1
 80283b8:	d10d      	bne.n	80283d6 <hal_initGPIO+0x116>
    {
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80283ba:	2301      	movs	r3, #1
 80283bc:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80283be:	2300      	movs	r3, #0
 80283c0:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80283c2:	2301      	movs	r3, #1
 80283c4:	623b      	str	r3, [r7, #32]

        /*配置默认电平*/
        HAL_GPIO_WritePin(gpio.gpio_port, gpio.gpio_pin, gpio.gpio_level);  
 80283c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80283c8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80283ca:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80283ce:	4618      	mov	r0, r3
 80283d0:	f7fd fbd2 	bl	8025b78 <HAL_GPIO_WritePin>
 80283d4:	e012      	b.n	80283fc <hal_initGPIO+0x13c>
    }else   //外部中断
    {
        GPIO_InitStruct.Mode = gpio.exti_ege;
 80283d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80283d8:	61bb      	str	r3, [r7, #24]

        HAL_NVIC_SetPriority(gpio.exti_irqn, gpio.exti_pre, gpio.exti_sub);
 80283da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80283de:	b25b      	sxtb	r3, r3
 80283e0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80283e4:	4611      	mov	r1, r2
 80283e6:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80283ea:	4618      	mov	r0, r3
 80283ec:	f7fc fefd 	bl	80251ea <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(gpio.exti_irqn);
 80283f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80283f4:	b25b      	sxtb	r3, r3
 80283f6:	4618      	mov	r0, r3
 80283f8:	f7fc ff13 	bl	8025222 <HAL_NVIC_EnableIRQ>
    }

    HAL_GPIO_Init(gpio.gpio_port, &GPIO_InitStruct);  
 80283fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80283fe:	f107 0214 	add.w	r2, r7, #20
 8028402:	4611      	mov	r1, r2
 8028404:	4618      	mov	r0, r3
 8028406:	f7fd fa03 	bl	8025810 <HAL_GPIO_Init>
}
 802840a:	bf00      	nop
 802840c:	3728      	adds	r7, #40	; 0x28
 802840e:	46bd      	mov	sp, r7
 8028410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8028414:	b004      	add	sp, #16
 8028416:	4770      	bx	lr
 8028418:	40020000 	.word	0x40020000
 802841c:	40023800 	.word	0x40023800
 8028420:	40020400 	.word	0x40020400
 8028424:	40020800 	.word	0x40020800
 8028428:	40020c00 	.word	0x40020c00
 802842c:	40021000 	.word	0x40021000

08028430 <hal_setGPIOLevel>:
/**
 * 设置IO电平
 * 
 */
void hal_setGPIOLevel(GPIOs gpio, uint8_t level)
{
 8028430:	b084      	sub	sp, #16
 8028432:	b580      	push	{r7, lr}
 8028434:	af00      	add	r7, sp, #0
 8028436:	f107 0c08 	add.w	ip, r7, #8
 802843a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_GPIO_WritePin(gpio.gpio_port, gpio.gpio_pin, level);  
 802843e:	68fb      	ldr	r3, [r7, #12]
 8028440:	8a39      	ldrh	r1, [r7, #16]
 8028442:	7f3a      	ldrb	r2, [r7, #28]
 8028444:	4618      	mov	r0, r3
 8028446:	f7fd fb97 	bl	8025b78 <HAL_GPIO_WritePin>
}
 802844a:	bf00      	nop
 802844c:	46bd      	mov	sp, r7
 802844e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8028452:	b004      	add	sp, #16
 8028454:	4770      	bx	lr

08028456 <hal_getGPIOLevel>:
 * 读取IO电平
 * 
 * 
 */
uint8_t hal_getGPIOLevel(GPIOs gpio)
{
 8028456:	b084      	sub	sp, #16
 8028458:	b580      	push	{r7, lr}
 802845a:	af00      	add	r7, sp, #0
 802845c:	f107 0c08 	add.w	ip, r7, #8
 8028460:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return HAL_GPIO_ReadPin(gpio.gpio_port, gpio.gpio_pin);
 8028464:	68fb      	ldr	r3, [r7, #12]
 8028466:	8a3a      	ldrh	r2, [r7, #16]
 8028468:	4611      	mov	r1, r2
 802846a:	4618      	mov	r0, r3
 802846c:	f7fd fb6c 	bl	8025b48 <HAL_GPIO_ReadPin>
 8028470:	4603      	mov	r3, r0
}
 8028472:	4618      	mov	r0, r3
 8028474:	46bd      	mov	sp, r7
 8028476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802847a:	b004      	add	sp, #16
 802847c:	4770      	bx	lr
	...

08028480 <hal_initSPI>:
/**
 * 初始化SPI
 * 
 */
void hal_initSPI(SPIn spi, POLARITY polarity, PHASE phase)
{
 8028480:	b580      	push	{r7, lr}
 8028482:	b082      	sub	sp, #8
 8028484:	af00      	add	r7, sp, #0
 8028486:	4603      	mov	r3, r0
 8028488:	71fb      	strb	r3, [r7, #7]
 802848a:	460b      	mov	r3, r1
 802848c:	71bb      	strb	r3, [r7, #6]
 802848e:	4613      	mov	r3, r2
 8028490:	717b      	strb	r3, [r7, #5]
    if(spi==SPI_1)
 8028492:	79fb      	ldrb	r3, [r7, #7]
 8028494:	2b00      	cmp	r3, #0
 8028496:	d12e      	bne.n	80284f6 <hal_initSPI+0x76>
    {
    	  hspi1.Instance = SPI1;
 8028498:	4b31      	ldr	r3, [pc, #196]	; (8028560 <hal_initSPI+0xe0>)
 802849a:	4a32      	ldr	r2, [pc, #200]	; (8028564 <hal_initSPI+0xe4>)
 802849c:	601a      	str	r2, [r3, #0]
    	  hspi1.Init.Mode = SPI_MODE_MASTER;
 802849e:	4b30      	ldr	r3, [pc, #192]	; (8028560 <hal_initSPI+0xe0>)
 80284a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80284a4:	605a      	str	r2, [r3, #4]
    	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80284a6:	4b2e      	ldr	r3, [pc, #184]	; (8028560 <hal_initSPI+0xe0>)
 80284a8:	2200      	movs	r2, #0
 80284aa:	609a      	str	r2, [r3, #8]
    	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80284ac:	4b2c      	ldr	r3, [pc, #176]	; (8028560 <hal_initSPI+0xe0>)
 80284ae:	2200      	movs	r2, #0
 80284b0:	60da      	str	r2, [r3, #12]
    	  hspi1.Init.CLKPolarity = polarity;
 80284b2:	79bb      	ldrb	r3, [r7, #6]
 80284b4:	4a2a      	ldr	r2, [pc, #168]	; (8028560 <hal_initSPI+0xe0>)
 80284b6:	6113      	str	r3, [r2, #16]
    	  hspi1.Init.CLKPhase = phase;
 80284b8:	797b      	ldrb	r3, [r7, #5]
 80284ba:	4a29      	ldr	r2, [pc, #164]	; (8028560 <hal_initSPI+0xe0>)
 80284bc:	6153      	str	r3, [r2, #20]
    	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80284be:	4b28      	ldr	r3, [pc, #160]	; (8028560 <hal_initSPI+0xe0>)
 80284c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80284c4:	619a      	str	r2, [r3, #24]
    	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80284c6:	4b26      	ldr	r3, [pc, #152]	; (8028560 <hal_initSPI+0xe0>)
 80284c8:	2210      	movs	r2, #16
 80284ca:	61da      	str	r2, [r3, #28]
    	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80284cc:	4b24      	ldr	r3, [pc, #144]	; (8028560 <hal_initSPI+0xe0>)
 80284ce:	2200      	movs	r2, #0
 80284d0:	621a      	str	r2, [r3, #32]
    	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80284d2:	4b23      	ldr	r3, [pc, #140]	; (8028560 <hal_initSPI+0xe0>)
 80284d4:	2200      	movs	r2, #0
 80284d6:	625a      	str	r2, [r3, #36]	; 0x24
    	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80284d8:	4b21      	ldr	r3, [pc, #132]	; (8028560 <hal_initSPI+0xe0>)
 80284da:	2200      	movs	r2, #0
 80284dc:	629a      	str	r2, [r3, #40]	; 0x28
    	  hspi1.Init.CRCPolynomial = 10;
 80284de:	4b20      	ldr	r3, [pc, #128]	; (8028560 <hal_initSPI+0xe0>)
 80284e0:	220a      	movs	r2, #10
 80284e2:	62da      	str	r2, [r3, #44]	; 0x2c
    	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80284e4:	481e      	ldr	r0, [pc, #120]	; (8028560 <hal_initSPI+0xe0>)
 80284e6:	f7fe f8f7 	bl	80266d8 <HAL_SPI_Init>
 80284ea:	4603      	mov	r3, r0
 80284ec:	2b00      	cmp	r3, #0
 80284ee:	d033      	beq.n	8028558 <hal_initSPI+0xd8>
    	  {
    	    Error_Handler();
 80284f0:	f7fa fd2e 	bl	8022f50 <Error_Handler>
    	  }
    }else
    {

    }
}
 80284f4:	e030      	b.n	8028558 <hal_initSPI+0xd8>
    }else if(spi==SPI_2)
 80284f6:	79fb      	ldrb	r3, [r7, #7]
 80284f8:	2b01      	cmp	r3, #1
 80284fa:	d12d      	bne.n	8028558 <hal_initSPI+0xd8>
    	  hspi2.Instance = SPI2;
 80284fc:	4b1a      	ldr	r3, [pc, #104]	; (8028568 <hal_initSPI+0xe8>)
 80284fe:	4a1b      	ldr	r2, [pc, #108]	; (802856c <hal_initSPI+0xec>)
 8028500:	601a      	str	r2, [r3, #0]
    	  hspi2.Init.Mode = SPI_MODE_MASTER;
 8028502:	4b19      	ldr	r3, [pc, #100]	; (8028568 <hal_initSPI+0xe8>)
 8028504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8028508:	605a      	str	r2, [r3, #4]
    	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 802850a:	4b17      	ldr	r3, [pc, #92]	; (8028568 <hal_initSPI+0xe8>)
 802850c:	2200      	movs	r2, #0
 802850e:	609a      	str	r2, [r3, #8]
    	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8028510:	4b15      	ldr	r3, [pc, #84]	; (8028568 <hal_initSPI+0xe8>)
 8028512:	2200      	movs	r2, #0
 8028514:	60da      	str	r2, [r3, #12]
    	  hspi2.Init.CLKPolarity = polarity;
 8028516:	79bb      	ldrb	r3, [r7, #6]
 8028518:	4a13      	ldr	r2, [pc, #76]	; (8028568 <hal_initSPI+0xe8>)
 802851a:	6113      	str	r3, [r2, #16]
    	  hspi2.Init.CLKPhase = phase;
 802851c:	797b      	ldrb	r3, [r7, #5]
 802851e:	4a12      	ldr	r2, [pc, #72]	; (8028568 <hal_initSPI+0xe8>)
 8028520:	6153      	str	r3, [r2, #20]
    	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8028522:	4b11      	ldr	r3, [pc, #68]	; (8028568 <hal_initSPI+0xe8>)
 8028524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8028528:	619a      	str	r2, [r3, #24]
    	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 802852a:	4b0f      	ldr	r3, [pc, #60]	; (8028568 <hal_initSPI+0xe8>)
 802852c:	2210      	movs	r2, #16
 802852e:	61da      	str	r2, [r3, #28]
    	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8028530:	4b0d      	ldr	r3, [pc, #52]	; (8028568 <hal_initSPI+0xe8>)
 8028532:	2200      	movs	r2, #0
 8028534:	621a      	str	r2, [r3, #32]
    	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8028536:	4b0c      	ldr	r3, [pc, #48]	; (8028568 <hal_initSPI+0xe8>)
 8028538:	2200      	movs	r2, #0
 802853a:	625a      	str	r2, [r3, #36]	; 0x24
    	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802853c:	4b0a      	ldr	r3, [pc, #40]	; (8028568 <hal_initSPI+0xe8>)
 802853e:	2200      	movs	r2, #0
 8028540:	629a      	str	r2, [r3, #40]	; 0x28
    	  hspi2.Init.CRCPolynomial = 10;
 8028542:	4b09      	ldr	r3, [pc, #36]	; (8028568 <hal_initSPI+0xe8>)
 8028544:	220a      	movs	r2, #10
 8028546:	62da      	str	r2, [r3, #44]	; 0x2c
    	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8028548:	4807      	ldr	r0, [pc, #28]	; (8028568 <hal_initSPI+0xe8>)
 802854a:	f7fe f8c5 	bl	80266d8 <HAL_SPI_Init>
 802854e:	4603      	mov	r3, r0
 8028550:	2b00      	cmp	r3, #0
 8028552:	d001      	beq.n	8028558 <hal_initSPI+0xd8>
    	    Error_Handler();
 8028554:	f7fa fcfc 	bl	8022f50 <Error_Handler>
}
 8028558:	bf00      	nop
 802855a:	3708      	adds	r7, #8
 802855c:	46bd      	mov	sp, r7
 802855e:	bd80      	pop	{r7, pc}
 8028560:	20004d44 	.word	0x20004d44
 8028564:	40013000 	.word	0x40013000
 8028568:	20004cec 	.word	0x20004cec
 802856c:	40003800 	.word	0x40003800

08028570 <hal_sendSPIBytes>:
/**
 * 发送SPI数据
 * 
 */
void hal_sendSPIBytes(SPIn spi, unsigned char *buf, unsigned short size)
{
 8028570:	b580      	push	{r7, lr}
 8028572:	b084      	sub	sp, #16
 8028574:	af00      	add	r7, sp, #0
 8028576:	4603      	mov	r3, r0
 8028578:	6039      	str	r1, [r7, #0]
 802857a:	71fb      	strb	r3, [r7, #7]
 802857c:	4613      	mov	r3, r2
 802857e:	80bb      	strh	r3, [r7, #4]
    SPI_HandleTypeDef * hspi;

    if(spi==SPI_1)
 8028580:	79fb      	ldrb	r3, [r7, #7]
 8028582:	2b00      	cmp	r3, #0
 8028584:	d102      	bne.n	802858c <hal_sendSPIBytes+0x1c>
    {
        hspi = &hspi1;
 8028586:	4b11      	ldr	r3, [pc, #68]	; (80285cc <hal_sendSPIBytes+0x5c>)
 8028588:	60fb      	str	r3, [r7, #12]
 802858a:	e004      	b.n	8028596 <hal_sendSPIBytes+0x26>
    }else if(spi==SPI_2)
 802858c:	79fb      	ldrb	r3, [r7, #7]
 802858e:	2b01      	cmp	r3, #1
 8028590:	d101      	bne.n	8028596 <hal_sendSPIBytes+0x26>
    {
        hspi = &hspi2;
 8028592:	4b0f      	ldr	r3, [pc, #60]	; (80285d0 <hal_sendSPIBytes+0x60>)
 8028594:	60fb      	str	r3, [r7, #12]
    {
        
    }    

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028596:	68fb      	ldr	r3, [r7, #12]
 8028598:	681b      	ldr	r3, [r3, #0]
 802859a:	681b      	ldr	r3, [r3, #0]
 802859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80285a0:	2b40      	cmp	r3, #64	; 0x40
 80285a2:	d007      	beq.n	80285b4 <hal_sendSPIBytes+0x44>
    {
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 80285a4:	68fb      	ldr	r3, [r7, #12]
 80285a6:	681b      	ldr	r3, [r3, #0]
 80285a8:	681a      	ldr	r2, [r3, #0]
 80285aa:	68fb      	ldr	r3, [r7, #12]
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80285b2:	601a      	str	r2, [r3, #0]
    }
    HAL_SPI_Transmit(hspi, buf, size, 2000);
 80285b4:	88ba      	ldrh	r2, [r7, #4]
 80285b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80285ba:	6839      	ldr	r1, [r7, #0]
 80285bc:	68f8      	ldr	r0, [r7, #12]
 80285be:	f7fe f8ef 	bl	80267a0 <HAL_SPI_Transmit>
}
 80285c2:	bf00      	nop
 80285c4:	3710      	adds	r7, #16
 80285c6:	46bd      	mov	sp, r7
 80285c8:	bd80      	pop	{r7, pc}
 80285ca:	bf00      	nop
 80285cc:	20004d44 	.word	0x20004d44
 80285d0:	20004cec 	.word	0x20004cec

080285d4 <hal_readSPIBytes>:
/**
 * 读取SPI数据
 * 
 */
void hal_readSPIBytes(SPIn spi, unsigned char *buf, unsigned short size)
{
 80285d4:	b580      	push	{r7, lr}
 80285d6:	b084      	sub	sp, #16
 80285d8:	af00      	add	r7, sp, #0
 80285da:	4603      	mov	r3, r0
 80285dc:	6039      	str	r1, [r7, #0]
 80285de:	71fb      	strb	r3, [r7, #7]
 80285e0:	4613      	mov	r3, r2
 80285e2:	80bb      	strh	r3, [r7, #4]
    SPI_HandleTypeDef * hspi;

    if(spi==SPI_1)
 80285e4:	79fb      	ldrb	r3, [r7, #7]
 80285e6:	2b00      	cmp	r3, #0
 80285e8:	d102      	bne.n	80285f0 <hal_readSPIBytes+0x1c>
    {
        hspi = &hspi1;
 80285ea:	4b11      	ldr	r3, [pc, #68]	; (8028630 <hal_readSPIBytes+0x5c>)
 80285ec:	60fb      	str	r3, [r7, #12]
 80285ee:	e004      	b.n	80285fa <hal_readSPIBytes+0x26>
    }else if(spi==SPI_2)
 80285f0:	79fb      	ldrb	r3, [r7, #7]
 80285f2:	2b01      	cmp	r3, #1
 80285f4:	d101      	bne.n	80285fa <hal_readSPIBytes+0x26>
    {
        hspi = &hspi2;
 80285f6:	4b0f      	ldr	r3, [pc, #60]	; (8028634 <hal_readSPIBytes+0x60>)
 80285f8:	60fb      	str	r3, [r7, #12]
    {
        
    } 

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80285fa:	68fb      	ldr	r3, [r7, #12]
 80285fc:	681b      	ldr	r3, [r3, #0]
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028604:	2b40      	cmp	r3, #64	; 0x40
 8028606:	d007      	beq.n	8028618 <hal_readSPIBytes+0x44>
    {
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 8028608:	68fb      	ldr	r3, [r7, #12]
 802860a:	681b      	ldr	r3, [r3, #0]
 802860c:	681a      	ldr	r2, [r3, #0]
 802860e:	68fb      	ldr	r3, [r7, #12]
 8028610:	681b      	ldr	r3, [r3, #0]
 8028612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028616:	601a      	str	r2, [r3, #0]
    }
    HAL_SPI_Receive(hspi, buf, size, 2000);
 8028618:	88ba      	ldrh	r2, [r7, #4]
 802861a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 802861e:	6839      	ldr	r1, [r7, #0]
 8028620:	68f8      	ldr	r0, [r7, #12]
 8028622:	f7fe f9f1 	bl	8026a08 <HAL_SPI_Receive>
}
 8028626:	bf00      	nop
 8028628:	3710      	adds	r7, #16
 802862a:	46bd      	mov	sp, r7
 802862c:	bd80      	pop	{r7, pc}
 802862e:	bf00      	nop
 8028630:	20004d44 	.word	0x20004d44
 8028634:	20004cec 	.word	0x20004cec

08028638 <hal_initTimer>:

/**
 * 初始化TIM-CH3/4
 */
void hal_initTimer(void)
{
 8028638:	b580      	push	{r7, lr}
 802863a:	af00      	add	r7, sp, #0
    static char cfg = 0; //是否初始化过了 0 未 1 是

    if(cfg==1)
 802863c:	4b95      	ldr	r3, [pc, #596]	; (8028894 <hal_initTimer+0x25c>)
 802863e:	781b      	ldrb	r3, [r3, #0]
 8028640:	2b01      	cmp	r3, #1
 8028642:	f000 8124 	beq.w	802888e <hal_initTimer+0x256>
        return ;
    }

    /*定时器1 初始化*/
    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8028646:	4b94      	ldr	r3, [pc, #592]	; (8028898 <hal_initTimer+0x260>)
 8028648:	4a94      	ldr	r2, [pc, #592]	; (802889c <hal_initTimer+0x264>)
 802864a:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 168;
 802864c:	4b92      	ldr	r3, [pc, #584]	; (8028898 <hal_initTimer+0x260>)
 802864e:	22a8      	movs	r2, #168	; 0xa8
 8028650:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8028652:	4b91      	ldr	r3, [pc, #580]	; (8028898 <hal_initTimer+0x260>)
 8028654:	2200      	movs	r2, #0
 8028656:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000000/PWM_FREQ;
 8028658:	4b8f      	ldr	r3, [pc, #572]	; (8028898 <hal_initTimer+0x260>)
 802865a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802865e:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8028660:	4b8d      	ldr	r3, [pc, #564]	; (8028898 <hal_initTimer+0x260>)
 8028662:	2200      	movs	r2, #0
 8028664:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8028666:	4b8c      	ldr	r3, [pc, #560]	; (8028898 <hal_initTimer+0x260>)
 8028668:	2200      	movs	r2, #0
 802866a:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 802866c:	4b8a      	ldr	r3, [pc, #552]	; (8028898 <hal_initTimer+0x260>)
 802866e:	2280      	movs	r2, #128	; 0x80
 8028670:	619a      	str	r2, [r3, #24]
    if(HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8028672:	4889      	ldr	r0, [pc, #548]	; (8028898 <hal_initTimer+0x260>)
 8028674:	f7fe fd84 	bl	8027180 <HAL_TIM_PWM_Init>
 8028678:	4603      	mov	r3, r0
 802867a:	2b00      	cmp	r3, #0
 802867c:	d001      	beq.n	8028682 <hal_initTimer+0x4a>
    {
        /* Initialization Error */
        Error_Handler();
 802867e:	f7fa fc67 	bl	8022f50 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8028682:	4b87      	ldr	r3, [pc, #540]	; (80288a0 <hal_initTimer+0x268>)
 8028684:	2260      	movs	r2, #96	; 0x60
 8028686:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 8028688:	4b85      	ldr	r3, [pc, #532]	; (80288a0 <hal_initTimer+0x268>)
 802868a:	2200      	movs	r2, #0
 802868c:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802868e:	4b84      	ldr	r3, [pc, #528]	; (80288a0 <hal_initTimer+0x268>)
 8028690:	2200      	movs	r2, #0
 8028692:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8028694:	4b82      	ldr	r3, [pc, #520]	; (80288a0 <hal_initTimer+0x268>)
 8028696:	2200      	movs	r2, #0
 8028698:	611a      	str	r2, [r3, #16]

    if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802869a:	2200      	movs	r2, #0
 802869c:	4980      	ldr	r1, [pc, #512]	; (80288a0 <hal_initTimer+0x268>)
 802869e:	487e      	ldr	r0, [pc, #504]	; (8028898 <hal_initTimer+0x260>)
 80286a0:	f7fe fdd8 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 80286a4:	4603      	mov	r3, r0
 80286a6:	2b00      	cmp	r3, #0
 80286a8:	d001      	beq.n	80286ae <hal_initTimer+0x76>
    {
        Error_Handler();
 80286aa:	f7fa fc51 	bl	8022f50 <Error_Handler>
    }

    if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80286ae:	2204      	movs	r2, #4
 80286b0:	497b      	ldr	r1, [pc, #492]	; (80288a0 <hal_initTimer+0x268>)
 80286b2:	4879      	ldr	r0, [pc, #484]	; (8028898 <hal_initTimer+0x260>)
 80286b4:	f7fe fdce 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 80286b8:	4603      	mov	r3, r0
 80286ba:	2b00      	cmp	r3, #0
 80286bc:	d001      	beq.n	80286c2 <hal_initTimer+0x8a>
    {
        Error_Handler();
 80286be:	f7fa fc47 	bl	8022f50 <Error_Handler>
    }

    if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80286c2:	2208      	movs	r2, #8
 80286c4:	4976      	ldr	r1, [pc, #472]	; (80288a0 <hal_initTimer+0x268>)
 80286c6:	4874      	ldr	r0, [pc, #464]	; (8028898 <hal_initTimer+0x260>)
 80286c8:	f7fe fdc4 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 80286cc:	4603      	mov	r3, r0
 80286ce:	2b00      	cmp	r3, #0
 80286d0:	d001      	beq.n	80286d6 <hal_initTimer+0x9e>
    {
        Error_Handler();
 80286d2:	f7fa fc3d 	bl	8022f50 <Error_Handler>
    }

    if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80286d6:	220c      	movs	r2, #12
 80286d8:	4971      	ldr	r1, [pc, #452]	; (80288a0 <hal_initTimer+0x268>)
 80286da:	486f      	ldr	r0, [pc, #444]	; (8028898 <hal_initTimer+0x260>)
 80286dc:	f7fe fdba 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 80286e0:	4603      	mov	r3, r0
 80286e2:	2b00      	cmp	r3, #0
 80286e4:	d001      	beq.n	80286ea <hal_initTimer+0xb2>
    {
        Error_Handler();
 80286e6:	f7fa fc33 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 1 */
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80286ea:	2100      	movs	r1, #0
 80286ec:	486a      	ldr	r0, [pc, #424]	; (8028898 <hal_initTimer+0x260>)
 80286ee:	f7fe fd73 	bl	80271d8 <HAL_TIM_PWM_Start>
 80286f2:	4603      	mov	r3, r0
 80286f4:	2b00      	cmp	r3, #0
 80286f6:	d001      	beq.n	80286fc <hal_initTimer+0xc4>
    {
        /* PWM Generation Error */
        Error_Handler();
 80286f8:	f7fa fc2a 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 2 */
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80286fc:	2104      	movs	r1, #4
 80286fe:	4866      	ldr	r0, [pc, #408]	; (8028898 <hal_initTimer+0x260>)
 8028700:	f7fe fd6a 	bl	80271d8 <HAL_TIM_PWM_Start>
 8028704:	4603      	mov	r3, r0
 8028706:	2b00      	cmp	r3, #0
 8028708:	d001      	beq.n	802870e <hal_initTimer+0xd6>
    {
        /* PWM Generation Error */
        Error_Handler();
 802870a:	f7fa fc21 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 3 */
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 802870e:	2108      	movs	r1, #8
 8028710:	4861      	ldr	r0, [pc, #388]	; (8028898 <hal_initTimer+0x260>)
 8028712:	f7fe fd61 	bl	80271d8 <HAL_TIM_PWM_Start>
 8028716:	4603      	mov	r3, r0
 8028718:	2b00      	cmp	r3, #0
 802871a:	d001      	beq.n	8028720 <hal_initTimer+0xe8>
    {
        /* PWM Generation Error */
        Error_Handler();
 802871c:	f7fa fc18 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 4 */
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8028720:	210c      	movs	r1, #12
 8028722:	485d      	ldr	r0, [pc, #372]	; (8028898 <hal_initTimer+0x260>)
 8028724:	f7fe fd58 	bl	80271d8 <HAL_TIM_PWM_Start>
 8028728:	4603      	mov	r3, r0
 802872a:	2b00      	cmp	r3, #0
 802872c:	d001      	beq.n	8028732 <hal_initTimer+0xfa>
    {
        /* PWM Generation Error */
        Error_Handler();
 802872e:	f7fa fc0f 	bl	8022f50 <Error_Handler>
    }

    /*定时器2 初始化*/
    /* USER CODE END TIM1_Init 1 */
    htim2.Instance = TIM2;
 8028732:	4b5c      	ldr	r3, [pc, #368]	; (80288a4 <hal_initTimer+0x26c>)
 8028734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8028738:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 84;
 802873a:	4b5a      	ldr	r3, [pc, #360]	; (80288a4 <hal_initTimer+0x26c>)
 802873c:	2254      	movs	r2, #84	; 0x54
 802873e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8028740:	4b58      	ldr	r3, [pc, #352]	; (80288a4 <hal_initTimer+0x26c>)
 8028742:	2200      	movs	r2, #0
 8028744:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1000000/PWM_FREQ;
 8028746:	4b57      	ldr	r3, [pc, #348]	; (80288a4 <hal_initTimer+0x26c>)
 8028748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802874c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802874e:	4b55      	ldr	r3, [pc, #340]	; (80288a4 <hal_initTimer+0x26c>)
 8028750:	2200      	movs	r2, #0
 8028752:	611a      	str	r2, [r3, #16]
    htim2.Init.RepetitionCounter = 0;
 8028754:	4b53      	ldr	r3, [pc, #332]	; (80288a4 <hal_initTimer+0x26c>)
 8028756:	2200      	movs	r2, #0
 8028758:	615a      	str	r2, [r3, #20]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 802875a:	4b52      	ldr	r3, [pc, #328]	; (80288a4 <hal_initTimer+0x26c>)
 802875c:	2280      	movs	r2, #128	; 0x80
 802875e:	619a      	str	r2, [r3, #24]
    if(HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8028760:	4850      	ldr	r0, [pc, #320]	; (80288a4 <hal_initTimer+0x26c>)
 8028762:	f7fe fd0d 	bl	8027180 <HAL_TIM_PWM_Init>
 8028766:	4603      	mov	r3, r0
 8028768:	2b00      	cmp	r3, #0
 802876a:	d001      	beq.n	8028770 <hal_initTimer+0x138>
    {
        /* Initialization Error */
        Error_Handler();
 802876c:	f7fa fbf0 	bl	8022f50 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8028770:	4b4b      	ldr	r3, [pc, #300]	; (80288a0 <hal_initTimer+0x268>)
 8028772:	2260      	movs	r2, #96	; 0x60
 8028774:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 8028776:	4b4a      	ldr	r3, [pc, #296]	; (80288a0 <hal_initTimer+0x268>)
 8028778:	2200      	movs	r2, #0
 802877a:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802877c:	4b48      	ldr	r3, [pc, #288]	; (80288a0 <hal_initTimer+0x268>)
 802877e:	2200      	movs	r2, #0
 8028780:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8028782:	4b47      	ldr	r3, [pc, #284]	; (80288a0 <hal_initTimer+0x268>)
 8028784:	2200      	movs	r2, #0
 8028786:	611a      	str	r2, [r3, #16]


    if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8028788:	2204      	movs	r2, #4
 802878a:	4945      	ldr	r1, [pc, #276]	; (80288a0 <hal_initTimer+0x268>)
 802878c:	4845      	ldr	r0, [pc, #276]	; (80288a4 <hal_initTimer+0x26c>)
 802878e:	f7fe fd61 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 8028792:	4603      	mov	r3, r0
 8028794:	2b00      	cmp	r3, #0
 8028796:	d001      	beq.n	802879c <hal_initTimer+0x164>
    {
        Error_Handler();
 8028798:	f7fa fbda 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 2 */
    if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 802879c:	2104      	movs	r1, #4
 802879e:	4841      	ldr	r0, [pc, #260]	; (80288a4 <hal_initTimer+0x26c>)
 80287a0:	f7fe fd1a 	bl	80271d8 <HAL_TIM_PWM_Start>
 80287a4:	4603      	mov	r3, r0
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	d001      	beq.n	80287ae <hal_initTimer+0x176>
    {
        /* PWM Generation Error */
        Error_Handler();
 80287aa:	f7fa fbd1 	bl	8022f50 <Error_Handler>
    }

    /*定时器4 初始化*/
    /* USER CODE END TIM1_Init 1 */
    htim4.Instance = TIM4;
 80287ae:	4b3e      	ldr	r3, [pc, #248]	; (80288a8 <hal_initTimer+0x270>)
 80287b0:	4a3e      	ldr	r2, [pc, #248]	; (80288ac <hal_initTimer+0x274>)
 80287b2:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 84;
 80287b4:	4b3c      	ldr	r3, [pc, #240]	; (80288a8 <hal_initTimer+0x270>)
 80287b6:	2254      	movs	r2, #84	; 0x54
 80287b8:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80287ba:	4b3b      	ldr	r3, [pc, #236]	; (80288a8 <hal_initTimer+0x270>)
 80287bc:	2200      	movs	r2, #0
 80287be:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 1000000/PWM_FREQ;
 80287c0:	4b39      	ldr	r3, [pc, #228]	; (80288a8 <hal_initTimer+0x270>)
 80287c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80287c6:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80287c8:	4b37      	ldr	r3, [pc, #220]	; (80288a8 <hal_initTimer+0x270>)
 80287ca:	2200      	movs	r2, #0
 80287cc:	611a      	str	r2, [r3, #16]
    htim4.Init.RepetitionCounter = 0;
 80287ce:	4b36      	ldr	r3, [pc, #216]	; (80288a8 <hal_initTimer+0x270>)
 80287d0:	2200      	movs	r2, #0
 80287d2:	615a      	str	r2, [r3, #20]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80287d4:	4b34      	ldr	r3, [pc, #208]	; (80288a8 <hal_initTimer+0x270>)
 80287d6:	2280      	movs	r2, #128	; 0x80
 80287d8:	619a      	str	r2, [r3, #24]
    if(HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80287da:	4833      	ldr	r0, [pc, #204]	; (80288a8 <hal_initTimer+0x270>)
 80287dc:	f7fe fcd0 	bl	8027180 <HAL_TIM_PWM_Init>
 80287e0:	4603      	mov	r3, r0
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	d001      	beq.n	80287ea <hal_initTimer+0x1b2>
    {
        /* Initialization Error */
        Error_Handler();
 80287e6:	f7fa fbb3 	bl	8022f50 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80287ea:	4b2d      	ldr	r3, [pc, #180]	; (80288a0 <hal_initTimer+0x268>)
 80287ec:	2260      	movs	r2, #96	; 0x60
 80287ee:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 80287f0:	4b2b      	ldr	r3, [pc, #172]	; (80288a0 <hal_initTimer+0x268>)
 80287f2:	2200      	movs	r2, #0
 80287f4:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80287f6:	4b2a      	ldr	r3, [pc, #168]	; (80288a0 <hal_initTimer+0x268>)
 80287f8:	2200      	movs	r2, #0
 80287fa:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80287fc:	4b28      	ldr	r3, [pc, #160]	; (80288a0 <hal_initTimer+0x268>)
 80287fe:	2200      	movs	r2, #0
 8028800:	611a      	str	r2, [r3, #16]

    if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8028802:	2200      	movs	r2, #0
 8028804:	4926      	ldr	r1, [pc, #152]	; (80288a0 <hal_initTimer+0x268>)
 8028806:	4828      	ldr	r0, [pc, #160]	; (80288a8 <hal_initTimer+0x270>)
 8028808:	f7fe fd24 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 802880c:	4603      	mov	r3, r0
 802880e:	2b00      	cmp	r3, #0
 8028810:	d001      	beq.n	8028816 <hal_initTimer+0x1de>
    {
        Error_Handler();
 8028812:	f7fa fb9d 	bl	8022f50 <Error_Handler>
    }

    if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8028816:	2204      	movs	r2, #4
 8028818:	4921      	ldr	r1, [pc, #132]	; (80288a0 <hal_initTimer+0x268>)
 802881a:	4823      	ldr	r0, [pc, #140]	; (80288a8 <hal_initTimer+0x270>)
 802881c:	f7fe fd1a 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 8028820:	4603      	mov	r3, r0
 8028822:	2b00      	cmp	r3, #0
 8028824:	d001      	beq.n	802882a <hal_initTimer+0x1f2>
    {
        Error_Handler();
 8028826:	f7fa fb93 	bl	8022f50 <Error_Handler>
    }

    if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 802882a:	2208      	movs	r2, #8
 802882c:	491c      	ldr	r1, [pc, #112]	; (80288a0 <hal_initTimer+0x268>)
 802882e:	481e      	ldr	r0, [pc, #120]	; (80288a8 <hal_initTimer+0x270>)
 8028830:	f7fe fd10 	bl	8027254 <HAL_TIM_OC_ConfigChannel>
 8028834:	4603      	mov	r3, r0
 8028836:	2b00      	cmp	r3, #0
 8028838:	d001      	beq.n	802883e <hal_initTimer+0x206>
    {
        Error_Handler();
 802883a:	f7fa fb89 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 1 */
    if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 802883e:	2100      	movs	r1, #0
 8028840:	4819      	ldr	r0, [pc, #100]	; (80288a8 <hal_initTimer+0x270>)
 8028842:	f7fe fcc9 	bl	80271d8 <HAL_TIM_PWM_Start>
 8028846:	4603      	mov	r3, r0
 8028848:	2b00      	cmp	r3, #0
 802884a:	d001      	beq.n	8028850 <hal_initTimer+0x218>
    {
        /* PWM Generation Error */
        Error_Handler();
 802884c:	f7fa fb80 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 2 */
    if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 8028850:	2104      	movs	r1, #4
 8028852:	4815      	ldr	r0, [pc, #84]	; (80288a8 <hal_initTimer+0x270>)
 8028854:	f7fe fcc0 	bl	80271d8 <HAL_TIM_PWM_Start>
 8028858:	4603      	mov	r3, r0
 802885a:	2b00      	cmp	r3, #0
 802885c:	d001      	beq.n	8028862 <hal_initTimer+0x22a>
    {
        /* PWM Generation Error */
        Error_Handler();
 802885e:	f7fa fb77 	bl	8022f50 <Error_Handler>
    }

    /* Start channel 3 */
    if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK)
 8028862:	2108      	movs	r1, #8
 8028864:	4810      	ldr	r0, [pc, #64]	; (80288a8 <hal_initTimer+0x270>)
 8028866:	f7fe fcb7 	bl	80271d8 <HAL_TIM_PWM_Start>
 802886a:	4603      	mov	r3, r0
 802886c:	2b00      	cmp	r3, #0
 802886e:	d001      	beq.n	8028874 <hal_initTimer+0x23c>
    {
        /* PWM Generation Error */
        Error_Handler();
 8028870:	f7fa fb6e 	bl	8022f50 <Error_Handler>
    }

    HAL_TIM_PWM_IO_MspInit(&htim1);
 8028874:	4808      	ldr	r0, [pc, #32]	; (8028898 <hal_initTimer+0x260>)
 8028876:	f7fa fbe7 	bl	8023048 <HAL_TIM_PWM_IO_MspInit>
    HAL_TIM_PWM_IO_MspInit(&htim2);
 802887a:	480a      	ldr	r0, [pc, #40]	; (80288a4 <hal_initTimer+0x26c>)
 802887c:	f7fa fbe4 	bl	8023048 <HAL_TIM_PWM_IO_MspInit>
    HAL_TIM_PWM_IO_MspInit(&htim4);
 8028880:	4809      	ldr	r0, [pc, #36]	; (80288a8 <hal_initTimer+0x270>)
 8028882:	f7fa fbe1 	bl	8023048 <HAL_TIM_PWM_IO_MspInit>

    cfg = 1;
 8028886:	4b03      	ldr	r3, [pc, #12]	; (8028894 <hal_initTimer+0x25c>)
 8028888:	2201      	movs	r2, #1
 802888a:	701a      	strb	r2, [r3, #0]
 802888c:	e000      	b.n	8028890 <hal_initTimer+0x258>
        return ;
 802888e:	bf00      	nop
}
 8028890:	bd80      	pop	{r7, pc}
 8028892:	bf00      	nop
 8028894:	20000708 	.word	0x20000708
 8028898:	20004ddc 	.word	0x20004ddc
 802889c:	40010000 	.word	0x40010000
 80288a0:	200006ec 	.word	0x200006ec
 80288a4:	20004e1c 	.word	0x20004e1c
 80288a8:	20004d9c 	.word	0x20004d9c
 80288ac:	40000800 	.word	0x40000800

080288b0 <hal_setPulse>:

/**
 * 设置占空比 per 0~100
 */
void hal_setPulse(PWMn pwm, uint8_t per)
{
 80288b0:	b480      	push	{r7}
 80288b2:	b083      	sub	sp, #12
 80288b4:	af00      	add	r7, sp, #0
 80288b6:	4603      	mov	r3, r0
 80288b8:	460a      	mov	r2, r1
 80288ba:	71fb      	strb	r3, [r7, #7]
 80288bc:	4613      	mov	r3, r2
 80288be:	71bb      	strb	r3, [r7, #6]
    if(per>100)
 80288c0:	79bb      	ldrb	r3, [r7, #6]
 80288c2:	2b64      	cmp	r3, #100	; 0x64
 80288c4:	d901      	bls.n	80288ca <hal_setPulse+0x1a>
    {
        per = 100;
 80288c6:	2364      	movs	r3, #100	; 0x64
 80288c8:	71bb      	strb	r3, [r7, #6]
    }

    if(pwm==PWM_CH1)
 80288ca:	79fb      	ldrb	r3, [r7, #7]
 80288cc:	2b00      	cmp	r3, #0
 80288ce:	d109      	bne.n	80288e4 <hal_setPulse+0x34>
    {
        htim1.Instance->CCR1 = 1000000/PWM_FREQ*per/100;
 80288d0:	79ba      	ldrb	r2, [r7, #6]
 80288d2:	4613      	mov	r3, r2
 80288d4:	009b      	lsls	r3, r3, #2
 80288d6:	4413      	add	r3, r2
 80288d8:	005b      	lsls	r3, r3, #1
 80288da:	461a      	mov	r2, r3
 80288dc:	4b31      	ldr	r3, [pc, #196]	; (80289a4 <hal_setPulse+0xf4>)
 80288de:	681b      	ldr	r3, [r3, #0]
 80288e0:	635a      	str	r2, [r3, #52]	; 0x34
        htim4.Instance->CCR3 = 1000000/PWM_FREQ*per/100;
    }else  
    {

    }
}
 80288e2:	e059      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH2)
 80288e4:	79fb      	ldrb	r3, [r7, #7]
 80288e6:	2b01      	cmp	r3, #1
 80288e8:	d109      	bne.n	80288fe <hal_setPulse+0x4e>
        htim1.Instance->CCR2 = 1000000/PWM_FREQ*per/100;
 80288ea:	79ba      	ldrb	r2, [r7, #6]
 80288ec:	4613      	mov	r3, r2
 80288ee:	009b      	lsls	r3, r3, #2
 80288f0:	4413      	add	r3, r2
 80288f2:	005b      	lsls	r3, r3, #1
 80288f4:	461a      	mov	r2, r3
 80288f6:	4b2b      	ldr	r3, [pc, #172]	; (80289a4 <hal_setPulse+0xf4>)
 80288f8:	681b      	ldr	r3, [r3, #0]
 80288fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80288fc:	e04c      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH3)
 80288fe:	79fb      	ldrb	r3, [r7, #7]
 8028900:	2b02      	cmp	r3, #2
 8028902:	d109      	bne.n	8028918 <hal_setPulse+0x68>
        htim1.Instance->CCR3 = 1000000/PWM_FREQ*per/100;
 8028904:	79ba      	ldrb	r2, [r7, #6]
 8028906:	4613      	mov	r3, r2
 8028908:	009b      	lsls	r3, r3, #2
 802890a:	4413      	add	r3, r2
 802890c:	005b      	lsls	r3, r3, #1
 802890e:	461a      	mov	r2, r3
 8028910:	4b24      	ldr	r3, [pc, #144]	; (80289a4 <hal_setPulse+0xf4>)
 8028912:	681b      	ldr	r3, [r3, #0]
 8028914:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8028916:	e03f      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH4)
 8028918:	79fb      	ldrb	r3, [r7, #7]
 802891a:	2b03      	cmp	r3, #3
 802891c:	d109      	bne.n	8028932 <hal_setPulse+0x82>
        htim1.Instance->CCR4 = 1000000/PWM_FREQ*per/100;
 802891e:	79ba      	ldrb	r2, [r7, #6]
 8028920:	4613      	mov	r3, r2
 8028922:	009b      	lsls	r3, r3, #2
 8028924:	4413      	add	r3, r2
 8028926:	005b      	lsls	r3, r3, #1
 8028928:	461a      	mov	r2, r3
 802892a:	4b1e      	ldr	r3, [pc, #120]	; (80289a4 <hal_setPulse+0xf4>)
 802892c:	681b      	ldr	r3, [r3, #0]
 802892e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8028930:	e032      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH5)
 8028932:	79fb      	ldrb	r3, [r7, #7]
 8028934:	2b04      	cmp	r3, #4
 8028936:	d109      	bne.n	802894c <hal_setPulse+0x9c>
        htim2.Instance->CCR2 = 1000000/PWM_FREQ*per/100;
 8028938:	79ba      	ldrb	r2, [r7, #6]
 802893a:	4613      	mov	r3, r2
 802893c:	009b      	lsls	r3, r3, #2
 802893e:	4413      	add	r3, r2
 8028940:	005b      	lsls	r3, r3, #1
 8028942:	461a      	mov	r2, r3
 8028944:	4b18      	ldr	r3, [pc, #96]	; (80289a8 <hal_setPulse+0xf8>)
 8028946:	681b      	ldr	r3, [r3, #0]
 8028948:	639a      	str	r2, [r3, #56]	; 0x38
}
 802894a:	e025      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH6)
 802894c:	79fb      	ldrb	r3, [r7, #7]
 802894e:	2b05      	cmp	r3, #5
 8028950:	d109      	bne.n	8028966 <hal_setPulse+0xb6>
        htim4.Instance->CCR1 = 1000000/PWM_FREQ*per/100;
 8028952:	79ba      	ldrb	r2, [r7, #6]
 8028954:	4613      	mov	r3, r2
 8028956:	009b      	lsls	r3, r3, #2
 8028958:	4413      	add	r3, r2
 802895a:	005b      	lsls	r3, r3, #1
 802895c:	461a      	mov	r2, r3
 802895e:	4b13      	ldr	r3, [pc, #76]	; (80289ac <hal_setPulse+0xfc>)
 8028960:	681b      	ldr	r3, [r3, #0]
 8028962:	635a      	str	r2, [r3, #52]	; 0x34
}
 8028964:	e018      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH7)
 8028966:	79fb      	ldrb	r3, [r7, #7]
 8028968:	2b06      	cmp	r3, #6
 802896a:	d109      	bne.n	8028980 <hal_setPulse+0xd0>
        htim4.Instance->CCR2 = 1000000/PWM_FREQ*per/100;
 802896c:	79ba      	ldrb	r2, [r7, #6]
 802896e:	4613      	mov	r3, r2
 8028970:	009b      	lsls	r3, r3, #2
 8028972:	4413      	add	r3, r2
 8028974:	005b      	lsls	r3, r3, #1
 8028976:	461a      	mov	r2, r3
 8028978:	4b0c      	ldr	r3, [pc, #48]	; (80289ac <hal_setPulse+0xfc>)
 802897a:	681b      	ldr	r3, [r3, #0]
 802897c:	639a      	str	r2, [r3, #56]	; 0x38
}
 802897e:	e00b      	b.n	8028998 <hal_setPulse+0xe8>
    }else if(pwm==PWM_CH8)
 8028980:	79fb      	ldrb	r3, [r7, #7]
 8028982:	2b07      	cmp	r3, #7
 8028984:	d108      	bne.n	8028998 <hal_setPulse+0xe8>
        htim4.Instance->CCR3 = 1000000/PWM_FREQ*per/100;
 8028986:	79ba      	ldrb	r2, [r7, #6]
 8028988:	4613      	mov	r3, r2
 802898a:	009b      	lsls	r3, r3, #2
 802898c:	4413      	add	r3, r2
 802898e:	005b      	lsls	r3, r3, #1
 8028990:	461a      	mov	r2, r3
 8028992:	4b06      	ldr	r3, [pc, #24]	; (80289ac <hal_setPulse+0xfc>)
 8028994:	681b      	ldr	r3, [r3, #0]
 8028996:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8028998:	bf00      	nop
 802899a:	370c      	adds	r7, #12
 802899c:	46bd      	mov	sp, r7
 802899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289a2:	4770      	bx	lr
 80289a4:	20004ddc 	.word	0x20004ddc
 80289a8:	20004e1c 	.word	0x20004e1c
 80289ac:	20004d9c 	.word	0x20004d9c

080289b0 <hal_initUART>:
/**
 *  初始化串口 8-N-1
 * 
 */
void hal_initUART(UARTn uart, unsigned int baudrate)
{
 80289b0:	b580      	push	{r7, lr}
 80289b2:	b082      	sub	sp, #8
 80289b4:	af00      	add	r7, sp, #0
 80289b6:	4603      	mov	r3, r0
 80289b8:	6039      	str	r1, [r7, #0]
 80289ba:	71fb      	strb	r3, [r7, #7]
    if(uart==UART_1) //Debug
 80289bc:	79fb      	ldrb	r3, [r7, #7]
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d130      	bne.n	8028a24 <hal_initUART+0x74>
    {     
		huart1.Instance = USART1;
 80289c2:	4b83      	ldr	r3, [pc, #524]	; (8028bd0 <hal_initUART+0x220>)
 80289c4:	4a83      	ldr	r2, [pc, #524]	; (8028bd4 <hal_initUART+0x224>)
 80289c6:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = baudrate;
 80289c8:	4a81      	ldr	r2, [pc, #516]	; (8028bd0 <hal_initUART+0x220>)
 80289ca:	683b      	ldr	r3, [r7, #0]
 80289cc:	6053      	str	r3, [r2, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80289ce:	4b80      	ldr	r3, [pc, #512]	; (8028bd0 <hal_initUART+0x220>)
 80289d0:	2200      	movs	r2, #0
 80289d2:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 80289d4:	4b7e      	ldr	r3, [pc, #504]	; (8028bd0 <hal_initUART+0x220>)
 80289d6:	2200      	movs	r2, #0
 80289d8:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 80289da:	4b7d      	ldr	r3, [pc, #500]	; (8028bd0 <hal_initUART+0x220>)
 80289dc:	2200      	movs	r2, #0
 80289de:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 80289e0:	4b7b      	ldr	r3, [pc, #492]	; (8028bd0 <hal_initUART+0x220>)
 80289e2:	220c      	movs	r2, #12
 80289e4:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80289e6:	4b7a      	ldr	r3, [pc, #488]	; (8028bd0 <hal_initUART+0x220>)
 80289e8:	2200      	movs	r2, #0
 80289ea:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80289ec:	4b78      	ldr	r3, [pc, #480]	; (8028bd0 <hal_initUART+0x220>)
 80289ee:	2200      	movs	r2, #0
 80289f0:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart1) != HAL_OK)
 80289f2:	4877      	ldr	r0, [pc, #476]	; (8028bd0 <hal_initUART+0x220>)
 80289f4:	f7fe ff03 	bl	80277fe <HAL_UART_Init>
 80289f8:	4603      	mov	r3, r0
 80289fa:	2b00      	cmp	r3, #0
 80289fc:	d001      	beq.n	8028a02 <hal_initUART+0x52>
		{
			Error_Handler();
 80289fe:	f7fa faa7 	bl	8022f50 <Error_Handler>
		}

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //使能接收中断
 8028a02:	4b73      	ldr	r3, [pc, #460]	; (8028bd0 <hal_initUART+0x220>)
 8028a04:	681b      	ldr	r3, [r3, #0]
 8028a06:	68da      	ldr	r2, [r3, #12]
 8028a08:	4b71      	ldr	r3, [pc, #452]	; (8028bd0 <hal_initUART+0x220>)
 8028a0a:	681b      	ldr	r3, [r3, #0]
 8028a0c:	f042 0220 	orr.w	r2, r2, #32
 8028a10:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); //使能空闲中断
 8028a12:	4b6f      	ldr	r3, [pc, #444]	; (8028bd0 <hal_initUART+0x220>)
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	68da      	ldr	r2, [r3, #12]
 8028a18:	4b6d      	ldr	r3, [pc, #436]	; (8028bd0 <hal_initUART+0x220>)
 8028a1a:	681b      	ldr	r3, [r3, #0]
 8028a1c:	f042 0210 	orr.w	r2, r2, #16
 8028a20:	60da      	str	r2, [r3, #12]
        __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE); //使能空闲中断
    }else
    {

    }
}
 8028a22:	e0d1      	b.n	8028bc8 <hal_initUART+0x218>
    }else if(uart==UART_2)  //Cat1
 8028a24:	79fb      	ldrb	r3, [r7, #7]
 8028a26:	2b01      	cmp	r3, #1
 8028a28:	d130      	bne.n	8028a8c <hal_initUART+0xdc>
		huart2.Instance = USART2;
 8028a2a:	4b6b      	ldr	r3, [pc, #428]	; (8028bd8 <hal_initUART+0x228>)
 8028a2c:	4a6b      	ldr	r2, [pc, #428]	; (8028bdc <hal_initUART+0x22c>)
 8028a2e:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = baudrate;
 8028a30:	4a69      	ldr	r2, [pc, #420]	; (8028bd8 <hal_initUART+0x228>)
 8028a32:	683b      	ldr	r3, [r7, #0]
 8028a34:	6053      	str	r3, [r2, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8028a36:	4b68      	ldr	r3, [pc, #416]	; (8028bd8 <hal_initUART+0x228>)
 8028a38:	2200      	movs	r2, #0
 8028a3a:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8028a3c:	4b66      	ldr	r3, [pc, #408]	; (8028bd8 <hal_initUART+0x228>)
 8028a3e:	2200      	movs	r2, #0
 8028a40:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8028a42:	4b65      	ldr	r3, [pc, #404]	; (8028bd8 <hal_initUART+0x228>)
 8028a44:	2200      	movs	r2, #0
 8028a46:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8028a48:	4b63      	ldr	r3, [pc, #396]	; (8028bd8 <hal_initUART+0x228>)
 8028a4a:	220c      	movs	r2, #12
 8028a4c:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8028a4e:	4b62      	ldr	r3, [pc, #392]	; (8028bd8 <hal_initUART+0x228>)
 8028a50:	2200      	movs	r2, #0
 8028a52:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8028a54:	4b60      	ldr	r3, [pc, #384]	; (8028bd8 <hal_initUART+0x228>)
 8028a56:	2200      	movs	r2, #0
 8028a58:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart2) != HAL_OK)
 8028a5a:	485f      	ldr	r0, [pc, #380]	; (8028bd8 <hal_initUART+0x228>)
 8028a5c:	f7fe fecf 	bl	80277fe <HAL_UART_Init>
 8028a60:	4603      	mov	r3, r0
 8028a62:	2b00      	cmp	r3, #0
 8028a64:	d001      	beq.n	8028a6a <hal_initUART+0xba>
			Error_Handler();
 8028a66:	f7fa fa73 	bl	8022f50 <Error_Handler>
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //使能接收中断
 8028a6a:	4b5b      	ldr	r3, [pc, #364]	; (8028bd8 <hal_initUART+0x228>)
 8028a6c:	681b      	ldr	r3, [r3, #0]
 8028a6e:	68da      	ldr	r2, [r3, #12]
 8028a70:	4b59      	ldr	r3, [pc, #356]	; (8028bd8 <hal_initUART+0x228>)
 8028a72:	681b      	ldr	r3, [r3, #0]
 8028a74:	f042 0220 	orr.w	r2, r2, #32
 8028a78:	60da      	str	r2, [r3, #12]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); //使能空闲中断
 8028a7a:	4b57      	ldr	r3, [pc, #348]	; (8028bd8 <hal_initUART+0x228>)
 8028a7c:	681b      	ldr	r3, [r3, #0]
 8028a7e:	68da      	ldr	r2, [r3, #12]
 8028a80:	4b55      	ldr	r3, [pc, #340]	; (8028bd8 <hal_initUART+0x228>)
 8028a82:	681b      	ldr	r3, [r3, #0]
 8028a84:	f042 0210 	orr.w	r2, r2, #16
 8028a88:	60da      	str	r2, [r3, #12]
}
 8028a8a:	e09d      	b.n	8028bc8 <hal_initUART+0x218>
    }else if(uart==UART_3) //RS485 1
 8028a8c:	79fb      	ldrb	r3, [r7, #7]
 8028a8e:	2b02      	cmp	r3, #2
 8028a90:	d130      	bne.n	8028af4 <hal_initUART+0x144>
		huart3.Instance = USART3;
 8028a92:	4b53      	ldr	r3, [pc, #332]	; (8028be0 <hal_initUART+0x230>)
 8028a94:	4a53      	ldr	r2, [pc, #332]	; (8028be4 <hal_initUART+0x234>)
 8028a96:	601a      	str	r2, [r3, #0]
		huart3.Init.BaudRate = baudrate;
 8028a98:	4a51      	ldr	r2, [pc, #324]	; (8028be0 <hal_initUART+0x230>)
 8028a9a:	683b      	ldr	r3, [r7, #0]
 8028a9c:	6053      	str	r3, [r2, #4]
		huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8028a9e:	4b50      	ldr	r3, [pc, #320]	; (8028be0 <hal_initUART+0x230>)
 8028aa0:	2200      	movs	r2, #0
 8028aa2:	609a      	str	r2, [r3, #8]
		huart3.Init.StopBits = UART_STOPBITS_1;
 8028aa4:	4b4e      	ldr	r3, [pc, #312]	; (8028be0 <hal_initUART+0x230>)
 8028aa6:	2200      	movs	r2, #0
 8028aa8:	60da      	str	r2, [r3, #12]
		huart3.Init.Parity = UART_PARITY_NONE;
 8028aaa:	4b4d      	ldr	r3, [pc, #308]	; (8028be0 <hal_initUART+0x230>)
 8028aac:	2200      	movs	r2, #0
 8028aae:	611a      	str	r2, [r3, #16]
		huart3.Init.Mode = UART_MODE_TX_RX;
 8028ab0:	4b4b      	ldr	r3, [pc, #300]	; (8028be0 <hal_initUART+0x230>)
 8028ab2:	220c      	movs	r2, #12
 8028ab4:	615a      	str	r2, [r3, #20]
		huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8028ab6:	4b4a      	ldr	r3, [pc, #296]	; (8028be0 <hal_initUART+0x230>)
 8028ab8:	2200      	movs	r2, #0
 8028aba:	619a      	str	r2, [r3, #24]
		huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8028abc:	4b48      	ldr	r3, [pc, #288]	; (8028be0 <hal_initUART+0x230>)
 8028abe:	2200      	movs	r2, #0
 8028ac0:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart3) != HAL_OK)
 8028ac2:	4847      	ldr	r0, [pc, #284]	; (8028be0 <hal_initUART+0x230>)
 8028ac4:	f7fe fe9b 	bl	80277fe <HAL_UART_Init>
 8028ac8:	4603      	mov	r3, r0
 8028aca:	2b00      	cmp	r3, #0
 8028acc:	d001      	beq.n	8028ad2 <hal_initUART+0x122>
			Error_Handler();
 8028ace:	f7fa fa3f 	bl	8022f50 <Error_Handler>
		__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE); //使能接收中断
 8028ad2:	4b43      	ldr	r3, [pc, #268]	; (8028be0 <hal_initUART+0x230>)
 8028ad4:	681b      	ldr	r3, [r3, #0]
 8028ad6:	68da      	ldr	r2, [r3, #12]
 8028ad8:	4b41      	ldr	r3, [pc, #260]	; (8028be0 <hal_initUART+0x230>)
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	f042 0220 	orr.w	r2, r2, #32
 8028ae0:	60da      	str	r2, [r3, #12]
		__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE); //使能空闲中断
 8028ae2:	4b3f      	ldr	r3, [pc, #252]	; (8028be0 <hal_initUART+0x230>)
 8028ae4:	681b      	ldr	r3, [r3, #0]
 8028ae6:	68da      	ldr	r2, [r3, #12]
 8028ae8:	4b3d      	ldr	r3, [pc, #244]	; (8028be0 <hal_initUART+0x230>)
 8028aea:	681b      	ldr	r3, [r3, #0]
 8028aec:	f042 0210 	orr.w	r2, r2, #16
 8028af0:	60da      	str	r2, [r3, #12]
}
 8028af2:	e069      	b.n	8028bc8 <hal_initUART+0x218>
    }else if(uart==UART_4) //RS485 2
 8028af4:	79fb      	ldrb	r3, [r7, #7]
 8028af6:	2b03      	cmp	r3, #3
 8028af8:	d130      	bne.n	8028b5c <hal_initUART+0x1ac>
		huart4.Instance = UART4;
 8028afa:	4b3b      	ldr	r3, [pc, #236]	; (8028be8 <hal_initUART+0x238>)
 8028afc:	4a3b      	ldr	r2, [pc, #236]	; (8028bec <hal_initUART+0x23c>)
 8028afe:	601a      	str	r2, [r3, #0]
		huart4.Init.BaudRate = baudrate;
 8028b00:	4a39      	ldr	r2, [pc, #228]	; (8028be8 <hal_initUART+0x238>)
 8028b02:	683b      	ldr	r3, [r7, #0]
 8028b04:	6053      	str	r3, [r2, #4]
		huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8028b06:	4b38      	ldr	r3, [pc, #224]	; (8028be8 <hal_initUART+0x238>)
 8028b08:	2200      	movs	r2, #0
 8028b0a:	609a      	str	r2, [r3, #8]
		huart4.Init.StopBits = UART_STOPBITS_1;
 8028b0c:	4b36      	ldr	r3, [pc, #216]	; (8028be8 <hal_initUART+0x238>)
 8028b0e:	2200      	movs	r2, #0
 8028b10:	60da      	str	r2, [r3, #12]
		huart4.Init.Parity = UART_PARITY_NONE;
 8028b12:	4b35      	ldr	r3, [pc, #212]	; (8028be8 <hal_initUART+0x238>)
 8028b14:	2200      	movs	r2, #0
 8028b16:	611a      	str	r2, [r3, #16]
		huart4.Init.Mode = UART_MODE_TX_RX;
 8028b18:	4b33      	ldr	r3, [pc, #204]	; (8028be8 <hal_initUART+0x238>)
 8028b1a:	220c      	movs	r2, #12
 8028b1c:	615a      	str	r2, [r3, #20]
		huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8028b1e:	4b32      	ldr	r3, [pc, #200]	; (8028be8 <hal_initUART+0x238>)
 8028b20:	2200      	movs	r2, #0
 8028b22:	619a      	str	r2, [r3, #24]
		huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8028b24:	4b30      	ldr	r3, [pc, #192]	; (8028be8 <hal_initUART+0x238>)
 8028b26:	2200      	movs	r2, #0
 8028b28:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart4) != HAL_OK)
 8028b2a:	482f      	ldr	r0, [pc, #188]	; (8028be8 <hal_initUART+0x238>)
 8028b2c:	f7fe fe67 	bl	80277fe <HAL_UART_Init>
 8028b30:	4603      	mov	r3, r0
 8028b32:	2b00      	cmp	r3, #0
 8028b34:	d001      	beq.n	8028b3a <hal_initUART+0x18a>
			Error_Handler();
 8028b36:	f7fa fa0b 	bl	8022f50 <Error_Handler>
        __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE); //使能接收中断
 8028b3a:	4b2b      	ldr	r3, [pc, #172]	; (8028be8 <hal_initUART+0x238>)
 8028b3c:	681b      	ldr	r3, [r3, #0]
 8028b3e:	68da      	ldr	r2, [r3, #12]
 8028b40:	4b29      	ldr	r3, [pc, #164]	; (8028be8 <hal_initUART+0x238>)
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	f042 0220 	orr.w	r2, r2, #32
 8028b48:	60da      	str	r2, [r3, #12]
        __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE); //使能空闲中断
 8028b4a:	4b27      	ldr	r3, [pc, #156]	; (8028be8 <hal_initUART+0x238>)
 8028b4c:	681b      	ldr	r3, [r3, #0]
 8028b4e:	68da      	ldr	r2, [r3, #12]
 8028b50:	4b25      	ldr	r3, [pc, #148]	; (8028be8 <hal_initUART+0x238>)
 8028b52:	681b      	ldr	r3, [r3, #0]
 8028b54:	f042 0210 	orr.w	r2, r2, #16
 8028b58:	60da      	str	r2, [r3, #12]
}
 8028b5a:	e035      	b.n	8028bc8 <hal_initUART+0x218>
    }else if(uart==UART_5)	
 8028b5c:	79fb      	ldrb	r3, [r7, #7]
 8028b5e:	2b04      	cmp	r3, #4
 8028b60:	d032      	beq.n	8028bc8 <hal_initUART+0x218>
    }else if(uart==UART_6) //BLE
 8028b62:	79fb      	ldrb	r3, [r7, #7]
 8028b64:	2b05      	cmp	r3, #5
 8028b66:	d12f      	bne.n	8028bc8 <hal_initUART+0x218>
		huart6.Instance = USART6;
 8028b68:	4b21      	ldr	r3, [pc, #132]	; (8028bf0 <hal_initUART+0x240>)
 8028b6a:	4a22      	ldr	r2, [pc, #136]	; (8028bf4 <hal_initUART+0x244>)
 8028b6c:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = baudrate;
 8028b6e:	4a20      	ldr	r2, [pc, #128]	; (8028bf0 <hal_initUART+0x240>)
 8028b70:	683b      	ldr	r3, [r7, #0]
 8028b72:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8028b74:	4b1e      	ldr	r3, [pc, #120]	; (8028bf0 <hal_initUART+0x240>)
 8028b76:	2200      	movs	r2, #0
 8028b78:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8028b7a:	4b1d      	ldr	r3, [pc, #116]	; (8028bf0 <hal_initUART+0x240>)
 8028b7c:	2200      	movs	r2, #0
 8028b7e:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = UART_PARITY_NONE;
 8028b80:	4b1b      	ldr	r3, [pc, #108]	; (8028bf0 <hal_initUART+0x240>)
 8028b82:	2200      	movs	r2, #0
 8028b84:	611a      	str	r2, [r3, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 8028b86:	4b1a      	ldr	r3, [pc, #104]	; (8028bf0 <hal_initUART+0x240>)
 8028b88:	220c      	movs	r2, #12
 8028b8a:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8028b8c:	4b18      	ldr	r3, [pc, #96]	; (8028bf0 <hal_initUART+0x240>)
 8028b8e:	2200      	movs	r2, #0
 8028b90:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8028b92:	4b17      	ldr	r3, [pc, #92]	; (8028bf0 <hal_initUART+0x240>)
 8028b94:	2200      	movs	r2, #0
 8028b96:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart6) != HAL_OK)
 8028b98:	4815      	ldr	r0, [pc, #84]	; (8028bf0 <hal_initUART+0x240>)
 8028b9a:	f7fe fe30 	bl	80277fe <HAL_UART_Init>
 8028b9e:	4603      	mov	r3, r0
 8028ba0:	2b00      	cmp	r3, #0
 8028ba2:	d001      	beq.n	8028ba8 <hal_initUART+0x1f8>
			Error_Handler();
 8028ba4:	f7fa f9d4 	bl	8022f50 <Error_Handler>
        __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE); //使能接收中断
 8028ba8:	4b11      	ldr	r3, [pc, #68]	; (8028bf0 <hal_initUART+0x240>)
 8028baa:	681b      	ldr	r3, [r3, #0]
 8028bac:	68da      	ldr	r2, [r3, #12]
 8028bae:	4b10      	ldr	r3, [pc, #64]	; (8028bf0 <hal_initUART+0x240>)
 8028bb0:	681b      	ldr	r3, [r3, #0]
 8028bb2:	f042 0220 	orr.w	r2, r2, #32
 8028bb6:	60da      	str	r2, [r3, #12]
        __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE); //使能空闲中断
 8028bb8:	4b0d      	ldr	r3, [pc, #52]	; (8028bf0 <hal_initUART+0x240>)
 8028bba:	681b      	ldr	r3, [r3, #0]
 8028bbc:	68da      	ldr	r2, [r3, #12]
 8028bbe:	4b0c      	ldr	r3, [pc, #48]	; (8028bf0 <hal_initUART+0x240>)
 8028bc0:	681b      	ldr	r3, [r3, #0]
 8028bc2:	f042 0210 	orr.w	r2, r2, #16
 8028bc6:	60da      	str	r2, [r3, #12]
}
 8028bc8:	bf00      	nop
 8028bca:	3708      	adds	r7, #8
 8028bcc:	46bd      	mov	sp, r7
 8028bce:	bd80      	pop	{r7, pc}
 8028bd0:	20004edc 	.word	0x20004edc
 8028bd4:	40011000 	.word	0x40011000
 8028bd8:	20004f9c 	.word	0x20004f9c
 8028bdc:	40004400 	.word	0x40004400
 8028be0:	20004e5c 	.word	0x20004e5c
 8028be4:	40004800 	.word	0x40004800
 8028be8:	20004f5c 	.word	0x20004f5c
 8028bec:	40004c00 	.word	0x40004c00
 8028bf0:	20004f1c 	.word	0x20004f1c
 8028bf4:	40011400 	.word	0x40011400

08028bf8 <hal_sendUARTBytes>:
/**
 *  发送串口数据 
 * 
 */
void hal_sendUARTBytes(UARTn uart, char *buf, unsigned short size)
{
 8028bf8:	b580      	push	{r7, lr}
 8028bfa:	b082      	sub	sp, #8
 8028bfc:	af00      	add	r7, sp, #0
 8028bfe:	4603      	mov	r3, r0
 8028c00:	6039      	str	r1, [r7, #0]
 8028c02:	71fb      	strb	r3, [r7, #7]
 8028c04:	4613      	mov	r3, r2
 8028c06:	80bb      	strh	r3, [r7, #4]
    if(uart==UART_1)
 8028c08:	79fb      	ldrb	r3, [r7, #7]
 8028c0a:	2b00      	cmp	r3, #0
 8028c0c:	d107      	bne.n	8028c1e <hal_sendUARTBytes+0x26>
    {     
        HAL_UART_Transmit(&huart1, buf, size, 10000);
 8028c0e:	88ba      	ldrh	r2, [r7, #4]
 8028c10:	f242 7310 	movw	r3, #10000	; 0x2710
 8028c14:	6839      	ldr	r1, [r7, #0]
 8028c16:	481f      	ldr	r0, [pc, #124]	; (8028c94 <hal_sendUARTBytes+0x9c>)
 8028c18:	f7fe fe3e 	bl	8027898 <HAL_UART_Transmit>
    }else 
    {

    }
    
}
 8028c1c:	e035      	b.n	8028c8a <hal_sendUARTBytes+0x92>
    }else if(uart==UART_2)
 8028c1e:	79fb      	ldrb	r3, [r7, #7]
 8028c20:	2b01      	cmp	r3, #1
 8028c22:	d107      	bne.n	8028c34 <hal_sendUARTBytes+0x3c>
        HAL_UART_Transmit(&huart2, buf, size, 10000);
 8028c24:	88ba      	ldrh	r2, [r7, #4]
 8028c26:	f242 7310 	movw	r3, #10000	; 0x2710
 8028c2a:	6839      	ldr	r1, [r7, #0]
 8028c2c:	481a      	ldr	r0, [pc, #104]	; (8028c98 <hal_sendUARTBytes+0xa0>)
 8028c2e:	f7fe fe33 	bl	8027898 <HAL_UART_Transmit>
}
 8028c32:	e02a      	b.n	8028c8a <hal_sendUARTBytes+0x92>
    }else if(uart==UART_3)
 8028c34:	79fb      	ldrb	r3, [r7, #7]
 8028c36:	2b02      	cmp	r3, #2
 8028c38:	d107      	bne.n	8028c4a <hal_sendUARTBytes+0x52>
        HAL_UART_Transmit(&huart3, buf, size, 10000);
 8028c3a:	88ba      	ldrh	r2, [r7, #4]
 8028c3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8028c40:	6839      	ldr	r1, [r7, #0]
 8028c42:	4816      	ldr	r0, [pc, #88]	; (8028c9c <hal_sendUARTBytes+0xa4>)
 8028c44:	f7fe fe28 	bl	8027898 <HAL_UART_Transmit>
}
 8028c48:	e01f      	b.n	8028c8a <hal_sendUARTBytes+0x92>
    }else if(uart==UART_4)
 8028c4a:	79fb      	ldrb	r3, [r7, #7]
 8028c4c:	2b03      	cmp	r3, #3
 8028c4e:	d107      	bne.n	8028c60 <hal_sendUARTBytes+0x68>
    	HAL_UART_Transmit(&huart4, buf, size, 10000);
 8028c50:	88ba      	ldrh	r2, [r7, #4]
 8028c52:	f242 7310 	movw	r3, #10000	; 0x2710
 8028c56:	6839      	ldr	r1, [r7, #0]
 8028c58:	4811      	ldr	r0, [pc, #68]	; (8028ca0 <hal_sendUARTBytes+0xa8>)
 8028c5a:	f7fe fe1d 	bl	8027898 <HAL_UART_Transmit>
}
 8028c5e:	e014      	b.n	8028c8a <hal_sendUARTBytes+0x92>
    }else if(uart==UART_5)
 8028c60:	79fb      	ldrb	r3, [r7, #7]
 8028c62:	2b04      	cmp	r3, #4
 8028c64:	d107      	bne.n	8028c76 <hal_sendUARTBytes+0x7e>
    	HAL_UART_Transmit(&huart5, buf, size, 10000);
 8028c66:	88ba      	ldrh	r2, [r7, #4]
 8028c68:	f242 7310 	movw	r3, #10000	; 0x2710
 8028c6c:	6839      	ldr	r1, [r7, #0]
 8028c6e:	480d      	ldr	r0, [pc, #52]	; (8028ca4 <hal_sendUARTBytes+0xac>)
 8028c70:	f7fe fe12 	bl	8027898 <HAL_UART_Transmit>
}
 8028c74:	e009      	b.n	8028c8a <hal_sendUARTBytes+0x92>
    }else if(uart==UART_6)
 8028c76:	79fb      	ldrb	r3, [r7, #7]
 8028c78:	2b05      	cmp	r3, #5
 8028c7a:	d106      	bne.n	8028c8a <hal_sendUARTBytes+0x92>
    	HAL_UART_Transmit(&huart6, buf, size, 10000);
 8028c7c:	88ba      	ldrh	r2, [r7, #4]
 8028c7e:	f242 7310 	movw	r3, #10000	; 0x2710
 8028c82:	6839      	ldr	r1, [r7, #0]
 8028c84:	4808      	ldr	r0, [pc, #32]	; (8028ca8 <hal_sendUARTBytes+0xb0>)
 8028c86:	f7fe fe07 	bl	8027898 <HAL_UART_Transmit>
}
 8028c8a:	bf00      	nop
 8028c8c:	3708      	adds	r7, #8
 8028c8e:	46bd      	mov	sp, r7
 8028c90:	bd80      	pop	{r7, pc}
 8028c92:	bf00      	nop
 8028c94:	20004edc 	.word	0x20004edc
 8028c98:	20004f9c 	.word	0x20004f9c
 8028c9c:	20004e5c 	.word	0x20004e5c
 8028ca0:	20004f5c 	.word	0x20004f5c
 8028ca4:	20004e9c 	.word	0x20004e9c
 8028ca8:	20004f1c 	.word	0x20004f1c

08028cac <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8028cac:	b480      	push	{r7}
 8028cae:	b083      	sub	sp, #12
 8028cb0:	af00      	add	r7, sp, #0
 8028cb2:	6078      	str	r0, [r7, #4]

//  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8028cb4:	687b      	ldr	r3, [r7, #4]
}
 8028cb6:	4618      	mov	r0, r3
 8028cb8:	370c      	adds	r7, #12
 8028cba:	46bd      	mov	sp, r7
 8028cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028cc0:	4770      	bx	lr
	...

08028cc4 <hal_initWdg>:
#include "hal_wdg.h"

IWDG_HandleTypeDef hiwdg;

void hal_initWdg(void)
{
 8028cc4:	b580      	push	{r7, lr}
 8028cc6:	af00      	add	r7, sp, #0
	  //默认复位时间32S
	  hiwdg.Instance = IWDG;
 8028cc8:	4b09      	ldr	r3, [pc, #36]	; (8028cf0 <hal_initWdg+0x2c>)
 8028cca:	4a0a      	ldr	r2, [pc, #40]	; (8028cf4 <hal_initWdg+0x30>)
 8028ccc:	601a      	str	r2, [r3, #0]
	  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8028cce:	4b08      	ldr	r3, [pc, #32]	; (8028cf0 <hal_initWdg+0x2c>)
 8028cd0:	2206      	movs	r2, #6
 8028cd2:	605a      	str	r2, [r3, #4]
	  hiwdg.Init.Reload = 4095;
 8028cd4:	4b06      	ldr	r3, [pc, #24]	; (8028cf0 <hal_initWdg+0x2c>)
 8028cd6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8028cda:	609a      	str	r2, [r3, #8]
	  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8028cdc:	4804      	ldr	r0, [pc, #16]	; (8028cf0 <hal_initWdg+0x2c>)
 8028cde:	f7fc ff64 	bl	8025baa <HAL_IWDG_Init>
 8028ce2:	4603      	mov	r3, r0
 8028ce4:	2b00      	cmp	r3, #0
 8028ce6:	d001      	beq.n	8028cec <hal_initWdg+0x28>
	  {
	    Error_Handler();
 8028ce8:	f7fa f932 	bl	8022f50 <Error_Handler>
	  }
}
 8028cec:	bf00      	nop
 8028cee:	bd80      	pop	{r7, pc}
 8028cf0:	20004fdc 	.word	0x20004fdc
 8028cf4:	40003000 	.word	0x40003000

08028cf8 <hal_feedWdg>:

void hal_feedWdg(void)
{
 8028cf8:	b580      	push	{r7, lr}
 8028cfa:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8028cfc:	4802      	ldr	r0, [pc, #8]	; (8028d08 <hal_feedWdg+0x10>)
 8028cfe:	f7fc ff8d 	bl	8025c1c <HAL_IWDG_Refresh>
}
 8028d02:	bf00      	nop
 8028d04:	bd80      	pop	{r7, pc}
 8028d06:	bf00      	nop
 8028d08:	20004fdc 	.word	0x20004fdc

08028d0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8028d0c:	b480      	push	{r7}
 8028d0e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8028d10:	bf00      	nop
 8028d12:	46bd      	mov	sp, r7
 8028d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d18:	4770      	bx	lr
	...

08028d1c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8028d1c:	b480      	push	{r7}
 8028d1e:	b085      	sub	sp, #20
 8028d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028d22:	f3ef 8305 	mrs	r3, IPSR
 8028d26:	60bb      	str	r3, [r7, #8]
  return(result);
 8028d28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8028d2a:	2b00      	cmp	r3, #0
 8028d2c:	d10f      	bne.n	8028d4e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8028d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8028d32:	607b      	str	r3, [r7, #4]
  return(result);
 8028d34:	687b      	ldr	r3, [r7, #4]
 8028d36:	2b00      	cmp	r3, #0
 8028d38:	d105      	bne.n	8028d46 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8028d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8028d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8028d40:	683b      	ldr	r3, [r7, #0]
 8028d42:	2b00      	cmp	r3, #0
 8028d44:	d007      	beq.n	8028d56 <osKernelInitialize+0x3a>
 8028d46:	4b0e      	ldr	r3, [pc, #56]	; (8028d80 <osKernelInitialize+0x64>)
 8028d48:	681b      	ldr	r3, [r3, #0]
 8028d4a:	2b02      	cmp	r3, #2
 8028d4c:	d103      	bne.n	8028d56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8028d4e:	f06f 0305 	mvn.w	r3, #5
 8028d52:	60fb      	str	r3, [r7, #12]
 8028d54:	e00c      	b.n	8028d70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8028d56:	4b0a      	ldr	r3, [pc, #40]	; (8028d80 <osKernelInitialize+0x64>)
 8028d58:	681b      	ldr	r3, [r3, #0]
 8028d5a:	2b00      	cmp	r3, #0
 8028d5c:	d105      	bne.n	8028d6a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8028d5e:	4b08      	ldr	r3, [pc, #32]	; (8028d80 <osKernelInitialize+0x64>)
 8028d60:	2201      	movs	r2, #1
 8028d62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8028d64:	2300      	movs	r3, #0
 8028d66:	60fb      	str	r3, [r7, #12]
 8028d68:	e002      	b.n	8028d70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8028d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8028d6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8028d70:	68fb      	ldr	r3, [r7, #12]
}
 8028d72:	4618      	mov	r0, r3
 8028d74:	3714      	adds	r7, #20
 8028d76:	46bd      	mov	sp, r7
 8028d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d7c:	4770      	bx	lr
 8028d7e:	bf00      	nop
 8028d80:	2000070c 	.word	0x2000070c

08028d84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8028d84:	b580      	push	{r7, lr}
 8028d86:	b084      	sub	sp, #16
 8028d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028d8a:	f3ef 8305 	mrs	r3, IPSR
 8028d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8028d90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8028d92:	2b00      	cmp	r3, #0
 8028d94:	d10f      	bne.n	8028db6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8028d96:	f3ef 8310 	mrs	r3, PRIMASK
 8028d9a:	607b      	str	r3, [r7, #4]
  return(result);
 8028d9c:	687b      	ldr	r3, [r7, #4]
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d105      	bne.n	8028dae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8028da2:	f3ef 8311 	mrs	r3, BASEPRI
 8028da6:	603b      	str	r3, [r7, #0]
  return(result);
 8028da8:	683b      	ldr	r3, [r7, #0]
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	d007      	beq.n	8028dbe <osKernelStart+0x3a>
 8028dae:	4b0f      	ldr	r3, [pc, #60]	; (8028dec <osKernelStart+0x68>)
 8028db0:	681b      	ldr	r3, [r3, #0]
 8028db2:	2b02      	cmp	r3, #2
 8028db4:	d103      	bne.n	8028dbe <osKernelStart+0x3a>
    stat = osErrorISR;
 8028db6:	f06f 0305 	mvn.w	r3, #5
 8028dba:	60fb      	str	r3, [r7, #12]
 8028dbc:	e010      	b.n	8028de0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8028dbe:	4b0b      	ldr	r3, [pc, #44]	; (8028dec <osKernelStart+0x68>)
 8028dc0:	681b      	ldr	r3, [r3, #0]
 8028dc2:	2b01      	cmp	r3, #1
 8028dc4:	d109      	bne.n	8028dda <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8028dc6:	f7ff ffa1 	bl	8028d0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8028dca:	4b08      	ldr	r3, [pc, #32]	; (8028dec <osKernelStart+0x68>)
 8028dcc:	2202      	movs	r2, #2
 8028dce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8028dd0:	f001 f8de 	bl	8029f90 <vTaskStartScheduler>
      stat = osOK;
 8028dd4:	2300      	movs	r3, #0
 8028dd6:	60fb      	str	r3, [r7, #12]
 8028dd8:	e002      	b.n	8028de0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8028dda:	f04f 33ff 	mov.w	r3, #4294967295
 8028dde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8028de0:	68fb      	ldr	r3, [r7, #12]
}
 8028de2:	4618      	mov	r0, r3
 8028de4:	3710      	adds	r7, #16
 8028de6:	46bd      	mov	sp, r7
 8028de8:	bd80      	pop	{r7, pc}
 8028dea:	bf00      	nop
 8028dec:	2000070c 	.word	0x2000070c

08028df0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8028df0:	b580      	push	{r7, lr}
 8028df2:	b084      	sub	sp, #16
 8028df4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028df6:	f3ef 8305 	mrs	r3, IPSR
 8028dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8028dfc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d10f      	bne.n	8028e22 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8028e02:	f3ef 8310 	mrs	r3, PRIMASK
 8028e06:	607b      	str	r3, [r7, #4]
  return(result);
 8028e08:	687b      	ldr	r3, [r7, #4]
 8028e0a:	2b00      	cmp	r3, #0
 8028e0c:	d105      	bne.n	8028e1a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8028e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8028e12:	603b      	str	r3, [r7, #0]
  return(result);
 8028e14:	683b      	ldr	r3, [r7, #0]
 8028e16:	2b00      	cmp	r3, #0
 8028e18:	d007      	beq.n	8028e2a <osKernelGetTickCount+0x3a>
 8028e1a:	4b08      	ldr	r3, [pc, #32]	; (8028e3c <osKernelGetTickCount+0x4c>)
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	2b02      	cmp	r3, #2
 8028e20:	d103      	bne.n	8028e2a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8028e22:	f001 f9d7 	bl	802a1d4 <xTaskGetTickCountFromISR>
 8028e26:	60f8      	str	r0, [r7, #12]
 8028e28:	e002      	b.n	8028e30 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8028e2a:	f001 f9c3 	bl	802a1b4 <xTaskGetTickCount>
 8028e2e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8028e30:	68fb      	ldr	r3, [r7, #12]
}
 8028e32:	4618      	mov	r0, r3
 8028e34:	3710      	adds	r7, #16
 8028e36:	46bd      	mov	sp, r7
 8028e38:	bd80      	pop	{r7, pc}
 8028e3a:	bf00      	nop
 8028e3c:	2000070c 	.word	0x2000070c

08028e40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8028e40:	b580      	push	{r7, lr}
 8028e42:	b090      	sub	sp, #64	; 0x40
 8028e44:	af04      	add	r7, sp, #16
 8028e46:	60f8      	str	r0, [r7, #12]
 8028e48:	60b9      	str	r1, [r7, #8]
 8028e4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8028e4c:	2300      	movs	r3, #0
 8028e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028e50:	f3ef 8305 	mrs	r3, IPSR
 8028e54:	61fb      	str	r3, [r7, #28]
  return(result);
 8028e56:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8028e58:	2b00      	cmp	r3, #0
 8028e5a:	f040 808f 	bne.w	8028f7c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8028e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8028e62:	61bb      	str	r3, [r7, #24]
  return(result);
 8028e64:	69bb      	ldr	r3, [r7, #24]
 8028e66:	2b00      	cmp	r3, #0
 8028e68:	d105      	bne.n	8028e76 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8028e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8028e6e:	617b      	str	r3, [r7, #20]
  return(result);
 8028e70:	697b      	ldr	r3, [r7, #20]
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d003      	beq.n	8028e7e <osThreadNew+0x3e>
 8028e76:	4b44      	ldr	r3, [pc, #272]	; (8028f88 <osThreadNew+0x148>)
 8028e78:	681b      	ldr	r3, [r3, #0]
 8028e7a:	2b02      	cmp	r3, #2
 8028e7c:	d07e      	beq.n	8028f7c <osThreadNew+0x13c>
 8028e7e:	68fb      	ldr	r3, [r7, #12]
 8028e80:	2b00      	cmp	r3, #0
 8028e82:	d07b      	beq.n	8028f7c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8028e84:	2380      	movs	r3, #128	; 0x80
 8028e86:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8028e88:	2318      	movs	r3, #24
 8028e8a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8028e8c:	2300      	movs	r3, #0
 8028e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8028e90:	f04f 33ff 	mov.w	r3, #4294967295
 8028e94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8028e96:	687b      	ldr	r3, [r7, #4]
 8028e98:	2b00      	cmp	r3, #0
 8028e9a:	d045      	beq.n	8028f28 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	681b      	ldr	r3, [r3, #0]
 8028ea0:	2b00      	cmp	r3, #0
 8028ea2:	d002      	beq.n	8028eaa <osThreadNew+0x6a>
        name = attr->name;
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	681b      	ldr	r3, [r3, #0]
 8028ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8028eaa:	687b      	ldr	r3, [r7, #4]
 8028eac:	699b      	ldr	r3, [r3, #24]
 8028eae:	2b00      	cmp	r3, #0
 8028eb0:	d002      	beq.n	8028eb8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8028eb2:	687b      	ldr	r3, [r7, #4]
 8028eb4:	699b      	ldr	r3, [r3, #24]
 8028eb6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8028eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028eba:	2b00      	cmp	r3, #0
 8028ebc:	d008      	beq.n	8028ed0 <osThreadNew+0x90>
 8028ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ec0:	2b38      	cmp	r3, #56	; 0x38
 8028ec2:	d805      	bhi.n	8028ed0 <osThreadNew+0x90>
 8028ec4:	687b      	ldr	r3, [r7, #4]
 8028ec6:	685b      	ldr	r3, [r3, #4]
 8028ec8:	f003 0301 	and.w	r3, r3, #1
 8028ecc:	2b00      	cmp	r3, #0
 8028ece:	d001      	beq.n	8028ed4 <osThreadNew+0x94>
        return (NULL);
 8028ed0:	2300      	movs	r3, #0
 8028ed2:	e054      	b.n	8028f7e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	695b      	ldr	r3, [r3, #20]
 8028ed8:	2b00      	cmp	r3, #0
 8028eda:	d003      	beq.n	8028ee4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	695b      	ldr	r3, [r3, #20]
 8028ee0:	089b      	lsrs	r3, r3, #2
 8028ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	689b      	ldr	r3, [r3, #8]
 8028ee8:	2b00      	cmp	r3, #0
 8028eea:	d00e      	beq.n	8028f0a <osThreadNew+0xca>
 8028eec:	687b      	ldr	r3, [r7, #4]
 8028eee:	68db      	ldr	r3, [r3, #12]
 8028ef0:	2b5b      	cmp	r3, #91	; 0x5b
 8028ef2:	d90a      	bls.n	8028f0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	d006      	beq.n	8028f0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8028efc:	687b      	ldr	r3, [r7, #4]
 8028efe:	695b      	ldr	r3, [r3, #20]
 8028f00:	2b00      	cmp	r3, #0
 8028f02:	d002      	beq.n	8028f0a <osThreadNew+0xca>
        mem = 1;
 8028f04:	2301      	movs	r3, #1
 8028f06:	623b      	str	r3, [r7, #32]
 8028f08:	e010      	b.n	8028f2c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8028f0a:	687b      	ldr	r3, [r7, #4]
 8028f0c:	689b      	ldr	r3, [r3, #8]
 8028f0e:	2b00      	cmp	r3, #0
 8028f10:	d10c      	bne.n	8028f2c <osThreadNew+0xec>
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	68db      	ldr	r3, [r3, #12]
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d108      	bne.n	8028f2c <osThreadNew+0xec>
 8028f1a:	687b      	ldr	r3, [r7, #4]
 8028f1c:	691b      	ldr	r3, [r3, #16]
 8028f1e:	2b00      	cmp	r3, #0
 8028f20:	d104      	bne.n	8028f2c <osThreadNew+0xec>
          mem = 0;
 8028f22:	2300      	movs	r3, #0
 8028f24:	623b      	str	r3, [r7, #32]
 8028f26:	e001      	b.n	8028f2c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8028f28:	2300      	movs	r3, #0
 8028f2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8028f2c:	6a3b      	ldr	r3, [r7, #32]
 8028f2e:	2b01      	cmp	r3, #1
 8028f30:	d110      	bne.n	8028f54 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8028f32:	687b      	ldr	r3, [r7, #4]
 8028f34:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8028f36:	687a      	ldr	r2, [r7, #4]
 8028f38:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8028f3a:	9202      	str	r2, [sp, #8]
 8028f3c:	9301      	str	r3, [sp, #4]
 8028f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f40:	9300      	str	r3, [sp, #0]
 8028f42:	68bb      	ldr	r3, [r7, #8]
 8028f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028f48:	68f8      	ldr	r0, [r7, #12]
 8028f4a:	f000 fe4b 	bl	8029be4 <xTaskCreateStatic>
 8028f4e:	4603      	mov	r3, r0
 8028f50:	613b      	str	r3, [r7, #16]
 8028f52:	e013      	b.n	8028f7c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8028f54:	6a3b      	ldr	r3, [r7, #32]
 8028f56:	2b00      	cmp	r3, #0
 8028f58:	d110      	bne.n	8028f7c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8028f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f5c:	b29a      	uxth	r2, r3
 8028f5e:	f107 0310 	add.w	r3, r7, #16
 8028f62:	9301      	str	r3, [sp, #4]
 8028f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f66:	9300      	str	r3, [sp, #0]
 8028f68:	68bb      	ldr	r3, [r7, #8]
 8028f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028f6c:	68f8      	ldr	r0, [r7, #12]
 8028f6e:	f000 fe96 	bl	8029c9e <xTaskCreate>
 8028f72:	4603      	mov	r3, r0
 8028f74:	2b01      	cmp	r3, #1
 8028f76:	d001      	beq.n	8028f7c <osThreadNew+0x13c>
          hTask = NULL;
 8028f78:	2300      	movs	r3, #0
 8028f7a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8028f7c:	693b      	ldr	r3, [r7, #16]
}
 8028f7e:	4618      	mov	r0, r3
 8028f80:	3730      	adds	r7, #48	; 0x30
 8028f82:	46bd      	mov	sp, r7
 8028f84:	bd80      	pop	{r7, pc}
 8028f86:	bf00      	nop
 8028f88:	2000070c 	.word	0x2000070c

08028f8c <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8028f8c:	b580      	push	{r7, lr}
 8028f8e:	b088      	sub	sp, #32
 8028f90:	af00      	add	r7, sp, #0
 8028f92:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028f98:	f3ef 8305 	mrs	r3, IPSR
 8028f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8028f9e:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8028fa0:	2b00      	cmp	r3, #0
 8028fa2:	d112      	bne.n	8028fca <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8028fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8028fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8028faa:	693b      	ldr	r3, [r7, #16]
 8028fac:	2b00      	cmp	r3, #0
 8028fae:	d105      	bne.n	8028fbc <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8028fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8028fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8028fb6:	68fb      	ldr	r3, [r7, #12]
 8028fb8:	2b00      	cmp	r3, #0
 8028fba:	d003      	beq.n	8028fc4 <osThreadGetStackSpace+0x38>
 8028fbc:	4b09      	ldr	r3, [pc, #36]	; (8028fe4 <osThreadGetStackSpace+0x58>)
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	2b02      	cmp	r3, #2
 8028fc2:	d002      	beq.n	8028fca <osThreadGetStackSpace+0x3e>
 8028fc4:	69bb      	ldr	r3, [r7, #24]
 8028fc6:	2b00      	cmp	r3, #0
 8028fc8:	d102      	bne.n	8028fd0 <osThreadGetStackSpace+0x44>
    sz = 0U;
 8028fca:	2300      	movs	r3, #0
 8028fcc:	61fb      	str	r3, [r7, #28]
 8028fce:	e003      	b.n	8028fd8 <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8028fd0:	69b8      	ldr	r0, [r7, #24]
 8028fd2:	f001 fc05 	bl	802a7e0 <uxTaskGetStackHighWaterMark>
 8028fd6:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 8028fd8:	69fb      	ldr	r3, [r7, #28]
}
 8028fda:	4618      	mov	r0, r3
 8028fdc:	3720      	adds	r7, #32
 8028fde:	46bd      	mov	sp, r7
 8028fe0:	bd80      	pop	{r7, pc}
 8028fe2:	bf00      	nop
 8028fe4:	2000070c 	.word	0x2000070c

08028fe8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8028fe8:	b580      	push	{r7, lr}
 8028fea:	b086      	sub	sp, #24
 8028fec:	af00      	add	r7, sp, #0
 8028fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8028ff0:	f3ef 8305 	mrs	r3, IPSR
 8028ff4:	613b      	str	r3, [r7, #16]
  return(result);
 8028ff6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8028ff8:	2b00      	cmp	r3, #0
 8028ffa:	d10f      	bne.n	802901c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8028ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8029000:	60fb      	str	r3, [r7, #12]
  return(result);
 8029002:	68fb      	ldr	r3, [r7, #12]
 8029004:	2b00      	cmp	r3, #0
 8029006:	d105      	bne.n	8029014 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8029008:	f3ef 8311 	mrs	r3, BASEPRI
 802900c:	60bb      	str	r3, [r7, #8]
  return(result);
 802900e:	68bb      	ldr	r3, [r7, #8]
 8029010:	2b00      	cmp	r3, #0
 8029012:	d007      	beq.n	8029024 <osDelay+0x3c>
 8029014:	4b0a      	ldr	r3, [pc, #40]	; (8029040 <osDelay+0x58>)
 8029016:	681b      	ldr	r3, [r3, #0]
 8029018:	2b02      	cmp	r3, #2
 802901a:	d103      	bne.n	8029024 <osDelay+0x3c>
    stat = osErrorISR;
 802901c:	f06f 0305 	mvn.w	r3, #5
 8029020:	617b      	str	r3, [r7, #20]
 8029022:	e007      	b.n	8029034 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8029024:	2300      	movs	r3, #0
 8029026:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8029028:	687b      	ldr	r3, [r7, #4]
 802902a:	2b00      	cmp	r3, #0
 802902c:	d002      	beq.n	8029034 <osDelay+0x4c>
      vTaskDelay(ticks);
 802902e:	6878      	ldr	r0, [r7, #4]
 8029030:	f000 ff7a 	bl	8029f28 <vTaskDelay>
    }
  }

  return (stat);
 8029034:	697b      	ldr	r3, [r7, #20]
}
 8029036:	4618      	mov	r0, r3
 8029038:	3718      	adds	r7, #24
 802903a:	46bd      	mov	sp, r7
 802903c:	bd80      	pop	{r7, pc}
 802903e:	bf00      	nop
 8029040:	2000070c 	.word	0x2000070c

08029044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8029044:	b480      	push	{r7}
 8029046:	b085      	sub	sp, #20
 8029048:	af00      	add	r7, sp, #0
 802904a:	60f8      	str	r0, [r7, #12]
 802904c:	60b9      	str	r1, [r7, #8]
 802904e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8029050:	68fb      	ldr	r3, [r7, #12]
 8029052:	4a07      	ldr	r2, [pc, #28]	; (8029070 <vApplicationGetIdleTaskMemory+0x2c>)
 8029054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8029056:	68bb      	ldr	r3, [r7, #8]
 8029058:	4a06      	ldr	r2, [pc, #24]	; (8029074 <vApplicationGetIdleTaskMemory+0x30>)
 802905a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 802905c:	687b      	ldr	r3, [r7, #4]
 802905e:	2280      	movs	r2, #128	; 0x80
 8029060:	601a      	str	r2, [r3, #0]
}
 8029062:	bf00      	nop
 8029064:	3714      	adds	r7, #20
 8029066:	46bd      	mov	sp, r7
 8029068:	f85d 7b04 	ldr.w	r7, [sp], #4
 802906c:	4770      	bx	lr
 802906e:	bf00      	nop
 8029070:	20000710 	.word	0x20000710
 8029074:	2000076c 	.word	0x2000076c

08029078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8029078:	b480      	push	{r7}
 802907a:	b085      	sub	sp, #20
 802907c:	af00      	add	r7, sp, #0
 802907e:	60f8      	str	r0, [r7, #12]
 8029080:	60b9      	str	r1, [r7, #8]
 8029082:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8029084:	68fb      	ldr	r3, [r7, #12]
 8029086:	4a07      	ldr	r2, [pc, #28]	; (80290a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8029088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 802908a:	68bb      	ldr	r3, [r7, #8]
 802908c:	4a06      	ldr	r2, [pc, #24]	; (80290a8 <vApplicationGetTimerTaskMemory+0x30>)
 802908e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8029090:	687b      	ldr	r3, [r7, #4]
 8029092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8029096:	601a      	str	r2, [r3, #0]
}
 8029098:	bf00      	nop
 802909a:	3714      	adds	r7, #20
 802909c:	46bd      	mov	sp, r7
 802909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290a2:	4770      	bx	lr
 80290a4:	2000096c 	.word	0x2000096c
 80290a8:	200009c8 	.word	0x200009c8

080290ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80290ac:	b480      	push	{r7}
 80290ae:	b083      	sub	sp, #12
 80290b0:	af00      	add	r7, sp, #0
 80290b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80290b4:	687b      	ldr	r3, [r7, #4]
 80290b6:	f103 0208 	add.w	r2, r3, #8
 80290ba:	687b      	ldr	r3, [r7, #4]
 80290bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80290be:	687b      	ldr	r3, [r7, #4]
 80290c0:	f04f 32ff 	mov.w	r2, #4294967295
 80290c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80290c6:	687b      	ldr	r3, [r7, #4]
 80290c8:	f103 0208 	add.w	r2, r3, #8
 80290cc:	687b      	ldr	r3, [r7, #4]
 80290ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80290d0:	687b      	ldr	r3, [r7, #4]
 80290d2:	f103 0208 	add.w	r2, r3, #8
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80290da:	687b      	ldr	r3, [r7, #4]
 80290dc:	2200      	movs	r2, #0
 80290de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80290e0:	bf00      	nop
 80290e2:	370c      	adds	r7, #12
 80290e4:	46bd      	mov	sp, r7
 80290e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290ea:	4770      	bx	lr

080290ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80290ec:	b480      	push	{r7}
 80290ee:	b083      	sub	sp, #12
 80290f0:	af00      	add	r7, sp, #0
 80290f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80290f4:	687b      	ldr	r3, [r7, #4]
 80290f6:	2200      	movs	r2, #0
 80290f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80290fa:	bf00      	nop
 80290fc:	370c      	adds	r7, #12
 80290fe:	46bd      	mov	sp, r7
 8029100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029104:	4770      	bx	lr

08029106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8029106:	b480      	push	{r7}
 8029108:	b085      	sub	sp, #20
 802910a:	af00      	add	r7, sp, #0
 802910c:	6078      	str	r0, [r7, #4]
 802910e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8029110:	687b      	ldr	r3, [r7, #4]
 8029112:	685b      	ldr	r3, [r3, #4]
 8029114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8029116:	683b      	ldr	r3, [r7, #0]
 8029118:	68fa      	ldr	r2, [r7, #12]
 802911a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 802911c:	68fb      	ldr	r3, [r7, #12]
 802911e:	689a      	ldr	r2, [r3, #8]
 8029120:	683b      	ldr	r3, [r7, #0]
 8029122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8029124:	68fb      	ldr	r3, [r7, #12]
 8029126:	689b      	ldr	r3, [r3, #8]
 8029128:	683a      	ldr	r2, [r7, #0]
 802912a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 802912c:	68fb      	ldr	r3, [r7, #12]
 802912e:	683a      	ldr	r2, [r7, #0]
 8029130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8029132:	683b      	ldr	r3, [r7, #0]
 8029134:	687a      	ldr	r2, [r7, #4]
 8029136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8029138:	687b      	ldr	r3, [r7, #4]
 802913a:	681b      	ldr	r3, [r3, #0]
 802913c:	1c5a      	adds	r2, r3, #1
 802913e:	687b      	ldr	r3, [r7, #4]
 8029140:	601a      	str	r2, [r3, #0]
}
 8029142:	bf00      	nop
 8029144:	3714      	adds	r7, #20
 8029146:	46bd      	mov	sp, r7
 8029148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802914c:	4770      	bx	lr

0802914e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802914e:	b480      	push	{r7}
 8029150:	b085      	sub	sp, #20
 8029152:	af00      	add	r7, sp, #0
 8029154:	6078      	str	r0, [r7, #4]
 8029156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8029158:	683b      	ldr	r3, [r7, #0]
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802915e:	68bb      	ldr	r3, [r7, #8]
 8029160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029164:	d103      	bne.n	802916e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8029166:	687b      	ldr	r3, [r7, #4]
 8029168:	691b      	ldr	r3, [r3, #16]
 802916a:	60fb      	str	r3, [r7, #12]
 802916c:	e00c      	b.n	8029188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802916e:	687b      	ldr	r3, [r7, #4]
 8029170:	3308      	adds	r3, #8
 8029172:	60fb      	str	r3, [r7, #12]
 8029174:	e002      	b.n	802917c <vListInsert+0x2e>
 8029176:	68fb      	ldr	r3, [r7, #12]
 8029178:	685b      	ldr	r3, [r3, #4]
 802917a:	60fb      	str	r3, [r7, #12]
 802917c:	68fb      	ldr	r3, [r7, #12]
 802917e:	685b      	ldr	r3, [r3, #4]
 8029180:	681b      	ldr	r3, [r3, #0]
 8029182:	68ba      	ldr	r2, [r7, #8]
 8029184:	429a      	cmp	r2, r3
 8029186:	d2f6      	bcs.n	8029176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8029188:	68fb      	ldr	r3, [r7, #12]
 802918a:	685a      	ldr	r2, [r3, #4]
 802918c:	683b      	ldr	r3, [r7, #0]
 802918e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8029190:	683b      	ldr	r3, [r7, #0]
 8029192:	685b      	ldr	r3, [r3, #4]
 8029194:	683a      	ldr	r2, [r7, #0]
 8029196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8029198:	683b      	ldr	r3, [r7, #0]
 802919a:	68fa      	ldr	r2, [r7, #12]
 802919c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802919e:	68fb      	ldr	r3, [r7, #12]
 80291a0:	683a      	ldr	r2, [r7, #0]
 80291a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80291a4:	683b      	ldr	r3, [r7, #0]
 80291a6:	687a      	ldr	r2, [r7, #4]
 80291a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80291aa:	687b      	ldr	r3, [r7, #4]
 80291ac:	681b      	ldr	r3, [r3, #0]
 80291ae:	1c5a      	adds	r2, r3, #1
 80291b0:	687b      	ldr	r3, [r7, #4]
 80291b2:	601a      	str	r2, [r3, #0]
}
 80291b4:	bf00      	nop
 80291b6:	3714      	adds	r7, #20
 80291b8:	46bd      	mov	sp, r7
 80291ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291be:	4770      	bx	lr

080291c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80291c0:	b480      	push	{r7}
 80291c2:	b085      	sub	sp, #20
 80291c4:	af00      	add	r7, sp, #0
 80291c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	691b      	ldr	r3, [r3, #16]
 80291cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	685b      	ldr	r3, [r3, #4]
 80291d2:	687a      	ldr	r2, [r7, #4]
 80291d4:	6892      	ldr	r2, [r2, #8]
 80291d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80291d8:	687b      	ldr	r3, [r7, #4]
 80291da:	689b      	ldr	r3, [r3, #8]
 80291dc:	687a      	ldr	r2, [r7, #4]
 80291de:	6852      	ldr	r2, [r2, #4]
 80291e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80291e2:	68fb      	ldr	r3, [r7, #12]
 80291e4:	685b      	ldr	r3, [r3, #4]
 80291e6:	687a      	ldr	r2, [r7, #4]
 80291e8:	429a      	cmp	r2, r3
 80291ea:	d103      	bne.n	80291f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80291ec:	687b      	ldr	r3, [r7, #4]
 80291ee:	689a      	ldr	r2, [r3, #8]
 80291f0:	68fb      	ldr	r3, [r7, #12]
 80291f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	2200      	movs	r2, #0
 80291f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80291fa:	68fb      	ldr	r3, [r7, #12]
 80291fc:	681b      	ldr	r3, [r3, #0]
 80291fe:	1e5a      	subs	r2, r3, #1
 8029200:	68fb      	ldr	r3, [r7, #12]
 8029202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8029204:	68fb      	ldr	r3, [r7, #12]
 8029206:	681b      	ldr	r3, [r3, #0]
}
 8029208:	4618      	mov	r0, r3
 802920a:	3714      	adds	r7, #20
 802920c:	46bd      	mov	sp, r7
 802920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029212:	4770      	bx	lr

08029214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8029214:	b580      	push	{r7, lr}
 8029216:	b084      	sub	sp, #16
 8029218:	af00      	add	r7, sp, #0
 802921a:	6078      	str	r0, [r7, #4]
 802921c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8029222:	68fb      	ldr	r3, [r7, #12]
 8029224:	2b00      	cmp	r3, #0
 8029226:	d10a      	bne.n	802923e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8029228:	f04f 0350 	mov.w	r3, #80	; 0x50
 802922c:	f383 8811 	msr	BASEPRI, r3
 8029230:	f3bf 8f6f 	isb	sy
 8029234:	f3bf 8f4f 	dsb	sy
 8029238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802923a:	bf00      	nop
 802923c:	e7fe      	b.n	802923c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802923e:	f002 f899 	bl	802b374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8029242:	68fb      	ldr	r3, [r7, #12]
 8029244:	681a      	ldr	r2, [r3, #0]
 8029246:	68fb      	ldr	r3, [r7, #12]
 8029248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802924a:	68f9      	ldr	r1, [r7, #12]
 802924c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802924e:	fb01 f303 	mul.w	r3, r1, r3
 8029252:	441a      	add	r2, r3
 8029254:	68fb      	ldr	r3, [r7, #12]
 8029256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8029258:	68fb      	ldr	r3, [r7, #12]
 802925a:	2200      	movs	r2, #0
 802925c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802925e:	68fb      	ldr	r3, [r7, #12]
 8029260:	681a      	ldr	r2, [r3, #0]
 8029262:	68fb      	ldr	r3, [r7, #12]
 8029264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8029266:	68fb      	ldr	r3, [r7, #12]
 8029268:	681a      	ldr	r2, [r3, #0]
 802926a:	68fb      	ldr	r3, [r7, #12]
 802926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802926e:	3b01      	subs	r3, #1
 8029270:	68f9      	ldr	r1, [r7, #12]
 8029272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8029274:	fb01 f303 	mul.w	r3, r1, r3
 8029278:	441a      	add	r2, r3
 802927a:	68fb      	ldr	r3, [r7, #12]
 802927c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802927e:	68fb      	ldr	r3, [r7, #12]
 8029280:	22ff      	movs	r2, #255	; 0xff
 8029282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8029286:	68fb      	ldr	r3, [r7, #12]
 8029288:	22ff      	movs	r2, #255	; 0xff
 802928a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 802928e:	683b      	ldr	r3, [r7, #0]
 8029290:	2b00      	cmp	r3, #0
 8029292:	d114      	bne.n	80292be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8029294:	68fb      	ldr	r3, [r7, #12]
 8029296:	691b      	ldr	r3, [r3, #16]
 8029298:	2b00      	cmp	r3, #0
 802929a:	d01a      	beq.n	80292d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	3310      	adds	r3, #16
 80292a0:	4618      	mov	r0, r3
 80292a2:	f001 f911 	bl	802a4c8 <xTaskRemoveFromEventList>
 80292a6:	4603      	mov	r3, r0
 80292a8:	2b00      	cmp	r3, #0
 80292aa:	d012      	beq.n	80292d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80292ac:	4b0c      	ldr	r3, [pc, #48]	; (80292e0 <xQueueGenericReset+0xcc>)
 80292ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80292b2:	601a      	str	r2, [r3, #0]
 80292b4:	f3bf 8f4f 	dsb	sy
 80292b8:	f3bf 8f6f 	isb	sy
 80292bc:	e009      	b.n	80292d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80292be:	68fb      	ldr	r3, [r7, #12]
 80292c0:	3310      	adds	r3, #16
 80292c2:	4618      	mov	r0, r3
 80292c4:	f7ff fef2 	bl	80290ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80292c8:	68fb      	ldr	r3, [r7, #12]
 80292ca:	3324      	adds	r3, #36	; 0x24
 80292cc:	4618      	mov	r0, r3
 80292ce:	f7ff feed 	bl	80290ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80292d2:	f002 f87f 	bl	802b3d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80292d6:	2301      	movs	r3, #1
}
 80292d8:	4618      	mov	r0, r3
 80292da:	3710      	adds	r7, #16
 80292dc:	46bd      	mov	sp, r7
 80292de:	bd80      	pop	{r7, pc}
 80292e0:	e000ed04 	.word	0xe000ed04

080292e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80292e4:	b580      	push	{r7, lr}
 80292e6:	b08e      	sub	sp, #56	; 0x38
 80292e8:	af02      	add	r7, sp, #8
 80292ea:	60f8      	str	r0, [r7, #12]
 80292ec:	60b9      	str	r1, [r7, #8]
 80292ee:	607a      	str	r2, [r7, #4]
 80292f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80292f2:	68fb      	ldr	r3, [r7, #12]
 80292f4:	2b00      	cmp	r3, #0
 80292f6:	d10a      	bne.n	802930e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80292f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80292fc:	f383 8811 	msr	BASEPRI, r3
 8029300:	f3bf 8f6f 	isb	sy
 8029304:	f3bf 8f4f 	dsb	sy
 8029308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802930a:	bf00      	nop
 802930c:	e7fe      	b.n	802930c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802930e:	683b      	ldr	r3, [r7, #0]
 8029310:	2b00      	cmp	r3, #0
 8029312:	d10a      	bne.n	802932a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8029314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029318:	f383 8811 	msr	BASEPRI, r3
 802931c:	f3bf 8f6f 	isb	sy
 8029320:	f3bf 8f4f 	dsb	sy
 8029324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8029326:	bf00      	nop
 8029328:	e7fe      	b.n	8029328 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 802932a:	687b      	ldr	r3, [r7, #4]
 802932c:	2b00      	cmp	r3, #0
 802932e:	d002      	beq.n	8029336 <xQueueGenericCreateStatic+0x52>
 8029330:	68bb      	ldr	r3, [r7, #8]
 8029332:	2b00      	cmp	r3, #0
 8029334:	d001      	beq.n	802933a <xQueueGenericCreateStatic+0x56>
 8029336:	2301      	movs	r3, #1
 8029338:	e000      	b.n	802933c <xQueueGenericCreateStatic+0x58>
 802933a:	2300      	movs	r3, #0
 802933c:	2b00      	cmp	r3, #0
 802933e:	d10a      	bne.n	8029356 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8029340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029344:	f383 8811 	msr	BASEPRI, r3
 8029348:	f3bf 8f6f 	isb	sy
 802934c:	f3bf 8f4f 	dsb	sy
 8029350:	623b      	str	r3, [r7, #32]
}
 8029352:	bf00      	nop
 8029354:	e7fe      	b.n	8029354 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8029356:	687b      	ldr	r3, [r7, #4]
 8029358:	2b00      	cmp	r3, #0
 802935a:	d102      	bne.n	8029362 <xQueueGenericCreateStatic+0x7e>
 802935c:	68bb      	ldr	r3, [r7, #8]
 802935e:	2b00      	cmp	r3, #0
 8029360:	d101      	bne.n	8029366 <xQueueGenericCreateStatic+0x82>
 8029362:	2301      	movs	r3, #1
 8029364:	e000      	b.n	8029368 <xQueueGenericCreateStatic+0x84>
 8029366:	2300      	movs	r3, #0
 8029368:	2b00      	cmp	r3, #0
 802936a:	d10a      	bne.n	8029382 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 802936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029370:	f383 8811 	msr	BASEPRI, r3
 8029374:	f3bf 8f6f 	isb	sy
 8029378:	f3bf 8f4f 	dsb	sy
 802937c:	61fb      	str	r3, [r7, #28]
}
 802937e:	bf00      	nop
 8029380:	e7fe      	b.n	8029380 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8029382:	2350      	movs	r3, #80	; 0x50
 8029384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8029386:	697b      	ldr	r3, [r7, #20]
 8029388:	2b50      	cmp	r3, #80	; 0x50
 802938a:	d00a      	beq.n	80293a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 802938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029390:	f383 8811 	msr	BASEPRI, r3
 8029394:	f3bf 8f6f 	isb	sy
 8029398:	f3bf 8f4f 	dsb	sy
 802939c:	61bb      	str	r3, [r7, #24]
}
 802939e:	bf00      	nop
 80293a0:	e7fe      	b.n	80293a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80293a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80293a4:	683b      	ldr	r3, [r7, #0]
 80293a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80293a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80293aa:	2b00      	cmp	r3, #0
 80293ac:	d00d      	beq.n	80293ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80293ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80293b0:	2201      	movs	r2, #1
 80293b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80293b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80293ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80293bc:	9300      	str	r3, [sp, #0]
 80293be:	4613      	mov	r3, r2
 80293c0:	687a      	ldr	r2, [r7, #4]
 80293c2:	68b9      	ldr	r1, [r7, #8]
 80293c4:	68f8      	ldr	r0, [r7, #12]
 80293c6:	f000 f805 	bl	80293d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80293ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80293cc:	4618      	mov	r0, r3
 80293ce:	3730      	adds	r7, #48	; 0x30
 80293d0:	46bd      	mov	sp, r7
 80293d2:	bd80      	pop	{r7, pc}

080293d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80293d4:	b580      	push	{r7, lr}
 80293d6:	b084      	sub	sp, #16
 80293d8:	af00      	add	r7, sp, #0
 80293da:	60f8      	str	r0, [r7, #12]
 80293dc:	60b9      	str	r1, [r7, #8]
 80293de:	607a      	str	r2, [r7, #4]
 80293e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80293e2:	68bb      	ldr	r3, [r7, #8]
 80293e4:	2b00      	cmp	r3, #0
 80293e6:	d103      	bne.n	80293f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80293e8:	69bb      	ldr	r3, [r7, #24]
 80293ea:	69ba      	ldr	r2, [r7, #24]
 80293ec:	601a      	str	r2, [r3, #0]
 80293ee:	e002      	b.n	80293f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80293f0:	69bb      	ldr	r3, [r7, #24]
 80293f2:	687a      	ldr	r2, [r7, #4]
 80293f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80293f6:	69bb      	ldr	r3, [r7, #24]
 80293f8:	68fa      	ldr	r2, [r7, #12]
 80293fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80293fc:	69bb      	ldr	r3, [r7, #24]
 80293fe:	68ba      	ldr	r2, [r7, #8]
 8029400:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8029402:	2101      	movs	r1, #1
 8029404:	69b8      	ldr	r0, [r7, #24]
 8029406:	f7ff ff05 	bl	8029214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802940a:	69bb      	ldr	r3, [r7, #24]
 802940c:	78fa      	ldrb	r2, [r7, #3]
 802940e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8029412:	bf00      	nop
 8029414:	3710      	adds	r7, #16
 8029416:	46bd      	mov	sp, r7
 8029418:	bd80      	pop	{r7, pc}
	...

0802941c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 802941c:	b580      	push	{r7, lr}
 802941e:	b08e      	sub	sp, #56	; 0x38
 8029420:	af00      	add	r7, sp, #0
 8029422:	60f8      	str	r0, [r7, #12]
 8029424:	60b9      	str	r1, [r7, #8]
 8029426:	607a      	str	r2, [r7, #4]
 8029428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 802942a:	2300      	movs	r3, #0
 802942c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802942e:	68fb      	ldr	r3, [r7, #12]
 8029430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8029432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029434:	2b00      	cmp	r3, #0
 8029436:	d10a      	bne.n	802944e <xQueueGenericSend+0x32>
	__asm volatile
 8029438:	f04f 0350 	mov.w	r3, #80	; 0x50
 802943c:	f383 8811 	msr	BASEPRI, r3
 8029440:	f3bf 8f6f 	isb	sy
 8029444:	f3bf 8f4f 	dsb	sy
 8029448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802944a:	bf00      	nop
 802944c:	e7fe      	b.n	802944c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802944e:	68bb      	ldr	r3, [r7, #8]
 8029450:	2b00      	cmp	r3, #0
 8029452:	d103      	bne.n	802945c <xQueueGenericSend+0x40>
 8029454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029458:	2b00      	cmp	r3, #0
 802945a:	d101      	bne.n	8029460 <xQueueGenericSend+0x44>
 802945c:	2301      	movs	r3, #1
 802945e:	e000      	b.n	8029462 <xQueueGenericSend+0x46>
 8029460:	2300      	movs	r3, #0
 8029462:	2b00      	cmp	r3, #0
 8029464:	d10a      	bne.n	802947c <xQueueGenericSend+0x60>
	__asm volatile
 8029466:	f04f 0350 	mov.w	r3, #80	; 0x50
 802946a:	f383 8811 	msr	BASEPRI, r3
 802946e:	f3bf 8f6f 	isb	sy
 8029472:	f3bf 8f4f 	dsb	sy
 8029476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8029478:	bf00      	nop
 802947a:	e7fe      	b.n	802947a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802947c:	683b      	ldr	r3, [r7, #0]
 802947e:	2b02      	cmp	r3, #2
 8029480:	d103      	bne.n	802948a <xQueueGenericSend+0x6e>
 8029482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029486:	2b01      	cmp	r3, #1
 8029488:	d101      	bne.n	802948e <xQueueGenericSend+0x72>
 802948a:	2301      	movs	r3, #1
 802948c:	e000      	b.n	8029490 <xQueueGenericSend+0x74>
 802948e:	2300      	movs	r3, #0
 8029490:	2b00      	cmp	r3, #0
 8029492:	d10a      	bne.n	80294aa <xQueueGenericSend+0x8e>
	__asm volatile
 8029494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029498:	f383 8811 	msr	BASEPRI, r3
 802949c:	f3bf 8f6f 	isb	sy
 80294a0:	f3bf 8f4f 	dsb	sy
 80294a4:	623b      	str	r3, [r7, #32]
}
 80294a6:	bf00      	nop
 80294a8:	e7fe      	b.n	80294a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80294aa:	f001 fa05 	bl	802a8b8 <xTaskGetSchedulerState>
 80294ae:	4603      	mov	r3, r0
 80294b0:	2b00      	cmp	r3, #0
 80294b2:	d102      	bne.n	80294ba <xQueueGenericSend+0x9e>
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	2b00      	cmp	r3, #0
 80294b8:	d101      	bne.n	80294be <xQueueGenericSend+0xa2>
 80294ba:	2301      	movs	r3, #1
 80294bc:	e000      	b.n	80294c0 <xQueueGenericSend+0xa4>
 80294be:	2300      	movs	r3, #0
 80294c0:	2b00      	cmp	r3, #0
 80294c2:	d10a      	bne.n	80294da <xQueueGenericSend+0xbe>
	__asm volatile
 80294c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80294c8:	f383 8811 	msr	BASEPRI, r3
 80294cc:	f3bf 8f6f 	isb	sy
 80294d0:	f3bf 8f4f 	dsb	sy
 80294d4:	61fb      	str	r3, [r7, #28]
}
 80294d6:	bf00      	nop
 80294d8:	e7fe      	b.n	80294d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80294da:	f001 ff4b 	bl	802b374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80294de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80294e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80294e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80294e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80294e6:	429a      	cmp	r2, r3
 80294e8:	d302      	bcc.n	80294f0 <xQueueGenericSend+0xd4>
 80294ea:	683b      	ldr	r3, [r7, #0]
 80294ec:	2b02      	cmp	r3, #2
 80294ee:	d129      	bne.n	8029544 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80294f0:	683a      	ldr	r2, [r7, #0]
 80294f2:	68b9      	ldr	r1, [r7, #8]
 80294f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80294f6:	f000 fa07 	bl	8029908 <prvCopyDataToQueue>
 80294fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80294fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80294fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029500:	2b00      	cmp	r3, #0
 8029502:	d010      	beq.n	8029526 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8029504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029506:	3324      	adds	r3, #36	; 0x24
 8029508:	4618      	mov	r0, r3
 802950a:	f000 ffdd 	bl	802a4c8 <xTaskRemoveFromEventList>
 802950e:	4603      	mov	r3, r0
 8029510:	2b00      	cmp	r3, #0
 8029512:	d013      	beq.n	802953c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8029514:	4b3f      	ldr	r3, [pc, #252]	; (8029614 <xQueueGenericSend+0x1f8>)
 8029516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802951a:	601a      	str	r2, [r3, #0]
 802951c:	f3bf 8f4f 	dsb	sy
 8029520:	f3bf 8f6f 	isb	sy
 8029524:	e00a      	b.n	802953c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8029526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029528:	2b00      	cmp	r3, #0
 802952a:	d007      	beq.n	802953c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 802952c:	4b39      	ldr	r3, [pc, #228]	; (8029614 <xQueueGenericSend+0x1f8>)
 802952e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029532:	601a      	str	r2, [r3, #0]
 8029534:	f3bf 8f4f 	dsb	sy
 8029538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 802953c:	f001 ff4a 	bl	802b3d4 <vPortExitCritical>
				return pdPASS;
 8029540:	2301      	movs	r3, #1
 8029542:	e063      	b.n	802960c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	2b00      	cmp	r3, #0
 8029548:	d103      	bne.n	8029552 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802954a:	f001 ff43 	bl	802b3d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 802954e:	2300      	movs	r3, #0
 8029550:	e05c      	b.n	802960c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8029552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029554:	2b00      	cmp	r3, #0
 8029556:	d106      	bne.n	8029566 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8029558:	f107 0314 	add.w	r3, r7, #20
 802955c:	4618      	mov	r0, r3
 802955e:	f001 f817 	bl	802a590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8029562:	2301      	movs	r3, #1
 8029564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8029566:	f001 ff35 	bl	802b3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802956a:	f000 fd77 	bl	802a05c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802956e:	f001 ff01 	bl	802b374 <vPortEnterCritical>
 8029572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8029578:	b25b      	sxtb	r3, r3
 802957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802957e:	d103      	bne.n	8029588 <xQueueGenericSend+0x16c>
 8029580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029582:	2200      	movs	r2, #0
 8029584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8029588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802958a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802958e:	b25b      	sxtb	r3, r3
 8029590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029594:	d103      	bne.n	802959e <xQueueGenericSend+0x182>
 8029596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029598:	2200      	movs	r2, #0
 802959a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802959e:	f001 ff19 	bl	802b3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80295a2:	1d3a      	adds	r2, r7, #4
 80295a4:	f107 0314 	add.w	r3, r7, #20
 80295a8:	4611      	mov	r1, r2
 80295aa:	4618      	mov	r0, r3
 80295ac:	f001 f806 	bl	802a5bc <xTaskCheckForTimeOut>
 80295b0:	4603      	mov	r3, r0
 80295b2:	2b00      	cmp	r3, #0
 80295b4:	d124      	bne.n	8029600 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80295b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80295b8:	f000 fa9e 	bl	8029af8 <prvIsQueueFull>
 80295bc:	4603      	mov	r3, r0
 80295be:	2b00      	cmp	r3, #0
 80295c0:	d018      	beq.n	80295f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80295c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80295c4:	3310      	adds	r3, #16
 80295c6:	687a      	ldr	r2, [r7, #4]
 80295c8:	4611      	mov	r1, r2
 80295ca:	4618      	mov	r0, r3
 80295cc:	f000 ff2c 	bl	802a428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80295d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80295d2:	f000 fa29 	bl	8029a28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80295d6:	f000 fd4f 	bl	802a078 <xTaskResumeAll>
 80295da:	4603      	mov	r3, r0
 80295dc:	2b00      	cmp	r3, #0
 80295de:	f47f af7c 	bne.w	80294da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80295e2:	4b0c      	ldr	r3, [pc, #48]	; (8029614 <xQueueGenericSend+0x1f8>)
 80295e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80295e8:	601a      	str	r2, [r3, #0]
 80295ea:	f3bf 8f4f 	dsb	sy
 80295ee:	f3bf 8f6f 	isb	sy
 80295f2:	e772      	b.n	80294da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80295f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80295f6:	f000 fa17 	bl	8029a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80295fa:	f000 fd3d 	bl	802a078 <xTaskResumeAll>
 80295fe:	e76c      	b.n	80294da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8029600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8029602:	f000 fa11 	bl	8029a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8029606:	f000 fd37 	bl	802a078 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 802960a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 802960c:	4618      	mov	r0, r3
 802960e:	3738      	adds	r7, #56	; 0x38
 8029610:	46bd      	mov	sp, r7
 8029612:	bd80      	pop	{r7, pc}
 8029614:	e000ed04 	.word	0xe000ed04

08029618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8029618:	b580      	push	{r7, lr}
 802961a:	b08e      	sub	sp, #56	; 0x38
 802961c:	af00      	add	r7, sp, #0
 802961e:	60f8      	str	r0, [r7, #12]
 8029620:	60b9      	str	r1, [r7, #8]
 8029622:	607a      	str	r2, [r7, #4]
 8029624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8029626:	68fb      	ldr	r3, [r7, #12]
 8029628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 802962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802962c:	2b00      	cmp	r3, #0
 802962e:	d10a      	bne.n	8029646 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8029630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029634:	f383 8811 	msr	BASEPRI, r3
 8029638:	f3bf 8f6f 	isb	sy
 802963c:	f3bf 8f4f 	dsb	sy
 8029640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8029642:	bf00      	nop
 8029644:	e7fe      	b.n	8029644 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8029646:	68bb      	ldr	r3, [r7, #8]
 8029648:	2b00      	cmp	r3, #0
 802964a:	d103      	bne.n	8029654 <xQueueGenericSendFromISR+0x3c>
 802964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029650:	2b00      	cmp	r3, #0
 8029652:	d101      	bne.n	8029658 <xQueueGenericSendFromISR+0x40>
 8029654:	2301      	movs	r3, #1
 8029656:	e000      	b.n	802965a <xQueueGenericSendFromISR+0x42>
 8029658:	2300      	movs	r3, #0
 802965a:	2b00      	cmp	r3, #0
 802965c:	d10a      	bne.n	8029674 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 802965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029662:	f383 8811 	msr	BASEPRI, r3
 8029666:	f3bf 8f6f 	isb	sy
 802966a:	f3bf 8f4f 	dsb	sy
 802966e:	623b      	str	r3, [r7, #32]
}
 8029670:	bf00      	nop
 8029672:	e7fe      	b.n	8029672 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8029674:	683b      	ldr	r3, [r7, #0]
 8029676:	2b02      	cmp	r3, #2
 8029678:	d103      	bne.n	8029682 <xQueueGenericSendFromISR+0x6a>
 802967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802967e:	2b01      	cmp	r3, #1
 8029680:	d101      	bne.n	8029686 <xQueueGenericSendFromISR+0x6e>
 8029682:	2301      	movs	r3, #1
 8029684:	e000      	b.n	8029688 <xQueueGenericSendFromISR+0x70>
 8029686:	2300      	movs	r3, #0
 8029688:	2b00      	cmp	r3, #0
 802968a:	d10a      	bne.n	80296a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 802968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029690:	f383 8811 	msr	BASEPRI, r3
 8029694:	f3bf 8f6f 	isb	sy
 8029698:	f3bf 8f4f 	dsb	sy
 802969c:	61fb      	str	r3, [r7, #28]
}
 802969e:	bf00      	nop
 80296a0:	e7fe      	b.n	80296a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80296a2:	f001 ff49 	bl	802b538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80296a6:	f3ef 8211 	mrs	r2, BASEPRI
 80296aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80296ae:	f383 8811 	msr	BASEPRI, r3
 80296b2:	f3bf 8f6f 	isb	sy
 80296b6:	f3bf 8f4f 	dsb	sy
 80296ba:	61ba      	str	r2, [r7, #24]
 80296bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80296be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80296c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80296c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80296c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80296ca:	429a      	cmp	r2, r3
 80296cc:	d302      	bcc.n	80296d4 <xQueueGenericSendFromISR+0xbc>
 80296ce:	683b      	ldr	r3, [r7, #0]
 80296d0:	2b02      	cmp	r3, #2
 80296d2:	d12c      	bne.n	802972e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80296d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80296da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80296de:	683a      	ldr	r2, [r7, #0]
 80296e0:	68b9      	ldr	r1, [r7, #8]
 80296e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80296e4:	f000 f910 	bl	8029908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80296e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80296ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80296f0:	d112      	bne.n	8029718 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80296f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d016      	beq.n	8029728 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80296fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296fc:	3324      	adds	r3, #36	; 0x24
 80296fe:	4618      	mov	r0, r3
 8029700:	f000 fee2 	bl	802a4c8 <xTaskRemoveFromEventList>
 8029704:	4603      	mov	r3, r0
 8029706:	2b00      	cmp	r3, #0
 8029708:	d00e      	beq.n	8029728 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	2b00      	cmp	r3, #0
 802970e:	d00b      	beq.n	8029728 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	2201      	movs	r2, #1
 8029714:	601a      	str	r2, [r3, #0]
 8029716:	e007      	b.n	8029728 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8029718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802971c:	3301      	adds	r3, #1
 802971e:	b2db      	uxtb	r3, r3
 8029720:	b25a      	sxtb	r2, r3
 8029722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8029728:	2301      	movs	r3, #1
 802972a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 802972c:	e001      	b.n	8029732 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 802972e:	2300      	movs	r3, #0
 8029730:	637b      	str	r3, [r7, #52]	; 0x34
 8029732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029734:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8029736:	693b      	ldr	r3, [r7, #16]
 8029738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 802973c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8029740:	4618      	mov	r0, r3
 8029742:	3738      	adds	r7, #56	; 0x38
 8029744:	46bd      	mov	sp, r7
 8029746:	bd80      	pop	{r7, pc}

08029748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8029748:	b580      	push	{r7, lr}
 802974a:	b08c      	sub	sp, #48	; 0x30
 802974c:	af00      	add	r7, sp, #0
 802974e:	60f8      	str	r0, [r7, #12]
 8029750:	60b9      	str	r1, [r7, #8]
 8029752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8029754:	2300      	movs	r3, #0
 8029756:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8029758:	68fb      	ldr	r3, [r7, #12]
 802975a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802975e:	2b00      	cmp	r3, #0
 8029760:	d10a      	bne.n	8029778 <xQueueReceive+0x30>
	__asm volatile
 8029762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029766:	f383 8811 	msr	BASEPRI, r3
 802976a:	f3bf 8f6f 	isb	sy
 802976e:	f3bf 8f4f 	dsb	sy
 8029772:	623b      	str	r3, [r7, #32]
}
 8029774:	bf00      	nop
 8029776:	e7fe      	b.n	8029776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8029778:	68bb      	ldr	r3, [r7, #8]
 802977a:	2b00      	cmp	r3, #0
 802977c:	d103      	bne.n	8029786 <xQueueReceive+0x3e>
 802977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029782:	2b00      	cmp	r3, #0
 8029784:	d101      	bne.n	802978a <xQueueReceive+0x42>
 8029786:	2301      	movs	r3, #1
 8029788:	e000      	b.n	802978c <xQueueReceive+0x44>
 802978a:	2300      	movs	r3, #0
 802978c:	2b00      	cmp	r3, #0
 802978e:	d10a      	bne.n	80297a6 <xQueueReceive+0x5e>
	__asm volatile
 8029790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029794:	f383 8811 	msr	BASEPRI, r3
 8029798:	f3bf 8f6f 	isb	sy
 802979c:	f3bf 8f4f 	dsb	sy
 80297a0:	61fb      	str	r3, [r7, #28]
}
 80297a2:	bf00      	nop
 80297a4:	e7fe      	b.n	80297a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80297a6:	f001 f887 	bl	802a8b8 <xTaskGetSchedulerState>
 80297aa:	4603      	mov	r3, r0
 80297ac:	2b00      	cmp	r3, #0
 80297ae:	d102      	bne.n	80297b6 <xQueueReceive+0x6e>
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	2b00      	cmp	r3, #0
 80297b4:	d101      	bne.n	80297ba <xQueueReceive+0x72>
 80297b6:	2301      	movs	r3, #1
 80297b8:	e000      	b.n	80297bc <xQueueReceive+0x74>
 80297ba:	2300      	movs	r3, #0
 80297bc:	2b00      	cmp	r3, #0
 80297be:	d10a      	bne.n	80297d6 <xQueueReceive+0x8e>
	__asm volatile
 80297c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80297c4:	f383 8811 	msr	BASEPRI, r3
 80297c8:	f3bf 8f6f 	isb	sy
 80297cc:	f3bf 8f4f 	dsb	sy
 80297d0:	61bb      	str	r3, [r7, #24]
}
 80297d2:	bf00      	nop
 80297d4:	e7fe      	b.n	80297d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80297d6:	f001 fdcd 	bl	802b374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80297da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80297de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80297e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80297e2:	2b00      	cmp	r3, #0
 80297e4:	d01f      	beq.n	8029826 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80297e6:	68b9      	ldr	r1, [r7, #8]
 80297e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80297ea:	f000 f8f7 	bl	80299dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80297ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80297f0:	1e5a      	subs	r2, r3, #1
 80297f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80297f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297f8:	691b      	ldr	r3, [r3, #16]
 80297fa:	2b00      	cmp	r3, #0
 80297fc:	d00f      	beq.n	802981e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80297fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029800:	3310      	adds	r3, #16
 8029802:	4618      	mov	r0, r3
 8029804:	f000 fe60 	bl	802a4c8 <xTaskRemoveFromEventList>
 8029808:	4603      	mov	r3, r0
 802980a:	2b00      	cmp	r3, #0
 802980c:	d007      	beq.n	802981e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802980e:	4b3d      	ldr	r3, [pc, #244]	; (8029904 <xQueueReceive+0x1bc>)
 8029810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029814:	601a      	str	r2, [r3, #0]
 8029816:	f3bf 8f4f 	dsb	sy
 802981a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802981e:	f001 fdd9 	bl	802b3d4 <vPortExitCritical>
				return pdPASS;
 8029822:	2301      	movs	r3, #1
 8029824:	e069      	b.n	80298fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8029826:	687b      	ldr	r3, [r7, #4]
 8029828:	2b00      	cmp	r3, #0
 802982a:	d103      	bne.n	8029834 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802982c:	f001 fdd2 	bl	802b3d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8029830:	2300      	movs	r3, #0
 8029832:	e062      	b.n	80298fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8029834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029836:	2b00      	cmp	r3, #0
 8029838:	d106      	bne.n	8029848 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802983a:	f107 0310 	add.w	r3, r7, #16
 802983e:	4618      	mov	r0, r3
 8029840:	f000 fea6 	bl	802a590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8029844:	2301      	movs	r3, #1
 8029846:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8029848:	f001 fdc4 	bl	802b3d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802984c:	f000 fc06 	bl	802a05c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8029850:	f001 fd90 	bl	802b374 <vPortEnterCritical>
 8029854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802985a:	b25b      	sxtb	r3, r3
 802985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029860:	d103      	bne.n	802986a <xQueueReceive+0x122>
 8029862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029864:	2200      	movs	r2, #0
 8029866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802986c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8029870:	b25b      	sxtb	r3, r3
 8029872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029876:	d103      	bne.n	8029880 <xQueueReceive+0x138>
 8029878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802987a:	2200      	movs	r2, #0
 802987c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8029880:	f001 fda8 	bl	802b3d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8029884:	1d3a      	adds	r2, r7, #4
 8029886:	f107 0310 	add.w	r3, r7, #16
 802988a:	4611      	mov	r1, r2
 802988c:	4618      	mov	r0, r3
 802988e:	f000 fe95 	bl	802a5bc <xTaskCheckForTimeOut>
 8029892:	4603      	mov	r3, r0
 8029894:	2b00      	cmp	r3, #0
 8029896:	d123      	bne.n	80298e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8029898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802989a:	f000 f917 	bl	8029acc <prvIsQueueEmpty>
 802989e:	4603      	mov	r3, r0
 80298a0:	2b00      	cmp	r3, #0
 80298a2:	d017      	beq.n	80298d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80298a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80298a6:	3324      	adds	r3, #36	; 0x24
 80298a8:	687a      	ldr	r2, [r7, #4]
 80298aa:	4611      	mov	r1, r2
 80298ac:	4618      	mov	r0, r3
 80298ae:	f000 fdbb 	bl	802a428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80298b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80298b4:	f000 f8b8 	bl	8029a28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80298b8:	f000 fbde 	bl	802a078 <xTaskResumeAll>
 80298bc:	4603      	mov	r3, r0
 80298be:	2b00      	cmp	r3, #0
 80298c0:	d189      	bne.n	80297d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80298c2:	4b10      	ldr	r3, [pc, #64]	; (8029904 <xQueueReceive+0x1bc>)
 80298c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80298c8:	601a      	str	r2, [r3, #0]
 80298ca:	f3bf 8f4f 	dsb	sy
 80298ce:	f3bf 8f6f 	isb	sy
 80298d2:	e780      	b.n	80297d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80298d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80298d6:	f000 f8a7 	bl	8029a28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80298da:	f000 fbcd 	bl	802a078 <xTaskResumeAll>
 80298de:	e77a      	b.n	80297d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80298e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80298e2:	f000 f8a1 	bl	8029a28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80298e6:	f000 fbc7 	bl	802a078 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80298ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80298ec:	f000 f8ee 	bl	8029acc <prvIsQueueEmpty>
 80298f0:	4603      	mov	r3, r0
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	f43f af6f 	beq.w	80297d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80298f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80298fa:	4618      	mov	r0, r3
 80298fc:	3730      	adds	r7, #48	; 0x30
 80298fe:	46bd      	mov	sp, r7
 8029900:	bd80      	pop	{r7, pc}
 8029902:	bf00      	nop
 8029904:	e000ed04 	.word	0xe000ed04

08029908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8029908:	b580      	push	{r7, lr}
 802990a:	b086      	sub	sp, #24
 802990c:	af00      	add	r7, sp, #0
 802990e:	60f8      	str	r0, [r7, #12]
 8029910:	60b9      	str	r1, [r7, #8]
 8029912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8029914:	2300      	movs	r3, #0
 8029916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8029918:	68fb      	ldr	r3, [r7, #12]
 802991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802991c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802991e:	68fb      	ldr	r3, [r7, #12]
 8029920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029922:	2b00      	cmp	r3, #0
 8029924:	d10d      	bne.n	8029942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8029926:	68fb      	ldr	r3, [r7, #12]
 8029928:	681b      	ldr	r3, [r3, #0]
 802992a:	2b00      	cmp	r3, #0
 802992c:	d14d      	bne.n	80299ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802992e:	68fb      	ldr	r3, [r7, #12]
 8029930:	689b      	ldr	r3, [r3, #8]
 8029932:	4618      	mov	r0, r3
 8029934:	f000 ffde 	bl	802a8f4 <xTaskPriorityDisinherit>
 8029938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 802993a:	68fb      	ldr	r3, [r7, #12]
 802993c:	2200      	movs	r2, #0
 802993e:	609a      	str	r2, [r3, #8]
 8029940:	e043      	b.n	80299ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8029942:	687b      	ldr	r3, [r7, #4]
 8029944:	2b00      	cmp	r3, #0
 8029946:	d119      	bne.n	802997c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8029948:	68fb      	ldr	r3, [r7, #12]
 802994a:	6858      	ldr	r0, [r3, #4]
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029950:	461a      	mov	r2, r3
 8029952:	68b9      	ldr	r1, [r7, #8]
 8029954:	f003 fb84 	bl	802d060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8029958:	68fb      	ldr	r3, [r7, #12]
 802995a:	685a      	ldr	r2, [r3, #4]
 802995c:	68fb      	ldr	r3, [r7, #12]
 802995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029960:	441a      	add	r2, r3
 8029962:	68fb      	ldr	r3, [r7, #12]
 8029964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8029966:	68fb      	ldr	r3, [r7, #12]
 8029968:	685a      	ldr	r2, [r3, #4]
 802996a:	68fb      	ldr	r3, [r7, #12]
 802996c:	689b      	ldr	r3, [r3, #8]
 802996e:	429a      	cmp	r2, r3
 8029970:	d32b      	bcc.n	80299ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8029972:	68fb      	ldr	r3, [r7, #12]
 8029974:	681a      	ldr	r2, [r3, #0]
 8029976:	68fb      	ldr	r3, [r7, #12]
 8029978:	605a      	str	r2, [r3, #4]
 802997a:	e026      	b.n	80299ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 802997c:	68fb      	ldr	r3, [r7, #12]
 802997e:	68d8      	ldr	r0, [r3, #12]
 8029980:	68fb      	ldr	r3, [r7, #12]
 8029982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029984:	461a      	mov	r2, r3
 8029986:	68b9      	ldr	r1, [r7, #8]
 8029988:	f003 fb6a 	bl	802d060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	68da      	ldr	r2, [r3, #12]
 8029990:	68fb      	ldr	r3, [r7, #12]
 8029992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029994:	425b      	negs	r3, r3
 8029996:	441a      	add	r2, r3
 8029998:	68fb      	ldr	r3, [r7, #12]
 802999a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802999c:	68fb      	ldr	r3, [r7, #12]
 802999e:	68da      	ldr	r2, [r3, #12]
 80299a0:	68fb      	ldr	r3, [r7, #12]
 80299a2:	681b      	ldr	r3, [r3, #0]
 80299a4:	429a      	cmp	r2, r3
 80299a6:	d207      	bcs.n	80299b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80299a8:	68fb      	ldr	r3, [r7, #12]
 80299aa:	689a      	ldr	r2, [r3, #8]
 80299ac:	68fb      	ldr	r3, [r7, #12]
 80299ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299b0:	425b      	negs	r3, r3
 80299b2:	441a      	add	r2, r3
 80299b4:	68fb      	ldr	r3, [r7, #12]
 80299b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	2b02      	cmp	r3, #2
 80299bc:	d105      	bne.n	80299ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80299be:	693b      	ldr	r3, [r7, #16]
 80299c0:	2b00      	cmp	r3, #0
 80299c2:	d002      	beq.n	80299ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80299c4:	693b      	ldr	r3, [r7, #16]
 80299c6:	3b01      	subs	r3, #1
 80299c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80299ca:	693b      	ldr	r3, [r7, #16]
 80299cc:	1c5a      	adds	r2, r3, #1
 80299ce:	68fb      	ldr	r3, [r7, #12]
 80299d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80299d2:	697b      	ldr	r3, [r7, #20]
}
 80299d4:	4618      	mov	r0, r3
 80299d6:	3718      	adds	r7, #24
 80299d8:	46bd      	mov	sp, r7
 80299da:	bd80      	pop	{r7, pc}

080299dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80299dc:	b580      	push	{r7, lr}
 80299de:	b082      	sub	sp, #8
 80299e0:	af00      	add	r7, sp, #0
 80299e2:	6078      	str	r0, [r7, #4]
 80299e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	d018      	beq.n	8029a20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80299ee:	687b      	ldr	r3, [r7, #4]
 80299f0:	68da      	ldr	r2, [r3, #12]
 80299f2:	687b      	ldr	r3, [r7, #4]
 80299f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299f6:	441a      	add	r2, r3
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80299fc:	687b      	ldr	r3, [r7, #4]
 80299fe:	68da      	ldr	r2, [r3, #12]
 8029a00:	687b      	ldr	r3, [r7, #4]
 8029a02:	689b      	ldr	r3, [r3, #8]
 8029a04:	429a      	cmp	r2, r3
 8029a06:	d303      	bcc.n	8029a10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8029a08:	687b      	ldr	r3, [r7, #4]
 8029a0a:	681a      	ldr	r2, [r3, #0]
 8029a0c:	687b      	ldr	r3, [r7, #4]
 8029a0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8029a10:	687b      	ldr	r3, [r7, #4]
 8029a12:	68d9      	ldr	r1, [r3, #12]
 8029a14:	687b      	ldr	r3, [r7, #4]
 8029a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a18:	461a      	mov	r2, r3
 8029a1a:	6838      	ldr	r0, [r7, #0]
 8029a1c:	f003 fb20 	bl	802d060 <memcpy>
	}
}
 8029a20:	bf00      	nop
 8029a22:	3708      	adds	r7, #8
 8029a24:	46bd      	mov	sp, r7
 8029a26:	bd80      	pop	{r7, pc}

08029a28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8029a28:	b580      	push	{r7, lr}
 8029a2a:	b084      	sub	sp, #16
 8029a2c:	af00      	add	r7, sp, #0
 8029a2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8029a30:	f001 fca0 	bl	802b374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8029a34:	687b      	ldr	r3, [r7, #4]
 8029a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8029a3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8029a3c:	e011      	b.n	8029a62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	d012      	beq.n	8029a6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	3324      	adds	r3, #36	; 0x24
 8029a4a:	4618      	mov	r0, r3
 8029a4c:	f000 fd3c 	bl	802a4c8 <xTaskRemoveFromEventList>
 8029a50:	4603      	mov	r3, r0
 8029a52:	2b00      	cmp	r3, #0
 8029a54:	d001      	beq.n	8029a5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8029a56:	f000 fe13 	bl	802a680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8029a5a:	7bfb      	ldrb	r3, [r7, #15]
 8029a5c:	3b01      	subs	r3, #1
 8029a5e:	b2db      	uxtb	r3, r3
 8029a60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8029a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8029a66:	2b00      	cmp	r3, #0
 8029a68:	dce9      	bgt.n	8029a3e <prvUnlockQueue+0x16>
 8029a6a:	e000      	b.n	8029a6e <prvUnlockQueue+0x46>
					break;
 8029a6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8029a6e:	687b      	ldr	r3, [r7, #4]
 8029a70:	22ff      	movs	r2, #255	; 0xff
 8029a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8029a76:	f001 fcad 	bl	802b3d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8029a7a:	f001 fc7b 	bl	802b374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8029a7e:	687b      	ldr	r3, [r7, #4]
 8029a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8029a84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8029a86:	e011      	b.n	8029aac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8029a88:	687b      	ldr	r3, [r7, #4]
 8029a8a:	691b      	ldr	r3, [r3, #16]
 8029a8c:	2b00      	cmp	r3, #0
 8029a8e:	d012      	beq.n	8029ab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8029a90:	687b      	ldr	r3, [r7, #4]
 8029a92:	3310      	adds	r3, #16
 8029a94:	4618      	mov	r0, r3
 8029a96:	f000 fd17 	bl	802a4c8 <xTaskRemoveFromEventList>
 8029a9a:	4603      	mov	r3, r0
 8029a9c:	2b00      	cmp	r3, #0
 8029a9e:	d001      	beq.n	8029aa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8029aa0:	f000 fdee 	bl	802a680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8029aa4:	7bbb      	ldrb	r3, [r7, #14]
 8029aa6:	3b01      	subs	r3, #1
 8029aa8:	b2db      	uxtb	r3, r3
 8029aaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8029aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8029ab0:	2b00      	cmp	r3, #0
 8029ab2:	dce9      	bgt.n	8029a88 <prvUnlockQueue+0x60>
 8029ab4:	e000      	b.n	8029ab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8029ab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	22ff      	movs	r2, #255	; 0xff
 8029abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8029ac0:	f001 fc88 	bl	802b3d4 <vPortExitCritical>
}
 8029ac4:	bf00      	nop
 8029ac6:	3710      	adds	r7, #16
 8029ac8:	46bd      	mov	sp, r7
 8029aca:	bd80      	pop	{r7, pc}

08029acc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8029acc:	b580      	push	{r7, lr}
 8029ace:	b084      	sub	sp, #16
 8029ad0:	af00      	add	r7, sp, #0
 8029ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8029ad4:	f001 fc4e 	bl	802b374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8029ad8:	687b      	ldr	r3, [r7, #4]
 8029ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029adc:	2b00      	cmp	r3, #0
 8029ade:	d102      	bne.n	8029ae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8029ae0:	2301      	movs	r3, #1
 8029ae2:	60fb      	str	r3, [r7, #12]
 8029ae4:	e001      	b.n	8029aea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8029ae6:	2300      	movs	r3, #0
 8029ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8029aea:	f001 fc73 	bl	802b3d4 <vPortExitCritical>

	return xReturn;
 8029aee:	68fb      	ldr	r3, [r7, #12]
}
 8029af0:	4618      	mov	r0, r3
 8029af2:	3710      	adds	r7, #16
 8029af4:	46bd      	mov	sp, r7
 8029af6:	bd80      	pop	{r7, pc}

08029af8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8029af8:	b580      	push	{r7, lr}
 8029afa:	b084      	sub	sp, #16
 8029afc:	af00      	add	r7, sp, #0
 8029afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8029b00:	f001 fc38 	bl	802b374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8029b04:	687b      	ldr	r3, [r7, #4]
 8029b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8029b08:	687b      	ldr	r3, [r7, #4]
 8029b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029b0c:	429a      	cmp	r2, r3
 8029b0e:	d102      	bne.n	8029b16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8029b10:	2301      	movs	r3, #1
 8029b12:	60fb      	str	r3, [r7, #12]
 8029b14:	e001      	b.n	8029b1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8029b16:	2300      	movs	r3, #0
 8029b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8029b1a:	f001 fc5b 	bl	802b3d4 <vPortExitCritical>

	return xReturn;
 8029b1e:	68fb      	ldr	r3, [r7, #12]
}
 8029b20:	4618      	mov	r0, r3
 8029b22:	3710      	adds	r7, #16
 8029b24:	46bd      	mov	sp, r7
 8029b26:	bd80      	pop	{r7, pc}

08029b28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8029b28:	b480      	push	{r7}
 8029b2a:	b085      	sub	sp, #20
 8029b2c:	af00      	add	r7, sp, #0
 8029b2e:	6078      	str	r0, [r7, #4]
 8029b30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8029b32:	2300      	movs	r3, #0
 8029b34:	60fb      	str	r3, [r7, #12]
 8029b36:	e014      	b.n	8029b62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8029b38:	4a0f      	ldr	r2, [pc, #60]	; (8029b78 <vQueueAddToRegistry+0x50>)
 8029b3a:	68fb      	ldr	r3, [r7, #12]
 8029b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8029b40:	2b00      	cmp	r3, #0
 8029b42:	d10b      	bne.n	8029b5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8029b44:	490c      	ldr	r1, [pc, #48]	; (8029b78 <vQueueAddToRegistry+0x50>)
 8029b46:	68fb      	ldr	r3, [r7, #12]
 8029b48:	683a      	ldr	r2, [r7, #0]
 8029b4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8029b4e:	4a0a      	ldr	r2, [pc, #40]	; (8029b78 <vQueueAddToRegistry+0x50>)
 8029b50:	68fb      	ldr	r3, [r7, #12]
 8029b52:	00db      	lsls	r3, r3, #3
 8029b54:	4413      	add	r3, r2
 8029b56:	687a      	ldr	r2, [r7, #4]
 8029b58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8029b5a:	e006      	b.n	8029b6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8029b5c:	68fb      	ldr	r3, [r7, #12]
 8029b5e:	3301      	adds	r3, #1
 8029b60:	60fb      	str	r3, [r7, #12]
 8029b62:	68fb      	ldr	r3, [r7, #12]
 8029b64:	2b07      	cmp	r3, #7
 8029b66:	d9e7      	bls.n	8029b38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8029b68:	bf00      	nop
 8029b6a:	bf00      	nop
 8029b6c:	3714      	adds	r7, #20
 8029b6e:	46bd      	mov	sp, r7
 8029b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b74:	4770      	bx	lr
 8029b76:	bf00      	nop
 8029b78:	20004fe8 	.word	0x20004fe8

08029b7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8029b7c:	b580      	push	{r7, lr}
 8029b7e:	b086      	sub	sp, #24
 8029b80:	af00      	add	r7, sp, #0
 8029b82:	60f8      	str	r0, [r7, #12]
 8029b84:	60b9      	str	r1, [r7, #8]
 8029b86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8029b88:	68fb      	ldr	r3, [r7, #12]
 8029b8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8029b8c:	f001 fbf2 	bl	802b374 <vPortEnterCritical>
 8029b90:	697b      	ldr	r3, [r7, #20]
 8029b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8029b96:	b25b      	sxtb	r3, r3
 8029b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029b9c:	d103      	bne.n	8029ba6 <vQueueWaitForMessageRestricted+0x2a>
 8029b9e:	697b      	ldr	r3, [r7, #20]
 8029ba0:	2200      	movs	r2, #0
 8029ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8029ba6:	697b      	ldr	r3, [r7, #20]
 8029ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8029bac:	b25b      	sxtb	r3, r3
 8029bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029bb2:	d103      	bne.n	8029bbc <vQueueWaitForMessageRestricted+0x40>
 8029bb4:	697b      	ldr	r3, [r7, #20]
 8029bb6:	2200      	movs	r2, #0
 8029bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8029bbc:	f001 fc0a 	bl	802b3d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8029bc0:	697b      	ldr	r3, [r7, #20]
 8029bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029bc4:	2b00      	cmp	r3, #0
 8029bc6:	d106      	bne.n	8029bd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8029bc8:	697b      	ldr	r3, [r7, #20]
 8029bca:	3324      	adds	r3, #36	; 0x24
 8029bcc:	687a      	ldr	r2, [r7, #4]
 8029bce:	68b9      	ldr	r1, [r7, #8]
 8029bd0:	4618      	mov	r0, r3
 8029bd2:	f000 fc4d 	bl	802a470 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8029bd6:	6978      	ldr	r0, [r7, #20]
 8029bd8:	f7ff ff26 	bl	8029a28 <prvUnlockQueue>
	}
 8029bdc:	bf00      	nop
 8029bde:	3718      	adds	r7, #24
 8029be0:	46bd      	mov	sp, r7
 8029be2:	bd80      	pop	{r7, pc}

08029be4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8029be4:	b580      	push	{r7, lr}
 8029be6:	b08e      	sub	sp, #56	; 0x38
 8029be8:	af04      	add	r7, sp, #16
 8029bea:	60f8      	str	r0, [r7, #12]
 8029bec:	60b9      	str	r1, [r7, #8]
 8029bee:	607a      	str	r2, [r7, #4]
 8029bf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8029bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029bf4:	2b00      	cmp	r3, #0
 8029bf6:	d10a      	bne.n	8029c0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8029bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029bfc:	f383 8811 	msr	BASEPRI, r3
 8029c00:	f3bf 8f6f 	isb	sy
 8029c04:	f3bf 8f4f 	dsb	sy
 8029c08:	623b      	str	r3, [r7, #32]
}
 8029c0a:	bf00      	nop
 8029c0c:	e7fe      	b.n	8029c0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8029c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029c10:	2b00      	cmp	r3, #0
 8029c12:	d10a      	bne.n	8029c2a <xTaskCreateStatic+0x46>
	__asm volatile
 8029c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029c18:	f383 8811 	msr	BASEPRI, r3
 8029c1c:	f3bf 8f6f 	isb	sy
 8029c20:	f3bf 8f4f 	dsb	sy
 8029c24:	61fb      	str	r3, [r7, #28]
}
 8029c26:	bf00      	nop
 8029c28:	e7fe      	b.n	8029c28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8029c2a:	235c      	movs	r3, #92	; 0x5c
 8029c2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8029c2e:	693b      	ldr	r3, [r7, #16]
 8029c30:	2b5c      	cmp	r3, #92	; 0x5c
 8029c32:	d00a      	beq.n	8029c4a <xTaskCreateStatic+0x66>
	__asm volatile
 8029c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029c38:	f383 8811 	msr	BASEPRI, r3
 8029c3c:	f3bf 8f6f 	isb	sy
 8029c40:	f3bf 8f4f 	dsb	sy
 8029c44:	61bb      	str	r3, [r7, #24]
}
 8029c46:	bf00      	nop
 8029c48:	e7fe      	b.n	8029c48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8029c4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8029c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029c4e:	2b00      	cmp	r3, #0
 8029c50:	d01e      	beq.n	8029c90 <xTaskCreateStatic+0xac>
 8029c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029c54:	2b00      	cmp	r3, #0
 8029c56:	d01b      	beq.n	8029c90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8029c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029c5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8029c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029c60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8029c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c64:	2202      	movs	r2, #2
 8029c66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8029c6a:	2300      	movs	r3, #0
 8029c6c:	9303      	str	r3, [sp, #12]
 8029c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c70:	9302      	str	r3, [sp, #8]
 8029c72:	f107 0314 	add.w	r3, r7, #20
 8029c76:	9301      	str	r3, [sp, #4]
 8029c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c7a:	9300      	str	r3, [sp, #0]
 8029c7c:	683b      	ldr	r3, [r7, #0]
 8029c7e:	687a      	ldr	r2, [r7, #4]
 8029c80:	68b9      	ldr	r1, [r7, #8]
 8029c82:	68f8      	ldr	r0, [r7, #12]
 8029c84:	f000 f850 	bl	8029d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8029c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8029c8a:	f000 f8dd 	bl	8029e48 <prvAddNewTaskToReadyList>
 8029c8e:	e001      	b.n	8029c94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8029c90:	2300      	movs	r3, #0
 8029c92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8029c94:	697b      	ldr	r3, [r7, #20]
	}
 8029c96:	4618      	mov	r0, r3
 8029c98:	3728      	adds	r7, #40	; 0x28
 8029c9a:	46bd      	mov	sp, r7
 8029c9c:	bd80      	pop	{r7, pc}

08029c9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8029c9e:	b580      	push	{r7, lr}
 8029ca0:	b08c      	sub	sp, #48	; 0x30
 8029ca2:	af04      	add	r7, sp, #16
 8029ca4:	60f8      	str	r0, [r7, #12]
 8029ca6:	60b9      	str	r1, [r7, #8]
 8029ca8:	603b      	str	r3, [r7, #0]
 8029caa:	4613      	mov	r3, r2
 8029cac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8029cae:	88fb      	ldrh	r3, [r7, #6]
 8029cb0:	009b      	lsls	r3, r3, #2
 8029cb2:	4618      	mov	r0, r3
 8029cb4:	f001 fc80 	bl	802b5b8 <pvPortMalloc>
 8029cb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8029cba:	697b      	ldr	r3, [r7, #20]
 8029cbc:	2b00      	cmp	r3, #0
 8029cbe:	d00e      	beq.n	8029cde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8029cc0:	205c      	movs	r0, #92	; 0x5c
 8029cc2:	f001 fc79 	bl	802b5b8 <pvPortMalloc>
 8029cc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8029cc8:	69fb      	ldr	r3, [r7, #28]
 8029cca:	2b00      	cmp	r3, #0
 8029ccc:	d003      	beq.n	8029cd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8029cce:	69fb      	ldr	r3, [r7, #28]
 8029cd0:	697a      	ldr	r2, [r7, #20]
 8029cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8029cd4:	e005      	b.n	8029ce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8029cd6:	6978      	ldr	r0, [r7, #20]
 8029cd8:	f001 fd32 	bl	802b740 <vPortFree>
 8029cdc:	e001      	b.n	8029ce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8029cde:	2300      	movs	r3, #0
 8029ce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8029ce2:	69fb      	ldr	r3, [r7, #28]
 8029ce4:	2b00      	cmp	r3, #0
 8029ce6:	d017      	beq.n	8029d18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8029ce8:	69fb      	ldr	r3, [r7, #28]
 8029cea:	2200      	movs	r2, #0
 8029cec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8029cf0:	88fa      	ldrh	r2, [r7, #6]
 8029cf2:	2300      	movs	r3, #0
 8029cf4:	9303      	str	r3, [sp, #12]
 8029cf6:	69fb      	ldr	r3, [r7, #28]
 8029cf8:	9302      	str	r3, [sp, #8]
 8029cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029cfc:	9301      	str	r3, [sp, #4]
 8029cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029d00:	9300      	str	r3, [sp, #0]
 8029d02:	683b      	ldr	r3, [r7, #0]
 8029d04:	68b9      	ldr	r1, [r7, #8]
 8029d06:	68f8      	ldr	r0, [r7, #12]
 8029d08:	f000 f80e 	bl	8029d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8029d0c:	69f8      	ldr	r0, [r7, #28]
 8029d0e:	f000 f89b 	bl	8029e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8029d12:	2301      	movs	r3, #1
 8029d14:	61bb      	str	r3, [r7, #24]
 8029d16:	e002      	b.n	8029d1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8029d18:	f04f 33ff 	mov.w	r3, #4294967295
 8029d1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8029d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8029d20:	4618      	mov	r0, r3
 8029d22:	3720      	adds	r7, #32
 8029d24:	46bd      	mov	sp, r7
 8029d26:	bd80      	pop	{r7, pc}

08029d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8029d28:	b580      	push	{r7, lr}
 8029d2a:	b088      	sub	sp, #32
 8029d2c:	af00      	add	r7, sp, #0
 8029d2e:	60f8      	str	r0, [r7, #12]
 8029d30:	60b9      	str	r1, [r7, #8]
 8029d32:	607a      	str	r2, [r7, #4]
 8029d34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8029d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029d38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	009b      	lsls	r3, r3, #2
 8029d3e:	461a      	mov	r2, r3
 8029d40:	21a5      	movs	r1, #165	; 0xa5
 8029d42:	f003 f99b 	bl	802d07c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8029d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029d50:	3b01      	subs	r3, #1
 8029d52:	009b      	lsls	r3, r3, #2
 8029d54:	4413      	add	r3, r2
 8029d56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8029d58:	69bb      	ldr	r3, [r7, #24]
 8029d5a:	f023 0307 	bic.w	r3, r3, #7
 8029d5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8029d60:	69bb      	ldr	r3, [r7, #24]
 8029d62:	f003 0307 	and.w	r3, r3, #7
 8029d66:	2b00      	cmp	r3, #0
 8029d68:	d00a      	beq.n	8029d80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8029d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029d6e:	f383 8811 	msr	BASEPRI, r3
 8029d72:	f3bf 8f6f 	isb	sy
 8029d76:	f3bf 8f4f 	dsb	sy
 8029d7a:	617b      	str	r3, [r7, #20]
}
 8029d7c:	bf00      	nop
 8029d7e:	e7fe      	b.n	8029d7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8029d80:	68bb      	ldr	r3, [r7, #8]
 8029d82:	2b00      	cmp	r3, #0
 8029d84:	d01f      	beq.n	8029dc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8029d86:	2300      	movs	r3, #0
 8029d88:	61fb      	str	r3, [r7, #28]
 8029d8a:	e012      	b.n	8029db2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8029d8c:	68ba      	ldr	r2, [r7, #8]
 8029d8e:	69fb      	ldr	r3, [r7, #28]
 8029d90:	4413      	add	r3, r2
 8029d92:	7819      	ldrb	r1, [r3, #0]
 8029d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029d96:	69fb      	ldr	r3, [r7, #28]
 8029d98:	4413      	add	r3, r2
 8029d9a:	3334      	adds	r3, #52	; 0x34
 8029d9c:	460a      	mov	r2, r1
 8029d9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8029da0:	68ba      	ldr	r2, [r7, #8]
 8029da2:	69fb      	ldr	r3, [r7, #28]
 8029da4:	4413      	add	r3, r2
 8029da6:	781b      	ldrb	r3, [r3, #0]
 8029da8:	2b00      	cmp	r3, #0
 8029daa:	d006      	beq.n	8029dba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8029dac:	69fb      	ldr	r3, [r7, #28]
 8029dae:	3301      	adds	r3, #1
 8029db0:	61fb      	str	r3, [r7, #28]
 8029db2:	69fb      	ldr	r3, [r7, #28]
 8029db4:	2b0f      	cmp	r3, #15
 8029db6:	d9e9      	bls.n	8029d8c <prvInitialiseNewTask+0x64>
 8029db8:	e000      	b.n	8029dbc <prvInitialiseNewTask+0x94>
			{
				break;
 8029dba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8029dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dbe:	2200      	movs	r2, #0
 8029dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8029dc4:	e003      	b.n	8029dce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8029dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dc8:	2200      	movs	r2, #0
 8029dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8029dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029dd0:	2b05      	cmp	r3, #5
 8029dd2:	d901      	bls.n	8029dd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8029dd4:	2305      	movs	r3, #5
 8029dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8029dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8029dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029de2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8029de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029de6:	2200      	movs	r2, #0
 8029de8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8029dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029dec:	3304      	adds	r3, #4
 8029dee:	4618      	mov	r0, r3
 8029df0:	f7ff f97c 	bl	80290ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8029df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029df6:	3318      	adds	r3, #24
 8029df8:	4618      	mov	r0, r3
 8029dfa:	f7ff f977 	bl	80290ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8029dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029e02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029e06:	f1c3 0206 	rsb	r2, r3, #6
 8029e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8029e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029e12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8029e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e16:	2200      	movs	r2, #0
 8029e18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8029e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e1c:	2200      	movs	r2, #0
 8029e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8029e22:	683a      	ldr	r2, [r7, #0]
 8029e24:	68f9      	ldr	r1, [r7, #12]
 8029e26:	69b8      	ldr	r0, [r7, #24]
 8029e28:	f001 f974 	bl	802b114 <pxPortInitialiseStack>
 8029e2c:	4602      	mov	r2, r0
 8029e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029e30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8029e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029e34:	2b00      	cmp	r3, #0
 8029e36:	d002      	beq.n	8029e3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8029e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8029e3e:	bf00      	nop
 8029e40:	3720      	adds	r7, #32
 8029e42:	46bd      	mov	sp, r7
 8029e44:	bd80      	pop	{r7, pc}
	...

08029e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8029e48:	b580      	push	{r7, lr}
 8029e4a:	b082      	sub	sp, #8
 8029e4c:	af00      	add	r7, sp, #0
 8029e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8029e50:	f001 fa90 	bl	802b374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8029e54:	4b2d      	ldr	r3, [pc, #180]	; (8029f0c <prvAddNewTaskToReadyList+0xc4>)
 8029e56:	681b      	ldr	r3, [r3, #0]
 8029e58:	3301      	adds	r3, #1
 8029e5a:	4a2c      	ldr	r2, [pc, #176]	; (8029f0c <prvAddNewTaskToReadyList+0xc4>)
 8029e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8029e5e:	4b2c      	ldr	r3, [pc, #176]	; (8029f10 <prvAddNewTaskToReadyList+0xc8>)
 8029e60:	681b      	ldr	r3, [r3, #0]
 8029e62:	2b00      	cmp	r3, #0
 8029e64:	d109      	bne.n	8029e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8029e66:	4a2a      	ldr	r2, [pc, #168]	; (8029f10 <prvAddNewTaskToReadyList+0xc8>)
 8029e68:	687b      	ldr	r3, [r7, #4]
 8029e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8029e6c:	4b27      	ldr	r3, [pc, #156]	; (8029f0c <prvAddNewTaskToReadyList+0xc4>)
 8029e6e:	681b      	ldr	r3, [r3, #0]
 8029e70:	2b01      	cmp	r3, #1
 8029e72:	d110      	bne.n	8029e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8029e74:	f000 fc2a 	bl	802a6cc <prvInitialiseTaskLists>
 8029e78:	e00d      	b.n	8029e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8029e7a:	4b26      	ldr	r3, [pc, #152]	; (8029f14 <prvAddNewTaskToReadyList+0xcc>)
 8029e7c:	681b      	ldr	r3, [r3, #0]
 8029e7e:	2b00      	cmp	r3, #0
 8029e80:	d109      	bne.n	8029e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8029e82:	4b23      	ldr	r3, [pc, #140]	; (8029f10 <prvAddNewTaskToReadyList+0xc8>)
 8029e84:	681b      	ldr	r3, [r3, #0]
 8029e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029e88:	687b      	ldr	r3, [r7, #4]
 8029e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029e8c:	429a      	cmp	r2, r3
 8029e8e:	d802      	bhi.n	8029e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8029e90:	4a1f      	ldr	r2, [pc, #124]	; (8029f10 <prvAddNewTaskToReadyList+0xc8>)
 8029e92:	687b      	ldr	r3, [r7, #4]
 8029e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8029e96:	4b20      	ldr	r3, [pc, #128]	; (8029f18 <prvAddNewTaskToReadyList+0xd0>)
 8029e98:	681b      	ldr	r3, [r3, #0]
 8029e9a:	3301      	adds	r3, #1
 8029e9c:	4a1e      	ldr	r2, [pc, #120]	; (8029f18 <prvAddNewTaskToReadyList+0xd0>)
 8029e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8029ea0:	4b1d      	ldr	r3, [pc, #116]	; (8029f18 <prvAddNewTaskToReadyList+0xd0>)
 8029ea2:	681a      	ldr	r2, [r3, #0]
 8029ea4:	687b      	ldr	r3, [r7, #4]
 8029ea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8029ea8:	687b      	ldr	r3, [r7, #4]
 8029eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029eac:	4b1b      	ldr	r3, [pc, #108]	; (8029f1c <prvAddNewTaskToReadyList+0xd4>)
 8029eae:	681b      	ldr	r3, [r3, #0]
 8029eb0:	429a      	cmp	r2, r3
 8029eb2:	d903      	bls.n	8029ebc <prvAddNewTaskToReadyList+0x74>
 8029eb4:	687b      	ldr	r3, [r7, #4]
 8029eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029eb8:	4a18      	ldr	r2, [pc, #96]	; (8029f1c <prvAddNewTaskToReadyList+0xd4>)
 8029eba:	6013      	str	r3, [r2, #0]
 8029ebc:	687b      	ldr	r3, [r7, #4]
 8029ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029ec0:	4613      	mov	r3, r2
 8029ec2:	009b      	lsls	r3, r3, #2
 8029ec4:	4413      	add	r3, r2
 8029ec6:	009b      	lsls	r3, r3, #2
 8029ec8:	4a15      	ldr	r2, [pc, #84]	; (8029f20 <prvAddNewTaskToReadyList+0xd8>)
 8029eca:	441a      	add	r2, r3
 8029ecc:	687b      	ldr	r3, [r7, #4]
 8029ece:	3304      	adds	r3, #4
 8029ed0:	4619      	mov	r1, r3
 8029ed2:	4610      	mov	r0, r2
 8029ed4:	f7ff f917 	bl	8029106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8029ed8:	f001 fa7c 	bl	802b3d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8029edc:	4b0d      	ldr	r3, [pc, #52]	; (8029f14 <prvAddNewTaskToReadyList+0xcc>)
 8029ede:	681b      	ldr	r3, [r3, #0]
 8029ee0:	2b00      	cmp	r3, #0
 8029ee2:	d00e      	beq.n	8029f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8029ee4:	4b0a      	ldr	r3, [pc, #40]	; (8029f10 <prvAddNewTaskToReadyList+0xc8>)
 8029ee6:	681b      	ldr	r3, [r3, #0]
 8029ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029eee:	429a      	cmp	r2, r3
 8029ef0:	d207      	bcs.n	8029f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8029ef2:	4b0c      	ldr	r3, [pc, #48]	; (8029f24 <prvAddNewTaskToReadyList+0xdc>)
 8029ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029ef8:	601a      	str	r2, [r3, #0]
 8029efa:	f3bf 8f4f 	dsb	sy
 8029efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8029f02:	bf00      	nop
 8029f04:	3708      	adds	r7, #8
 8029f06:	46bd      	mov	sp, r7
 8029f08:	bd80      	pop	{r7, pc}
 8029f0a:	bf00      	nop
 8029f0c:	20000eb4 	.word	0x20000eb4
 8029f10:	20000dc8 	.word	0x20000dc8
 8029f14:	20000ec0 	.word	0x20000ec0
 8029f18:	20000ed0 	.word	0x20000ed0
 8029f1c:	20000ebc 	.word	0x20000ebc
 8029f20:	20000dcc 	.word	0x20000dcc
 8029f24:	e000ed04 	.word	0xe000ed04

08029f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8029f28:	b580      	push	{r7, lr}
 8029f2a:	b084      	sub	sp, #16
 8029f2c:	af00      	add	r7, sp, #0
 8029f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8029f30:	2300      	movs	r3, #0
 8029f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8029f34:	687b      	ldr	r3, [r7, #4]
 8029f36:	2b00      	cmp	r3, #0
 8029f38:	d017      	beq.n	8029f6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8029f3a:	4b13      	ldr	r3, [pc, #76]	; (8029f88 <vTaskDelay+0x60>)
 8029f3c:	681b      	ldr	r3, [r3, #0]
 8029f3e:	2b00      	cmp	r3, #0
 8029f40:	d00a      	beq.n	8029f58 <vTaskDelay+0x30>
	__asm volatile
 8029f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029f46:	f383 8811 	msr	BASEPRI, r3
 8029f4a:	f3bf 8f6f 	isb	sy
 8029f4e:	f3bf 8f4f 	dsb	sy
 8029f52:	60bb      	str	r3, [r7, #8]
}
 8029f54:	bf00      	nop
 8029f56:	e7fe      	b.n	8029f56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8029f58:	f000 f880 	bl	802a05c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8029f5c:	2100      	movs	r1, #0
 8029f5e:	6878      	ldr	r0, [r7, #4]
 8029f60:	f000 fd36 	bl	802a9d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8029f64:	f000 f888 	bl	802a078 <xTaskResumeAll>
 8029f68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8029f6a:	68fb      	ldr	r3, [r7, #12]
 8029f6c:	2b00      	cmp	r3, #0
 8029f6e:	d107      	bne.n	8029f80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8029f70:	4b06      	ldr	r3, [pc, #24]	; (8029f8c <vTaskDelay+0x64>)
 8029f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029f76:	601a      	str	r2, [r3, #0]
 8029f78:	f3bf 8f4f 	dsb	sy
 8029f7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8029f80:	bf00      	nop
 8029f82:	3710      	adds	r7, #16
 8029f84:	46bd      	mov	sp, r7
 8029f86:	bd80      	pop	{r7, pc}
 8029f88:	20000edc 	.word	0x20000edc
 8029f8c:	e000ed04 	.word	0xe000ed04

08029f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8029f90:	b580      	push	{r7, lr}
 8029f92:	b08a      	sub	sp, #40	; 0x28
 8029f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8029f96:	2300      	movs	r3, #0
 8029f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8029f9a:	2300      	movs	r3, #0
 8029f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8029f9e:	463a      	mov	r2, r7
 8029fa0:	1d39      	adds	r1, r7, #4
 8029fa2:	f107 0308 	add.w	r3, r7, #8
 8029fa6:	4618      	mov	r0, r3
 8029fa8:	f7ff f84c 	bl	8029044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8029fac:	6839      	ldr	r1, [r7, #0]
 8029fae:	687b      	ldr	r3, [r7, #4]
 8029fb0:	68ba      	ldr	r2, [r7, #8]
 8029fb2:	9202      	str	r2, [sp, #8]
 8029fb4:	9301      	str	r3, [sp, #4]
 8029fb6:	2300      	movs	r3, #0
 8029fb8:	9300      	str	r3, [sp, #0]
 8029fba:	2300      	movs	r3, #0
 8029fbc:	460a      	mov	r2, r1
 8029fbe:	4921      	ldr	r1, [pc, #132]	; (802a044 <vTaskStartScheduler+0xb4>)
 8029fc0:	4821      	ldr	r0, [pc, #132]	; (802a048 <vTaskStartScheduler+0xb8>)
 8029fc2:	f7ff fe0f 	bl	8029be4 <xTaskCreateStatic>
 8029fc6:	4603      	mov	r3, r0
 8029fc8:	4a20      	ldr	r2, [pc, #128]	; (802a04c <vTaskStartScheduler+0xbc>)
 8029fca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8029fcc:	4b1f      	ldr	r3, [pc, #124]	; (802a04c <vTaskStartScheduler+0xbc>)
 8029fce:	681b      	ldr	r3, [r3, #0]
 8029fd0:	2b00      	cmp	r3, #0
 8029fd2:	d002      	beq.n	8029fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8029fd4:	2301      	movs	r3, #1
 8029fd6:	617b      	str	r3, [r7, #20]
 8029fd8:	e001      	b.n	8029fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8029fda:	2300      	movs	r3, #0
 8029fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8029fde:	697b      	ldr	r3, [r7, #20]
 8029fe0:	2b01      	cmp	r3, #1
 8029fe2:	d102      	bne.n	8029fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8029fe4:	f000 fd48 	bl	802aa78 <xTimerCreateTimerTask>
 8029fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8029fea:	697b      	ldr	r3, [r7, #20]
 8029fec:	2b01      	cmp	r3, #1
 8029fee:	d116      	bne.n	802a01e <vTaskStartScheduler+0x8e>
	__asm volatile
 8029ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029ff4:	f383 8811 	msr	BASEPRI, r3
 8029ff8:	f3bf 8f6f 	isb	sy
 8029ffc:	f3bf 8f4f 	dsb	sy
 802a000:	613b      	str	r3, [r7, #16]
}
 802a002:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 802a004:	4b12      	ldr	r3, [pc, #72]	; (802a050 <vTaskStartScheduler+0xc0>)
 802a006:	f04f 32ff 	mov.w	r2, #4294967295
 802a00a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802a00c:	4b11      	ldr	r3, [pc, #68]	; (802a054 <vTaskStartScheduler+0xc4>)
 802a00e:	2201      	movs	r2, #1
 802a010:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 802a012:	4b11      	ldr	r3, [pc, #68]	; (802a058 <vTaskStartScheduler+0xc8>)
 802a014:	2200      	movs	r2, #0
 802a016:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 802a018:	f001 f90a 	bl	802b230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802a01c:	e00e      	b.n	802a03c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802a01e:	697b      	ldr	r3, [r7, #20]
 802a020:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a024:	d10a      	bne.n	802a03c <vTaskStartScheduler+0xac>
	__asm volatile
 802a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a02a:	f383 8811 	msr	BASEPRI, r3
 802a02e:	f3bf 8f6f 	isb	sy
 802a032:	f3bf 8f4f 	dsb	sy
 802a036:	60fb      	str	r3, [r7, #12]
}
 802a038:	bf00      	nop
 802a03a:	e7fe      	b.n	802a03a <vTaskStartScheduler+0xaa>
}
 802a03c:	bf00      	nop
 802a03e:	3718      	adds	r7, #24
 802a040:	46bd      	mov	sp, r7
 802a042:	bd80      	pop	{r7, pc}
 802a044:	0802e58c 	.word	0x0802e58c
 802a048:	0802a699 	.word	0x0802a699
 802a04c:	20000ed8 	.word	0x20000ed8
 802a050:	20000ed4 	.word	0x20000ed4
 802a054:	20000ec0 	.word	0x20000ec0
 802a058:	20000eb8 	.word	0x20000eb8

0802a05c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 802a05c:	b480      	push	{r7}
 802a05e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 802a060:	4b04      	ldr	r3, [pc, #16]	; (802a074 <vTaskSuspendAll+0x18>)
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	3301      	adds	r3, #1
 802a066:	4a03      	ldr	r2, [pc, #12]	; (802a074 <vTaskSuspendAll+0x18>)
 802a068:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 802a06a:	bf00      	nop
 802a06c:	46bd      	mov	sp, r7
 802a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a072:	4770      	bx	lr
 802a074:	20000edc 	.word	0x20000edc

0802a078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 802a078:	b580      	push	{r7, lr}
 802a07a:	b084      	sub	sp, #16
 802a07c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802a07e:	2300      	movs	r3, #0
 802a080:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802a082:	2300      	movs	r3, #0
 802a084:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802a086:	4b42      	ldr	r3, [pc, #264]	; (802a190 <xTaskResumeAll+0x118>)
 802a088:	681b      	ldr	r3, [r3, #0]
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	d10a      	bne.n	802a0a4 <xTaskResumeAll+0x2c>
	__asm volatile
 802a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a092:	f383 8811 	msr	BASEPRI, r3
 802a096:	f3bf 8f6f 	isb	sy
 802a09a:	f3bf 8f4f 	dsb	sy
 802a09e:	603b      	str	r3, [r7, #0]
}
 802a0a0:	bf00      	nop
 802a0a2:	e7fe      	b.n	802a0a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 802a0a4:	f001 f966 	bl	802b374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802a0a8:	4b39      	ldr	r3, [pc, #228]	; (802a190 <xTaskResumeAll+0x118>)
 802a0aa:	681b      	ldr	r3, [r3, #0]
 802a0ac:	3b01      	subs	r3, #1
 802a0ae:	4a38      	ldr	r2, [pc, #224]	; (802a190 <xTaskResumeAll+0x118>)
 802a0b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802a0b2:	4b37      	ldr	r3, [pc, #220]	; (802a190 <xTaskResumeAll+0x118>)
 802a0b4:	681b      	ldr	r3, [r3, #0]
 802a0b6:	2b00      	cmp	r3, #0
 802a0b8:	d162      	bne.n	802a180 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802a0ba:	4b36      	ldr	r3, [pc, #216]	; (802a194 <xTaskResumeAll+0x11c>)
 802a0bc:	681b      	ldr	r3, [r3, #0]
 802a0be:	2b00      	cmp	r3, #0
 802a0c0:	d05e      	beq.n	802a180 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802a0c2:	e02f      	b.n	802a124 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a0c4:	4b34      	ldr	r3, [pc, #208]	; (802a198 <xTaskResumeAll+0x120>)
 802a0c6:	68db      	ldr	r3, [r3, #12]
 802a0c8:	68db      	ldr	r3, [r3, #12]
 802a0ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802a0cc:	68fb      	ldr	r3, [r7, #12]
 802a0ce:	3318      	adds	r3, #24
 802a0d0:	4618      	mov	r0, r3
 802a0d2:	f7ff f875 	bl	80291c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802a0d6:	68fb      	ldr	r3, [r7, #12]
 802a0d8:	3304      	adds	r3, #4
 802a0da:	4618      	mov	r0, r3
 802a0dc:	f7ff f870 	bl	80291c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802a0e0:	68fb      	ldr	r3, [r7, #12]
 802a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a0e4:	4b2d      	ldr	r3, [pc, #180]	; (802a19c <xTaskResumeAll+0x124>)
 802a0e6:	681b      	ldr	r3, [r3, #0]
 802a0e8:	429a      	cmp	r2, r3
 802a0ea:	d903      	bls.n	802a0f4 <xTaskResumeAll+0x7c>
 802a0ec:	68fb      	ldr	r3, [r7, #12]
 802a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a0f0:	4a2a      	ldr	r2, [pc, #168]	; (802a19c <xTaskResumeAll+0x124>)
 802a0f2:	6013      	str	r3, [r2, #0]
 802a0f4:	68fb      	ldr	r3, [r7, #12]
 802a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a0f8:	4613      	mov	r3, r2
 802a0fa:	009b      	lsls	r3, r3, #2
 802a0fc:	4413      	add	r3, r2
 802a0fe:	009b      	lsls	r3, r3, #2
 802a100:	4a27      	ldr	r2, [pc, #156]	; (802a1a0 <xTaskResumeAll+0x128>)
 802a102:	441a      	add	r2, r3
 802a104:	68fb      	ldr	r3, [r7, #12]
 802a106:	3304      	adds	r3, #4
 802a108:	4619      	mov	r1, r3
 802a10a:	4610      	mov	r0, r2
 802a10c:	f7fe fffb 	bl	8029106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802a110:	68fb      	ldr	r3, [r7, #12]
 802a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a114:	4b23      	ldr	r3, [pc, #140]	; (802a1a4 <xTaskResumeAll+0x12c>)
 802a116:	681b      	ldr	r3, [r3, #0]
 802a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a11a:	429a      	cmp	r2, r3
 802a11c:	d302      	bcc.n	802a124 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 802a11e:	4b22      	ldr	r3, [pc, #136]	; (802a1a8 <xTaskResumeAll+0x130>)
 802a120:	2201      	movs	r2, #1
 802a122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802a124:	4b1c      	ldr	r3, [pc, #112]	; (802a198 <xTaskResumeAll+0x120>)
 802a126:	681b      	ldr	r3, [r3, #0]
 802a128:	2b00      	cmp	r3, #0
 802a12a:	d1cb      	bne.n	802a0c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802a12c:	68fb      	ldr	r3, [r7, #12]
 802a12e:	2b00      	cmp	r3, #0
 802a130:	d001      	beq.n	802a136 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 802a132:	f000 fba1 	bl	802a878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 802a136:	4b1d      	ldr	r3, [pc, #116]	; (802a1ac <xTaskResumeAll+0x134>)
 802a138:	681b      	ldr	r3, [r3, #0]
 802a13a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 802a13c:	687b      	ldr	r3, [r7, #4]
 802a13e:	2b00      	cmp	r3, #0
 802a140:	d010      	beq.n	802a164 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 802a142:	f000 f859 	bl	802a1f8 <xTaskIncrementTick>
 802a146:	4603      	mov	r3, r0
 802a148:	2b00      	cmp	r3, #0
 802a14a:	d002      	beq.n	802a152 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 802a14c:	4b16      	ldr	r3, [pc, #88]	; (802a1a8 <xTaskResumeAll+0x130>)
 802a14e:	2201      	movs	r2, #1
 802a150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 802a152:	687b      	ldr	r3, [r7, #4]
 802a154:	3b01      	subs	r3, #1
 802a156:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 802a158:	687b      	ldr	r3, [r7, #4]
 802a15a:	2b00      	cmp	r3, #0
 802a15c:	d1f1      	bne.n	802a142 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 802a15e:	4b13      	ldr	r3, [pc, #76]	; (802a1ac <xTaskResumeAll+0x134>)
 802a160:	2200      	movs	r2, #0
 802a162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 802a164:	4b10      	ldr	r3, [pc, #64]	; (802a1a8 <xTaskResumeAll+0x130>)
 802a166:	681b      	ldr	r3, [r3, #0]
 802a168:	2b00      	cmp	r3, #0
 802a16a:	d009      	beq.n	802a180 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802a16c:	2301      	movs	r3, #1
 802a16e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802a170:	4b0f      	ldr	r3, [pc, #60]	; (802a1b0 <xTaskResumeAll+0x138>)
 802a172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a176:	601a      	str	r2, [r3, #0]
 802a178:	f3bf 8f4f 	dsb	sy
 802a17c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802a180:	f001 f928 	bl	802b3d4 <vPortExitCritical>

	return xAlreadyYielded;
 802a184:	68bb      	ldr	r3, [r7, #8]
}
 802a186:	4618      	mov	r0, r3
 802a188:	3710      	adds	r7, #16
 802a18a:	46bd      	mov	sp, r7
 802a18c:	bd80      	pop	{r7, pc}
 802a18e:	bf00      	nop
 802a190:	20000edc 	.word	0x20000edc
 802a194:	20000eb4 	.word	0x20000eb4
 802a198:	20000e74 	.word	0x20000e74
 802a19c:	20000ebc 	.word	0x20000ebc
 802a1a0:	20000dcc 	.word	0x20000dcc
 802a1a4:	20000dc8 	.word	0x20000dc8
 802a1a8:	20000ec8 	.word	0x20000ec8
 802a1ac:	20000ec4 	.word	0x20000ec4
 802a1b0:	e000ed04 	.word	0xe000ed04

0802a1b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 802a1b4:	b480      	push	{r7}
 802a1b6:	b083      	sub	sp, #12
 802a1b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802a1ba:	4b05      	ldr	r3, [pc, #20]	; (802a1d0 <xTaskGetTickCount+0x1c>)
 802a1bc:	681b      	ldr	r3, [r3, #0]
 802a1be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802a1c0:	687b      	ldr	r3, [r7, #4]
}
 802a1c2:	4618      	mov	r0, r3
 802a1c4:	370c      	adds	r7, #12
 802a1c6:	46bd      	mov	sp, r7
 802a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1cc:	4770      	bx	lr
 802a1ce:	bf00      	nop
 802a1d0:	20000eb8 	.word	0x20000eb8

0802a1d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 802a1d4:	b580      	push	{r7, lr}
 802a1d6:	b082      	sub	sp, #8
 802a1d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802a1da:	f001 f9ad 	bl	802b538 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802a1de:	2300      	movs	r3, #0
 802a1e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802a1e2:	4b04      	ldr	r3, [pc, #16]	; (802a1f4 <xTaskGetTickCountFromISR+0x20>)
 802a1e4:	681b      	ldr	r3, [r3, #0]
 802a1e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802a1e8:	683b      	ldr	r3, [r7, #0]
}
 802a1ea:	4618      	mov	r0, r3
 802a1ec:	3708      	adds	r7, #8
 802a1ee:	46bd      	mov	sp, r7
 802a1f0:	bd80      	pop	{r7, pc}
 802a1f2:	bf00      	nop
 802a1f4:	20000eb8 	.word	0x20000eb8

0802a1f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 802a1f8:	b580      	push	{r7, lr}
 802a1fa:	b086      	sub	sp, #24
 802a1fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802a1fe:	2300      	movs	r3, #0
 802a200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802a202:	4b4f      	ldr	r3, [pc, #316]	; (802a340 <xTaskIncrementTick+0x148>)
 802a204:	681b      	ldr	r3, [r3, #0]
 802a206:	2b00      	cmp	r3, #0
 802a208:	f040 8089 	bne.w	802a31e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802a20c:	4b4d      	ldr	r3, [pc, #308]	; (802a344 <xTaskIncrementTick+0x14c>)
 802a20e:	681b      	ldr	r3, [r3, #0]
 802a210:	3301      	adds	r3, #1
 802a212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 802a214:	4a4b      	ldr	r2, [pc, #300]	; (802a344 <xTaskIncrementTick+0x14c>)
 802a216:	693b      	ldr	r3, [r7, #16]
 802a218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802a21a:	693b      	ldr	r3, [r7, #16]
 802a21c:	2b00      	cmp	r3, #0
 802a21e:	d120      	bne.n	802a262 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 802a220:	4b49      	ldr	r3, [pc, #292]	; (802a348 <xTaskIncrementTick+0x150>)
 802a222:	681b      	ldr	r3, [r3, #0]
 802a224:	681b      	ldr	r3, [r3, #0]
 802a226:	2b00      	cmp	r3, #0
 802a228:	d00a      	beq.n	802a240 <xTaskIncrementTick+0x48>
	__asm volatile
 802a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a22e:	f383 8811 	msr	BASEPRI, r3
 802a232:	f3bf 8f6f 	isb	sy
 802a236:	f3bf 8f4f 	dsb	sy
 802a23a:	603b      	str	r3, [r7, #0]
}
 802a23c:	bf00      	nop
 802a23e:	e7fe      	b.n	802a23e <xTaskIncrementTick+0x46>
 802a240:	4b41      	ldr	r3, [pc, #260]	; (802a348 <xTaskIncrementTick+0x150>)
 802a242:	681b      	ldr	r3, [r3, #0]
 802a244:	60fb      	str	r3, [r7, #12]
 802a246:	4b41      	ldr	r3, [pc, #260]	; (802a34c <xTaskIncrementTick+0x154>)
 802a248:	681b      	ldr	r3, [r3, #0]
 802a24a:	4a3f      	ldr	r2, [pc, #252]	; (802a348 <xTaskIncrementTick+0x150>)
 802a24c:	6013      	str	r3, [r2, #0]
 802a24e:	4a3f      	ldr	r2, [pc, #252]	; (802a34c <xTaskIncrementTick+0x154>)
 802a250:	68fb      	ldr	r3, [r7, #12]
 802a252:	6013      	str	r3, [r2, #0]
 802a254:	4b3e      	ldr	r3, [pc, #248]	; (802a350 <xTaskIncrementTick+0x158>)
 802a256:	681b      	ldr	r3, [r3, #0]
 802a258:	3301      	adds	r3, #1
 802a25a:	4a3d      	ldr	r2, [pc, #244]	; (802a350 <xTaskIncrementTick+0x158>)
 802a25c:	6013      	str	r3, [r2, #0]
 802a25e:	f000 fb0b 	bl	802a878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802a262:	4b3c      	ldr	r3, [pc, #240]	; (802a354 <xTaskIncrementTick+0x15c>)
 802a264:	681b      	ldr	r3, [r3, #0]
 802a266:	693a      	ldr	r2, [r7, #16]
 802a268:	429a      	cmp	r2, r3
 802a26a:	d349      	bcc.n	802a300 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802a26c:	4b36      	ldr	r3, [pc, #216]	; (802a348 <xTaskIncrementTick+0x150>)
 802a26e:	681b      	ldr	r3, [r3, #0]
 802a270:	681b      	ldr	r3, [r3, #0]
 802a272:	2b00      	cmp	r3, #0
 802a274:	d104      	bne.n	802a280 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a276:	4b37      	ldr	r3, [pc, #220]	; (802a354 <xTaskIncrementTick+0x15c>)
 802a278:	f04f 32ff 	mov.w	r2, #4294967295
 802a27c:	601a      	str	r2, [r3, #0]
					break;
 802a27e:	e03f      	b.n	802a300 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a280:	4b31      	ldr	r3, [pc, #196]	; (802a348 <xTaskIncrementTick+0x150>)
 802a282:	681b      	ldr	r3, [r3, #0]
 802a284:	68db      	ldr	r3, [r3, #12]
 802a286:	68db      	ldr	r3, [r3, #12]
 802a288:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802a28a:	68bb      	ldr	r3, [r7, #8]
 802a28c:	685b      	ldr	r3, [r3, #4]
 802a28e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802a290:	693a      	ldr	r2, [r7, #16]
 802a292:	687b      	ldr	r3, [r7, #4]
 802a294:	429a      	cmp	r2, r3
 802a296:	d203      	bcs.n	802a2a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 802a298:	4a2e      	ldr	r2, [pc, #184]	; (802a354 <xTaskIncrementTick+0x15c>)
 802a29a:	687b      	ldr	r3, [r7, #4]
 802a29c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802a29e:	e02f      	b.n	802a300 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802a2a0:	68bb      	ldr	r3, [r7, #8]
 802a2a2:	3304      	adds	r3, #4
 802a2a4:	4618      	mov	r0, r3
 802a2a6:	f7fe ff8b 	bl	80291c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802a2aa:	68bb      	ldr	r3, [r7, #8]
 802a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a2ae:	2b00      	cmp	r3, #0
 802a2b0:	d004      	beq.n	802a2bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802a2b2:	68bb      	ldr	r3, [r7, #8]
 802a2b4:	3318      	adds	r3, #24
 802a2b6:	4618      	mov	r0, r3
 802a2b8:	f7fe ff82 	bl	80291c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802a2bc:	68bb      	ldr	r3, [r7, #8]
 802a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a2c0:	4b25      	ldr	r3, [pc, #148]	; (802a358 <xTaskIncrementTick+0x160>)
 802a2c2:	681b      	ldr	r3, [r3, #0]
 802a2c4:	429a      	cmp	r2, r3
 802a2c6:	d903      	bls.n	802a2d0 <xTaskIncrementTick+0xd8>
 802a2c8:	68bb      	ldr	r3, [r7, #8]
 802a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a2cc:	4a22      	ldr	r2, [pc, #136]	; (802a358 <xTaskIncrementTick+0x160>)
 802a2ce:	6013      	str	r3, [r2, #0]
 802a2d0:	68bb      	ldr	r3, [r7, #8]
 802a2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a2d4:	4613      	mov	r3, r2
 802a2d6:	009b      	lsls	r3, r3, #2
 802a2d8:	4413      	add	r3, r2
 802a2da:	009b      	lsls	r3, r3, #2
 802a2dc:	4a1f      	ldr	r2, [pc, #124]	; (802a35c <xTaskIncrementTick+0x164>)
 802a2de:	441a      	add	r2, r3
 802a2e0:	68bb      	ldr	r3, [r7, #8]
 802a2e2:	3304      	adds	r3, #4
 802a2e4:	4619      	mov	r1, r3
 802a2e6:	4610      	mov	r0, r2
 802a2e8:	f7fe ff0d 	bl	8029106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802a2ec:	68bb      	ldr	r3, [r7, #8]
 802a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a2f0:	4b1b      	ldr	r3, [pc, #108]	; (802a360 <xTaskIncrementTick+0x168>)
 802a2f2:	681b      	ldr	r3, [r3, #0]
 802a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a2f6:	429a      	cmp	r2, r3
 802a2f8:	d3b8      	bcc.n	802a26c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 802a2fa:	2301      	movs	r3, #1
 802a2fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802a2fe:	e7b5      	b.n	802a26c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802a300:	4b17      	ldr	r3, [pc, #92]	; (802a360 <xTaskIncrementTick+0x168>)
 802a302:	681b      	ldr	r3, [r3, #0]
 802a304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a306:	4915      	ldr	r1, [pc, #84]	; (802a35c <xTaskIncrementTick+0x164>)
 802a308:	4613      	mov	r3, r2
 802a30a:	009b      	lsls	r3, r3, #2
 802a30c:	4413      	add	r3, r2
 802a30e:	009b      	lsls	r3, r3, #2
 802a310:	440b      	add	r3, r1
 802a312:	681b      	ldr	r3, [r3, #0]
 802a314:	2b01      	cmp	r3, #1
 802a316:	d907      	bls.n	802a328 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 802a318:	2301      	movs	r3, #1
 802a31a:	617b      	str	r3, [r7, #20]
 802a31c:	e004      	b.n	802a328 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 802a31e:	4b11      	ldr	r3, [pc, #68]	; (802a364 <xTaskIncrementTick+0x16c>)
 802a320:	681b      	ldr	r3, [r3, #0]
 802a322:	3301      	adds	r3, #1
 802a324:	4a0f      	ldr	r2, [pc, #60]	; (802a364 <xTaskIncrementTick+0x16c>)
 802a326:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 802a328:	4b0f      	ldr	r3, [pc, #60]	; (802a368 <xTaskIncrementTick+0x170>)
 802a32a:	681b      	ldr	r3, [r3, #0]
 802a32c:	2b00      	cmp	r3, #0
 802a32e:	d001      	beq.n	802a334 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 802a330:	2301      	movs	r3, #1
 802a332:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 802a334:	697b      	ldr	r3, [r7, #20]
}
 802a336:	4618      	mov	r0, r3
 802a338:	3718      	adds	r7, #24
 802a33a:	46bd      	mov	sp, r7
 802a33c:	bd80      	pop	{r7, pc}
 802a33e:	bf00      	nop
 802a340:	20000edc 	.word	0x20000edc
 802a344:	20000eb8 	.word	0x20000eb8
 802a348:	20000e6c 	.word	0x20000e6c
 802a34c:	20000e70 	.word	0x20000e70
 802a350:	20000ecc 	.word	0x20000ecc
 802a354:	20000ed4 	.word	0x20000ed4
 802a358:	20000ebc 	.word	0x20000ebc
 802a35c:	20000dcc 	.word	0x20000dcc
 802a360:	20000dc8 	.word	0x20000dc8
 802a364:	20000ec4 	.word	0x20000ec4
 802a368:	20000ec8 	.word	0x20000ec8

0802a36c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802a36c:	b480      	push	{r7}
 802a36e:	b085      	sub	sp, #20
 802a370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802a372:	4b28      	ldr	r3, [pc, #160]	; (802a414 <vTaskSwitchContext+0xa8>)
 802a374:	681b      	ldr	r3, [r3, #0]
 802a376:	2b00      	cmp	r3, #0
 802a378:	d003      	beq.n	802a382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802a37a:	4b27      	ldr	r3, [pc, #156]	; (802a418 <vTaskSwitchContext+0xac>)
 802a37c:	2201      	movs	r2, #1
 802a37e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802a380:	e041      	b.n	802a406 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 802a382:	4b25      	ldr	r3, [pc, #148]	; (802a418 <vTaskSwitchContext+0xac>)
 802a384:	2200      	movs	r2, #0
 802a386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a388:	4b24      	ldr	r3, [pc, #144]	; (802a41c <vTaskSwitchContext+0xb0>)
 802a38a:	681b      	ldr	r3, [r3, #0]
 802a38c:	60fb      	str	r3, [r7, #12]
 802a38e:	e010      	b.n	802a3b2 <vTaskSwitchContext+0x46>
 802a390:	68fb      	ldr	r3, [r7, #12]
 802a392:	2b00      	cmp	r3, #0
 802a394:	d10a      	bne.n	802a3ac <vTaskSwitchContext+0x40>
	__asm volatile
 802a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a39a:	f383 8811 	msr	BASEPRI, r3
 802a39e:	f3bf 8f6f 	isb	sy
 802a3a2:	f3bf 8f4f 	dsb	sy
 802a3a6:	607b      	str	r3, [r7, #4]
}
 802a3a8:	bf00      	nop
 802a3aa:	e7fe      	b.n	802a3aa <vTaskSwitchContext+0x3e>
 802a3ac:	68fb      	ldr	r3, [r7, #12]
 802a3ae:	3b01      	subs	r3, #1
 802a3b0:	60fb      	str	r3, [r7, #12]
 802a3b2:	491b      	ldr	r1, [pc, #108]	; (802a420 <vTaskSwitchContext+0xb4>)
 802a3b4:	68fa      	ldr	r2, [r7, #12]
 802a3b6:	4613      	mov	r3, r2
 802a3b8:	009b      	lsls	r3, r3, #2
 802a3ba:	4413      	add	r3, r2
 802a3bc:	009b      	lsls	r3, r3, #2
 802a3be:	440b      	add	r3, r1
 802a3c0:	681b      	ldr	r3, [r3, #0]
 802a3c2:	2b00      	cmp	r3, #0
 802a3c4:	d0e4      	beq.n	802a390 <vTaskSwitchContext+0x24>
 802a3c6:	68fa      	ldr	r2, [r7, #12]
 802a3c8:	4613      	mov	r3, r2
 802a3ca:	009b      	lsls	r3, r3, #2
 802a3cc:	4413      	add	r3, r2
 802a3ce:	009b      	lsls	r3, r3, #2
 802a3d0:	4a13      	ldr	r2, [pc, #76]	; (802a420 <vTaskSwitchContext+0xb4>)
 802a3d2:	4413      	add	r3, r2
 802a3d4:	60bb      	str	r3, [r7, #8]
 802a3d6:	68bb      	ldr	r3, [r7, #8]
 802a3d8:	685b      	ldr	r3, [r3, #4]
 802a3da:	685a      	ldr	r2, [r3, #4]
 802a3dc:	68bb      	ldr	r3, [r7, #8]
 802a3de:	605a      	str	r2, [r3, #4]
 802a3e0:	68bb      	ldr	r3, [r7, #8]
 802a3e2:	685a      	ldr	r2, [r3, #4]
 802a3e4:	68bb      	ldr	r3, [r7, #8]
 802a3e6:	3308      	adds	r3, #8
 802a3e8:	429a      	cmp	r2, r3
 802a3ea:	d104      	bne.n	802a3f6 <vTaskSwitchContext+0x8a>
 802a3ec:	68bb      	ldr	r3, [r7, #8]
 802a3ee:	685b      	ldr	r3, [r3, #4]
 802a3f0:	685a      	ldr	r2, [r3, #4]
 802a3f2:	68bb      	ldr	r3, [r7, #8]
 802a3f4:	605a      	str	r2, [r3, #4]
 802a3f6:	68bb      	ldr	r3, [r7, #8]
 802a3f8:	685b      	ldr	r3, [r3, #4]
 802a3fa:	68db      	ldr	r3, [r3, #12]
 802a3fc:	4a09      	ldr	r2, [pc, #36]	; (802a424 <vTaskSwitchContext+0xb8>)
 802a3fe:	6013      	str	r3, [r2, #0]
 802a400:	4a06      	ldr	r2, [pc, #24]	; (802a41c <vTaskSwitchContext+0xb0>)
 802a402:	68fb      	ldr	r3, [r7, #12]
 802a404:	6013      	str	r3, [r2, #0]
}
 802a406:	bf00      	nop
 802a408:	3714      	adds	r7, #20
 802a40a:	46bd      	mov	sp, r7
 802a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a410:	4770      	bx	lr
 802a412:	bf00      	nop
 802a414:	20000edc 	.word	0x20000edc
 802a418:	20000ec8 	.word	0x20000ec8
 802a41c:	20000ebc 	.word	0x20000ebc
 802a420:	20000dcc 	.word	0x20000dcc
 802a424:	20000dc8 	.word	0x20000dc8

0802a428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802a428:	b580      	push	{r7, lr}
 802a42a:	b084      	sub	sp, #16
 802a42c:	af00      	add	r7, sp, #0
 802a42e:	6078      	str	r0, [r7, #4]
 802a430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 802a432:	687b      	ldr	r3, [r7, #4]
 802a434:	2b00      	cmp	r3, #0
 802a436:	d10a      	bne.n	802a44e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a43c:	f383 8811 	msr	BASEPRI, r3
 802a440:	f3bf 8f6f 	isb	sy
 802a444:	f3bf 8f4f 	dsb	sy
 802a448:	60fb      	str	r3, [r7, #12]
}
 802a44a:	bf00      	nop
 802a44c:	e7fe      	b.n	802a44c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802a44e:	4b07      	ldr	r3, [pc, #28]	; (802a46c <vTaskPlaceOnEventList+0x44>)
 802a450:	681b      	ldr	r3, [r3, #0]
 802a452:	3318      	adds	r3, #24
 802a454:	4619      	mov	r1, r3
 802a456:	6878      	ldr	r0, [r7, #4]
 802a458:	f7fe fe79 	bl	802914e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 802a45c:	2101      	movs	r1, #1
 802a45e:	6838      	ldr	r0, [r7, #0]
 802a460:	f000 fab6 	bl	802a9d0 <prvAddCurrentTaskToDelayedList>
}
 802a464:	bf00      	nop
 802a466:	3710      	adds	r7, #16
 802a468:	46bd      	mov	sp, r7
 802a46a:	bd80      	pop	{r7, pc}
 802a46c:	20000dc8 	.word	0x20000dc8

0802a470 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 802a470:	b580      	push	{r7, lr}
 802a472:	b086      	sub	sp, #24
 802a474:	af00      	add	r7, sp, #0
 802a476:	60f8      	str	r0, [r7, #12]
 802a478:	60b9      	str	r1, [r7, #8]
 802a47a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 802a47c:	68fb      	ldr	r3, [r7, #12]
 802a47e:	2b00      	cmp	r3, #0
 802a480:	d10a      	bne.n	802a498 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 802a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a486:	f383 8811 	msr	BASEPRI, r3
 802a48a:	f3bf 8f6f 	isb	sy
 802a48e:	f3bf 8f4f 	dsb	sy
 802a492:	617b      	str	r3, [r7, #20]
}
 802a494:	bf00      	nop
 802a496:	e7fe      	b.n	802a496 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802a498:	4b0a      	ldr	r3, [pc, #40]	; (802a4c4 <vTaskPlaceOnEventListRestricted+0x54>)
 802a49a:	681b      	ldr	r3, [r3, #0]
 802a49c:	3318      	adds	r3, #24
 802a49e:	4619      	mov	r1, r3
 802a4a0:	68f8      	ldr	r0, [r7, #12]
 802a4a2:	f7fe fe30 	bl	8029106 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802a4a6:	687b      	ldr	r3, [r7, #4]
 802a4a8:	2b00      	cmp	r3, #0
 802a4aa:	d002      	beq.n	802a4b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 802a4ac:	f04f 33ff 	mov.w	r3, #4294967295
 802a4b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802a4b2:	6879      	ldr	r1, [r7, #4]
 802a4b4:	68b8      	ldr	r0, [r7, #8]
 802a4b6:	f000 fa8b 	bl	802a9d0 <prvAddCurrentTaskToDelayedList>
	}
 802a4ba:	bf00      	nop
 802a4bc:	3718      	adds	r7, #24
 802a4be:	46bd      	mov	sp, r7
 802a4c0:	bd80      	pop	{r7, pc}
 802a4c2:	bf00      	nop
 802a4c4:	20000dc8 	.word	0x20000dc8

0802a4c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802a4c8:	b580      	push	{r7, lr}
 802a4ca:	b086      	sub	sp, #24
 802a4cc:	af00      	add	r7, sp, #0
 802a4ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a4d0:	687b      	ldr	r3, [r7, #4]
 802a4d2:	68db      	ldr	r3, [r3, #12]
 802a4d4:	68db      	ldr	r3, [r3, #12]
 802a4d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802a4d8:	693b      	ldr	r3, [r7, #16]
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	d10a      	bne.n	802a4f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 802a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a4e2:	f383 8811 	msr	BASEPRI, r3
 802a4e6:	f3bf 8f6f 	isb	sy
 802a4ea:	f3bf 8f4f 	dsb	sy
 802a4ee:	60fb      	str	r3, [r7, #12]
}
 802a4f0:	bf00      	nop
 802a4f2:	e7fe      	b.n	802a4f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802a4f4:	693b      	ldr	r3, [r7, #16]
 802a4f6:	3318      	adds	r3, #24
 802a4f8:	4618      	mov	r0, r3
 802a4fa:	f7fe fe61 	bl	80291c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802a4fe:	4b1e      	ldr	r3, [pc, #120]	; (802a578 <xTaskRemoveFromEventList+0xb0>)
 802a500:	681b      	ldr	r3, [r3, #0]
 802a502:	2b00      	cmp	r3, #0
 802a504:	d11d      	bne.n	802a542 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802a506:	693b      	ldr	r3, [r7, #16]
 802a508:	3304      	adds	r3, #4
 802a50a:	4618      	mov	r0, r3
 802a50c:	f7fe fe58 	bl	80291c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802a510:	693b      	ldr	r3, [r7, #16]
 802a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a514:	4b19      	ldr	r3, [pc, #100]	; (802a57c <xTaskRemoveFromEventList+0xb4>)
 802a516:	681b      	ldr	r3, [r3, #0]
 802a518:	429a      	cmp	r2, r3
 802a51a:	d903      	bls.n	802a524 <xTaskRemoveFromEventList+0x5c>
 802a51c:	693b      	ldr	r3, [r7, #16]
 802a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a520:	4a16      	ldr	r2, [pc, #88]	; (802a57c <xTaskRemoveFromEventList+0xb4>)
 802a522:	6013      	str	r3, [r2, #0]
 802a524:	693b      	ldr	r3, [r7, #16]
 802a526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a528:	4613      	mov	r3, r2
 802a52a:	009b      	lsls	r3, r3, #2
 802a52c:	4413      	add	r3, r2
 802a52e:	009b      	lsls	r3, r3, #2
 802a530:	4a13      	ldr	r2, [pc, #76]	; (802a580 <xTaskRemoveFromEventList+0xb8>)
 802a532:	441a      	add	r2, r3
 802a534:	693b      	ldr	r3, [r7, #16]
 802a536:	3304      	adds	r3, #4
 802a538:	4619      	mov	r1, r3
 802a53a:	4610      	mov	r0, r2
 802a53c:	f7fe fde3 	bl	8029106 <vListInsertEnd>
 802a540:	e005      	b.n	802a54e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802a542:	693b      	ldr	r3, [r7, #16]
 802a544:	3318      	adds	r3, #24
 802a546:	4619      	mov	r1, r3
 802a548:	480e      	ldr	r0, [pc, #56]	; (802a584 <xTaskRemoveFromEventList+0xbc>)
 802a54a:	f7fe fddc 	bl	8029106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802a54e:	693b      	ldr	r3, [r7, #16]
 802a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a552:	4b0d      	ldr	r3, [pc, #52]	; (802a588 <xTaskRemoveFromEventList+0xc0>)
 802a554:	681b      	ldr	r3, [r3, #0]
 802a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a558:	429a      	cmp	r2, r3
 802a55a:	d905      	bls.n	802a568 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 802a55c:	2301      	movs	r3, #1
 802a55e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802a560:	4b0a      	ldr	r3, [pc, #40]	; (802a58c <xTaskRemoveFromEventList+0xc4>)
 802a562:	2201      	movs	r2, #1
 802a564:	601a      	str	r2, [r3, #0]
 802a566:	e001      	b.n	802a56c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 802a568:	2300      	movs	r3, #0
 802a56a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 802a56c:	697b      	ldr	r3, [r7, #20]
}
 802a56e:	4618      	mov	r0, r3
 802a570:	3718      	adds	r7, #24
 802a572:	46bd      	mov	sp, r7
 802a574:	bd80      	pop	{r7, pc}
 802a576:	bf00      	nop
 802a578:	20000edc 	.word	0x20000edc
 802a57c:	20000ebc 	.word	0x20000ebc
 802a580:	20000dcc 	.word	0x20000dcc
 802a584:	20000e74 	.word	0x20000e74
 802a588:	20000dc8 	.word	0x20000dc8
 802a58c:	20000ec8 	.word	0x20000ec8

0802a590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 802a590:	b480      	push	{r7}
 802a592:	b083      	sub	sp, #12
 802a594:	af00      	add	r7, sp, #0
 802a596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802a598:	4b06      	ldr	r3, [pc, #24]	; (802a5b4 <vTaskInternalSetTimeOutState+0x24>)
 802a59a:	681a      	ldr	r2, [r3, #0]
 802a59c:	687b      	ldr	r3, [r7, #4]
 802a59e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 802a5a0:	4b05      	ldr	r3, [pc, #20]	; (802a5b8 <vTaskInternalSetTimeOutState+0x28>)
 802a5a2:	681a      	ldr	r2, [r3, #0]
 802a5a4:	687b      	ldr	r3, [r7, #4]
 802a5a6:	605a      	str	r2, [r3, #4]
}
 802a5a8:	bf00      	nop
 802a5aa:	370c      	adds	r7, #12
 802a5ac:	46bd      	mov	sp, r7
 802a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5b2:	4770      	bx	lr
 802a5b4:	20000ecc 	.word	0x20000ecc
 802a5b8:	20000eb8 	.word	0x20000eb8

0802a5bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802a5bc:	b580      	push	{r7, lr}
 802a5be:	b088      	sub	sp, #32
 802a5c0:	af00      	add	r7, sp, #0
 802a5c2:	6078      	str	r0, [r7, #4]
 802a5c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802a5c6:	687b      	ldr	r3, [r7, #4]
 802a5c8:	2b00      	cmp	r3, #0
 802a5ca:	d10a      	bne.n	802a5e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 802a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a5d0:	f383 8811 	msr	BASEPRI, r3
 802a5d4:	f3bf 8f6f 	isb	sy
 802a5d8:	f3bf 8f4f 	dsb	sy
 802a5dc:	613b      	str	r3, [r7, #16]
}
 802a5de:	bf00      	nop
 802a5e0:	e7fe      	b.n	802a5e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802a5e2:	683b      	ldr	r3, [r7, #0]
 802a5e4:	2b00      	cmp	r3, #0
 802a5e6:	d10a      	bne.n	802a5fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a5ec:	f383 8811 	msr	BASEPRI, r3
 802a5f0:	f3bf 8f6f 	isb	sy
 802a5f4:	f3bf 8f4f 	dsb	sy
 802a5f8:	60fb      	str	r3, [r7, #12]
}
 802a5fa:	bf00      	nop
 802a5fc:	e7fe      	b.n	802a5fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 802a5fe:	f000 feb9 	bl	802b374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802a602:	4b1d      	ldr	r3, [pc, #116]	; (802a678 <xTaskCheckForTimeOut+0xbc>)
 802a604:	681b      	ldr	r3, [r3, #0]
 802a606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802a608:	687b      	ldr	r3, [r7, #4]
 802a60a:	685b      	ldr	r3, [r3, #4]
 802a60c:	69ba      	ldr	r2, [r7, #24]
 802a60e:	1ad3      	subs	r3, r2, r3
 802a610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802a612:	683b      	ldr	r3, [r7, #0]
 802a614:	681b      	ldr	r3, [r3, #0]
 802a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a61a:	d102      	bne.n	802a622 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 802a61c:	2300      	movs	r3, #0
 802a61e:	61fb      	str	r3, [r7, #28]
 802a620:	e023      	b.n	802a66a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802a622:	687b      	ldr	r3, [r7, #4]
 802a624:	681a      	ldr	r2, [r3, #0]
 802a626:	4b15      	ldr	r3, [pc, #84]	; (802a67c <xTaskCheckForTimeOut+0xc0>)
 802a628:	681b      	ldr	r3, [r3, #0]
 802a62a:	429a      	cmp	r2, r3
 802a62c:	d007      	beq.n	802a63e <xTaskCheckForTimeOut+0x82>
 802a62e:	687b      	ldr	r3, [r7, #4]
 802a630:	685b      	ldr	r3, [r3, #4]
 802a632:	69ba      	ldr	r2, [r7, #24]
 802a634:	429a      	cmp	r2, r3
 802a636:	d302      	bcc.n	802a63e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802a638:	2301      	movs	r3, #1
 802a63a:	61fb      	str	r3, [r7, #28]
 802a63c:	e015      	b.n	802a66a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 802a63e:	683b      	ldr	r3, [r7, #0]
 802a640:	681b      	ldr	r3, [r3, #0]
 802a642:	697a      	ldr	r2, [r7, #20]
 802a644:	429a      	cmp	r2, r3
 802a646:	d20b      	bcs.n	802a660 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802a648:	683b      	ldr	r3, [r7, #0]
 802a64a:	681a      	ldr	r2, [r3, #0]
 802a64c:	697b      	ldr	r3, [r7, #20]
 802a64e:	1ad2      	subs	r2, r2, r3
 802a650:	683b      	ldr	r3, [r7, #0]
 802a652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802a654:	6878      	ldr	r0, [r7, #4]
 802a656:	f7ff ff9b 	bl	802a590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802a65a:	2300      	movs	r3, #0
 802a65c:	61fb      	str	r3, [r7, #28]
 802a65e:	e004      	b.n	802a66a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 802a660:	683b      	ldr	r3, [r7, #0]
 802a662:	2200      	movs	r2, #0
 802a664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802a666:	2301      	movs	r3, #1
 802a668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802a66a:	f000 feb3 	bl	802b3d4 <vPortExitCritical>

	return xReturn;
 802a66e:	69fb      	ldr	r3, [r7, #28]
}
 802a670:	4618      	mov	r0, r3
 802a672:	3720      	adds	r7, #32
 802a674:	46bd      	mov	sp, r7
 802a676:	bd80      	pop	{r7, pc}
 802a678:	20000eb8 	.word	0x20000eb8
 802a67c:	20000ecc 	.word	0x20000ecc

0802a680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802a680:	b480      	push	{r7}
 802a682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802a684:	4b03      	ldr	r3, [pc, #12]	; (802a694 <vTaskMissedYield+0x14>)
 802a686:	2201      	movs	r2, #1
 802a688:	601a      	str	r2, [r3, #0]
}
 802a68a:	bf00      	nop
 802a68c:	46bd      	mov	sp, r7
 802a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a692:	4770      	bx	lr
 802a694:	20000ec8 	.word	0x20000ec8

0802a698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802a698:	b580      	push	{r7, lr}
 802a69a:	b082      	sub	sp, #8
 802a69c:	af00      	add	r7, sp, #0
 802a69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802a6a0:	f000 f854 	bl	802a74c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802a6a4:	4b07      	ldr	r3, [pc, #28]	; (802a6c4 <prvIdleTask+0x2c>)
 802a6a6:	681b      	ldr	r3, [r3, #0]
 802a6a8:	2b01      	cmp	r3, #1
 802a6aa:	d907      	bls.n	802a6bc <prvIdleTask+0x24>
			{
				taskYIELD();
 802a6ac:	4b06      	ldr	r3, [pc, #24]	; (802a6c8 <prvIdleTask+0x30>)
 802a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a6b2:	601a      	str	r2, [r3, #0]
 802a6b4:	f3bf 8f4f 	dsb	sy
 802a6b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 802a6bc:	f7f8 f876 	bl	80227ac <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 802a6c0:	e7ee      	b.n	802a6a0 <prvIdleTask+0x8>
 802a6c2:	bf00      	nop
 802a6c4:	20000dcc 	.word	0x20000dcc
 802a6c8:	e000ed04 	.word	0xe000ed04

0802a6cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802a6cc:	b580      	push	{r7, lr}
 802a6ce:	b082      	sub	sp, #8
 802a6d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802a6d2:	2300      	movs	r3, #0
 802a6d4:	607b      	str	r3, [r7, #4]
 802a6d6:	e00c      	b.n	802a6f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802a6d8:	687a      	ldr	r2, [r7, #4]
 802a6da:	4613      	mov	r3, r2
 802a6dc:	009b      	lsls	r3, r3, #2
 802a6de:	4413      	add	r3, r2
 802a6e0:	009b      	lsls	r3, r3, #2
 802a6e2:	4a12      	ldr	r2, [pc, #72]	; (802a72c <prvInitialiseTaskLists+0x60>)
 802a6e4:	4413      	add	r3, r2
 802a6e6:	4618      	mov	r0, r3
 802a6e8:	f7fe fce0 	bl	80290ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802a6ec:	687b      	ldr	r3, [r7, #4]
 802a6ee:	3301      	adds	r3, #1
 802a6f0:	607b      	str	r3, [r7, #4]
 802a6f2:	687b      	ldr	r3, [r7, #4]
 802a6f4:	2b05      	cmp	r3, #5
 802a6f6:	d9ef      	bls.n	802a6d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802a6f8:	480d      	ldr	r0, [pc, #52]	; (802a730 <prvInitialiseTaskLists+0x64>)
 802a6fa:	f7fe fcd7 	bl	80290ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802a6fe:	480d      	ldr	r0, [pc, #52]	; (802a734 <prvInitialiseTaskLists+0x68>)
 802a700:	f7fe fcd4 	bl	80290ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802a704:	480c      	ldr	r0, [pc, #48]	; (802a738 <prvInitialiseTaskLists+0x6c>)
 802a706:	f7fe fcd1 	bl	80290ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802a70a:	480c      	ldr	r0, [pc, #48]	; (802a73c <prvInitialiseTaskLists+0x70>)
 802a70c:	f7fe fcce 	bl	80290ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 802a710:	480b      	ldr	r0, [pc, #44]	; (802a740 <prvInitialiseTaskLists+0x74>)
 802a712:	f7fe fccb 	bl	80290ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802a716:	4b0b      	ldr	r3, [pc, #44]	; (802a744 <prvInitialiseTaskLists+0x78>)
 802a718:	4a05      	ldr	r2, [pc, #20]	; (802a730 <prvInitialiseTaskLists+0x64>)
 802a71a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802a71c:	4b0a      	ldr	r3, [pc, #40]	; (802a748 <prvInitialiseTaskLists+0x7c>)
 802a71e:	4a05      	ldr	r2, [pc, #20]	; (802a734 <prvInitialiseTaskLists+0x68>)
 802a720:	601a      	str	r2, [r3, #0]
}
 802a722:	bf00      	nop
 802a724:	3708      	adds	r7, #8
 802a726:	46bd      	mov	sp, r7
 802a728:	bd80      	pop	{r7, pc}
 802a72a:	bf00      	nop
 802a72c:	20000dcc 	.word	0x20000dcc
 802a730:	20000e44 	.word	0x20000e44
 802a734:	20000e58 	.word	0x20000e58
 802a738:	20000e74 	.word	0x20000e74
 802a73c:	20000e88 	.word	0x20000e88
 802a740:	20000ea0 	.word	0x20000ea0
 802a744:	20000e6c 	.word	0x20000e6c
 802a748:	20000e70 	.word	0x20000e70

0802a74c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802a74c:	b580      	push	{r7, lr}
 802a74e:	b082      	sub	sp, #8
 802a750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802a752:	e019      	b.n	802a788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802a754:	f000 fe0e 	bl	802b374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a758:	4b10      	ldr	r3, [pc, #64]	; (802a79c <prvCheckTasksWaitingTermination+0x50>)
 802a75a:	68db      	ldr	r3, [r3, #12]
 802a75c:	68db      	ldr	r3, [r3, #12]
 802a75e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802a760:	687b      	ldr	r3, [r7, #4]
 802a762:	3304      	adds	r3, #4
 802a764:	4618      	mov	r0, r3
 802a766:	f7fe fd2b 	bl	80291c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 802a76a:	4b0d      	ldr	r3, [pc, #52]	; (802a7a0 <prvCheckTasksWaitingTermination+0x54>)
 802a76c:	681b      	ldr	r3, [r3, #0]
 802a76e:	3b01      	subs	r3, #1
 802a770:	4a0b      	ldr	r2, [pc, #44]	; (802a7a0 <prvCheckTasksWaitingTermination+0x54>)
 802a772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802a774:	4b0b      	ldr	r3, [pc, #44]	; (802a7a4 <prvCheckTasksWaitingTermination+0x58>)
 802a776:	681b      	ldr	r3, [r3, #0]
 802a778:	3b01      	subs	r3, #1
 802a77a:	4a0a      	ldr	r2, [pc, #40]	; (802a7a4 <prvCheckTasksWaitingTermination+0x58>)
 802a77c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802a77e:	f000 fe29 	bl	802b3d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802a782:	6878      	ldr	r0, [r7, #4]
 802a784:	f000 f848 	bl	802a818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802a788:	4b06      	ldr	r3, [pc, #24]	; (802a7a4 <prvCheckTasksWaitingTermination+0x58>)
 802a78a:	681b      	ldr	r3, [r3, #0]
 802a78c:	2b00      	cmp	r3, #0
 802a78e:	d1e1      	bne.n	802a754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 802a790:	bf00      	nop
 802a792:	bf00      	nop
 802a794:	3708      	adds	r7, #8
 802a796:	46bd      	mov	sp, r7
 802a798:	bd80      	pop	{r7, pc}
 802a79a:	bf00      	nop
 802a79c:	20000e88 	.word	0x20000e88
 802a7a0:	20000eb4 	.word	0x20000eb4
 802a7a4:	20000e9c 	.word	0x20000e9c

0802a7a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 802a7a8:	b480      	push	{r7}
 802a7aa:	b085      	sub	sp, #20
 802a7ac:	af00      	add	r7, sp, #0
 802a7ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 802a7b0:	2300      	movs	r3, #0
 802a7b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802a7b4:	e005      	b.n	802a7c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802a7b6:	687b      	ldr	r3, [r7, #4]
 802a7b8:	3301      	adds	r3, #1
 802a7ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 802a7bc:	68fb      	ldr	r3, [r7, #12]
 802a7be:	3301      	adds	r3, #1
 802a7c0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802a7c2:	687b      	ldr	r3, [r7, #4]
 802a7c4:	781b      	ldrb	r3, [r3, #0]
 802a7c6:	2ba5      	cmp	r3, #165	; 0xa5
 802a7c8:	d0f5      	beq.n	802a7b6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802a7ca:	68fb      	ldr	r3, [r7, #12]
 802a7cc:	089b      	lsrs	r3, r3, #2
 802a7ce:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 802a7d0:	68fb      	ldr	r3, [r7, #12]
 802a7d2:	b29b      	uxth	r3, r3
	}
 802a7d4:	4618      	mov	r0, r3
 802a7d6:	3714      	adds	r7, #20
 802a7d8:	46bd      	mov	sp, r7
 802a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7de:	4770      	bx	lr

0802a7e0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 802a7e0:	b580      	push	{r7, lr}
 802a7e2:	b086      	sub	sp, #24
 802a7e4:	af00      	add	r7, sp, #0
 802a7e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 802a7e8:	687b      	ldr	r3, [r7, #4]
 802a7ea:	2b00      	cmp	r3, #0
 802a7ec:	d102      	bne.n	802a7f4 <uxTaskGetStackHighWaterMark+0x14>
 802a7ee:	4b09      	ldr	r3, [pc, #36]	; (802a814 <uxTaskGetStackHighWaterMark+0x34>)
 802a7f0:	681b      	ldr	r3, [r3, #0]
 802a7f2:	e000      	b.n	802a7f6 <uxTaskGetStackHighWaterMark+0x16>
 802a7f4:	687b      	ldr	r3, [r7, #4]
 802a7f6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 802a7f8:	697b      	ldr	r3, [r7, #20]
 802a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a7fc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802a7fe:	6938      	ldr	r0, [r7, #16]
 802a800:	f7ff ffd2 	bl	802a7a8 <prvTaskCheckFreeStackSpace>
 802a804:	4603      	mov	r3, r0
 802a806:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 802a808:	68fb      	ldr	r3, [r7, #12]
	}
 802a80a:	4618      	mov	r0, r3
 802a80c:	3718      	adds	r7, #24
 802a80e:	46bd      	mov	sp, r7
 802a810:	bd80      	pop	{r7, pc}
 802a812:	bf00      	nop
 802a814:	20000dc8 	.word	0x20000dc8

0802a818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802a818:	b580      	push	{r7, lr}
 802a81a:	b084      	sub	sp, #16
 802a81c:	af00      	add	r7, sp, #0
 802a81e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802a820:	687b      	ldr	r3, [r7, #4]
 802a822:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 802a826:	2b00      	cmp	r3, #0
 802a828:	d108      	bne.n	802a83c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802a82a:	687b      	ldr	r3, [r7, #4]
 802a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a82e:	4618      	mov	r0, r3
 802a830:	f000 ff86 	bl	802b740 <vPortFree>
				vPortFree( pxTCB );
 802a834:	6878      	ldr	r0, [r7, #4]
 802a836:	f000 ff83 	bl	802b740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802a83a:	e018      	b.n	802a86e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802a83c:	687b      	ldr	r3, [r7, #4]
 802a83e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 802a842:	2b01      	cmp	r3, #1
 802a844:	d103      	bne.n	802a84e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 802a846:	6878      	ldr	r0, [r7, #4]
 802a848:	f000 ff7a 	bl	802b740 <vPortFree>
	}
 802a84c:	e00f      	b.n	802a86e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802a84e:	687b      	ldr	r3, [r7, #4]
 802a850:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 802a854:	2b02      	cmp	r3, #2
 802a856:	d00a      	beq.n	802a86e <prvDeleteTCB+0x56>
	__asm volatile
 802a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a85c:	f383 8811 	msr	BASEPRI, r3
 802a860:	f3bf 8f6f 	isb	sy
 802a864:	f3bf 8f4f 	dsb	sy
 802a868:	60fb      	str	r3, [r7, #12]
}
 802a86a:	bf00      	nop
 802a86c:	e7fe      	b.n	802a86c <prvDeleteTCB+0x54>
	}
 802a86e:	bf00      	nop
 802a870:	3710      	adds	r7, #16
 802a872:	46bd      	mov	sp, r7
 802a874:	bd80      	pop	{r7, pc}
	...

0802a878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802a878:	b480      	push	{r7}
 802a87a:	b083      	sub	sp, #12
 802a87c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802a87e:	4b0c      	ldr	r3, [pc, #48]	; (802a8b0 <prvResetNextTaskUnblockTime+0x38>)
 802a880:	681b      	ldr	r3, [r3, #0]
 802a882:	681b      	ldr	r3, [r3, #0]
 802a884:	2b00      	cmp	r3, #0
 802a886:	d104      	bne.n	802a892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802a888:	4b0a      	ldr	r3, [pc, #40]	; (802a8b4 <prvResetNextTaskUnblockTime+0x3c>)
 802a88a:	f04f 32ff 	mov.w	r2, #4294967295
 802a88e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 802a890:	e008      	b.n	802a8a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a892:	4b07      	ldr	r3, [pc, #28]	; (802a8b0 <prvResetNextTaskUnblockTime+0x38>)
 802a894:	681b      	ldr	r3, [r3, #0]
 802a896:	68db      	ldr	r3, [r3, #12]
 802a898:	68db      	ldr	r3, [r3, #12]
 802a89a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802a89c:	687b      	ldr	r3, [r7, #4]
 802a89e:	685b      	ldr	r3, [r3, #4]
 802a8a0:	4a04      	ldr	r2, [pc, #16]	; (802a8b4 <prvResetNextTaskUnblockTime+0x3c>)
 802a8a2:	6013      	str	r3, [r2, #0]
}
 802a8a4:	bf00      	nop
 802a8a6:	370c      	adds	r7, #12
 802a8a8:	46bd      	mov	sp, r7
 802a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8ae:	4770      	bx	lr
 802a8b0:	20000e6c 	.word	0x20000e6c
 802a8b4:	20000ed4 	.word	0x20000ed4

0802a8b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802a8b8:	b480      	push	{r7}
 802a8ba:	b083      	sub	sp, #12
 802a8bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802a8be:	4b0b      	ldr	r3, [pc, #44]	; (802a8ec <xTaskGetSchedulerState+0x34>)
 802a8c0:	681b      	ldr	r3, [r3, #0]
 802a8c2:	2b00      	cmp	r3, #0
 802a8c4:	d102      	bne.n	802a8cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802a8c6:	2301      	movs	r3, #1
 802a8c8:	607b      	str	r3, [r7, #4]
 802a8ca:	e008      	b.n	802a8de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802a8cc:	4b08      	ldr	r3, [pc, #32]	; (802a8f0 <xTaskGetSchedulerState+0x38>)
 802a8ce:	681b      	ldr	r3, [r3, #0]
 802a8d0:	2b00      	cmp	r3, #0
 802a8d2:	d102      	bne.n	802a8da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802a8d4:	2302      	movs	r3, #2
 802a8d6:	607b      	str	r3, [r7, #4]
 802a8d8:	e001      	b.n	802a8de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802a8da:	2300      	movs	r3, #0
 802a8dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802a8de:	687b      	ldr	r3, [r7, #4]
	}
 802a8e0:	4618      	mov	r0, r3
 802a8e2:	370c      	adds	r7, #12
 802a8e4:	46bd      	mov	sp, r7
 802a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8ea:	4770      	bx	lr
 802a8ec:	20000ec0 	.word	0x20000ec0
 802a8f0:	20000edc 	.word	0x20000edc

0802a8f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802a8f4:	b580      	push	{r7, lr}
 802a8f6:	b086      	sub	sp, #24
 802a8f8:	af00      	add	r7, sp, #0
 802a8fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802a8fc:	687b      	ldr	r3, [r7, #4]
 802a8fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802a900:	2300      	movs	r3, #0
 802a902:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802a904:	687b      	ldr	r3, [r7, #4]
 802a906:	2b00      	cmp	r3, #0
 802a908:	d056      	beq.n	802a9b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 802a90a:	4b2e      	ldr	r3, [pc, #184]	; (802a9c4 <xTaskPriorityDisinherit+0xd0>)
 802a90c:	681b      	ldr	r3, [r3, #0]
 802a90e:	693a      	ldr	r2, [r7, #16]
 802a910:	429a      	cmp	r2, r3
 802a912:	d00a      	beq.n	802a92a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 802a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a918:	f383 8811 	msr	BASEPRI, r3
 802a91c:	f3bf 8f6f 	isb	sy
 802a920:	f3bf 8f4f 	dsb	sy
 802a924:	60fb      	str	r3, [r7, #12]
}
 802a926:	bf00      	nop
 802a928:	e7fe      	b.n	802a928 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 802a92a:	693b      	ldr	r3, [r7, #16]
 802a92c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802a92e:	2b00      	cmp	r3, #0
 802a930:	d10a      	bne.n	802a948 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802a932:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a936:	f383 8811 	msr	BASEPRI, r3
 802a93a:	f3bf 8f6f 	isb	sy
 802a93e:	f3bf 8f4f 	dsb	sy
 802a942:	60bb      	str	r3, [r7, #8]
}
 802a944:	bf00      	nop
 802a946:	e7fe      	b.n	802a946 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 802a948:	693b      	ldr	r3, [r7, #16]
 802a94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802a94c:	1e5a      	subs	r2, r3, #1
 802a94e:	693b      	ldr	r3, [r7, #16]
 802a950:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802a952:	693b      	ldr	r3, [r7, #16]
 802a954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a956:	693b      	ldr	r3, [r7, #16]
 802a958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802a95a:	429a      	cmp	r2, r3
 802a95c:	d02c      	beq.n	802a9b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802a95e:	693b      	ldr	r3, [r7, #16]
 802a960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802a962:	2b00      	cmp	r3, #0
 802a964:	d128      	bne.n	802a9b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802a966:	693b      	ldr	r3, [r7, #16]
 802a968:	3304      	adds	r3, #4
 802a96a:	4618      	mov	r0, r3
 802a96c:	f7fe fc28 	bl	80291c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802a970:	693b      	ldr	r3, [r7, #16]
 802a972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802a974:	693b      	ldr	r3, [r7, #16]
 802a976:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a978:	693b      	ldr	r3, [r7, #16]
 802a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a97c:	f1c3 0206 	rsb	r2, r3, #6
 802a980:	693b      	ldr	r3, [r7, #16]
 802a982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802a984:	693b      	ldr	r3, [r7, #16]
 802a986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a988:	4b0f      	ldr	r3, [pc, #60]	; (802a9c8 <xTaskPriorityDisinherit+0xd4>)
 802a98a:	681b      	ldr	r3, [r3, #0]
 802a98c:	429a      	cmp	r2, r3
 802a98e:	d903      	bls.n	802a998 <xTaskPriorityDisinherit+0xa4>
 802a990:	693b      	ldr	r3, [r7, #16]
 802a992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a994:	4a0c      	ldr	r2, [pc, #48]	; (802a9c8 <xTaskPriorityDisinherit+0xd4>)
 802a996:	6013      	str	r3, [r2, #0]
 802a998:	693b      	ldr	r3, [r7, #16]
 802a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802a99c:	4613      	mov	r3, r2
 802a99e:	009b      	lsls	r3, r3, #2
 802a9a0:	4413      	add	r3, r2
 802a9a2:	009b      	lsls	r3, r3, #2
 802a9a4:	4a09      	ldr	r2, [pc, #36]	; (802a9cc <xTaskPriorityDisinherit+0xd8>)
 802a9a6:	441a      	add	r2, r3
 802a9a8:	693b      	ldr	r3, [r7, #16]
 802a9aa:	3304      	adds	r3, #4
 802a9ac:	4619      	mov	r1, r3
 802a9ae:	4610      	mov	r0, r2
 802a9b0:	f7fe fba9 	bl	8029106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802a9b4:	2301      	movs	r3, #1
 802a9b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802a9b8:	697b      	ldr	r3, [r7, #20]
	}
 802a9ba:	4618      	mov	r0, r3
 802a9bc:	3718      	adds	r7, #24
 802a9be:	46bd      	mov	sp, r7
 802a9c0:	bd80      	pop	{r7, pc}
 802a9c2:	bf00      	nop
 802a9c4:	20000dc8 	.word	0x20000dc8
 802a9c8:	20000ebc 	.word	0x20000ebc
 802a9cc:	20000dcc 	.word	0x20000dcc

0802a9d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 802a9d0:	b580      	push	{r7, lr}
 802a9d2:	b084      	sub	sp, #16
 802a9d4:	af00      	add	r7, sp, #0
 802a9d6:	6078      	str	r0, [r7, #4]
 802a9d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802a9da:	4b21      	ldr	r3, [pc, #132]	; (802aa60 <prvAddCurrentTaskToDelayedList+0x90>)
 802a9dc:	681b      	ldr	r3, [r3, #0]
 802a9de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802a9e0:	4b20      	ldr	r3, [pc, #128]	; (802aa64 <prvAddCurrentTaskToDelayedList+0x94>)
 802a9e2:	681b      	ldr	r3, [r3, #0]
 802a9e4:	3304      	adds	r3, #4
 802a9e6:	4618      	mov	r0, r3
 802a9e8:	f7fe fbea 	bl	80291c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802a9ec:	687b      	ldr	r3, [r7, #4]
 802a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a9f2:	d10a      	bne.n	802aa0a <prvAddCurrentTaskToDelayedList+0x3a>
 802a9f4:	683b      	ldr	r3, [r7, #0]
 802a9f6:	2b00      	cmp	r3, #0
 802a9f8:	d007      	beq.n	802aa0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802a9fa:	4b1a      	ldr	r3, [pc, #104]	; (802aa64 <prvAddCurrentTaskToDelayedList+0x94>)
 802a9fc:	681b      	ldr	r3, [r3, #0]
 802a9fe:	3304      	adds	r3, #4
 802aa00:	4619      	mov	r1, r3
 802aa02:	4819      	ldr	r0, [pc, #100]	; (802aa68 <prvAddCurrentTaskToDelayedList+0x98>)
 802aa04:	f7fe fb7f 	bl	8029106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802aa08:	e026      	b.n	802aa58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802aa0a:	68fa      	ldr	r2, [r7, #12]
 802aa0c:	687b      	ldr	r3, [r7, #4]
 802aa0e:	4413      	add	r3, r2
 802aa10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802aa12:	4b14      	ldr	r3, [pc, #80]	; (802aa64 <prvAddCurrentTaskToDelayedList+0x94>)
 802aa14:	681b      	ldr	r3, [r3, #0]
 802aa16:	68ba      	ldr	r2, [r7, #8]
 802aa18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802aa1a:	68ba      	ldr	r2, [r7, #8]
 802aa1c:	68fb      	ldr	r3, [r7, #12]
 802aa1e:	429a      	cmp	r2, r3
 802aa20:	d209      	bcs.n	802aa36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802aa22:	4b12      	ldr	r3, [pc, #72]	; (802aa6c <prvAddCurrentTaskToDelayedList+0x9c>)
 802aa24:	681a      	ldr	r2, [r3, #0]
 802aa26:	4b0f      	ldr	r3, [pc, #60]	; (802aa64 <prvAddCurrentTaskToDelayedList+0x94>)
 802aa28:	681b      	ldr	r3, [r3, #0]
 802aa2a:	3304      	adds	r3, #4
 802aa2c:	4619      	mov	r1, r3
 802aa2e:	4610      	mov	r0, r2
 802aa30:	f7fe fb8d 	bl	802914e <vListInsert>
}
 802aa34:	e010      	b.n	802aa58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802aa36:	4b0e      	ldr	r3, [pc, #56]	; (802aa70 <prvAddCurrentTaskToDelayedList+0xa0>)
 802aa38:	681a      	ldr	r2, [r3, #0]
 802aa3a:	4b0a      	ldr	r3, [pc, #40]	; (802aa64 <prvAddCurrentTaskToDelayedList+0x94>)
 802aa3c:	681b      	ldr	r3, [r3, #0]
 802aa3e:	3304      	adds	r3, #4
 802aa40:	4619      	mov	r1, r3
 802aa42:	4610      	mov	r0, r2
 802aa44:	f7fe fb83 	bl	802914e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802aa48:	4b0a      	ldr	r3, [pc, #40]	; (802aa74 <prvAddCurrentTaskToDelayedList+0xa4>)
 802aa4a:	681b      	ldr	r3, [r3, #0]
 802aa4c:	68ba      	ldr	r2, [r7, #8]
 802aa4e:	429a      	cmp	r2, r3
 802aa50:	d202      	bcs.n	802aa58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802aa52:	4a08      	ldr	r2, [pc, #32]	; (802aa74 <prvAddCurrentTaskToDelayedList+0xa4>)
 802aa54:	68bb      	ldr	r3, [r7, #8]
 802aa56:	6013      	str	r3, [r2, #0]
}
 802aa58:	bf00      	nop
 802aa5a:	3710      	adds	r7, #16
 802aa5c:	46bd      	mov	sp, r7
 802aa5e:	bd80      	pop	{r7, pc}
 802aa60:	20000eb8 	.word	0x20000eb8
 802aa64:	20000dc8 	.word	0x20000dc8
 802aa68:	20000ea0 	.word	0x20000ea0
 802aa6c:	20000e70 	.word	0x20000e70
 802aa70:	20000e6c 	.word	0x20000e6c
 802aa74:	20000ed4 	.word	0x20000ed4

0802aa78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802aa78:	b580      	push	{r7, lr}
 802aa7a:	b08a      	sub	sp, #40	; 0x28
 802aa7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802aa7e:	2300      	movs	r3, #0
 802aa80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 802aa82:	f000 fb07 	bl	802b094 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802aa86:	4b1c      	ldr	r3, [pc, #112]	; (802aaf8 <xTimerCreateTimerTask+0x80>)
 802aa88:	681b      	ldr	r3, [r3, #0]
 802aa8a:	2b00      	cmp	r3, #0
 802aa8c:	d021      	beq.n	802aad2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802aa8e:	2300      	movs	r3, #0
 802aa90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 802aa92:	2300      	movs	r3, #0
 802aa94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802aa96:	1d3a      	adds	r2, r7, #4
 802aa98:	f107 0108 	add.w	r1, r7, #8
 802aa9c:	f107 030c 	add.w	r3, r7, #12
 802aaa0:	4618      	mov	r0, r3
 802aaa2:	f7fe fae9 	bl	8029078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802aaa6:	6879      	ldr	r1, [r7, #4]
 802aaa8:	68bb      	ldr	r3, [r7, #8]
 802aaaa:	68fa      	ldr	r2, [r7, #12]
 802aaac:	9202      	str	r2, [sp, #8]
 802aaae:	9301      	str	r3, [sp, #4]
 802aab0:	2302      	movs	r3, #2
 802aab2:	9300      	str	r3, [sp, #0]
 802aab4:	2300      	movs	r3, #0
 802aab6:	460a      	mov	r2, r1
 802aab8:	4910      	ldr	r1, [pc, #64]	; (802aafc <xTimerCreateTimerTask+0x84>)
 802aaba:	4811      	ldr	r0, [pc, #68]	; (802ab00 <xTimerCreateTimerTask+0x88>)
 802aabc:	f7ff f892 	bl	8029be4 <xTaskCreateStatic>
 802aac0:	4603      	mov	r3, r0
 802aac2:	4a10      	ldr	r2, [pc, #64]	; (802ab04 <xTimerCreateTimerTask+0x8c>)
 802aac4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802aac6:	4b0f      	ldr	r3, [pc, #60]	; (802ab04 <xTimerCreateTimerTask+0x8c>)
 802aac8:	681b      	ldr	r3, [r3, #0]
 802aaca:	2b00      	cmp	r3, #0
 802aacc:	d001      	beq.n	802aad2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 802aace:	2301      	movs	r3, #1
 802aad0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802aad2:	697b      	ldr	r3, [r7, #20]
 802aad4:	2b00      	cmp	r3, #0
 802aad6:	d10a      	bne.n	802aaee <xTimerCreateTimerTask+0x76>
	__asm volatile
 802aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aadc:	f383 8811 	msr	BASEPRI, r3
 802aae0:	f3bf 8f6f 	isb	sy
 802aae4:	f3bf 8f4f 	dsb	sy
 802aae8:	613b      	str	r3, [r7, #16]
}
 802aaea:	bf00      	nop
 802aaec:	e7fe      	b.n	802aaec <xTimerCreateTimerTask+0x74>
	return xReturn;
 802aaee:	697b      	ldr	r3, [r7, #20]
}
 802aaf0:	4618      	mov	r0, r3
 802aaf2:	3718      	adds	r7, #24
 802aaf4:	46bd      	mov	sp, r7
 802aaf6:	bd80      	pop	{r7, pc}
 802aaf8:	20000f10 	.word	0x20000f10
 802aafc:	0802e594 	.word	0x0802e594
 802ab00:	0802ac3d 	.word	0x0802ac3d
 802ab04:	20000f14 	.word	0x20000f14

0802ab08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802ab08:	b580      	push	{r7, lr}
 802ab0a:	b08a      	sub	sp, #40	; 0x28
 802ab0c:	af00      	add	r7, sp, #0
 802ab0e:	60f8      	str	r0, [r7, #12]
 802ab10:	60b9      	str	r1, [r7, #8]
 802ab12:	607a      	str	r2, [r7, #4]
 802ab14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802ab16:	2300      	movs	r3, #0
 802ab18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802ab1a:	68fb      	ldr	r3, [r7, #12]
 802ab1c:	2b00      	cmp	r3, #0
 802ab1e:	d10a      	bne.n	802ab36 <xTimerGenericCommand+0x2e>
	__asm volatile
 802ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ab24:	f383 8811 	msr	BASEPRI, r3
 802ab28:	f3bf 8f6f 	isb	sy
 802ab2c:	f3bf 8f4f 	dsb	sy
 802ab30:	623b      	str	r3, [r7, #32]
}
 802ab32:	bf00      	nop
 802ab34:	e7fe      	b.n	802ab34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802ab36:	4b1a      	ldr	r3, [pc, #104]	; (802aba0 <xTimerGenericCommand+0x98>)
 802ab38:	681b      	ldr	r3, [r3, #0]
 802ab3a:	2b00      	cmp	r3, #0
 802ab3c:	d02a      	beq.n	802ab94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 802ab3e:	68bb      	ldr	r3, [r7, #8]
 802ab40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802ab42:	687b      	ldr	r3, [r7, #4]
 802ab44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802ab46:	68fb      	ldr	r3, [r7, #12]
 802ab48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802ab4a:	68bb      	ldr	r3, [r7, #8]
 802ab4c:	2b05      	cmp	r3, #5
 802ab4e:	dc18      	bgt.n	802ab82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802ab50:	f7ff feb2 	bl	802a8b8 <xTaskGetSchedulerState>
 802ab54:	4603      	mov	r3, r0
 802ab56:	2b02      	cmp	r3, #2
 802ab58:	d109      	bne.n	802ab6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802ab5a:	4b11      	ldr	r3, [pc, #68]	; (802aba0 <xTimerGenericCommand+0x98>)
 802ab5c:	6818      	ldr	r0, [r3, #0]
 802ab5e:	f107 0110 	add.w	r1, r7, #16
 802ab62:	2300      	movs	r3, #0
 802ab64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ab66:	f7fe fc59 	bl	802941c <xQueueGenericSend>
 802ab6a:	6278      	str	r0, [r7, #36]	; 0x24
 802ab6c:	e012      	b.n	802ab94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802ab6e:	4b0c      	ldr	r3, [pc, #48]	; (802aba0 <xTimerGenericCommand+0x98>)
 802ab70:	6818      	ldr	r0, [r3, #0]
 802ab72:	f107 0110 	add.w	r1, r7, #16
 802ab76:	2300      	movs	r3, #0
 802ab78:	2200      	movs	r2, #0
 802ab7a:	f7fe fc4f 	bl	802941c <xQueueGenericSend>
 802ab7e:	6278      	str	r0, [r7, #36]	; 0x24
 802ab80:	e008      	b.n	802ab94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802ab82:	4b07      	ldr	r3, [pc, #28]	; (802aba0 <xTimerGenericCommand+0x98>)
 802ab84:	6818      	ldr	r0, [r3, #0]
 802ab86:	f107 0110 	add.w	r1, r7, #16
 802ab8a:	2300      	movs	r3, #0
 802ab8c:	683a      	ldr	r2, [r7, #0]
 802ab8e:	f7fe fd43 	bl	8029618 <xQueueGenericSendFromISR>
 802ab92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802ab96:	4618      	mov	r0, r3
 802ab98:	3728      	adds	r7, #40	; 0x28
 802ab9a:	46bd      	mov	sp, r7
 802ab9c:	bd80      	pop	{r7, pc}
 802ab9e:	bf00      	nop
 802aba0:	20000f10 	.word	0x20000f10

0802aba4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 802aba4:	b580      	push	{r7, lr}
 802aba6:	b088      	sub	sp, #32
 802aba8:	af02      	add	r7, sp, #8
 802abaa:	6078      	str	r0, [r7, #4]
 802abac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802abae:	4b22      	ldr	r3, [pc, #136]	; (802ac38 <prvProcessExpiredTimer+0x94>)
 802abb0:	681b      	ldr	r3, [r3, #0]
 802abb2:	68db      	ldr	r3, [r3, #12]
 802abb4:	68db      	ldr	r3, [r3, #12]
 802abb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802abb8:	697b      	ldr	r3, [r7, #20]
 802abba:	3304      	adds	r3, #4
 802abbc:	4618      	mov	r0, r3
 802abbe:	f7fe faff 	bl	80291c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802abc2:	697b      	ldr	r3, [r7, #20]
 802abc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802abc8:	f003 0304 	and.w	r3, r3, #4
 802abcc:	2b00      	cmp	r3, #0
 802abce:	d022      	beq.n	802ac16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 802abd0:	697b      	ldr	r3, [r7, #20]
 802abd2:	699a      	ldr	r2, [r3, #24]
 802abd4:	687b      	ldr	r3, [r7, #4]
 802abd6:	18d1      	adds	r1, r2, r3
 802abd8:	687b      	ldr	r3, [r7, #4]
 802abda:	683a      	ldr	r2, [r7, #0]
 802abdc:	6978      	ldr	r0, [r7, #20]
 802abde:	f000 f8d1 	bl	802ad84 <prvInsertTimerInActiveList>
 802abe2:	4603      	mov	r3, r0
 802abe4:	2b00      	cmp	r3, #0
 802abe6:	d01f      	beq.n	802ac28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802abe8:	2300      	movs	r3, #0
 802abea:	9300      	str	r3, [sp, #0]
 802abec:	2300      	movs	r3, #0
 802abee:	687a      	ldr	r2, [r7, #4]
 802abf0:	2100      	movs	r1, #0
 802abf2:	6978      	ldr	r0, [r7, #20]
 802abf4:	f7ff ff88 	bl	802ab08 <xTimerGenericCommand>
 802abf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802abfa:	693b      	ldr	r3, [r7, #16]
 802abfc:	2b00      	cmp	r3, #0
 802abfe:	d113      	bne.n	802ac28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 802ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ac04:	f383 8811 	msr	BASEPRI, r3
 802ac08:	f3bf 8f6f 	isb	sy
 802ac0c:	f3bf 8f4f 	dsb	sy
 802ac10:	60fb      	str	r3, [r7, #12]
}
 802ac12:	bf00      	nop
 802ac14:	e7fe      	b.n	802ac14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802ac16:	697b      	ldr	r3, [r7, #20]
 802ac18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802ac1c:	f023 0301 	bic.w	r3, r3, #1
 802ac20:	b2da      	uxtb	r2, r3
 802ac22:	697b      	ldr	r3, [r7, #20]
 802ac24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802ac28:	697b      	ldr	r3, [r7, #20]
 802ac2a:	6a1b      	ldr	r3, [r3, #32]
 802ac2c:	6978      	ldr	r0, [r7, #20]
 802ac2e:	4798      	blx	r3
}
 802ac30:	bf00      	nop
 802ac32:	3718      	adds	r7, #24
 802ac34:	46bd      	mov	sp, r7
 802ac36:	bd80      	pop	{r7, pc}
 802ac38:	20000f08 	.word	0x20000f08

0802ac3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 802ac3c:	b580      	push	{r7, lr}
 802ac3e:	b084      	sub	sp, #16
 802ac40:	af00      	add	r7, sp, #0
 802ac42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802ac44:	f107 0308 	add.w	r3, r7, #8
 802ac48:	4618      	mov	r0, r3
 802ac4a:	f000 f857 	bl	802acfc <prvGetNextExpireTime>
 802ac4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 802ac50:	68bb      	ldr	r3, [r7, #8]
 802ac52:	4619      	mov	r1, r3
 802ac54:	68f8      	ldr	r0, [r7, #12]
 802ac56:	f000 f803 	bl	802ac60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802ac5a:	f000 f8d5 	bl	802ae08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 802ac5e:	e7f1      	b.n	802ac44 <prvTimerTask+0x8>

0802ac60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 802ac60:	b580      	push	{r7, lr}
 802ac62:	b084      	sub	sp, #16
 802ac64:	af00      	add	r7, sp, #0
 802ac66:	6078      	str	r0, [r7, #4]
 802ac68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 802ac6a:	f7ff f9f7 	bl	802a05c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802ac6e:	f107 0308 	add.w	r3, r7, #8
 802ac72:	4618      	mov	r0, r3
 802ac74:	f000 f866 	bl	802ad44 <prvSampleTimeNow>
 802ac78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 802ac7a:	68bb      	ldr	r3, [r7, #8]
 802ac7c:	2b00      	cmp	r3, #0
 802ac7e:	d130      	bne.n	802ace2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 802ac80:	683b      	ldr	r3, [r7, #0]
 802ac82:	2b00      	cmp	r3, #0
 802ac84:	d10a      	bne.n	802ac9c <prvProcessTimerOrBlockTask+0x3c>
 802ac86:	687a      	ldr	r2, [r7, #4]
 802ac88:	68fb      	ldr	r3, [r7, #12]
 802ac8a:	429a      	cmp	r2, r3
 802ac8c:	d806      	bhi.n	802ac9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 802ac8e:	f7ff f9f3 	bl	802a078 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 802ac92:	68f9      	ldr	r1, [r7, #12]
 802ac94:	6878      	ldr	r0, [r7, #4]
 802ac96:	f7ff ff85 	bl	802aba4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802ac9a:	e024      	b.n	802ace6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 802ac9c:	683b      	ldr	r3, [r7, #0]
 802ac9e:	2b00      	cmp	r3, #0
 802aca0:	d008      	beq.n	802acb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 802aca2:	4b13      	ldr	r3, [pc, #76]	; (802acf0 <prvProcessTimerOrBlockTask+0x90>)
 802aca4:	681b      	ldr	r3, [r3, #0]
 802aca6:	681b      	ldr	r3, [r3, #0]
 802aca8:	2b00      	cmp	r3, #0
 802acaa:	d101      	bne.n	802acb0 <prvProcessTimerOrBlockTask+0x50>
 802acac:	2301      	movs	r3, #1
 802acae:	e000      	b.n	802acb2 <prvProcessTimerOrBlockTask+0x52>
 802acb0:	2300      	movs	r3, #0
 802acb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 802acb4:	4b0f      	ldr	r3, [pc, #60]	; (802acf4 <prvProcessTimerOrBlockTask+0x94>)
 802acb6:	6818      	ldr	r0, [r3, #0]
 802acb8:	687a      	ldr	r2, [r7, #4]
 802acba:	68fb      	ldr	r3, [r7, #12]
 802acbc:	1ad3      	subs	r3, r2, r3
 802acbe:	683a      	ldr	r2, [r7, #0]
 802acc0:	4619      	mov	r1, r3
 802acc2:	f7fe ff5b 	bl	8029b7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802acc6:	f7ff f9d7 	bl	802a078 <xTaskResumeAll>
 802acca:	4603      	mov	r3, r0
 802accc:	2b00      	cmp	r3, #0
 802acce:	d10a      	bne.n	802ace6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 802acd0:	4b09      	ldr	r3, [pc, #36]	; (802acf8 <prvProcessTimerOrBlockTask+0x98>)
 802acd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802acd6:	601a      	str	r2, [r3, #0]
 802acd8:	f3bf 8f4f 	dsb	sy
 802acdc:	f3bf 8f6f 	isb	sy
}
 802ace0:	e001      	b.n	802ace6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 802ace2:	f7ff f9c9 	bl	802a078 <xTaskResumeAll>
}
 802ace6:	bf00      	nop
 802ace8:	3710      	adds	r7, #16
 802acea:	46bd      	mov	sp, r7
 802acec:	bd80      	pop	{r7, pc}
 802acee:	bf00      	nop
 802acf0:	20000f0c 	.word	0x20000f0c
 802acf4:	20000f10 	.word	0x20000f10
 802acf8:	e000ed04 	.word	0xe000ed04

0802acfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802acfc:	b480      	push	{r7}
 802acfe:	b085      	sub	sp, #20
 802ad00:	af00      	add	r7, sp, #0
 802ad02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 802ad04:	4b0e      	ldr	r3, [pc, #56]	; (802ad40 <prvGetNextExpireTime+0x44>)
 802ad06:	681b      	ldr	r3, [r3, #0]
 802ad08:	681b      	ldr	r3, [r3, #0]
 802ad0a:	2b00      	cmp	r3, #0
 802ad0c:	d101      	bne.n	802ad12 <prvGetNextExpireTime+0x16>
 802ad0e:	2201      	movs	r2, #1
 802ad10:	e000      	b.n	802ad14 <prvGetNextExpireTime+0x18>
 802ad12:	2200      	movs	r2, #0
 802ad14:	687b      	ldr	r3, [r7, #4]
 802ad16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802ad18:	687b      	ldr	r3, [r7, #4]
 802ad1a:	681b      	ldr	r3, [r3, #0]
 802ad1c:	2b00      	cmp	r3, #0
 802ad1e:	d105      	bne.n	802ad2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802ad20:	4b07      	ldr	r3, [pc, #28]	; (802ad40 <prvGetNextExpireTime+0x44>)
 802ad22:	681b      	ldr	r3, [r3, #0]
 802ad24:	68db      	ldr	r3, [r3, #12]
 802ad26:	681b      	ldr	r3, [r3, #0]
 802ad28:	60fb      	str	r3, [r7, #12]
 802ad2a:	e001      	b.n	802ad30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802ad2c:	2300      	movs	r3, #0
 802ad2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802ad30:	68fb      	ldr	r3, [r7, #12]
}
 802ad32:	4618      	mov	r0, r3
 802ad34:	3714      	adds	r7, #20
 802ad36:	46bd      	mov	sp, r7
 802ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad3c:	4770      	bx	lr
 802ad3e:	bf00      	nop
 802ad40:	20000f08 	.word	0x20000f08

0802ad44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802ad44:	b580      	push	{r7, lr}
 802ad46:	b084      	sub	sp, #16
 802ad48:	af00      	add	r7, sp, #0
 802ad4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 802ad4c:	f7ff fa32 	bl	802a1b4 <xTaskGetTickCount>
 802ad50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802ad52:	4b0b      	ldr	r3, [pc, #44]	; (802ad80 <prvSampleTimeNow+0x3c>)
 802ad54:	681b      	ldr	r3, [r3, #0]
 802ad56:	68fa      	ldr	r2, [r7, #12]
 802ad58:	429a      	cmp	r2, r3
 802ad5a:	d205      	bcs.n	802ad68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 802ad5c:	f000 f936 	bl	802afcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802ad60:	687b      	ldr	r3, [r7, #4]
 802ad62:	2201      	movs	r2, #1
 802ad64:	601a      	str	r2, [r3, #0]
 802ad66:	e002      	b.n	802ad6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802ad68:	687b      	ldr	r3, [r7, #4]
 802ad6a:	2200      	movs	r2, #0
 802ad6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802ad6e:	4a04      	ldr	r2, [pc, #16]	; (802ad80 <prvSampleTimeNow+0x3c>)
 802ad70:	68fb      	ldr	r3, [r7, #12]
 802ad72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802ad74:	68fb      	ldr	r3, [r7, #12]
}
 802ad76:	4618      	mov	r0, r3
 802ad78:	3710      	adds	r7, #16
 802ad7a:	46bd      	mov	sp, r7
 802ad7c:	bd80      	pop	{r7, pc}
 802ad7e:	bf00      	nop
 802ad80:	20000f18 	.word	0x20000f18

0802ad84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802ad84:	b580      	push	{r7, lr}
 802ad86:	b086      	sub	sp, #24
 802ad88:	af00      	add	r7, sp, #0
 802ad8a:	60f8      	str	r0, [r7, #12]
 802ad8c:	60b9      	str	r1, [r7, #8]
 802ad8e:	607a      	str	r2, [r7, #4]
 802ad90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802ad92:	2300      	movs	r3, #0
 802ad94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802ad96:	68fb      	ldr	r3, [r7, #12]
 802ad98:	68ba      	ldr	r2, [r7, #8]
 802ad9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802ad9c:	68fb      	ldr	r3, [r7, #12]
 802ad9e:	68fa      	ldr	r2, [r7, #12]
 802ada0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802ada2:	68ba      	ldr	r2, [r7, #8]
 802ada4:	687b      	ldr	r3, [r7, #4]
 802ada6:	429a      	cmp	r2, r3
 802ada8:	d812      	bhi.n	802add0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802adaa:	687a      	ldr	r2, [r7, #4]
 802adac:	683b      	ldr	r3, [r7, #0]
 802adae:	1ad2      	subs	r2, r2, r3
 802adb0:	68fb      	ldr	r3, [r7, #12]
 802adb2:	699b      	ldr	r3, [r3, #24]
 802adb4:	429a      	cmp	r2, r3
 802adb6:	d302      	bcc.n	802adbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 802adb8:	2301      	movs	r3, #1
 802adba:	617b      	str	r3, [r7, #20]
 802adbc:	e01b      	b.n	802adf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802adbe:	4b10      	ldr	r3, [pc, #64]	; (802ae00 <prvInsertTimerInActiveList+0x7c>)
 802adc0:	681a      	ldr	r2, [r3, #0]
 802adc2:	68fb      	ldr	r3, [r7, #12]
 802adc4:	3304      	adds	r3, #4
 802adc6:	4619      	mov	r1, r3
 802adc8:	4610      	mov	r0, r2
 802adca:	f7fe f9c0 	bl	802914e <vListInsert>
 802adce:	e012      	b.n	802adf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802add0:	687a      	ldr	r2, [r7, #4]
 802add2:	683b      	ldr	r3, [r7, #0]
 802add4:	429a      	cmp	r2, r3
 802add6:	d206      	bcs.n	802ade6 <prvInsertTimerInActiveList+0x62>
 802add8:	68ba      	ldr	r2, [r7, #8]
 802adda:	683b      	ldr	r3, [r7, #0]
 802addc:	429a      	cmp	r2, r3
 802adde:	d302      	bcc.n	802ade6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802ade0:	2301      	movs	r3, #1
 802ade2:	617b      	str	r3, [r7, #20]
 802ade4:	e007      	b.n	802adf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802ade6:	4b07      	ldr	r3, [pc, #28]	; (802ae04 <prvInsertTimerInActiveList+0x80>)
 802ade8:	681a      	ldr	r2, [r3, #0]
 802adea:	68fb      	ldr	r3, [r7, #12]
 802adec:	3304      	adds	r3, #4
 802adee:	4619      	mov	r1, r3
 802adf0:	4610      	mov	r0, r2
 802adf2:	f7fe f9ac 	bl	802914e <vListInsert>
		}
	}

	return xProcessTimerNow;
 802adf6:	697b      	ldr	r3, [r7, #20]
}
 802adf8:	4618      	mov	r0, r3
 802adfa:	3718      	adds	r7, #24
 802adfc:	46bd      	mov	sp, r7
 802adfe:	bd80      	pop	{r7, pc}
 802ae00:	20000f0c 	.word	0x20000f0c
 802ae04:	20000f08 	.word	0x20000f08

0802ae08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802ae08:	b580      	push	{r7, lr}
 802ae0a:	b08e      	sub	sp, #56	; 0x38
 802ae0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802ae0e:	e0ca      	b.n	802afa6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802ae10:	687b      	ldr	r3, [r7, #4]
 802ae12:	2b00      	cmp	r3, #0
 802ae14:	da18      	bge.n	802ae48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802ae16:	1d3b      	adds	r3, r7, #4
 802ae18:	3304      	adds	r3, #4
 802ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802ae1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ae1e:	2b00      	cmp	r3, #0
 802ae20:	d10a      	bne.n	802ae38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 802ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 802ae26:	f383 8811 	msr	BASEPRI, r3
 802ae2a:	f3bf 8f6f 	isb	sy
 802ae2e:	f3bf 8f4f 	dsb	sy
 802ae32:	61fb      	str	r3, [r7, #28]
}
 802ae34:	bf00      	nop
 802ae36:	e7fe      	b.n	802ae36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ae3a:	681b      	ldr	r3, [r3, #0]
 802ae3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ae3e:	6850      	ldr	r0, [r2, #4]
 802ae40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ae42:	6892      	ldr	r2, [r2, #8]
 802ae44:	4611      	mov	r1, r2
 802ae46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802ae48:	687b      	ldr	r3, [r7, #4]
 802ae4a:	2b00      	cmp	r3, #0
 802ae4c:	f2c0 80aa 	blt.w	802afa4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802ae50:	68fb      	ldr	r3, [r7, #12]
 802ae52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ae56:	695b      	ldr	r3, [r3, #20]
 802ae58:	2b00      	cmp	r3, #0
 802ae5a:	d004      	beq.n	802ae66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ae5e:	3304      	adds	r3, #4
 802ae60:	4618      	mov	r0, r3
 802ae62:	f7fe f9ad 	bl	80291c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802ae66:	463b      	mov	r3, r7
 802ae68:	4618      	mov	r0, r3
 802ae6a:	f7ff ff6b 	bl	802ad44 <prvSampleTimeNow>
 802ae6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802ae70:	687b      	ldr	r3, [r7, #4]
 802ae72:	2b09      	cmp	r3, #9
 802ae74:	f200 8097 	bhi.w	802afa6 <prvProcessReceivedCommands+0x19e>
 802ae78:	a201      	add	r2, pc, #4	; (adr r2, 802ae80 <prvProcessReceivedCommands+0x78>)
 802ae7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ae7e:	bf00      	nop
 802ae80:	0802aea9 	.word	0x0802aea9
 802ae84:	0802aea9 	.word	0x0802aea9
 802ae88:	0802aea9 	.word	0x0802aea9
 802ae8c:	0802af1d 	.word	0x0802af1d
 802ae90:	0802af31 	.word	0x0802af31
 802ae94:	0802af7b 	.word	0x0802af7b
 802ae98:	0802aea9 	.word	0x0802aea9
 802ae9c:	0802aea9 	.word	0x0802aea9
 802aea0:	0802af1d 	.word	0x0802af1d
 802aea4:	0802af31 	.word	0x0802af31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aeaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802aeae:	f043 0301 	orr.w	r3, r3, #1
 802aeb2:	b2da      	uxtb	r2, r3
 802aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aeb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802aeba:	68ba      	ldr	r2, [r7, #8]
 802aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aebe:	699b      	ldr	r3, [r3, #24]
 802aec0:	18d1      	adds	r1, r2, r3
 802aec2:	68bb      	ldr	r3, [r7, #8]
 802aec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802aec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aec8:	f7ff ff5c 	bl	802ad84 <prvInsertTimerInActiveList>
 802aecc:	4603      	mov	r3, r0
 802aece:	2b00      	cmp	r3, #0
 802aed0:	d069      	beq.n	802afa6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aed4:	6a1b      	ldr	r3, [r3, #32]
 802aed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aed8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802aee0:	f003 0304 	and.w	r3, r3, #4
 802aee4:	2b00      	cmp	r3, #0
 802aee6:	d05e      	beq.n	802afa6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802aee8:	68ba      	ldr	r2, [r7, #8]
 802aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aeec:	699b      	ldr	r3, [r3, #24]
 802aeee:	441a      	add	r2, r3
 802aef0:	2300      	movs	r3, #0
 802aef2:	9300      	str	r3, [sp, #0]
 802aef4:	2300      	movs	r3, #0
 802aef6:	2100      	movs	r1, #0
 802aef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802aefa:	f7ff fe05 	bl	802ab08 <xTimerGenericCommand>
 802aefe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802af00:	6a3b      	ldr	r3, [r7, #32]
 802af02:	2b00      	cmp	r3, #0
 802af04:	d14f      	bne.n	802afa6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 802af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af0a:	f383 8811 	msr	BASEPRI, r3
 802af0e:	f3bf 8f6f 	isb	sy
 802af12:	f3bf 8f4f 	dsb	sy
 802af16:	61bb      	str	r3, [r7, #24]
}
 802af18:	bf00      	nop
 802af1a:	e7fe      	b.n	802af1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802af22:	f023 0301 	bic.w	r3, r3, #1
 802af26:	b2da      	uxtb	r2, r3
 802af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802af2e:	e03a      	b.n	802afa6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802af36:	f043 0301 	orr.w	r3, r3, #1
 802af3a:	b2da      	uxtb	r2, r3
 802af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802af42:	68ba      	ldr	r2, [r7, #8]
 802af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af4a:	699b      	ldr	r3, [r3, #24]
 802af4c:	2b00      	cmp	r3, #0
 802af4e:	d10a      	bne.n	802af66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 802af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 802af54:	f383 8811 	msr	BASEPRI, r3
 802af58:	f3bf 8f6f 	isb	sy
 802af5c:	f3bf 8f4f 	dsb	sy
 802af60:	617b      	str	r3, [r7, #20]
}
 802af62:	bf00      	nop
 802af64:	e7fe      	b.n	802af64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af68:	699a      	ldr	r2, [r3, #24]
 802af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af6c:	18d1      	adds	r1, r2, r3
 802af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802af72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802af74:	f7ff ff06 	bl	802ad84 <prvInsertTimerInActiveList>
					break;
 802af78:	e015      	b.n	802afa6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802af80:	f003 0302 	and.w	r3, r3, #2
 802af84:	2b00      	cmp	r3, #0
 802af86:	d103      	bne.n	802af90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 802af88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802af8a:	f000 fbd9 	bl	802b740 <vPortFree>
 802af8e:	e00a      	b.n	802afa6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802af96:	f023 0301 	bic.w	r3, r3, #1
 802af9a:	b2da      	uxtb	r2, r3
 802af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802afa2:	e000      	b.n	802afa6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 802afa4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802afa6:	4b08      	ldr	r3, [pc, #32]	; (802afc8 <prvProcessReceivedCommands+0x1c0>)
 802afa8:	681b      	ldr	r3, [r3, #0]
 802afaa:	1d39      	adds	r1, r7, #4
 802afac:	2200      	movs	r2, #0
 802afae:	4618      	mov	r0, r3
 802afb0:	f7fe fbca 	bl	8029748 <xQueueReceive>
 802afb4:	4603      	mov	r3, r0
 802afb6:	2b00      	cmp	r3, #0
 802afb8:	f47f af2a 	bne.w	802ae10 <prvProcessReceivedCommands+0x8>
	}
}
 802afbc:	bf00      	nop
 802afbe:	bf00      	nop
 802afc0:	3730      	adds	r7, #48	; 0x30
 802afc2:	46bd      	mov	sp, r7
 802afc4:	bd80      	pop	{r7, pc}
 802afc6:	bf00      	nop
 802afc8:	20000f10 	.word	0x20000f10

0802afcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802afcc:	b580      	push	{r7, lr}
 802afce:	b088      	sub	sp, #32
 802afd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802afd2:	e048      	b.n	802b066 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802afd4:	4b2d      	ldr	r3, [pc, #180]	; (802b08c <prvSwitchTimerLists+0xc0>)
 802afd6:	681b      	ldr	r3, [r3, #0]
 802afd8:	68db      	ldr	r3, [r3, #12]
 802afda:	681b      	ldr	r3, [r3, #0]
 802afdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802afde:	4b2b      	ldr	r3, [pc, #172]	; (802b08c <prvSwitchTimerLists+0xc0>)
 802afe0:	681b      	ldr	r3, [r3, #0]
 802afe2:	68db      	ldr	r3, [r3, #12]
 802afe4:	68db      	ldr	r3, [r3, #12]
 802afe6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802afe8:	68fb      	ldr	r3, [r7, #12]
 802afea:	3304      	adds	r3, #4
 802afec:	4618      	mov	r0, r3
 802afee:	f7fe f8e7 	bl	80291c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802aff2:	68fb      	ldr	r3, [r7, #12]
 802aff4:	6a1b      	ldr	r3, [r3, #32]
 802aff6:	68f8      	ldr	r0, [r7, #12]
 802aff8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802affa:	68fb      	ldr	r3, [r7, #12]
 802affc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802b000:	f003 0304 	and.w	r3, r3, #4
 802b004:	2b00      	cmp	r3, #0
 802b006:	d02e      	beq.n	802b066 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802b008:	68fb      	ldr	r3, [r7, #12]
 802b00a:	699b      	ldr	r3, [r3, #24]
 802b00c:	693a      	ldr	r2, [r7, #16]
 802b00e:	4413      	add	r3, r2
 802b010:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802b012:	68ba      	ldr	r2, [r7, #8]
 802b014:	693b      	ldr	r3, [r7, #16]
 802b016:	429a      	cmp	r2, r3
 802b018:	d90e      	bls.n	802b038 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802b01a:	68fb      	ldr	r3, [r7, #12]
 802b01c:	68ba      	ldr	r2, [r7, #8]
 802b01e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	68fa      	ldr	r2, [r7, #12]
 802b024:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802b026:	4b19      	ldr	r3, [pc, #100]	; (802b08c <prvSwitchTimerLists+0xc0>)
 802b028:	681a      	ldr	r2, [r3, #0]
 802b02a:	68fb      	ldr	r3, [r7, #12]
 802b02c:	3304      	adds	r3, #4
 802b02e:	4619      	mov	r1, r3
 802b030:	4610      	mov	r0, r2
 802b032:	f7fe f88c 	bl	802914e <vListInsert>
 802b036:	e016      	b.n	802b066 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802b038:	2300      	movs	r3, #0
 802b03a:	9300      	str	r3, [sp, #0]
 802b03c:	2300      	movs	r3, #0
 802b03e:	693a      	ldr	r2, [r7, #16]
 802b040:	2100      	movs	r1, #0
 802b042:	68f8      	ldr	r0, [r7, #12]
 802b044:	f7ff fd60 	bl	802ab08 <xTimerGenericCommand>
 802b048:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802b04a:	687b      	ldr	r3, [r7, #4]
 802b04c:	2b00      	cmp	r3, #0
 802b04e:	d10a      	bne.n	802b066 <prvSwitchTimerLists+0x9a>
	__asm volatile
 802b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b054:	f383 8811 	msr	BASEPRI, r3
 802b058:	f3bf 8f6f 	isb	sy
 802b05c:	f3bf 8f4f 	dsb	sy
 802b060:	603b      	str	r3, [r7, #0]
}
 802b062:	bf00      	nop
 802b064:	e7fe      	b.n	802b064 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802b066:	4b09      	ldr	r3, [pc, #36]	; (802b08c <prvSwitchTimerLists+0xc0>)
 802b068:	681b      	ldr	r3, [r3, #0]
 802b06a:	681b      	ldr	r3, [r3, #0]
 802b06c:	2b00      	cmp	r3, #0
 802b06e:	d1b1      	bne.n	802afd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802b070:	4b06      	ldr	r3, [pc, #24]	; (802b08c <prvSwitchTimerLists+0xc0>)
 802b072:	681b      	ldr	r3, [r3, #0]
 802b074:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802b076:	4b06      	ldr	r3, [pc, #24]	; (802b090 <prvSwitchTimerLists+0xc4>)
 802b078:	681b      	ldr	r3, [r3, #0]
 802b07a:	4a04      	ldr	r2, [pc, #16]	; (802b08c <prvSwitchTimerLists+0xc0>)
 802b07c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802b07e:	4a04      	ldr	r2, [pc, #16]	; (802b090 <prvSwitchTimerLists+0xc4>)
 802b080:	697b      	ldr	r3, [r7, #20]
 802b082:	6013      	str	r3, [r2, #0]
}
 802b084:	bf00      	nop
 802b086:	3718      	adds	r7, #24
 802b088:	46bd      	mov	sp, r7
 802b08a:	bd80      	pop	{r7, pc}
 802b08c:	20000f08 	.word	0x20000f08
 802b090:	20000f0c 	.word	0x20000f0c

0802b094 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802b094:	b580      	push	{r7, lr}
 802b096:	b082      	sub	sp, #8
 802b098:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802b09a:	f000 f96b 	bl	802b374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802b09e:	4b15      	ldr	r3, [pc, #84]	; (802b0f4 <prvCheckForValidListAndQueue+0x60>)
 802b0a0:	681b      	ldr	r3, [r3, #0]
 802b0a2:	2b00      	cmp	r3, #0
 802b0a4:	d120      	bne.n	802b0e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802b0a6:	4814      	ldr	r0, [pc, #80]	; (802b0f8 <prvCheckForValidListAndQueue+0x64>)
 802b0a8:	f7fe f800 	bl	80290ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802b0ac:	4813      	ldr	r0, [pc, #76]	; (802b0fc <prvCheckForValidListAndQueue+0x68>)
 802b0ae:	f7fd fffd 	bl	80290ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802b0b2:	4b13      	ldr	r3, [pc, #76]	; (802b100 <prvCheckForValidListAndQueue+0x6c>)
 802b0b4:	4a10      	ldr	r2, [pc, #64]	; (802b0f8 <prvCheckForValidListAndQueue+0x64>)
 802b0b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802b0b8:	4b12      	ldr	r3, [pc, #72]	; (802b104 <prvCheckForValidListAndQueue+0x70>)
 802b0ba:	4a10      	ldr	r2, [pc, #64]	; (802b0fc <prvCheckForValidListAndQueue+0x68>)
 802b0bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802b0be:	2300      	movs	r3, #0
 802b0c0:	9300      	str	r3, [sp, #0]
 802b0c2:	4b11      	ldr	r3, [pc, #68]	; (802b108 <prvCheckForValidListAndQueue+0x74>)
 802b0c4:	4a11      	ldr	r2, [pc, #68]	; (802b10c <prvCheckForValidListAndQueue+0x78>)
 802b0c6:	2110      	movs	r1, #16
 802b0c8:	200a      	movs	r0, #10
 802b0ca:	f7fe f90b 	bl	80292e4 <xQueueGenericCreateStatic>
 802b0ce:	4603      	mov	r3, r0
 802b0d0:	4a08      	ldr	r2, [pc, #32]	; (802b0f4 <prvCheckForValidListAndQueue+0x60>)
 802b0d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802b0d4:	4b07      	ldr	r3, [pc, #28]	; (802b0f4 <prvCheckForValidListAndQueue+0x60>)
 802b0d6:	681b      	ldr	r3, [r3, #0]
 802b0d8:	2b00      	cmp	r3, #0
 802b0da:	d005      	beq.n	802b0e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802b0dc:	4b05      	ldr	r3, [pc, #20]	; (802b0f4 <prvCheckForValidListAndQueue+0x60>)
 802b0de:	681b      	ldr	r3, [r3, #0]
 802b0e0:	490b      	ldr	r1, [pc, #44]	; (802b110 <prvCheckForValidListAndQueue+0x7c>)
 802b0e2:	4618      	mov	r0, r3
 802b0e4:	f7fe fd20 	bl	8029b28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802b0e8:	f000 f974 	bl	802b3d4 <vPortExitCritical>
}
 802b0ec:	bf00      	nop
 802b0ee:	46bd      	mov	sp, r7
 802b0f0:	bd80      	pop	{r7, pc}
 802b0f2:	bf00      	nop
 802b0f4:	20000f10 	.word	0x20000f10
 802b0f8:	20000ee0 	.word	0x20000ee0
 802b0fc:	20000ef4 	.word	0x20000ef4
 802b100:	20000f08 	.word	0x20000f08
 802b104:	20000f0c 	.word	0x20000f0c
 802b108:	20000fbc 	.word	0x20000fbc
 802b10c:	20000f1c 	.word	0x20000f1c
 802b110:	0802e59c 	.word	0x0802e59c

0802b114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802b114:	b480      	push	{r7}
 802b116:	b085      	sub	sp, #20
 802b118:	af00      	add	r7, sp, #0
 802b11a:	60f8      	str	r0, [r7, #12]
 802b11c:	60b9      	str	r1, [r7, #8]
 802b11e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802b120:	68fb      	ldr	r3, [r7, #12]
 802b122:	3b04      	subs	r3, #4
 802b124:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802b126:	68fb      	ldr	r3, [r7, #12]
 802b128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802b12c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802b12e:	68fb      	ldr	r3, [r7, #12]
 802b130:	3b04      	subs	r3, #4
 802b132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802b134:	68bb      	ldr	r3, [r7, #8]
 802b136:	f023 0201 	bic.w	r2, r3, #1
 802b13a:	68fb      	ldr	r3, [r7, #12]
 802b13c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802b13e:	68fb      	ldr	r3, [r7, #12]
 802b140:	3b04      	subs	r3, #4
 802b142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802b144:	4a0c      	ldr	r2, [pc, #48]	; (802b178 <pxPortInitialiseStack+0x64>)
 802b146:	68fb      	ldr	r3, [r7, #12]
 802b148:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802b14a:	68fb      	ldr	r3, [r7, #12]
 802b14c:	3b14      	subs	r3, #20
 802b14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802b150:	687a      	ldr	r2, [r7, #4]
 802b152:	68fb      	ldr	r3, [r7, #12]
 802b154:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802b156:	68fb      	ldr	r3, [r7, #12]
 802b158:	3b04      	subs	r3, #4
 802b15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802b15c:	68fb      	ldr	r3, [r7, #12]
 802b15e:	f06f 0202 	mvn.w	r2, #2
 802b162:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802b164:	68fb      	ldr	r3, [r7, #12]
 802b166:	3b20      	subs	r3, #32
 802b168:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802b16a:	68fb      	ldr	r3, [r7, #12]
}
 802b16c:	4618      	mov	r0, r3
 802b16e:	3714      	adds	r7, #20
 802b170:	46bd      	mov	sp, r7
 802b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b176:	4770      	bx	lr
 802b178:	0802b17d 	.word	0x0802b17d

0802b17c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802b17c:	b480      	push	{r7}
 802b17e:	b085      	sub	sp, #20
 802b180:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802b182:	2300      	movs	r3, #0
 802b184:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802b186:	4b12      	ldr	r3, [pc, #72]	; (802b1d0 <prvTaskExitError+0x54>)
 802b188:	681b      	ldr	r3, [r3, #0]
 802b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b18e:	d00a      	beq.n	802b1a6 <prvTaskExitError+0x2a>
	__asm volatile
 802b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b194:	f383 8811 	msr	BASEPRI, r3
 802b198:	f3bf 8f6f 	isb	sy
 802b19c:	f3bf 8f4f 	dsb	sy
 802b1a0:	60fb      	str	r3, [r7, #12]
}
 802b1a2:	bf00      	nop
 802b1a4:	e7fe      	b.n	802b1a4 <prvTaskExitError+0x28>
	__asm volatile
 802b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b1aa:	f383 8811 	msr	BASEPRI, r3
 802b1ae:	f3bf 8f6f 	isb	sy
 802b1b2:	f3bf 8f4f 	dsb	sy
 802b1b6:	60bb      	str	r3, [r7, #8]
}
 802b1b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802b1ba:	bf00      	nop
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	2b00      	cmp	r3, #0
 802b1c0:	d0fc      	beq.n	802b1bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802b1c2:	bf00      	nop
 802b1c4:	bf00      	nop
 802b1c6:	3714      	adds	r7, #20
 802b1c8:	46bd      	mov	sp, r7
 802b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1ce:	4770      	bx	lr
 802b1d0:	200003f0 	.word	0x200003f0
	...

0802b1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802b1e0:	4b07      	ldr	r3, [pc, #28]	; (802b200 <pxCurrentTCBConst2>)
 802b1e2:	6819      	ldr	r1, [r3, #0]
 802b1e4:	6808      	ldr	r0, [r1, #0]
 802b1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b1ea:	f380 8809 	msr	PSP, r0
 802b1ee:	f3bf 8f6f 	isb	sy
 802b1f2:	f04f 0000 	mov.w	r0, #0
 802b1f6:	f380 8811 	msr	BASEPRI, r0
 802b1fa:	4770      	bx	lr
 802b1fc:	f3af 8000 	nop.w

0802b200 <pxCurrentTCBConst2>:
 802b200:	20000dc8 	.word	0x20000dc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 802b204:	bf00      	nop
 802b206:	bf00      	nop

0802b208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 802b208:	4808      	ldr	r0, [pc, #32]	; (802b22c <prvPortStartFirstTask+0x24>)
 802b20a:	6800      	ldr	r0, [r0, #0]
 802b20c:	6800      	ldr	r0, [r0, #0]
 802b20e:	f380 8808 	msr	MSP, r0
 802b212:	f04f 0000 	mov.w	r0, #0
 802b216:	f380 8814 	msr	CONTROL, r0
 802b21a:	b662      	cpsie	i
 802b21c:	b661      	cpsie	f
 802b21e:	f3bf 8f4f 	dsb	sy
 802b222:	f3bf 8f6f 	isb	sy
 802b226:	df00      	svc	0
 802b228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802b22a:	bf00      	nop
 802b22c:	e000ed08 	.word	0xe000ed08

0802b230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 802b230:	b580      	push	{r7, lr}
 802b232:	b086      	sub	sp, #24
 802b234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802b236:	4b46      	ldr	r3, [pc, #280]	; (802b350 <xPortStartScheduler+0x120>)
 802b238:	681b      	ldr	r3, [r3, #0]
 802b23a:	4a46      	ldr	r2, [pc, #280]	; (802b354 <xPortStartScheduler+0x124>)
 802b23c:	4293      	cmp	r3, r2
 802b23e:	d10a      	bne.n	802b256 <xPortStartScheduler+0x26>
	__asm volatile
 802b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b244:	f383 8811 	msr	BASEPRI, r3
 802b248:	f3bf 8f6f 	isb	sy
 802b24c:	f3bf 8f4f 	dsb	sy
 802b250:	613b      	str	r3, [r7, #16]
}
 802b252:	bf00      	nop
 802b254:	e7fe      	b.n	802b254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802b256:	4b3e      	ldr	r3, [pc, #248]	; (802b350 <xPortStartScheduler+0x120>)
 802b258:	681b      	ldr	r3, [r3, #0]
 802b25a:	4a3f      	ldr	r2, [pc, #252]	; (802b358 <xPortStartScheduler+0x128>)
 802b25c:	4293      	cmp	r3, r2
 802b25e:	d10a      	bne.n	802b276 <xPortStartScheduler+0x46>
	__asm volatile
 802b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b264:	f383 8811 	msr	BASEPRI, r3
 802b268:	f3bf 8f6f 	isb	sy
 802b26c:	f3bf 8f4f 	dsb	sy
 802b270:	60fb      	str	r3, [r7, #12]
}
 802b272:	bf00      	nop
 802b274:	e7fe      	b.n	802b274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802b276:	4b39      	ldr	r3, [pc, #228]	; (802b35c <xPortStartScheduler+0x12c>)
 802b278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802b27a:	697b      	ldr	r3, [r7, #20]
 802b27c:	781b      	ldrb	r3, [r3, #0]
 802b27e:	b2db      	uxtb	r3, r3
 802b280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802b282:	697b      	ldr	r3, [r7, #20]
 802b284:	22ff      	movs	r2, #255	; 0xff
 802b286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802b288:	697b      	ldr	r3, [r7, #20]
 802b28a:	781b      	ldrb	r3, [r3, #0]
 802b28c:	b2db      	uxtb	r3, r3
 802b28e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802b290:	78fb      	ldrb	r3, [r7, #3]
 802b292:	b2db      	uxtb	r3, r3
 802b294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802b298:	b2da      	uxtb	r2, r3
 802b29a:	4b31      	ldr	r3, [pc, #196]	; (802b360 <xPortStartScheduler+0x130>)
 802b29c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802b29e:	4b31      	ldr	r3, [pc, #196]	; (802b364 <xPortStartScheduler+0x134>)
 802b2a0:	2207      	movs	r2, #7
 802b2a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802b2a4:	e009      	b.n	802b2ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 802b2a6:	4b2f      	ldr	r3, [pc, #188]	; (802b364 <xPortStartScheduler+0x134>)
 802b2a8:	681b      	ldr	r3, [r3, #0]
 802b2aa:	3b01      	subs	r3, #1
 802b2ac:	4a2d      	ldr	r2, [pc, #180]	; (802b364 <xPortStartScheduler+0x134>)
 802b2ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802b2b0:	78fb      	ldrb	r3, [r7, #3]
 802b2b2:	b2db      	uxtb	r3, r3
 802b2b4:	005b      	lsls	r3, r3, #1
 802b2b6:	b2db      	uxtb	r3, r3
 802b2b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802b2ba:	78fb      	ldrb	r3, [r7, #3]
 802b2bc:	b2db      	uxtb	r3, r3
 802b2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b2c2:	2b80      	cmp	r3, #128	; 0x80
 802b2c4:	d0ef      	beq.n	802b2a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802b2c6:	4b27      	ldr	r3, [pc, #156]	; (802b364 <xPortStartScheduler+0x134>)
 802b2c8:	681b      	ldr	r3, [r3, #0]
 802b2ca:	f1c3 0307 	rsb	r3, r3, #7
 802b2ce:	2b04      	cmp	r3, #4
 802b2d0:	d00a      	beq.n	802b2e8 <xPortStartScheduler+0xb8>
	__asm volatile
 802b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b2d6:	f383 8811 	msr	BASEPRI, r3
 802b2da:	f3bf 8f6f 	isb	sy
 802b2de:	f3bf 8f4f 	dsb	sy
 802b2e2:	60bb      	str	r3, [r7, #8]
}
 802b2e4:	bf00      	nop
 802b2e6:	e7fe      	b.n	802b2e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802b2e8:	4b1e      	ldr	r3, [pc, #120]	; (802b364 <xPortStartScheduler+0x134>)
 802b2ea:	681b      	ldr	r3, [r3, #0]
 802b2ec:	021b      	lsls	r3, r3, #8
 802b2ee:	4a1d      	ldr	r2, [pc, #116]	; (802b364 <xPortStartScheduler+0x134>)
 802b2f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802b2f2:	4b1c      	ldr	r3, [pc, #112]	; (802b364 <xPortStartScheduler+0x134>)
 802b2f4:	681b      	ldr	r3, [r3, #0]
 802b2f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802b2fa:	4a1a      	ldr	r2, [pc, #104]	; (802b364 <xPortStartScheduler+0x134>)
 802b2fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802b2fe:	687b      	ldr	r3, [r7, #4]
 802b300:	b2da      	uxtb	r2, r3
 802b302:	697b      	ldr	r3, [r7, #20]
 802b304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802b306:	4b18      	ldr	r3, [pc, #96]	; (802b368 <xPortStartScheduler+0x138>)
 802b308:	681b      	ldr	r3, [r3, #0]
 802b30a:	4a17      	ldr	r2, [pc, #92]	; (802b368 <xPortStartScheduler+0x138>)
 802b30c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802b310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802b312:	4b15      	ldr	r3, [pc, #84]	; (802b368 <xPortStartScheduler+0x138>)
 802b314:	681b      	ldr	r3, [r3, #0]
 802b316:	4a14      	ldr	r2, [pc, #80]	; (802b368 <xPortStartScheduler+0x138>)
 802b318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802b31c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802b31e:	f000 f8dd 	bl	802b4dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802b322:	4b12      	ldr	r3, [pc, #72]	; (802b36c <xPortStartScheduler+0x13c>)
 802b324:	2200      	movs	r2, #0
 802b326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802b328:	f000 f8fc 	bl	802b524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802b32c:	4b10      	ldr	r3, [pc, #64]	; (802b370 <xPortStartScheduler+0x140>)
 802b32e:	681b      	ldr	r3, [r3, #0]
 802b330:	4a0f      	ldr	r2, [pc, #60]	; (802b370 <xPortStartScheduler+0x140>)
 802b332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802b336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802b338:	f7ff ff66 	bl	802b208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802b33c:	f7ff f816 	bl	802a36c <vTaskSwitchContext>
	prvTaskExitError();
 802b340:	f7ff ff1c 	bl	802b17c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802b344:	2300      	movs	r3, #0
}
 802b346:	4618      	mov	r0, r3
 802b348:	3718      	adds	r7, #24
 802b34a:	46bd      	mov	sp, r7
 802b34c:	bd80      	pop	{r7, pc}
 802b34e:	bf00      	nop
 802b350:	e000ed00 	.word	0xe000ed00
 802b354:	410fc271 	.word	0x410fc271
 802b358:	410fc270 	.word	0x410fc270
 802b35c:	e000e400 	.word	0xe000e400
 802b360:	2000100c 	.word	0x2000100c
 802b364:	20001010 	.word	0x20001010
 802b368:	e000ed20 	.word	0xe000ed20
 802b36c:	200003f0 	.word	0x200003f0
 802b370:	e000ef34 	.word	0xe000ef34

0802b374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802b374:	b480      	push	{r7}
 802b376:	b083      	sub	sp, #12
 802b378:	af00      	add	r7, sp, #0
	__asm volatile
 802b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b37e:	f383 8811 	msr	BASEPRI, r3
 802b382:	f3bf 8f6f 	isb	sy
 802b386:	f3bf 8f4f 	dsb	sy
 802b38a:	607b      	str	r3, [r7, #4]
}
 802b38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802b38e:	4b0f      	ldr	r3, [pc, #60]	; (802b3cc <vPortEnterCritical+0x58>)
 802b390:	681b      	ldr	r3, [r3, #0]
 802b392:	3301      	adds	r3, #1
 802b394:	4a0d      	ldr	r2, [pc, #52]	; (802b3cc <vPortEnterCritical+0x58>)
 802b396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802b398:	4b0c      	ldr	r3, [pc, #48]	; (802b3cc <vPortEnterCritical+0x58>)
 802b39a:	681b      	ldr	r3, [r3, #0]
 802b39c:	2b01      	cmp	r3, #1
 802b39e:	d10f      	bne.n	802b3c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802b3a0:	4b0b      	ldr	r3, [pc, #44]	; (802b3d0 <vPortEnterCritical+0x5c>)
 802b3a2:	681b      	ldr	r3, [r3, #0]
 802b3a4:	b2db      	uxtb	r3, r3
 802b3a6:	2b00      	cmp	r3, #0
 802b3a8:	d00a      	beq.n	802b3c0 <vPortEnterCritical+0x4c>
	__asm volatile
 802b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b3ae:	f383 8811 	msr	BASEPRI, r3
 802b3b2:	f3bf 8f6f 	isb	sy
 802b3b6:	f3bf 8f4f 	dsb	sy
 802b3ba:	603b      	str	r3, [r7, #0]
}
 802b3bc:	bf00      	nop
 802b3be:	e7fe      	b.n	802b3be <vPortEnterCritical+0x4a>
	}
}
 802b3c0:	bf00      	nop
 802b3c2:	370c      	adds	r7, #12
 802b3c4:	46bd      	mov	sp, r7
 802b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b3ca:	4770      	bx	lr
 802b3cc:	200003f0 	.word	0x200003f0
 802b3d0:	e000ed04 	.word	0xe000ed04

0802b3d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802b3d4:	b480      	push	{r7}
 802b3d6:	b083      	sub	sp, #12
 802b3d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802b3da:	4b12      	ldr	r3, [pc, #72]	; (802b424 <vPortExitCritical+0x50>)
 802b3dc:	681b      	ldr	r3, [r3, #0]
 802b3de:	2b00      	cmp	r3, #0
 802b3e0:	d10a      	bne.n	802b3f8 <vPortExitCritical+0x24>
	__asm volatile
 802b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b3e6:	f383 8811 	msr	BASEPRI, r3
 802b3ea:	f3bf 8f6f 	isb	sy
 802b3ee:	f3bf 8f4f 	dsb	sy
 802b3f2:	607b      	str	r3, [r7, #4]
}
 802b3f4:	bf00      	nop
 802b3f6:	e7fe      	b.n	802b3f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 802b3f8:	4b0a      	ldr	r3, [pc, #40]	; (802b424 <vPortExitCritical+0x50>)
 802b3fa:	681b      	ldr	r3, [r3, #0]
 802b3fc:	3b01      	subs	r3, #1
 802b3fe:	4a09      	ldr	r2, [pc, #36]	; (802b424 <vPortExitCritical+0x50>)
 802b400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802b402:	4b08      	ldr	r3, [pc, #32]	; (802b424 <vPortExitCritical+0x50>)
 802b404:	681b      	ldr	r3, [r3, #0]
 802b406:	2b00      	cmp	r3, #0
 802b408:	d105      	bne.n	802b416 <vPortExitCritical+0x42>
 802b40a:	2300      	movs	r3, #0
 802b40c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802b40e:	683b      	ldr	r3, [r7, #0]
 802b410:	f383 8811 	msr	BASEPRI, r3
}
 802b414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 802b416:	bf00      	nop
 802b418:	370c      	adds	r7, #12
 802b41a:	46bd      	mov	sp, r7
 802b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b420:	4770      	bx	lr
 802b422:	bf00      	nop
 802b424:	200003f0 	.word	0x200003f0
	...

0802b430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802b430:	f3ef 8009 	mrs	r0, PSP
 802b434:	f3bf 8f6f 	isb	sy
 802b438:	4b15      	ldr	r3, [pc, #84]	; (802b490 <pxCurrentTCBConst>)
 802b43a:	681a      	ldr	r2, [r3, #0]
 802b43c:	f01e 0f10 	tst.w	lr, #16
 802b440:	bf08      	it	eq
 802b442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 802b446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b44a:	6010      	str	r0, [r2, #0]
 802b44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 802b450:	f04f 0050 	mov.w	r0, #80	; 0x50
 802b454:	f380 8811 	msr	BASEPRI, r0
 802b458:	f3bf 8f4f 	dsb	sy
 802b45c:	f3bf 8f6f 	isb	sy
 802b460:	f7fe ff84 	bl	802a36c <vTaskSwitchContext>
 802b464:	f04f 0000 	mov.w	r0, #0
 802b468:	f380 8811 	msr	BASEPRI, r0
 802b46c:	bc09      	pop	{r0, r3}
 802b46e:	6819      	ldr	r1, [r3, #0]
 802b470:	6808      	ldr	r0, [r1, #0]
 802b472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b476:	f01e 0f10 	tst.w	lr, #16
 802b47a:	bf08      	it	eq
 802b47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 802b480:	f380 8809 	msr	PSP, r0
 802b484:	f3bf 8f6f 	isb	sy
 802b488:	4770      	bx	lr
 802b48a:	bf00      	nop
 802b48c:	f3af 8000 	nop.w

0802b490 <pxCurrentTCBConst>:
 802b490:	20000dc8 	.word	0x20000dc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 802b494:	bf00      	nop
 802b496:	bf00      	nop

0802b498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 802b498:	b580      	push	{r7, lr}
 802b49a:	b082      	sub	sp, #8
 802b49c:	af00      	add	r7, sp, #0
	__asm volatile
 802b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b4a2:	f383 8811 	msr	BASEPRI, r3
 802b4a6:	f3bf 8f6f 	isb	sy
 802b4aa:	f3bf 8f4f 	dsb	sy
 802b4ae:	607b      	str	r3, [r7, #4]
}
 802b4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802b4b2:	f7fe fea1 	bl	802a1f8 <xTaskIncrementTick>
 802b4b6:	4603      	mov	r3, r0
 802b4b8:	2b00      	cmp	r3, #0
 802b4ba:	d003      	beq.n	802b4c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802b4bc:	4b06      	ldr	r3, [pc, #24]	; (802b4d8 <xPortSysTickHandler+0x40>)
 802b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802b4c2:	601a      	str	r2, [r3, #0]
 802b4c4:	2300      	movs	r3, #0
 802b4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 802b4c8:	683b      	ldr	r3, [r7, #0]
 802b4ca:	f383 8811 	msr	BASEPRI, r3
}
 802b4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 802b4d0:	bf00      	nop
 802b4d2:	3708      	adds	r7, #8
 802b4d4:	46bd      	mov	sp, r7
 802b4d6:	bd80      	pop	{r7, pc}
 802b4d8:	e000ed04 	.word	0xe000ed04

0802b4dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802b4dc:	b480      	push	{r7}
 802b4de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802b4e0:	4b0b      	ldr	r3, [pc, #44]	; (802b510 <vPortSetupTimerInterrupt+0x34>)
 802b4e2:	2200      	movs	r2, #0
 802b4e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802b4e6:	4b0b      	ldr	r3, [pc, #44]	; (802b514 <vPortSetupTimerInterrupt+0x38>)
 802b4e8:	2200      	movs	r2, #0
 802b4ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802b4ec:	4b0a      	ldr	r3, [pc, #40]	; (802b518 <vPortSetupTimerInterrupt+0x3c>)
 802b4ee:	681b      	ldr	r3, [r3, #0]
 802b4f0:	4a0a      	ldr	r2, [pc, #40]	; (802b51c <vPortSetupTimerInterrupt+0x40>)
 802b4f2:	fba2 2303 	umull	r2, r3, r2, r3
 802b4f6:	099b      	lsrs	r3, r3, #6
 802b4f8:	4a09      	ldr	r2, [pc, #36]	; (802b520 <vPortSetupTimerInterrupt+0x44>)
 802b4fa:	3b01      	subs	r3, #1
 802b4fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802b4fe:	4b04      	ldr	r3, [pc, #16]	; (802b510 <vPortSetupTimerInterrupt+0x34>)
 802b500:	2207      	movs	r2, #7
 802b502:	601a      	str	r2, [r3, #0]
}
 802b504:	bf00      	nop
 802b506:	46bd      	mov	sp, r7
 802b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b50c:	4770      	bx	lr
 802b50e:	bf00      	nop
 802b510:	e000e010 	.word	0xe000e010
 802b514:	e000e018 	.word	0xe000e018
 802b518:	200002e0 	.word	0x200002e0
 802b51c:	10624dd3 	.word	0x10624dd3
 802b520:	e000e014 	.word	0xe000e014

0802b524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 802b524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 802b534 <vPortEnableVFP+0x10>
 802b528:	6801      	ldr	r1, [r0, #0]
 802b52a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802b52e:	6001      	str	r1, [r0, #0]
 802b530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802b532:	bf00      	nop
 802b534:	e000ed88 	.word	0xe000ed88

0802b538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802b538:	b480      	push	{r7}
 802b53a:	b085      	sub	sp, #20
 802b53c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802b53e:	f3ef 8305 	mrs	r3, IPSR
 802b542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 802b544:	68fb      	ldr	r3, [r7, #12]
 802b546:	2b0f      	cmp	r3, #15
 802b548:	d914      	bls.n	802b574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802b54a:	4a17      	ldr	r2, [pc, #92]	; (802b5a8 <vPortValidateInterruptPriority+0x70>)
 802b54c:	68fb      	ldr	r3, [r7, #12]
 802b54e:	4413      	add	r3, r2
 802b550:	781b      	ldrb	r3, [r3, #0]
 802b552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 802b554:	4b15      	ldr	r3, [pc, #84]	; (802b5ac <vPortValidateInterruptPriority+0x74>)
 802b556:	781b      	ldrb	r3, [r3, #0]
 802b558:	7afa      	ldrb	r2, [r7, #11]
 802b55a:	429a      	cmp	r2, r3
 802b55c:	d20a      	bcs.n	802b574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b562:	f383 8811 	msr	BASEPRI, r3
 802b566:	f3bf 8f6f 	isb	sy
 802b56a:	f3bf 8f4f 	dsb	sy
 802b56e:	607b      	str	r3, [r7, #4]
}
 802b570:	bf00      	nop
 802b572:	e7fe      	b.n	802b572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802b574:	4b0e      	ldr	r3, [pc, #56]	; (802b5b0 <vPortValidateInterruptPriority+0x78>)
 802b576:	681b      	ldr	r3, [r3, #0]
 802b578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802b57c:	4b0d      	ldr	r3, [pc, #52]	; (802b5b4 <vPortValidateInterruptPriority+0x7c>)
 802b57e:	681b      	ldr	r3, [r3, #0]
 802b580:	429a      	cmp	r2, r3
 802b582:	d90a      	bls.n	802b59a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 802b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b588:	f383 8811 	msr	BASEPRI, r3
 802b58c:	f3bf 8f6f 	isb	sy
 802b590:	f3bf 8f4f 	dsb	sy
 802b594:	603b      	str	r3, [r7, #0]
}
 802b596:	bf00      	nop
 802b598:	e7fe      	b.n	802b598 <vPortValidateInterruptPriority+0x60>
	}
 802b59a:	bf00      	nop
 802b59c:	3714      	adds	r7, #20
 802b59e:	46bd      	mov	sp, r7
 802b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5a4:	4770      	bx	lr
 802b5a6:	bf00      	nop
 802b5a8:	e000e3f0 	.word	0xe000e3f0
 802b5ac:	2000100c 	.word	0x2000100c
 802b5b0:	e000ed0c 	.word	0xe000ed0c
 802b5b4:	20001010 	.word	0x20001010

0802b5b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802b5b8:	b580      	push	{r7, lr}
 802b5ba:	b08a      	sub	sp, #40	; 0x28
 802b5bc:	af00      	add	r7, sp, #0
 802b5be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802b5c0:	2300      	movs	r3, #0
 802b5c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802b5c4:	f7fe fd4a 	bl	802a05c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802b5c8:	4b58      	ldr	r3, [pc, #352]	; (802b72c <pvPortMalloc+0x174>)
 802b5ca:	681b      	ldr	r3, [r3, #0]
 802b5cc:	2b00      	cmp	r3, #0
 802b5ce:	d101      	bne.n	802b5d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802b5d0:	f000 f910 	bl	802b7f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802b5d4:	4b56      	ldr	r3, [pc, #344]	; (802b730 <pvPortMalloc+0x178>)
 802b5d6:	681a      	ldr	r2, [r3, #0]
 802b5d8:	687b      	ldr	r3, [r7, #4]
 802b5da:	4013      	ands	r3, r2
 802b5dc:	2b00      	cmp	r3, #0
 802b5de:	f040 808e 	bne.w	802b6fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802b5e2:	687b      	ldr	r3, [r7, #4]
 802b5e4:	2b00      	cmp	r3, #0
 802b5e6:	d01d      	beq.n	802b624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 802b5e8:	2208      	movs	r2, #8
 802b5ea:	687b      	ldr	r3, [r7, #4]
 802b5ec:	4413      	add	r3, r2
 802b5ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802b5f0:	687b      	ldr	r3, [r7, #4]
 802b5f2:	f003 0307 	and.w	r3, r3, #7
 802b5f6:	2b00      	cmp	r3, #0
 802b5f8:	d014      	beq.n	802b624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802b5fa:	687b      	ldr	r3, [r7, #4]
 802b5fc:	f023 0307 	bic.w	r3, r3, #7
 802b600:	3308      	adds	r3, #8
 802b602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802b604:	687b      	ldr	r3, [r7, #4]
 802b606:	f003 0307 	and.w	r3, r3, #7
 802b60a:	2b00      	cmp	r3, #0
 802b60c:	d00a      	beq.n	802b624 <pvPortMalloc+0x6c>
	__asm volatile
 802b60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b612:	f383 8811 	msr	BASEPRI, r3
 802b616:	f3bf 8f6f 	isb	sy
 802b61a:	f3bf 8f4f 	dsb	sy
 802b61e:	617b      	str	r3, [r7, #20]
}
 802b620:	bf00      	nop
 802b622:	e7fe      	b.n	802b622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802b624:	687b      	ldr	r3, [r7, #4]
 802b626:	2b00      	cmp	r3, #0
 802b628:	d069      	beq.n	802b6fe <pvPortMalloc+0x146>
 802b62a:	4b42      	ldr	r3, [pc, #264]	; (802b734 <pvPortMalloc+0x17c>)
 802b62c:	681b      	ldr	r3, [r3, #0]
 802b62e:	687a      	ldr	r2, [r7, #4]
 802b630:	429a      	cmp	r2, r3
 802b632:	d864      	bhi.n	802b6fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802b634:	4b40      	ldr	r3, [pc, #256]	; (802b738 <pvPortMalloc+0x180>)
 802b636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802b638:	4b3f      	ldr	r3, [pc, #252]	; (802b738 <pvPortMalloc+0x180>)
 802b63a:	681b      	ldr	r3, [r3, #0]
 802b63c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802b63e:	e004      	b.n	802b64a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 802b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b646:	681b      	ldr	r3, [r3, #0]
 802b648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b64c:	685b      	ldr	r3, [r3, #4]
 802b64e:	687a      	ldr	r2, [r7, #4]
 802b650:	429a      	cmp	r2, r3
 802b652:	d903      	bls.n	802b65c <pvPortMalloc+0xa4>
 802b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b656:	681b      	ldr	r3, [r3, #0]
 802b658:	2b00      	cmp	r3, #0
 802b65a:	d1f1      	bne.n	802b640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802b65c:	4b33      	ldr	r3, [pc, #204]	; (802b72c <pvPortMalloc+0x174>)
 802b65e:	681b      	ldr	r3, [r3, #0]
 802b660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b662:	429a      	cmp	r2, r3
 802b664:	d04b      	beq.n	802b6fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802b666:	6a3b      	ldr	r3, [r7, #32]
 802b668:	681b      	ldr	r3, [r3, #0]
 802b66a:	2208      	movs	r2, #8
 802b66c:	4413      	add	r3, r2
 802b66e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b672:	681a      	ldr	r2, [r3, #0]
 802b674:	6a3b      	ldr	r3, [r7, #32]
 802b676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b67a:	685a      	ldr	r2, [r3, #4]
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	1ad2      	subs	r2, r2, r3
 802b680:	2308      	movs	r3, #8
 802b682:	005b      	lsls	r3, r3, #1
 802b684:	429a      	cmp	r2, r3
 802b686:	d91f      	bls.n	802b6c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802b688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b68a:	687b      	ldr	r3, [r7, #4]
 802b68c:	4413      	add	r3, r2
 802b68e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 802b690:	69bb      	ldr	r3, [r7, #24]
 802b692:	f003 0307 	and.w	r3, r3, #7
 802b696:	2b00      	cmp	r3, #0
 802b698:	d00a      	beq.n	802b6b0 <pvPortMalloc+0xf8>
	__asm volatile
 802b69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b69e:	f383 8811 	msr	BASEPRI, r3
 802b6a2:	f3bf 8f6f 	isb	sy
 802b6a6:	f3bf 8f4f 	dsb	sy
 802b6aa:	613b      	str	r3, [r7, #16]
}
 802b6ac:	bf00      	nop
 802b6ae:	e7fe      	b.n	802b6ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 802b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6b2:	685a      	ldr	r2, [r3, #4]
 802b6b4:	687b      	ldr	r3, [r7, #4]
 802b6b6:	1ad2      	subs	r2, r2, r3
 802b6b8:	69bb      	ldr	r3, [r7, #24]
 802b6ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6be:	687a      	ldr	r2, [r7, #4]
 802b6c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802b6c2:	69b8      	ldr	r0, [r7, #24]
 802b6c4:	f000 f8f8 	bl	802b8b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802b6c8:	4b1a      	ldr	r3, [pc, #104]	; (802b734 <pvPortMalloc+0x17c>)
 802b6ca:	681a      	ldr	r2, [r3, #0]
 802b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6ce:	685b      	ldr	r3, [r3, #4]
 802b6d0:	1ad3      	subs	r3, r2, r3
 802b6d2:	4a18      	ldr	r2, [pc, #96]	; (802b734 <pvPortMalloc+0x17c>)
 802b6d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802b6d6:	4b17      	ldr	r3, [pc, #92]	; (802b734 <pvPortMalloc+0x17c>)
 802b6d8:	681a      	ldr	r2, [r3, #0]
 802b6da:	4b18      	ldr	r3, [pc, #96]	; (802b73c <pvPortMalloc+0x184>)
 802b6dc:	681b      	ldr	r3, [r3, #0]
 802b6de:	429a      	cmp	r2, r3
 802b6e0:	d203      	bcs.n	802b6ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802b6e2:	4b14      	ldr	r3, [pc, #80]	; (802b734 <pvPortMalloc+0x17c>)
 802b6e4:	681b      	ldr	r3, [r3, #0]
 802b6e6:	4a15      	ldr	r2, [pc, #84]	; (802b73c <pvPortMalloc+0x184>)
 802b6e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6ec:	685a      	ldr	r2, [r3, #4]
 802b6ee:	4b10      	ldr	r3, [pc, #64]	; (802b730 <pvPortMalloc+0x178>)
 802b6f0:	681b      	ldr	r3, [r3, #0]
 802b6f2:	431a      	orrs	r2, r3
 802b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6fa:	2200      	movs	r2, #0
 802b6fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802b6fe:	f7fe fcbb 	bl	802a078 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802b702:	69fb      	ldr	r3, [r7, #28]
 802b704:	f003 0307 	and.w	r3, r3, #7
 802b708:	2b00      	cmp	r3, #0
 802b70a:	d00a      	beq.n	802b722 <pvPortMalloc+0x16a>
	__asm volatile
 802b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b710:	f383 8811 	msr	BASEPRI, r3
 802b714:	f3bf 8f6f 	isb	sy
 802b718:	f3bf 8f4f 	dsb	sy
 802b71c:	60fb      	str	r3, [r7, #12]
}
 802b71e:	bf00      	nop
 802b720:	e7fe      	b.n	802b720 <pvPortMalloc+0x168>
	return pvReturn;
 802b722:	69fb      	ldr	r3, [r7, #28]
}
 802b724:	4618      	mov	r0, r3
 802b726:	3728      	adds	r7, #40	; 0x28
 802b728:	46bd      	mov	sp, r7
 802b72a:	bd80      	pop	{r7, pc}
 802b72c:	20004c1c 	.word	0x20004c1c
 802b730:	20004c28 	.word	0x20004c28
 802b734:	20004c20 	.word	0x20004c20
 802b738:	20004c14 	.word	0x20004c14
 802b73c:	20004c24 	.word	0x20004c24

0802b740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 802b740:	b580      	push	{r7, lr}
 802b742:	b086      	sub	sp, #24
 802b744:	af00      	add	r7, sp, #0
 802b746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802b748:	687b      	ldr	r3, [r7, #4]
 802b74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802b74c:	687b      	ldr	r3, [r7, #4]
 802b74e:	2b00      	cmp	r3, #0
 802b750:	d048      	beq.n	802b7e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802b752:	2308      	movs	r3, #8
 802b754:	425b      	negs	r3, r3
 802b756:	697a      	ldr	r2, [r7, #20]
 802b758:	4413      	add	r3, r2
 802b75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802b75c:	697b      	ldr	r3, [r7, #20]
 802b75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802b760:	693b      	ldr	r3, [r7, #16]
 802b762:	685a      	ldr	r2, [r3, #4]
 802b764:	4b21      	ldr	r3, [pc, #132]	; (802b7ec <vPortFree+0xac>)
 802b766:	681b      	ldr	r3, [r3, #0]
 802b768:	4013      	ands	r3, r2
 802b76a:	2b00      	cmp	r3, #0
 802b76c:	d10a      	bne.n	802b784 <vPortFree+0x44>
	__asm volatile
 802b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b772:	f383 8811 	msr	BASEPRI, r3
 802b776:	f3bf 8f6f 	isb	sy
 802b77a:	f3bf 8f4f 	dsb	sy
 802b77e:	60fb      	str	r3, [r7, #12]
}
 802b780:	bf00      	nop
 802b782:	e7fe      	b.n	802b782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802b784:	693b      	ldr	r3, [r7, #16]
 802b786:	681b      	ldr	r3, [r3, #0]
 802b788:	2b00      	cmp	r3, #0
 802b78a:	d00a      	beq.n	802b7a2 <vPortFree+0x62>
	__asm volatile
 802b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 802b790:	f383 8811 	msr	BASEPRI, r3
 802b794:	f3bf 8f6f 	isb	sy
 802b798:	f3bf 8f4f 	dsb	sy
 802b79c:	60bb      	str	r3, [r7, #8]
}
 802b79e:	bf00      	nop
 802b7a0:	e7fe      	b.n	802b7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802b7a2:	693b      	ldr	r3, [r7, #16]
 802b7a4:	685a      	ldr	r2, [r3, #4]
 802b7a6:	4b11      	ldr	r3, [pc, #68]	; (802b7ec <vPortFree+0xac>)
 802b7a8:	681b      	ldr	r3, [r3, #0]
 802b7aa:	4013      	ands	r3, r2
 802b7ac:	2b00      	cmp	r3, #0
 802b7ae:	d019      	beq.n	802b7e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802b7b0:	693b      	ldr	r3, [r7, #16]
 802b7b2:	681b      	ldr	r3, [r3, #0]
 802b7b4:	2b00      	cmp	r3, #0
 802b7b6:	d115      	bne.n	802b7e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802b7b8:	693b      	ldr	r3, [r7, #16]
 802b7ba:	685a      	ldr	r2, [r3, #4]
 802b7bc:	4b0b      	ldr	r3, [pc, #44]	; (802b7ec <vPortFree+0xac>)
 802b7be:	681b      	ldr	r3, [r3, #0]
 802b7c0:	43db      	mvns	r3, r3
 802b7c2:	401a      	ands	r2, r3
 802b7c4:	693b      	ldr	r3, [r7, #16]
 802b7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802b7c8:	f7fe fc48 	bl	802a05c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802b7cc:	693b      	ldr	r3, [r7, #16]
 802b7ce:	685a      	ldr	r2, [r3, #4]
 802b7d0:	4b07      	ldr	r3, [pc, #28]	; (802b7f0 <vPortFree+0xb0>)
 802b7d2:	681b      	ldr	r3, [r3, #0]
 802b7d4:	4413      	add	r3, r2
 802b7d6:	4a06      	ldr	r2, [pc, #24]	; (802b7f0 <vPortFree+0xb0>)
 802b7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802b7da:	6938      	ldr	r0, [r7, #16]
 802b7dc:	f000 f86c 	bl	802b8b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 802b7e0:	f7fe fc4a 	bl	802a078 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802b7e4:	bf00      	nop
 802b7e6:	3718      	adds	r7, #24
 802b7e8:	46bd      	mov	sp, r7
 802b7ea:	bd80      	pop	{r7, pc}
 802b7ec:	20004c28 	.word	0x20004c28
 802b7f0:	20004c20 	.word	0x20004c20

0802b7f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802b7f4:	b480      	push	{r7}
 802b7f6:	b085      	sub	sp, #20
 802b7f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802b7fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 802b7fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802b800:	4b27      	ldr	r3, [pc, #156]	; (802b8a0 <prvHeapInit+0xac>)
 802b802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802b804:	68fb      	ldr	r3, [r7, #12]
 802b806:	f003 0307 	and.w	r3, r3, #7
 802b80a:	2b00      	cmp	r3, #0
 802b80c:	d00c      	beq.n	802b828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802b80e:	68fb      	ldr	r3, [r7, #12]
 802b810:	3307      	adds	r3, #7
 802b812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802b814:	68fb      	ldr	r3, [r7, #12]
 802b816:	f023 0307 	bic.w	r3, r3, #7
 802b81a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802b81c:	68ba      	ldr	r2, [r7, #8]
 802b81e:	68fb      	ldr	r3, [r7, #12]
 802b820:	1ad3      	subs	r3, r2, r3
 802b822:	4a1f      	ldr	r2, [pc, #124]	; (802b8a0 <prvHeapInit+0xac>)
 802b824:	4413      	add	r3, r2
 802b826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802b828:	68fb      	ldr	r3, [r7, #12]
 802b82a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802b82c:	4a1d      	ldr	r2, [pc, #116]	; (802b8a4 <prvHeapInit+0xb0>)
 802b82e:	687b      	ldr	r3, [r7, #4]
 802b830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802b832:	4b1c      	ldr	r3, [pc, #112]	; (802b8a4 <prvHeapInit+0xb0>)
 802b834:	2200      	movs	r2, #0
 802b836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802b838:	687b      	ldr	r3, [r7, #4]
 802b83a:	68ba      	ldr	r2, [r7, #8]
 802b83c:	4413      	add	r3, r2
 802b83e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802b840:	2208      	movs	r2, #8
 802b842:	68fb      	ldr	r3, [r7, #12]
 802b844:	1a9b      	subs	r3, r3, r2
 802b846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802b848:	68fb      	ldr	r3, [r7, #12]
 802b84a:	f023 0307 	bic.w	r3, r3, #7
 802b84e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802b850:	68fb      	ldr	r3, [r7, #12]
 802b852:	4a15      	ldr	r2, [pc, #84]	; (802b8a8 <prvHeapInit+0xb4>)
 802b854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802b856:	4b14      	ldr	r3, [pc, #80]	; (802b8a8 <prvHeapInit+0xb4>)
 802b858:	681b      	ldr	r3, [r3, #0]
 802b85a:	2200      	movs	r2, #0
 802b85c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802b85e:	4b12      	ldr	r3, [pc, #72]	; (802b8a8 <prvHeapInit+0xb4>)
 802b860:	681b      	ldr	r3, [r3, #0]
 802b862:	2200      	movs	r2, #0
 802b864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802b866:	687b      	ldr	r3, [r7, #4]
 802b868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802b86a:	683b      	ldr	r3, [r7, #0]
 802b86c:	68fa      	ldr	r2, [r7, #12]
 802b86e:	1ad2      	subs	r2, r2, r3
 802b870:	683b      	ldr	r3, [r7, #0]
 802b872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802b874:	4b0c      	ldr	r3, [pc, #48]	; (802b8a8 <prvHeapInit+0xb4>)
 802b876:	681a      	ldr	r2, [r3, #0]
 802b878:	683b      	ldr	r3, [r7, #0]
 802b87a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802b87c:	683b      	ldr	r3, [r7, #0]
 802b87e:	685b      	ldr	r3, [r3, #4]
 802b880:	4a0a      	ldr	r2, [pc, #40]	; (802b8ac <prvHeapInit+0xb8>)
 802b882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802b884:	683b      	ldr	r3, [r7, #0]
 802b886:	685b      	ldr	r3, [r3, #4]
 802b888:	4a09      	ldr	r2, [pc, #36]	; (802b8b0 <prvHeapInit+0xbc>)
 802b88a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802b88c:	4b09      	ldr	r3, [pc, #36]	; (802b8b4 <prvHeapInit+0xc0>)
 802b88e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802b892:	601a      	str	r2, [r3, #0]
}
 802b894:	bf00      	nop
 802b896:	3714      	adds	r7, #20
 802b898:	46bd      	mov	sp, r7
 802b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b89e:	4770      	bx	lr
 802b8a0:	20001014 	.word	0x20001014
 802b8a4:	20004c14 	.word	0x20004c14
 802b8a8:	20004c1c 	.word	0x20004c1c
 802b8ac:	20004c24 	.word	0x20004c24
 802b8b0:	20004c20 	.word	0x20004c20
 802b8b4:	20004c28 	.word	0x20004c28

0802b8b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802b8b8:	b480      	push	{r7}
 802b8ba:	b085      	sub	sp, #20
 802b8bc:	af00      	add	r7, sp, #0
 802b8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802b8c0:	4b28      	ldr	r3, [pc, #160]	; (802b964 <prvInsertBlockIntoFreeList+0xac>)
 802b8c2:	60fb      	str	r3, [r7, #12]
 802b8c4:	e002      	b.n	802b8cc <prvInsertBlockIntoFreeList+0x14>
 802b8c6:	68fb      	ldr	r3, [r7, #12]
 802b8c8:	681b      	ldr	r3, [r3, #0]
 802b8ca:	60fb      	str	r3, [r7, #12]
 802b8cc:	68fb      	ldr	r3, [r7, #12]
 802b8ce:	681b      	ldr	r3, [r3, #0]
 802b8d0:	687a      	ldr	r2, [r7, #4]
 802b8d2:	429a      	cmp	r2, r3
 802b8d4:	d8f7      	bhi.n	802b8c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802b8d6:	68fb      	ldr	r3, [r7, #12]
 802b8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802b8da:	68fb      	ldr	r3, [r7, #12]
 802b8dc:	685b      	ldr	r3, [r3, #4]
 802b8de:	68ba      	ldr	r2, [r7, #8]
 802b8e0:	4413      	add	r3, r2
 802b8e2:	687a      	ldr	r2, [r7, #4]
 802b8e4:	429a      	cmp	r2, r3
 802b8e6:	d108      	bne.n	802b8fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802b8e8:	68fb      	ldr	r3, [r7, #12]
 802b8ea:	685a      	ldr	r2, [r3, #4]
 802b8ec:	687b      	ldr	r3, [r7, #4]
 802b8ee:	685b      	ldr	r3, [r3, #4]
 802b8f0:	441a      	add	r2, r3
 802b8f2:	68fb      	ldr	r3, [r7, #12]
 802b8f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802b8f6:	68fb      	ldr	r3, [r7, #12]
 802b8f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802b8fa:	687b      	ldr	r3, [r7, #4]
 802b8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802b8fe:	687b      	ldr	r3, [r7, #4]
 802b900:	685b      	ldr	r3, [r3, #4]
 802b902:	68ba      	ldr	r2, [r7, #8]
 802b904:	441a      	add	r2, r3
 802b906:	68fb      	ldr	r3, [r7, #12]
 802b908:	681b      	ldr	r3, [r3, #0]
 802b90a:	429a      	cmp	r2, r3
 802b90c:	d118      	bne.n	802b940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802b90e:	68fb      	ldr	r3, [r7, #12]
 802b910:	681a      	ldr	r2, [r3, #0]
 802b912:	4b15      	ldr	r3, [pc, #84]	; (802b968 <prvInsertBlockIntoFreeList+0xb0>)
 802b914:	681b      	ldr	r3, [r3, #0]
 802b916:	429a      	cmp	r2, r3
 802b918:	d00d      	beq.n	802b936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802b91a:	687b      	ldr	r3, [r7, #4]
 802b91c:	685a      	ldr	r2, [r3, #4]
 802b91e:	68fb      	ldr	r3, [r7, #12]
 802b920:	681b      	ldr	r3, [r3, #0]
 802b922:	685b      	ldr	r3, [r3, #4]
 802b924:	441a      	add	r2, r3
 802b926:	687b      	ldr	r3, [r7, #4]
 802b928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802b92a:	68fb      	ldr	r3, [r7, #12]
 802b92c:	681b      	ldr	r3, [r3, #0]
 802b92e:	681a      	ldr	r2, [r3, #0]
 802b930:	687b      	ldr	r3, [r7, #4]
 802b932:	601a      	str	r2, [r3, #0]
 802b934:	e008      	b.n	802b948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802b936:	4b0c      	ldr	r3, [pc, #48]	; (802b968 <prvInsertBlockIntoFreeList+0xb0>)
 802b938:	681a      	ldr	r2, [r3, #0]
 802b93a:	687b      	ldr	r3, [r7, #4]
 802b93c:	601a      	str	r2, [r3, #0]
 802b93e:	e003      	b.n	802b948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802b940:	68fb      	ldr	r3, [r7, #12]
 802b942:	681a      	ldr	r2, [r3, #0]
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802b948:	68fa      	ldr	r2, [r7, #12]
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	429a      	cmp	r2, r3
 802b94e:	d002      	beq.n	802b956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802b950:	68fb      	ldr	r3, [r7, #12]
 802b952:	687a      	ldr	r2, [r7, #4]
 802b954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802b956:	bf00      	nop
 802b958:	3714      	adds	r7, #20
 802b95a:	46bd      	mov	sp, r7
 802b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b960:	4770      	bx	lr
 802b962:	bf00      	nop
 802b964:	20004c14 	.word	0x20004c14
 802b968:	20004c1c 	.word	0x20004c1c

0802b96c <SX1276SetReset>:
{
    // sx1278->initSPI(sx1278->spi_nmb);
}

void SX1276SetReset( uint8_t state )
{
 802b96c:	b580      	push	{r7, lr}
 802b96e:	b082      	sub	sp, #8
 802b970:	af00      	add	r7, sp, #0
 802b972:	4603      	mov	r3, r0
 802b974:	71fb      	strb	r3, [r7, #7]
    sx1278->setReset(sx1278->spi_nmb, state);
 802b976:	4b06      	ldr	r3, [pc, #24]	; (802b990 <SX1276SetReset+0x24>)
 802b978:	681b      	ldr	r3, [r3, #0]
 802b97a:	685b      	ldr	r3, [r3, #4]
 802b97c:	4a04      	ldr	r2, [pc, #16]	; (802b990 <SX1276SetReset+0x24>)
 802b97e:	6812      	ldr	r2, [r2, #0]
 802b980:	7812      	ldrb	r2, [r2, #0]
 802b982:	79f9      	ldrb	r1, [r7, #7]
 802b984:	4610      	mov	r0, r2
 802b986:	4798      	blx	r3
}
 802b988:	bf00      	nop
 802b98a:	3708      	adds	r7, #8
 802b98c:	46bd      	mov	sp, r7
 802b98e:	bd80      	pop	{r7, pc}
 802b990:	20005028 	.word	0x20005028

0802b994 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 802b994:	b580      	push	{r7, lr}
 802b996:	b082      	sub	sp, #8
 802b998:	af00      	add	r7, sp, #0
 802b99a:	4603      	mov	r3, r0
 802b99c:	460a      	mov	r2, r1
 802b99e:	71fb      	strb	r3, [r7, #7]
 802b9a0:	4613      	mov	r3, r2
 802b9a2:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 802b9a4:	1db9      	adds	r1, r7, #6
 802b9a6:	79fb      	ldrb	r3, [r7, #7]
 802b9a8:	2201      	movs	r2, #1
 802b9aa:	4618      	mov	r0, r3
 802b9ac:	f000 f814 	bl	802b9d8 <SX1276WriteBuffer>
}
 802b9b0:	bf00      	nop
 802b9b2:	3708      	adds	r7, #8
 802b9b4:	46bd      	mov	sp, r7
 802b9b6:	bd80      	pop	{r7, pc}

0802b9b8 <SX1276Read>:

void SX1276Read( uint8_t addr, uint8_t *data )
{
 802b9b8:	b580      	push	{r7, lr}
 802b9ba:	b082      	sub	sp, #8
 802b9bc:	af00      	add	r7, sp, #0
 802b9be:	4603      	mov	r3, r0
 802b9c0:	6039      	str	r1, [r7, #0]
 802b9c2:	71fb      	strb	r3, [r7, #7]
    SX1276ReadBuffer( addr, data, 1 );
 802b9c4:	79fb      	ldrb	r3, [r7, #7]
 802b9c6:	2201      	movs	r2, #1
 802b9c8:	6839      	ldr	r1, [r7, #0]
 802b9ca:	4618      	mov	r0, r3
 802b9cc:	f000 f83c 	bl	802ba48 <SX1276ReadBuffer>
}
 802b9d0:	bf00      	nop
 802b9d2:	3708      	adds	r7, #8
 802b9d4:	46bd      	mov	sp, r7
 802b9d6:	bd80      	pop	{r7, pc}

0802b9d8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 802b9d8:	b580      	push	{r7, lr}
 802b9da:	b082      	sub	sp, #8
 802b9dc:	af00      	add	r7, sp, #0
 802b9de:	4603      	mov	r3, r0
 802b9e0:	6039      	str	r1, [r7, #0]
 802b9e2:	71fb      	strb	r3, [r7, #7]
 802b9e4:	4613      	mov	r3, r2
 802b9e6:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    sx1278->setSPINSS(sx1278->spi_nmb, 0);
 802b9e8:	4b16      	ldr	r3, [pc, #88]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802b9ea:	681b      	ldr	r3, [r3, #0]
 802b9ec:	68db      	ldr	r3, [r3, #12]
 802b9ee:	4a15      	ldr	r2, [pc, #84]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802b9f0:	6812      	ldr	r2, [r2, #0]
 802b9f2:	7812      	ldrb	r2, [r2, #0]
 802b9f4:	2100      	movs	r1, #0
 802b9f6:	4610      	mov	r0, r2
 802b9f8:	4798      	blx	r3

    addr |= 0x80;
 802b9fa:	79fb      	ldrb	r3, [r7, #7]
 802b9fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802ba00:	b2db      	uxtb	r3, r3
 802ba02:	71fb      	strb	r3, [r7, #7]

    sx1278->writeSPIData(sx1278->spi_nmb, &addr, 1);
 802ba04:	4b0f      	ldr	r3, [pc, #60]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802ba06:	681b      	ldr	r3, [r3, #0]
 802ba08:	691b      	ldr	r3, [r3, #16]
 802ba0a:	4a0e      	ldr	r2, [pc, #56]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802ba0c:	6812      	ldr	r2, [r2, #0]
 802ba0e:	7810      	ldrb	r0, [r2, #0]
 802ba10:	1df9      	adds	r1, r7, #7
 802ba12:	2201      	movs	r2, #1
 802ba14:	4798      	blx	r3
    sx1278->writeSPIData(sx1278->spi_nmb, buffer, size);
 802ba16:	4b0b      	ldr	r3, [pc, #44]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802ba18:	681b      	ldr	r3, [r3, #0]
 802ba1a:	691b      	ldr	r3, [r3, #16]
 802ba1c:	4a09      	ldr	r2, [pc, #36]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802ba1e:	6812      	ldr	r2, [r2, #0]
 802ba20:	7810      	ldrb	r0, [r2, #0]
 802ba22:	79ba      	ldrb	r2, [r7, #6]
 802ba24:	b292      	uxth	r2, r2
 802ba26:	6839      	ldr	r1, [r7, #0]
 802ba28:	4798      	blx	r3

    sx1278->setSPINSS(sx1278->spi_nmb, 1);
 802ba2a:	4b06      	ldr	r3, [pc, #24]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802ba2c:	681b      	ldr	r3, [r3, #0]
 802ba2e:	68db      	ldr	r3, [r3, #12]
 802ba30:	4a04      	ldr	r2, [pc, #16]	; (802ba44 <SX1276WriteBuffer+0x6c>)
 802ba32:	6812      	ldr	r2, [r2, #0]
 802ba34:	7812      	ldrb	r2, [r2, #0]
 802ba36:	2101      	movs	r1, #1
 802ba38:	4610      	mov	r0, r2
 802ba3a:	4798      	blx	r3
}
 802ba3c:	bf00      	nop
 802ba3e:	3708      	adds	r7, #8
 802ba40:	46bd      	mov	sp, r7
 802ba42:	bd80      	pop	{r7, pc}
 802ba44:	20005028 	.word	0x20005028

0802ba48 <SX1276ReadBuffer>:


void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 802ba48:	b580      	push	{r7, lr}
 802ba4a:	b082      	sub	sp, #8
 802ba4c:	af00      	add	r7, sp, #0
 802ba4e:	4603      	mov	r3, r0
 802ba50:	6039      	str	r1, [r7, #0]
 802ba52:	71fb      	strb	r3, [r7, #7]
 802ba54:	4613      	mov	r3, r2
 802ba56:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    sx1278->setSPINSS(sx1278->spi_nmb, 0);
 802ba58:	4b16      	ldr	r3, [pc, #88]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba5a:	681b      	ldr	r3, [r3, #0]
 802ba5c:	68db      	ldr	r3, [r3, #12]
 802ba5e:	4a15      	ldr	r2, [pc, #84]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba60:	6812      	ldr	r2, [r2, #0]
 802ba62:	7812      	ldrb	r2, [r2, #0]
 802ba64:	2100      	movs	r1, #0
 802ba66:	4610      	mov	r0, r2
 802ba68:	4798      	blx	r3

    addr &= 0x7F;
 802ba6a:	79fb      	ldrb	r3, [r7, #7]
 802ba6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802ba70:	b2db      	uxtb	r3, r3
 802ba72:	71fb      	strb	r3, [r7, #7]

    sx1278->writeSPIData(sx1278->spi_nmb, &addr, 1);
 802ba74:	4b0f      	ldr	r3, [pc, #60]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba76:	681b      	ldr	r3, [r3, #0]
 802ba78:	691b      	ldr	r3, [r3, #16]
 802ba7a:	4a0e      	ldr	r2, [pc, #56]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba7c:	6812      	ldr	r2, [r2, #0]
 802ba7e:	7810      	ldrb	r0, [r2, #0]
 802ba80:	1df9      	adds	r1, r7, #7
 802ba82:	2201      	movs	r2, #1
 802ba84:	4798      	blx	r3
    sx1278->readSPIData(sx1278->spi_nmb, buffer, size);
 802ba86:	4b0b      	ldr	r3, [pc, #44]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba88:	681b      	ldr	r3, [r3, #0]
 802ba8a:	695b      	ldr	r3, [r3, #20]
 802ba8c:	4a09      	ldr	r2, [pc, #36]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba8e:	6812      	ldr	r2, [r2, #0]
 802ba90:	7810      	ldrb	r0, [r2, #0]
 802ba92:	79ba      	ldrb	r2, [r7, #6]
 802ba94:	b292      	uxth	r2, r2
 802ba96:	6839      	ldr	r1, [r7, #0]
 802ba98:	4798      	blx	r3

    sx1278->setSPINSS(sx1278->spi_nmb, 1);
 802ba9a:	4b06      	ldr	r3, [pc, #24]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802ba9c:	681b      	ldr	r3, [r3, #0]
 802ba9e:	68db      	ldr	r3, [r3, #12]
 802baa0:	4a04      	ldr	r2, [pc, #16]	; (802bab4 <SX1276ReadBuffer+0x6c>)
 802baa2:	6812      	ldr	r2, [r2, #0]
 802baa4:	7812      	ldrb	r2, [r2, #0]
 802baa6:	2101      	movs	r1, #1
 802baa8:	4610      	mov	r0, r2
 802baaa:	4798      	blx	r3
}
 802baac:	bf00      	nop
 802baae:	3708      	adds	r7, #8
 802bab0:	46bd      	mov	sp, r7
 802bab2:	bd80      	pop	{r7, pc}
 802bab4:	20005028 	.word	0x20005028

0802bab8 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 802bab8:	b580      	push	{r7, lr}
 802baba:	b082      	sub	sp, #8
 802babc:	af00      	add	r7, sp, #0
 802babe:	6078      	str	r0, [r7, #4]
 802bac0:	460b      	mov	r3, r1
 802bac2:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 802bac4:	78fb      	ldrb	r3, [r7, #3]
 802bac6:	461a      	mov	r2, r3
 802bac8:	6879      	ldr	r1, [r7, #4]
 802baca:	2000      	movs	r0, #0
 802bacc:	f7ff ff84 	bl	802b9d8 <SX1276WriteBuffer>
}
 802bad0:	bf00      	nop
 802bad2:	3708      	adds	r7, #8
 802bad4:	46bd      	mov	sp, r7
 802bad6:	bd80      	pop	{r7, pc}

0802bad8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 802bad8:	b580      	push	{r7, lr}
 802bada:	b082      	sub	sp, #8
 802badc:	af00      	add	r7, sp, #0
 802bade:	6078      	str	r0, [r7, #4]
 802bae0:	460b      	mov	r3, r1
 802bae2:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 802bae4:	78fb      	ldrb	r3, [r7, #3]
 802bae6:	461a      	mov	r2, r3
 802bae8:	6879      	ldr	r1, [r7, #4]
 802baea:	2000      	movs	r0, #0
 802baec:	f7ff ffac 	bl	802ba48 <SX1276ReadBuffer>
}
 802baf0:	bf00      	nop
 802baf2:	3708      	adds	r7, #8
 802baf4:	46bd      	mov	sp, r7
 802baf6:	bd80      	pop	{r7, pc}

0802baf8 <SX1276ReadDio0>:

uint8_t SX1276ReadDio0( void )
{
 802baf8:	b580      	push	{r7, lr}
 802bafa:	b082      	sub	sp, #8
 802bafc:	af00      	add	r7, sp, #0
    uint8_t ret;

    ret = sx1278->readDIO0(sx1278->spi_nmb);
 802bafe:	4b07      	ldr	r3, [pc, #28]	; (802bb1c <SX1276ReadDio0+0x24>)
 802bb00:	681b      	ldr	r3, [r3, #0]
 802bb02:	689b      	ldr	r3, [r3, #8]
 802bb04:	4a05      	ldr	r2, [pc, #20]	; (802bb1c <SX1276ReadDio0+0x24>)
 802bb06:	6812      	ldr	r2, [r2, #0]
 802bb08:	7812      	ldrb	r2, [r2, #0]
 802bb0a:	4610      	mov	r0, r2
 802bb0c:	4798      	blx	r3
 802bb0e:	4603      	mov	r3, r0
 802bb10:	71fb      	strb	r3, [r7, #7]

    return ret;
 802bb12:	79fb      	ldrb	r3, [r7, #7]
}
 802bb14:	4618      	mov	r0, r3
 802bb16:	3708      	adds	r7, #8
 802bb18:	46bd      	mov	sp, r7
 802bb1a:	bd80      	pop	{r7, pc}
 802bb1c:	20005028 	.word	0x20005028

0802bb20 <SX1276ReadDio2>:
{
    return 0;
}

uint8_t SX1276ReadDio2( void )
{
 802bb20:	b480      	push	{r7}
 802bb22:	af00      	add	r7, sp, #0
    return 0;
 802bb24:	2300      	movs	r3, #0
}
 802bb26:	4618      	mov	r0, r3
 802bb28:	46bd      	mov	sp, r7
 802bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb2e:	4770      	bx	lr

0802bb30 <SX1276ReadDio3>:

uint8_t SX1276ReadDio3( void )
{
 802bb30:	b480      	push	{r7}
 802bb32:	af00      	add	r7, sp, #0
    return 0;
 802bb34:	2300      	movs	r3, #0
}
 802bb36:	4618      	mov	r0, r3
 802bb38:	46bd      	mov	sp, r7
 802bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb3e:	4770      	bx	lr

0802bb40 <SX1276ReadDio4>:

uint8_t SX1276ReadDio4( void )
{
 802bb40:	b480      	push	{r7}
 802bb42:	af00      	add	r7, sp, #0
    return 0;
 802bb44:	2300      	movs	r3, #0
}
 802bb46:	4618      	mov	r0, r3
 802bb48:	46bd      	mov	sp, r7
 802bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb4e:	4770      	bx	lr

0802bb50 <SX1276WriteRxTx>:
{
    return 0;
}

void SX1276WriteRxTx( uint8_t txEnable )
{
 802bb50:	b480      	push	{r7}
 802bb52:	b083      	sub	sp, #12
 802bb54:	af00      	add	r7, sp, #0
 802bb56:	4603      	mov	r3, r0
 802bb58:	71fb      	strb	r3, [r7, #7]

}
 802bb5a:	bf00      	nop
 802bb5c:	370c      	adds	r7, #12
 802bb5e:	46bd      	mov	sp, r7
 802bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb64:	4770      	bx	lr
	...

0802bb68 <SX1276LoRaInit>:

//将全局变量封装在结构体中 可实现多个LoRa的扩展
SX1278Class *sx1278;

void SX1276LoRaInit( void )
{
 802bb68:	b580      	push	{r7, lr}
 802bb6a:	af00      	add	r7, sp, #0
    sx1278->RFLRState = RFLR_STATE_IDLE;
 802bb6c:	4b40      	ldr	r3, [pc, #256]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bb6e:	681b      	ldr	r3, [r3, #0]
 802bb70:	2200      	movs	r2, #0
 802bb72:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

    SX1276LoRaSetDefaults( );
 802bb76:	f000 f87f 	bl	802bc78 <SX1276LoRaSetDefaults>

    SX1276ReadBuffer( REG_LR_OPMODE, sx1278->SX1276Regs + 1, 0x70 - 1 );
 802bb7a:	4b3d      	ldr	r3, [pc, #244]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bb7c:	681b      	ldr	r3, [r3, #0]
 802bb7e:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 802bb82:	3301      	adds	r3, #1
 802bb84:	226f      	movs	r2, #111	; 0x6f
 802bb86:	4619      	mov	r1, r3
 802bb88:	2001      	movs	r0, #1
 802bb8a:	f7ff ff5d 	bl	802ba48 <SX1276ReadBuffer>
    
    sx1278->SX1276LR->RegLna = RFLR_LNA_GAIN_G1;
 802bb8e:	4b38      	ldr	r3, [pc, #224]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bb90:	681b      	ldr	r3, [r3, #0]
 802bb92:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bb96:	2220      	movs	r2, #32
 802bb98:	731a      	strb	r2, [r3, #12]

    SX1276WriteBuffer( REG_LR_OPMODE, sx1278->SX1276Regs + 1, 0x70 - 1 );
 802bb9a:	4b35      	ldr	r3, [pc, #212]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bb9c:	681b      	ldr	r3, [r3, #0]
 802bb9e:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 802bba2:	3301      	adds	r3, #1
 802bba4:	226f      	movs	r2, #111	; 0x6f
 802bba6:	4619      	mov	r1, r3
 802bba8:	2001      	movs	r0, #1
 802bbaa:	f7ff ff15 	bl	802b9d8 <SX1276WriteBuffer>

    // set the RF settings 
    SX1276LoRaSetRFFrequency( sx1278->LoRaSettings.RFFrequency );
 802bbae:	4b30      	ldr	r3, [pc, #192]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bbb0:	681b      	ldr	r3, [r3, #0]
 802bbb2:	699b      	ldr	r3, [r3, #24]
 802bbb4:	4618      	mov	r0, r3
 802bbb6:	f000 fdaf 	bl	802c718 <SX1276LoRaSetRFFrequency>
    SX1276LoRaSetSpreadingFactor( sx1278->LoRaSettings.SpreadingFactor ); // SF6 only operates in implicit header mode.
 802bbba:	4b2d      	ldr	r3, [pc, #180]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bbbc:	681b      	ldr	r3, [r3, #0]
 802bbbe:	7f9b      	ldrb	r3, [r3, #30]
 802bbc0:	4618      	mov	r0, r3
 802bbc2:	f000 fef7 	bl	802c9b4 <SX1276LoRaSetSpreadingFactor>
    SX1276LoRaSetErrorCoding( sx1278->LoRaSettings.ErrorCoding );
 802bbc6:	4b2a      	ldr	r3, [pc, #168]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bbc8:	681b      	ldr	r3, [r3, #0]
 802bbca:	7fdb      	ldrb	r3, [r3, #31]
 802bbcc:	4618      	mov	r0, r3
 802bbce:	f000 ff3b 	bl	802ca48 <SX1276LoRaSetErrorCoding>
    SX1276LoRaSetPacketCrcOn( sx1278->LoRaSettings.CrcOn );
 802bbd2:	4b27      	ldr	r3, [pc, #156]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bbd4:	681b      	ldr	r3, [r3, #0]
 802bbd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 802bbda:	4618      	mov	r0, r3
 802bbdc:	f000 ff6a 	bl	802cab4 <SX1276LoRaSetPacketCrcOn>
    SX1276LoRaSetSignalBandwidth( sx1278->LoRaSettings.SignalBw );
 802bbe0:	4b23      	ldr	r3, [pc, #140]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bbe2:	681b      	ldr	r3, [r3, #0]
 802bbe4:	7f5b      	ldrb	r3, [r3, #29]
 802bbe6:	4618      	mov	r0, r3
 802bbe8:	f000 feae 	bl	802c948 <SX1276LoRaSetSignalBandwidth>
    SX1276LoRaSetPreambleLength(8);
 802bbec:	2008      	movs	r0, #8
 802bbee:	f000 ff97 	bl	802cb20 <SX1276LoRaSetPreambleLength>
    SX1276LoRaSetImplicitHeaderOn( sx1278->LoRaSettings.ImplicitHeaderOn );
 802bbf2:	4b1f      	ldr	r3, [pc, #124]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bbf4:	681b      	ldr	r3, [r3, #0]
 802bbf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802bbfa:	4618      	mov	r0, r3
 802bbfc:	f000 ffc2 	bl	802cb84 <SX1276LoRaSetImplicitHeaderOn>
    SX1276LoRaSetSymbTimeout( 0x3FF );
 802bc00:	f240 30ff 	movw	r0, #1023	; 0x3ff
 802bc04:	f001 f888 	bl	802cd18 <SX1276LoRaSetSymbTimeout>
    SX1276LoRaSetPayloadLength( sx1278->LoRaSettings.PayloadLength );
 802bc08:	4b19      	ldr	r3, [pc, #100]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bc0a:	681b      	ldr	r3, [r3, #0]
 802bc0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802bc10:	4618      	mov	r0, r3
 802bc12:	f000 ffed 	bl	802cbf0 <SX1276LoRaSetPayloadLength>
    SX1276LoRaSetLowDatarateOptimize( false );
 802bc16:	2000      	movs	r0, #0
 802bc18:	f001 f8bc 	bl	802cd94 <SX1276LoRaSetLowDatarateOptimize>

    if( sx1278->LoRaSettings.RFFrequency > 860000000 )
 802bc1c:	4b14      	ldr	r3, [pc, #80]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bc1e:	681b      	ldr	r3, [r3, #0]
 802bc20:	699b      	ldr	r3, [r3, #24]
 802bc22:	4a14      	ldr	r2, [pc, #80]	; (802bc74 <SX1276LoRaInit+0x10c>)
 802bc24:	4293      	cmp	r3, r2
 802bc26:	d911      	bls.n	802bc4c <SX1276LoRaInit+0xe4>
    {
        SX1276LoRaSetPAOutput( RFLR_PACONFIG_PASELECT_RFO );
 802bc28:	2000      	movs	r0, #0
 802bc2a:	f001 f845 	bl	802ccb8 <SX1276LoRaSetPAOutput>
        SX1276LoRaSetPa20dBm( false );
 802bc2e:	2000      	movs	r0, #0
 802bc30:	f001 f800 	bl	802cc34 <SX1276LoRaSetPa20dBm>
        sx1278->LoRaSettings.Power = 14;
 802bc34:	4b0e      	ldr	r3, [pc, #56]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bc36:	681b      	ldr	r3, [r3, #0]
 802bc38:	220e      	movs	r2, #14
 802bc3a:	771a      	strb	r2, [r3, #28]
        SX1276LoRaSetRFPower( sx1278->LoRaSettings.Power );
 802bc3c:	4b0c      	ldr	r3, [pc, #48]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bc3e:	681b      	ldr	r3, [r3, #0]
 802bc40:	f993 301c 	ldrsb.w	r3, [r3, #28]
 802bc44:	4618      	mov	r0, r3
 802bc46:	f000 fdad 	bl	802c7a4 <SX1276LoRaSetRFPower>
 802bc4a:	e00c      	b.n	802bc66 <SX1276LoRaInit+0xfe>
    }else
    {
        SX1276LoRaSetPAOutput( RFLR_PACONFIG_PASELECT_PABOOST );
 802bc4c:	2080      	movs	r0, #128	; 0x80
 802bc4e:	f001 f833 	bl	802ccb8 <SX1276LoRaSetPAOutput>
        SX1276LoRaSetPa20dBm( true );
 802bc52:	2001      	movs	r0, #1
 802bc54:	f000 ffee 	bl	802cc34 <SX1276LoRaSetPa20dBm>
        SX1276LoRaSetRFPower( sx1278->LoRaSettings.Power );
 802bc58:	4b05      	ldr	r3, [pc, #20]	; (802bc70 <SX1276LoRaInit+0x108>)
 802bc5a:	681b      	ldr	r3, [r3, #0]
 802bc5c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 802bc60:	4618      	mov	r0, r3
 802bc62:	f000 fd9f 	bl	802c7a4 <SX1276LoRaSetRFPower>
    }

    SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER );
 802bc66:	2005      	movs	r0, #5
 802bc68:	f000 f816 	bl	802bc98 <SX1276LoRaSetOpMode>
}
 802bc6c:	bf00      	nop
 802bc6e:	bd80      	pop	{r7, pc}
 802bc70:	20005028 	.word	0x20005028
 802bc74:	33428f00 	.word	0x33428f00

0802bc78 <SX1276LoRaSetDefaults>:

void SX1276LoRaSetDefaults( void )
{
 802bc78:	b580      	push	{r7, lr}
 802bc7a:	af00      	add	r7, sp, #0
    // REMARK: See SX1276 datasheet for modified default values.

    SX1276Read( REG_LR_VERSION, &sx1278->SX1276LR->RegVersion );
 802bc7c:	4b05      	ldr	r3, [pc, #20]	; (802bc94 <SX1276LoRaSetDefaults+0x1c>)
 802bc7e:	681b      	ldr	r3, [r3, #0]
 802bc80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bc84:	333f      	adds	r3, #63	; 0x3f
 802bc86:	4619      	mov	r1, r3
 802bc88:	2042      	movs	r0, #66	; 0x42
 802bc8a:	f7ff fe95 	bl	802b9b8 <SX1276Read>
}
 802bc8e:	bf00      	nop
 802bc90:	bd80      	pop	{r7, pc}
 802bc92:	bf00      	nop
 802bc94:	20005028 	.word	0x20005028

0802bc98 <SX1276LoRaSetOpMode>:
    startTick = GET_TICK_COUNT( );
    while( ( GET_TICK_COUNT( ) - startTick ) < TICK_RATE_MS( 6 ) );    
}

void SX1276LoRaSetOpMode( uint8_t opMode )
{
 802bc98:	b580      	push	{r7, lr}
 802bc9a:	b084      	sub	sp, #16
 802bc9c:	af00      	add	r7, sp, #0
 802bc9e:	4603      	mov	r3, r0
 802bca0:	71fb      	strb	r3, [r7, #7]
    bool antennaSwitchTxOn = false;
 802bca2:	2300      	movs	r3, #0
 802bca4:	73fb      	strb	r3, [r7, #15]

    sx1278->opModePrev = sx1278->SX1276LR->RegOpMode & ~RFLR_OPMODE_MASK;
 802bca6:	4b25      	ldr	r3, [pc, #148]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bca8:	681b      	ldr	r3, [r3, #0]
 802bcaa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bcae:	785a      	ldrb	r2, [r3, #1]
 802bcb0:	4b22      	ldr	r3, [pc, #136]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bcb2:	681b      	ldr	r3, [r3, #0]
 802bcb4:	f002 0207 	and.w	r2, r2, #7
 802bcb8:	b2d2      	uxtb	r2, r2
 802bcba:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0

    if( opMode != sx1278->opModePrev )
 802bcbe:	4b1f      	ldr	r3, [pc, #124]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bcc0:	681b      	ldr	r3, [r3, #0]
 802bcc2:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 802bcc6:	79fa      	ldrb	r2, [r7, #7]
 802bcc8:	429a      	cmp	r2, r3
 802bcca:	d033      	beq.n	802bd34 <SX1276LoRaSetOpMode+0x9c>
    {
        if( opMode == RFLR_OPMODE_TRANSMITTER )
 802bccc:	79fb      	ldrb	r3, [r7, #7]
 802bcce:	2b03      	cmp	r3, #3
 802bcd0:	d102      	bne.n	802bcd8 <SX1276LoRaSetOpMode+0x40>
        {
            antennaSwitchTxOn = true;
 802bcd2:	2301      	movs	r3, #1
 802bcd4:	73fb      	strb	r3, [r7, #15]
 802bcd6:	e001      	b.n	802bcdc <SX1276LoRaSetOpMode+0x44>
        }
        else
        {
            antennaSwitchTxOn = false;
 802bcd8:	2300      	movs	r3, #0
 802bcda:	73fb      	strb	r3, [r7, #15]
        }
        if( antennaSwitchTxOn != sx1278->antennaSwitchTxOnPrev )
 802bcdc:	4b17      	ldr	r3, [pc, #92]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bcde:	681b      	ldr	r3, [r3, #0]
 802bce0:	f893 31d1 	ldrb.w	r3, [r3, #465]	; 0x1d1
 802bce4:	7bfa      	ldrb	r2, [r7, #15]
 802bce6:	429a      	cmp	r2, r3
 802bce8:	d008      	beq.n	802bcfc <SX1276LoRaSetOpMode+0x64>
        {
            sx1278->antennaSwitchTxOnPrev = antennaSwitchTxOn;
 802bcea:	4b14      	ldr	r3, [pc, #80]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bcec:	681b      	ldr	r3, [r3, #0]
 802bcee:	7bfa      	ldrb	r2, [r7, #15]
 802bcf0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
            RXTX( antennaSwitchTxOn ); // Antenna switch control
 802bcf4:	7bfb      	ldrb	r3, [r7, #15]
 802bcf6:	4618      	mov	r0, r3
 802bcf8:	f7ff ff2a 	bl	802bb50 <SX1276WriteRxTx>
        }
        sx1278->SX1276LR->RegOpMode = ( sx1278->SX1276LR->RegOpMode & RFLR_OPMODE_MASK ) | opMode;
 802bcfc:	4b0f      	ldr	r3, [pc, #60]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bcfe:	681b      	ldr	r3, [r3, #0]
 802bd00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bd04:	785b      	ldrb	r3, [r3, #1]
 802bd06:	b25b      	sxtb	r3, r3
 802bd08:	f023 0307 	bic.w	r3, r3, #7
 802bd0c:	b25a      	sxtb	r2, r3
 802bd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802bd12:	4313      	orrs	r3, r2
 802bd14:	b25a      	sxtb	r2, r3
 802bd16:	4b09      	ldr	r3, [pc, #36]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bd18:	681b      	ldr	r3, [r3, #0]
 802bd1a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bd1e:	b2d2      	uxtb	r2, r2
 802bd20:	705a      	strb	r2, [r3, #1]

        SX1276Write( REG_LR_OPMODE, sx1278->SX1276LR->RegOpMode );        
 802bd22:	4b06      	ldr	r3, [pc, #24]	; (802bd3c <SX1276LoRaSetOpMode+0xa4>)
 802bd24:	681b      	ldr	r3, [r3, #0]
 802bd26:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bd2a:	785b      	ldrb	r3, [r3, #1]
 802bd2c:	4619      	mov	r1, r3
 802bd2e:	2001      	movs	r0, #1
 802bd30:	f7ff fe30 	bl	802b994 <SX1276Write>
    }
}
 802bd34:	bf00      	nop
 802bd36:	3710      	adds	r7, #16
 802bd38:	46bd      	mov	sp, r7
 802bd3a:	bd80      	pop	{r7, pc}
 802bd3c:	20005028 	.word	0x20005028

0802bd40 <SX1276LoRaReadRxGain>:
    
    return sx1278->SX1276LR->RegOpMode & ~RFLR_OPMODE_MASK;
}

uint8_t SX1276LoRaReadRxGain( void )
{
 802bd40:	b580      	push	{r7, lr}
 802bd42:	af00      	add	r7, sp, #0
    SX1276Read( REG_LR_LNA, &sx1278->SX1276LR->RegLna );
 802bd44:	4b08      	ldr	r3, [pc, #32]	; (802bd68 <SX1276LoRaReadRxGain+0x28>)
 802bd46:	681b      	ldr	r3, [r3, #0]
 802bd48:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bd4c:	330c      	adds	r3, #12
 802bd4e:	4619      	mov	r1, r3
 802bd50:	200c      	movs	r0, #12
 802bd52:	f7ff fe31 	bl	802b9b8 <SX1276Read>
    return( sx1278->SX1276LR->RegLna >> 5 ) & 0x07;
 802bd56:	4b04      	ldr	r3, [pc, #16]	; (802bd68 <SX1276LoRaReadRxGain+0x28>)
 802bd58:	681b      	ldr	r3, [r3, #0]
 802bd5a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bd5e:	7b1b      	ldrb	r3, [r3, #12]
 802bd60:	095b      	lsrs	r3, r3, #5
 802bd62:	b2db      	uxtb	r3, r3
}
 802bd64:	4618      	mov	r0, r3
 802bd66:	bd80      	pop	{r7, pc}
 802bd68:	20005028 	.word	0x20005028

0802bd6c <SX1276LoRaGetRxPacket>:
{
    SX1276LoRaSetRFState( RFLR_STATE_RX_INIT );
}

void SX1276LoRaGetRxPacket( char *buffer, uint16_t *size )
{
 802bd6c:	b580      	push	{r7, lr}
 802bd6e:	b082      	sub	sp, #8
 802bd70:	af00      	add	r7, sp, #0
 802bd72:	6078      	str	r0, [r7, #4]
 802bd74:	6039      	str	r1, [r7, #0]
    *size = sx1278->RxPacketSize;
 802bd76:	4b11      	ldr	r3, [pc, #68]	; (802bdbc <SX1276LoRaGetRxPacket+0x50>)
 802bd78:	681b      	ldr	r3, [r3, #0]
 802bd7a:	f8b3 2136 	ldrh.w	r2, [r3, #310]	; 0x136
 802bd7e:	683b      	ldr	r3, [r7, #0]
 802bd80:	801a      	strh	r2, [r3, #0]


    if(sx1278->RxPacketSize>=256)
 802bd82:	4b0e      	ldr	r3, [pc, #56]	; (802bdbc <SX1276LoRaGetRxPacket+0x50>)
 802bd84:	681b      	ldr	r3, [r3, #0]
 802bd86:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 802bd8a:	2bff      	cmp	r3, #255	; 0xff
 802bd8c:	d811      	bhi.n	802bdb2 <SX1276LoRaGetRxPacket+0x46>
    {
    	return ;
    }

    memcpy(buffer, sx1278->RFBuffer, sx1278->RxPacketSize);
 802bd8e:	4b0b      	ldr	r3, [pc, #44]	; (802bdbc <SX1276LoRaGetRxPacket+0x50>)
 802bd90:	681b      	ldr	r3, [r3, #0]
 802bd92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 802bd96:	4b09      	ldr	r3, [pc, #36]	; (802bdbc <SX1276LoRaGetRxPacket+0x50>)
 802bd98:	681b      	ldr	r3, [r3, #0]
 802bd9a:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 802bd9e:	461a      	mov	r2, r3
 802bda0:	6878      	ldr	r0, [r7, #4]
 802bda2:	f001 f95d 	bl	802d060 <memcpy>

    sx1278->RxPacketSize = 0;
 802bda6:	4b05      	ldr	r3, [pc, #20]	; (802bdbc <SX1276LoRaGetRxPacket+0x50>)
 802bda8:	681b      	ldr	r3, [r3, #0]
 802bdaa:	2200      	movs	r2, #0
 802bdac:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
 802bdb0:	e000      	b.n	802bdb4 <SX1276LoRaGetRxPacket+0x48>
    	return ;
 802bdb2:	bf00      	nop
}
 802bdb4:	3708      	adds	r7, #8
 802bdb6:	46bd      	mov	sp, r7
 802bdb8:	bd80      	pop	{r7, pc}
 802bdba:	bf00      	nop
 802bdbc:	20005028 	.word	0x20005028

0802bdc0 <SX1276LoRaSetTxPacket>:

void SX1276LoRaSetTxPacket(char *buffer, uint16_t size )
{
 802bdc0:	b580      	push	{r7, lr}
 802bdc2:	b082      	sub	sp, #8
 802bdc4:	af00      	add	r7, sp, #0
 802bdc6:	6078      	str	r0, [r7, #4]
 802bdc8:	460b      	mov	r3, r1
 802bdca:	807b      	strh	r3, [r7, #2]
    sx1278->TxPacketSize = size;
 802bdcc:	4b0a      	ldr	r3, [pc, #40]	; (802bdf8 <SX1276LoRaSetTxPacket+0x38>)
 802bdce:	681b      	ldr	r3, [r3, #0]
 802bdd0:	887a      	ldrh	r2, [r7, #2]
 802bdd2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154

    memcpy(sx1278->RFBuffer, buffer, size);
 802bdd6:	4b08      	ldr	r3, [pc, #32]	; (802bdf8 <SX1276LoRaSetTxPacket+0x38>)
 802bdd8:	681b      	ldr	r3, [r3, #0]
 802bdda:	3334      	adds	r3, #52	; 0x34
 802bddc:	887a      	ldrh	r2, [r7, #2]
 802bdde:	6879      	ldr	r1, [r7, #4]
 802bde0:	4618      	mov	r0, r3
 802bde2:	f001 f93d 	bl	802d060 <memcpy>
    
    sx1278->RFLRState = RFLR_STATE_TX_INIT;
 802bde6:	4b04      	ldr	r3, [pc, #16]	; (802bdf8 <SX1276LoRaSetTxPacket+0x38>)
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	2205      	movs	r2, #5
 802bdec:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 802bdf0:	bf00      	nop
 802bdf2:	3708      	adds	r7, #8
 802bdf4:	46bd      	mov	sp, r7
 802bdf6:	bd80      	pop	{r7, pc}
 802bdf8:	20005028 	.word	0x20005028

0802bdfc <SX1276LoRaSetRFState>:
{
    return sx1278->RFLRState;
}

void SX1276LoRaSetRFState( uint8_t state )
{
 802bdfc:	b480      	push	{r7}
 802bdfe:	b083      	sub	sp, #12
 802be00:	af00      	add	r7, sp, #0
 802be02:	4603      	mov	r3, r0
 802be04:	71fb      	strb	r3, [r7, #7]
    sx1278->RFLRState = state;
 802be06:	4b05      	ldr	r3, [pc, #20]	; (802be1c <SX1276LoRaSetRFState+0x20>)
 802be08:	681b      	ldr	r3, [r3, #0]
 802be0a:	79fa      	ldrb	r2, [r7, #7]
 802be0c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 802be10:	bf00      	nop
 802be12:	370c      	adds	r7, #12
 802be14:	46bd      	mov	sp, r7
 802be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be1a:	4770      	bx	lr
 802be1c:	20005028 	.word	0x20005028

0802be20 <SX1276LoRaProcess>:
 * \retval rfState Current RF state [RF_IDLE, RF_BUSY, 
 *                                   RF_RX_DONE, RF_RX_TIMEOUT,
 *                                   RF_TX_DONE, RF_TX_TIMEOUT]
 */
uint32_t SX1276LoRaProcess(void)
{
 802be20:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 802be24:	b083      	sub	sp, #12
 802be26:	af00      	add	r7, sp, #0
    uint32_t result = RF_BUSY;
 802be28:	2301      	movs	r3, #1
 802be2a:	607b      	str	r3, [r7, #4]
    
    switch( sx1278->RFLRState )
 802be2c:	4bae      	ldr	r3, [pc, #696]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802be2e:	681b      	ldr	r3, [r3, #0]
 802be30:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 802be34:	2b0a      	cmp	r3, #10
 802be36:	f200 845d 	bhi.w	802c6f4 <SX1276LoRaProcess+0x8d4>
 802be3a:	a201      	add	r2, pc, #4	; (adr r2, 802be40 <SX1276LoRaProcess+0x20>)
 802be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be40:	0802c6f5 	.word	0x0802c6f5
 802be44:	0802be6d 	.word	0x0802be6d
 802be48:	0802bf9f 	.word	0x0802bf9f
 802be4c:	0802c099 	.word	0x0802c099
 802be50:	0802c45b 	.word	0x0802c45b
 802be54:	0802c46b 	.word	0x0802c46b
 802be58:	0802c5c3 	.word	0x0802c5c3
 802be5c:	0802c62d 	.word	0x0802c62d
 802be60:	0802c6f5 	.word	0x0802c6f5
 802be64:	0802c643 	.word	0x0802c643
 802be68:	0802c6b1 	.word	0x0802c6b1
    {
    case RFLR_STATE_IDLE:
        break;
    case RFLR_STATE_RX_INIT:
        
        SX1276LoRaSetOpMode( RFLR_OPMODE_STANDBY );
 802be6c:	2001      	movs	r0, #1
 802be6e:	f7ff ff13 	bl	802bc98 <SX1276LoRaSetOpMode>

        sx1278->SX1276LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
 802be72:	4b9d      	ldr	r3, [pc, #628]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802be74:	681b      	ldr	r3, [r3, #0]
 802be76:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802be7a:	229d      	movs	r2, #157	; 0x9d
 802be7c:	745a      	strb	r2, [r3, #17]
                                    RFLR_IRQFLAGS_VALIDHEADER |
                                    RFLR_IRQFLAGS_TXDONE |
                                    RFLR_IRQFLAGS_CADDONE |
                                    //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                    RFLR_IRQFLAGS_CADDETECTED;
        SX1276Write( REG_LR_IRQFLAGSMASK, sx1278->SX1276LR->RegIrqFlagsMask );
 802be7e:	4b9a      	ldr	r3, [pc, #616]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802be80:	681b      	ldr	r3, [r3, #0]
 802be82:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802be86:	7c5b      	ldrb	r3, [r3, #17]
 802be88:	4619      	mov	r1, r3
 802be8a:	2011      	movs	r0, #17
 802be8c:	f7ff fd82 	bl	802b994 <SX1276Write>

        if( sx1278->LoRaSettings.FreqHopOn == true )
 802be90:	4b95      	ldr	r3, [pc, #596]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802be92:	681b      	ldr	r3, [r3, #0]
 802be94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802be98:	2b00      	cmp	r3, #0
 802be9a:	d020      	beq.n	802bede <SX1276LoRaProcess+0xbe>
        {
            sx1278->SX1276LR->RegHopPeriod = sx1278->LoRaSettings.HopPeriod;
 802be9c:	4b92      	ldr	r3, [pc, #584]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802be9e:	681a      	ldr	r2, [r3, #0]
 802bea0:	4b91      	ldr	r3, [pc, #580]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bea2:	681b      	ldr	r3, [r3, #0]
 802bea4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bea8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 802beac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            SX1276Read( REG_LR_HOPCHANNEL, &sx1278->SX1276LR->RegHopChannel );
 802beb0:	4b8d      	ldr	r3, [pc, #564]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802beb2:	681b      	ldr	r3, [r3, #0]
 802beb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802beb8:	331c      	adds	r3, #28
 802beba:	4619      	mov	r1, r3
 802bebc:	201c      	movs	r0, #28
 802bebe:	f7ff fd7b 	bl	802b9b8 <SX1276Read>
            SX1276LoRaSetRFFrequency( HoppingFrequencies[sx1278->SX1276LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
 802bec2:	4b89      	ldr	r3, [pc, #548]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bec4:	681b      	ldr	r3, [r3, #0]
 802bec6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802beca:	7f1b      	ldrb	r3, [r3, #28]
 802becc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802bed0:	4a86      	ldr	r2, [pc, #536]	; (802c0ec <SX1276LoRaProcess+0x2cc>)
 802bed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802bed6:	4618      	mov	r0, r3
 802bed8:	f000 fc1e 	bl	802c718 <SX1276LoRaSetRFFrequency>
 802bedc:	e006      	b.n	802beec <SX1276LoRaProcess+0xcc>
        }
        else
        {
            sx1278->SX1276LR->RegHopPeriod = 255;
 802bede:	4b82      	ldr	r3, [pc, #520]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bee0:	681b      	ldr	r3, [r3, #0]
 802bee2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bee6:	22ff      	movs	r2, #255	; 0xff
 802bee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        
        SX1276Write( REG_LR_HOPPERIOD, sx1278->SX1276LR->RegHopPeriod );
 802beec:	4b7e      	ldr	r3, [pc, #504]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802beee:	681b      	ldr	r3, [r3, #0]
 802bef0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802bef8:	4619      	mov	r1, r3
 802befa:	2024      	movs	r0, #36	; 0x24
 802befc:	f7ff fd4a 	bl	802b994 <SX1276Write>
                
                                    // RxDone                    RxTimeout                   FhssChangeChannel           CadDone
        sx1278->SX1276LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_00;
 802bf00:	4b79      	ldr	r3, [pc, #484]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf02:	681b      	ldr	r3, [r3, #0]
 802bf04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bf08:	2200      	movs	r2, #0
 802bf0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                                    // CadDetected               ModeReady
        sx1278->SX1276LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_00 | RFLR_DIOMAPPING2_DIO5_00;
 802bf0e:	4b76      	ldr	r3, [pc, #472]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf10:	681b      	ldr	r3, [r3, #0]
 802bf12:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bf16:	2200      	movs	r2, #0
 802bf18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        SX1276WriteBuffer( REG_LR_DIOMAPPING1, &sx1278->SX1276LR->RegDioMapping1, 2 );
 802bf1c:	4b72      	ldr	r3, [pc, #456]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf1e:	681b      	ldr	r3, [r3, #0]
 802bf20:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bf24:	333d      	adds	r3, #61	; 0x3d
 802bf26:	2202      	movs	r2, #2
 802bf28:	4619      	mov	r1, r3
 802bf2a:	2040      	movs	r0, #64	; 0x40
 802bf2c:	f7ff fd54 	bl	802b9d8 <SX1276WriteBuffer>
    
        if( sx1278->LoRaSettings.RxSingleOn == true ) // Rx single mode
 802bf30:	4b6d      	ldr	r3, [pc, #436]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf32:	681b      	ldr	r3, [r3, #0]
 802bf34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802bf38:	2b00      	cmp	r3, #0
 802bf3a:	d003      	beq.n	802bf44 <SX1276LoRaProcess+0x124>
        {
            SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 802bf3c:	2006      	movs	r0, #6
 802bf3e:	f7ff feab 	bl	802bc98 <SX1276LoRaSetOpMode>
 802bf42:	e010      	b.n	802bf66 <SX1276LoRaProcess+0x146>
        }else // Rx continuous mode
        {
            sx1278->SX1276LR->RegFifoAddrPtr = sx1278->SX1276LR->RegFifoRxBaseAddr;
 802bf44:	4b68      	ldr	r3, [pc, #416]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf46:	681b      	ldr	r3, [r3, #0]
 802bf48:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 802bf4c:	4b66      	ldr	r3, [pc, #408]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf4e:	681b      	ldr	r3, [r3, #0]
 802bf50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bf54:	7bd2      	ldrb	r2, [r2, #15]
 802bf56:	735a      	strb	r2, [r3, #13]
            SX1276Write( REG_LR_FIFOADDRPTR, 0);
 802bf58:	2100      	movs	r1, #0
 802bf5a:	200d      	movs	r0, #13
 802bf5c:	f7ff fd1a 	bl	802b994 <SX1276Write>
            
            SX1276LoRaSetOpMode( RFLR_OPMODE_RECEIVER );
 802bf60:	2005      	movs	r0, #5
 802bf62:	f7ff fe99 	bl	802bc98 <SX1276LoRaSetOpMode>
        }
        
        memset( sx1278->RFBuffer, 0, ( size_t )RF_BUFFER_SIZE );
 802bf66:	4b60      	ldr	r3, [pc, #384]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf68:	681b      	ldr	r3, [r3, #0]
 802bf6a:	3334      	adds	r3, #52	; 0x34
 802bf6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bf70:	2100      	movs	r1, #0
 802bf72:	4618      	mov	r0, r3
 802bf74:	f001 f882 	bl	802d07c <memset>

        sx1278->PacketTimeout = sx1278->LoRaSettings.RxPacketTimeout;
 802bf78:	4b5b      	ldr	r3, [pc, #364]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf7a:	681a      	ldr	r2, [r3, #0]
 802bf7c:	4b5a      	ldr	r3, [pc, #360]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf7e:	681b      	ldr	r3, [r3, #0]
 802bf80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802bf82:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        sx1278->RxTimeoutTimer = GET_TICK_COUNT( );
 802bf86:	4b58      	ldr	r3, [pc, #352]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf88:	681b      	ldr	r3, [r3, #0]
 802bf8a:	4a59      	ldr	r2, [pc, #356]	; (802c0f0 <SX1276LoRaProcess+0x2d0>)
 802bf8c:	6812      	ldr	r2, [r2, #0]
 802bf8e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        sx1278->RFLRState = RFLR_STATE_RX_RUNNING;
 802bf92:	4b55      	ldr	r3, [pc, #340]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bf94:	681b      	ldr	r3, [r3, #0]
 802bf96:	2202      	movs	r2, #2
 802bf98:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

//        SX1276ReadBuffer( REG_LR_OPMODE, sx1278->SX1276Regs + 1, 0x70 - 1 ); //debug
        break;
 802bf9c:	e3b1      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
    case RFLR_STATE_RX_RUNNING:
        
        if( DIO0 != 0 ) // RxDone
 802bf9e:	f7ff fdab 	bl	802baf8 <SX1276ReadDio0>
 802bfa2:	4603      	mov	r3, r0
 802bfa4:	2b00      	cmp	r3, #0
 802bfa6:	d02a      	beq.n	802bffe <SX1276LoRaProcess+0x1de>
        {
            sx1278->RxTimeoutTimer = GET_TICK_COUNT( );
 802bfa8:	4b4f      	ldr	r3, [pc, #316]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bfaa:	681b      	ldr	r3, [r3, #0]
 802bfac:	4a50      	ldr	r2, [pc, #320]	; (802c0f0 <SX1276LoRaProcess+0x2d0>)
 802bfae:	6812      	ldr	r2, [r2, #0]
 802bfb0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            if( sx1278->LoRaSettings.FreqHopOn == true )
 802bfb4:	4b4c      	ldr	r3, [pc, #304]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bfb6:	681b      	ldr	r3, [r3, #0]
 802bfb8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802bfbc:	2b00      	cmp	r3, #0
 802bfbe:	d015      	beq.n	802bfec <SX1276LoRaProcess+0x1cc>
            {
                SX1276Read( REG_LR_HOPCHANNEL, &sx1278->SX1276LR->RegHopChannel );
 802bfc0:	4b49      	ldr	r3, [pc, #292]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bfc2:	681b      	ldr	r3, [r3, #0]
 802bfc4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bfc8:	331c      	adds	r3, #28
 802bfca:	4619      	mov	r1, r3
 802bfcc:	201c      	movs	r0, #28
 802bfce:	f7ff fcf3 	bl	802b9b8 <SX1276Read>
                SX1276LoRaSetRFFrequency( HoppingFrequencies[sx1278->SX1276LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
 802bfd2:	4b45      	ldr	r3, [pc, #276]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bfd4:	681b      	ldr	r3, [r3, #0]
 802bfd6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802bfda:	7f1b      	ldrb	r3, [r3, #28]
 802bfdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802bfe0:	4a42      	ldr	r2, [pc, #264]	; (802c0ec <SX1276LoRaProcess+0x2cc>)
 802bfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802bfe6:	4618      	mov	r0, r3
 802bfe8:	f000 fb96 	bl	802c718 <SX1276LoRaSetRFFrequency>
            }
            // Clear Irq
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE  );
 802bfec:	2140      	movs	r1, #64	; 0x40
 802bfee:	2012      	movs	r0, #18
 802bff0:	f7ff fcd0 	bl	802b994 <SX1276Write>
            sx1278->RFLRState = RFLR_STATE_RX_DONE;
 802bff4:	4b3c      	ldr	r3, [pc, #240]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802bff6:	681b      	ldr	r3, [r3, #0]
 802bff8:	2203      	movs	r2, #3
 802bffa:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        }
        if( DIO2 != 0 ) // FHSS Changed Channel
 802bffe:	f7ff fd8f 	bl	802bb20 <SX1276ReadDio2>
 802c002:	4603      	mov	r3, r0
 802c004:	2b00      	cmp	r3, #0
 802c006:	d02c      	beq.n	802c062 <SX1276LoRaProcess+0x242>
        {
            sx1278->RxTimeoutTimer = GET_TICK_COUNT( );
 802c008:	4b37      	ldr	r3, [pc, #220]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c00a:	681b      	ldr	r3, [r3, #0]
 802c00c:	4a38      	ldr	r2, [pc, #224]	; (802c0f0 <SX1276LoRaProcess+0x2d0>)
 802c00e:	6812      	ldr	r2, [r2, #0]
 802c010:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
            if( sx1278->LoRaSettings.FreqHopOn == true )
 802c014:	4b34      	ldr	r3, [pc, #208]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c016:	681b      	ldr	r3, [r3, #0]
 802c018:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802c01c:	2b00      	cmp	r3, #0
 802c01e:	d015      	beq.n	802c04c <SX1276LoRaProcess+0x22c>
            {
                SX1276Read( REG_LR_HOPCHANNEL, &sx1278->SX1276LR->RegHopChannel );
 802c020:	4b31      	ldr	r3, [pc, #196]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c022:	681b      	ldr	r3, [r3, #0]
 802c024:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c028:	331c      	adds	r3, #28
 802c02a:	4619      	mov	r1, r3
 802c02c:	201c      	movs	r0, #28
 802c02e:	f7ff fcc3 	bl	802b9b8 <SX1276Read>
                SX1276LoRaSetRFFrequency( HoppingFrequencies[sx1278->SX1276LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
 802c032:	4b2d      	ldr	r3, [pc, #180]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c034:	681b      	ldr	r3, [r3, #0]
 802c036:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c03a:	7f1b      	ldrb	r3, [r3, #28]
 802c03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c040:	4a2a      	ldr	r2, [pc, #168]	; (802c0ec <SX1276LoRaProcess+0x2cc>)
 802c042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802c046:	4618      	mov	r0, r3
 802c048:	f000 fb66 	bl	802c718 <SX1276LoRaSetRFFrequency>
            }
            // Clear Irq
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 802c04c:	2102      	movs	r1, #2
 802c04e:	2012      	movs	r0, #18
 802c050:	f7ff fca0 	bl	802b994 <SX1276Write>
            // Debug
            sx1278->RxGain = SX1276LoRaReadRxGain( );
 802c054:	4b24      	ldr	r3, [pc, #144]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c056:	681c      	ldr	r4, [r3, #0]
 802c058:	f7ff fe72 	bl	802bd40 <SX1276LoRaReadRxGain>
 802c05c:	4603      	mov	r3, r0
 802c05e:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
        }

        if( sx1278->LoRaSettings.RxSingleOn == true ) // Rx single mode
 802c062:	4b21      	ldr	r3, [pc, #132]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c064:	681b      	ldr	r3, [r3, #0]
 802c066:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c06a:	2b00      	cmp	r3, #0
 802c06c:	f000 8344 	beq.w	802c6f8 <SX1276LoRaProcess+0x8d8>
        {
            if( ( GET_TICK_COUNT( ) - sx1278->RxTimeoutTimer ) > sx1278->PacketTimeout )
 802c070:	4b1f      	ldr	r3, [pc, #124]	; (802c0f0 <SX1276LoRaProcess+0x2d0>)
 802c072:	681a      	ldr	r2, [r3, #0]
 802c074:	4b1c      	ldr	r3, [pc, #112]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c076:	681b      	ldr	r3, [r3, #0]
 802c078:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 802c07c:	1ad2      	subs	r2, r2, r3
 802c07e:	4b1a      	ldr	r3, [pc, #104]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c080:	681b      	ldr	r3, [r3, #0]
 802c082:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 802c086:	429a      	cmp	r2, r3
 802c088:	f240 8336 	bls.w	802c6f8 <SX1276LoRaProcess+0x8d8>
            {
                sx1278->RFLRState = RFLR_STATE_RX_TIMEOUT;
 802c08c:	4b16      	ldr	r3, [pc, #88]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c08e:	681b      	ldr	r3, [r3, #0]
 802c090:	2204      	movs	r2, #4
 802c092:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
            }
        }
        break;
 802c096:	e32f      	b.n	802c6f8 <SX1276LoRaProcess+0x8d8>
    case RFLR_STATE_RX_DONE:
        SX1276Read( REG_LR_IRQFLAGS, &sx1278->SX1276LR->RegIrqFlags );
 802c098:	4b13      	ldr	r3, [pc, #76]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c09a:	681b      	ldr	r3, [r3, #0]
 802c09c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c0a0:	3312      	adds	r3, #18
 802c0a2:	4619      	mov	r1, r3
 802c0a4:	2012      	movs	r0, #18
 802c0a6:	f7ff fc87 	bl	802b9b8 <SX1276Read>
        if( ( sx1278->SX1276LR->RegIrqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 802c0aa:	4b0f      	ldr	r3, [pc, #60]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c0ac:	681b      	ldr	r3, [r3, #0]
 802c0ae:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c0b2:	7c9b      	ldrb	r3, [r3, #18]
 802c0b4:	f003 0320 	and.w	r3, r3, #32
 802c0b8:	2b00      	cmp	r3, #0
 802c0ba:	d01b      	beq.n	802c0f4 <SX1276LoRaProcess+0x2d4>
        {
            // Clear Irq
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR  );
 802c0bc:	2120      	movs	r1, #32
 802c0be:	2012      	movs	r0, #18
 802c0c0:	f7ff fc68 	bl	802b994 <SX1276Write>

            if( sx1278->LoRaSettings.RxSingleOn == true ) // Rx single mode
 802c0c4:	4b08      	ldr	r3, [pc, #32]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c0c6:	681b      	ldr	r3, [r3, #0]
 802c0c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c0cc:	2b00      	cmp	r3, #0
 802c0ce:	d005      	beq.n	802c0dc <SX1276LoRaProcess+0x2bc>
            {
                sx1278->RFLRState = RFLR_STATE_RX_INIT;
 802c0d0:	4b05      	ldr	r3, [pc, #20]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c0d2:	681b      	ldr	r3, [r3, #0]
 802c0d4:	2201      	movs	r2, #1
 802c0d6:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
            }
            else
            {
                sx1278->RFLRState = RFLR_STATE_RX_RUNNING;
            }
            break;
 802c0da:	e312      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
                sx1278->RFLRState = RFLR_STATE_RX_RUNNING;
 802c0dc:	4b02      	ldr	r3, [pc, #8]	; (802c0e8 <SX1276LoRaProcess+0x2c8>)
 802c0de:	681b      	ldr	r3, [r3, #0]
 802c0e0:	2202      	movs	r2, #2
 802c0e2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
            break;
 802c0e6:	e30c      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
 802c0e8:	20005028 	.word	0x20005028
 802c0ec:	0802e628 	.word	0x0802e628
 802c0f0:	20004cc8 	.word	0x20004cc8
        }
        
        {
            uint8_t rxSnrEstimate;
            SX1276Read( REG_LR_PKTSNRVALUE, &rxSnrEstimate );
 802c0f4:	1cfb      	adds	r3, r7, #3
 802c0f6:	4619      	mov	r1, r3
 802c0f8:	2019      	movs	r0, #25
 802c0fa:	f7ff fc5d 	bl	802b9b8 <SX1276Read>
            if( rxSnrEstimate & 0x80 ) // The SNR sign bit is 1
 802c0fe:	78fb      	ldrb	r3, [r7, #3]
 802c100:	b25b      	sxtb	r3, r3
 802c102:	2b00      	cmp	r3, #0
 802c104:	da17      	bge.n	802c136 <SX1276LoRaProcess+0x316>
            {
                // Invert and divide by 4
                sx1278->RxPacketSnrEstimate = ( ( ~rxSnrEstimate + 1 ) & 0xFF ) >> 2;
 802c106:	78fb      	ldrb	r3, [r7, #3]
 802c108:	425b      	negs	r3, r3
 802c10a:	109b      	asrs	r3, r3, #2
 802c10c:	b25a      	sxtb	r2, r3
 802c10e:	4bac      	ldr	r3, [pc, #688]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c110:	681b      	ldr	r3, [r3, #0]
 802c112:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 802c116:	b252      	sxtb	r2, r2
 802c118:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                sx1278->RxPacketSnrEstimate = -sx1278->RxPacketSnrEstimate;
 802c11c:	4ba8      	ldr	r3, [pc, #672]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c11e:	681b      	ldr	r3, [r3, #0]
 802c120:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 802c124:	b2db      	uxtb	r3, r3
 802c126:	425b      	negs	r3, r3
 802c128:	b2da      	uxtb	r2, r3
 802c12a:	4ba5      	ldr	r3, [pc, #660]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c12c:	681b      	ldr	r3, [r3, #0]
 802c12e:	b252      	sxtb	r2, r2
 802c130:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 802c134:	e007      	b.n	802c146 <SX1276LoRaProcess+0x326>
            }
            else
            {
                // Divide by 4
                sx1278->RxPacketSnrEstimate = ( rxSnrEstimate & 0xFF ) >> 2;
 802c136:	78fb      	ldrb	r3, [r7, #3]
 802c138:	089b      	lsrs	r3, r3, #2
 802c13a:	b2da      	uxtb	r2, r3
 802c13c:	4ba0      	ldr	r3, [pc, #640]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c13e:	681b      	ldr	r3, [r3, #0]
 802c140:	b252      	sxtb	r2, r2
 802c142:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            }
        }
        
        SX1276Read( REG_LR_PKTRSSIVALUE, &sx1278->SX1276LR->RegPktRssiValue );
 802c146:	4b9e      	ldr	r3, [pc, #632]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c148:	681b      	ldr	r3, [r3, #0]
 802c14a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c14e:	331a      	adds	r3, #26
 802c150:	4619      	mov	r1, r3
 802c152:	201a      	movs	r0, #26
 802c154:	f7ff fc30 	bl	802b9b8 <SX1276Read>
    
        if( sx1278->LoRaSettings.RFFrequency < 860000000 )  // LF
 802c158:	4b99      	ldr	r3, [pc, #612]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c15a:	681b      	ldr	r3, [r3, #0]
 802c15c:	699b      	ldr	r3, [r3, #24]
 802c15e:	4a99      	ldr	r2, [pc, #612]	; (802c3c4 <SX1276LoRaProcess+0x5a4>)
 802c160:	4293      	cmp	r3, r2
 802c162:	d847      	bhi.n	802c1f4 <SX1276LoRaProcess+0x3d4>
        {    
            if( sx1278->RxPacketSnrEstimate < 0 )
 802c164:	4b96      	ldr	r3, [pc, #600]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c166:	681b      	ldr	r3, [r3, #0]
 802c168:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 802c16c:	2b00      	cmp	r3, #0
 802c16e:	da24      	bge.n	802c1ba <SX1276LoRaProcess+0x39a>
            {
                sx1278->RxPacketRssiValue = RSSI_OFFSET_LF + ( ( double )sx1278->SX1276LR->RegPktRssiValue ) + sx1278->RxPacketSnrEstimate;
 802c170:	4b93      	ldr	r3, [pc, #588]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c172:	681b      	ldr	r3, [r3, #0]
 802c174:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c178:	7e9b      	ldrb	r3, [r3, #26]
 802c17a:	4618      	mov	r0, r3
 802c17c:	f7f4 f9c2 	bl	8020504 <__aeabi_ui2d>
 802c180:	f04f 0200 	mov.w	r2, #0
 802c184:	4b90      	ldr	r3, [pc, #576]	; (802c3c8 <SX1276LoRaProcess+0x5a8>)
 802c186:	f7f4 f87f 	bl	8020288 <__aeabi_dsub>
 802c18a:	4602      	mov	r2, r0
 802c18c:	460b      	mov	r3, r1
 802c18e:	4690      	mov	r8, r2
 802c190:	4699      	mov	r9, r3
 802c192:	4b8b      	ldr	r3, [pc, #556]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c194:	681b      	ldr	r3, [r3, #0]
 802c196:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 802c19a:	4618      	mov	r0, r3
 802c19c:	f7f4 f9c2 	bl	8020524 <__aeabi_i2d>
 802c1a0:	4602      	mov	r2, r0
 802c1a2:	460b      	mov	r3, r1
 802c1a4:	4986      	ldr	r1, [pc, #536]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c1a6:	680c      	ldr	r4, [r1, #0]
 802c1a8:	4640      	mov	r0, r8
 802c1aa:	4649      	mov	r1, r9
 802c1ac:	f7f4 f86e 	bl	802028c <__adddf3>
 802c1b0:	4602      	mov	r2, r0
 802c1b2:	460b      	mov	r3, r1
 802c1b4:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
 802c1b8:	e063      	b.n	802c282 <SX1276LoRaProcess+0x462>
            }
            else
            {
                sx1278->RxPacketRssiValue = RSSI_OFFSET_LF + ( 1.0666 * ( ( double )sx1278->SX1276LR->RegPktRssiValue ) );
 802c1ba:	4b81      	ldr	r3, [pc, #516]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c1bc:	681b      	ldr	r3, [r3, #0]
 802c1be:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c1c2:	7e9b      	ldrb	r3, [r3, #26]
 802c1c4:	4618      	mov	r0, r3
 802c1c6:	f7f4 f99d 	bl	8020504 <__aeabi_ui2d>
 802c1ca:	a379      	add	r3, pc, #484	; (adr r3, 802c3b0 <SX1276LoRaProcess+0x590>)
 802c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1d0:	f7f4 fa12 	bl	80205f8 <__aeabi_dmul>
 802c1d4:	4602      	mov	r2, r0
 802c1d6:	460b      	mov	r3, r1
 802c1d8:	4610      	mov	r0, r2
 802c1da:	4619      	mov	r1, r3
 802c1dc:	4b78      	ldr	r3, [pc, #480]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c1de:	681c      	ldr	r4, [r3, #0]
 802c1e0:	f04f 0200 	mov.w	r2, #0
 802c1e4:	4b78      	ldr	r3, [pc, #480]	; (802c3c8 <SX1276LoRaProcess+0x5a8>)
 802c1e6:	f7f4 f84f 	bl	8020288 <__aeabi_dsub>
 802c1ea:	4602      	mov	r2, r0
 802c1ec:	460b      	mov	r3, r1
 802c1ee:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
 802c1f2:	e046      	b.n	802c282 <SX1276LoRaProcess+0x462>
            }
        }
        else                                        // HF
        {    
            if( sx1278->RxPacketSnrEstimate < 0 )
 802c1f4:	4b72      	ldr	r3, [pc, #456]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c1f6:	681b      	ldr	r3, [r3, #0]
 802c1f8:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 802c1fc:	2b00      	cmp	r3, #0
 802c1fe:	da24      	bge.n	802c24a <SX1276LoRaProcess+0x42a>
            {
                sx1278->RxPacketRssiValue = RSSI_OFFSET_HF + ( ( double )sx1278->SX1276LR->RegPktRssiValue ) + sx1278->RxPacketSnrEstimate;
 802c200:	4b6f      	ldr	r3, [pc, #444]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c202:	681b      	ldr	r3, [r3, #0]
 802c204:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c208:	7e9b      	ldrb	r3, [r3, #26]
 802c20a:	4618      	mov	r0, r3
 802c20c:	f7f4 f97a 	bl	8020504 <__aeabi_ui2d>
 802c210:	a369      	add	r3, pc, #420	; (adr r3, 802c3b8 <SX1276LoRaProcess+0x598>)
 802c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c216:	f7f4 f837 	bl	8020288 <__aeabi_dsub>
 802c21a:	4602      	mov	r2, r0
 802c21c:	460b      	mov	r3, r1
 802c21e:	4690      	mov	r8, r2
 802c220:	4699      	mov	r9, r3
 802c222:	4b67      	ldr	r3, [pc, #412]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c224:	681b      	ldr	r3, [r3, #0]
 802c226:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 802c22a:	4618      	mov	r0, r3
 802c22c:	f7f4 f97a 	bl	8020524 <__aeabi_i2d>
 802c230:	4602      	mov	r2, r0
 802c232:	460b      	mov	r3, r1
 802c234:	4962      	ldr	r1, [pc, #392]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c236:	680c      	ldr	r4, [r1, #0]
 802c238:	4640      	mov	r0, r8
 802c23a:	4649      	mov	r1, r9
 802c23c:	f7f4 f826 	bl	802028c <__adddf3>
 802c240:	4602      	mov	r2, r0
 802c242:	460b      	mov	r3, r1
 802c244:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
 802c248:	e01b      	b.n	802c282 <SX1276LoRaProcess+0x462>
            }
            else
            {    
                sx1278->RxPacketRssiValue = RSSI_OFFSET_HF + ( 1.0666 * ( ( double )sx1278->SX1276LR->RegPktRssiValue ) );
 802c24a:	4b5d      	ldr	r3, [pc, #372]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c24c:	681b      	ldr	r3, [r3, #0]
 802c24e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c252:	7e9b      	ldrb	r3, [r3, #26]
 802c254:	4618      	mov	r0, r3
 802c256:	f7f4 f955 	bl	8020504 <__aeabi_ui2d>
 802c25a:	a355      	add	r3, pc, #340	; (adr r3, 802c3b0 <SX1276LoRaProcess+0x590>)
 802c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c260:	f7f4 f9ca 	bl	80205f8 <__aeabi_dmul>
 802c264:	4602      	mov	r2, r0
 802c266:	460b      	mov	r3, r1
 802c268:	4610      	mov	r0, r2
 802c26a:	4619      	mov	r1, r3
 802c26c:	4b54      	ldr	r3, [pc, #336]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c26e:	681c      	ldr	r4, [r3, #0]
 802c270:	a351      	add	r3, pc, #324	; (adr r3, 802c3b8 <SX1276LoRaProcess+0x598>)
 802c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c276:	f7f4 f807 	bl	8020288 <__aeabi_dsub>
 802c27a:	4602      	mov	r2, r0
 802c27c:	460b      	mov	r3, r1
 802c27e:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
            }
        }

        if( sx1278->LoRaSettings.RxSingleOn == true ) // Rx single mode
 802c282:	4b4f      	ldr	r3, [pc, #316]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c284:	681b      	ldr	r3, [r3, #0]
 802c286:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c28a:	2b00      	cmp	r3, #0
 802c28c:	d053      	beq.n	802c336 <SX1276LoRaProcess+0x516>
        {
            sx1278->SX1276LR->RegFifoAddrPtr = sx1278->SX1276LR->RegFifoRxBaseAddr;
 802c28e:	4b4c      	ldr	r3, [pc, #304]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c290:	681b      	ldr	r3, [r3, #0]
 802c292:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 802c296:	4b4a      	ldr	r3, [pc, #296]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c298:	681b      	ldr	r3, [r3, #0]
 802c29a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c29e:	7bd2      	ldrb	r2, [r2, #15]
 802c2a0:	735a      	strb	r2, [r3, #13]
            SX1276Write( REG_LR_FIFOADDRPTR, sx1278->SX1276LR->RegFifoAddrPtr );
 802c2a2:	4b47      	ldr	r3, [pc, #284]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2a4:	681b      	ldr	r3, [r3, #0]
 802c2a6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c2aa:	7b5b      	ldrb	r3, [r3, #13]
 802c2ac:	4619      	mov	r1, r3
 802c2ae:	200d      	movs	r0, #13
 802c2b0:	f7ff fb70 	bl	802b994 <SX1276Write>

            if( sx1278->LoRaSettings.ImplicitHeaderOn == true )
 802c2b4:	4b42      	ldr	r3, [pc, #264]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2b6:	681b      	ldr	r3, [r3, #0]
 802c2b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802c2bc:	2b00      	cmp	r3, #0
 802c2be:	d019      	beq.n	802c2f4 <SX1276LoRaProcess+0x4d4>
            {
                sx1278->RxPacketSize = sx1278->SX1276LR->RegPayloadLength;
 802c2c0:	4b3f      	ldr	r3, [pc, #252]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2c2:	681b      	ldr	r3, [r3, #0]
 802c2c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c2c8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 802c2cc:	4b3c      	ldr	r3, [pc, #240]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2ce:	681b      	ldr	r3, [r3, #0]
 802c2d0:	b292      	uxth	r2, r2
 802c2d2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
                SX1276ReadFifo( sx1278->RFBuffer, sx1278->SX1276LR->RegPayloadLength );
 802c2d6:	4b3a      	ldr	r3, [pc, #232]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2d8:	681b      	ldr	r3, [r3, #0]
 802c2da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802c2de:	4b38      	ldr	r3, [pc, #224]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2e0:	681b      	ldr	r3, [r3, #0]
 802c2e2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c2e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c2ea:	4619      	mov	r1, r3
 802c2ec:	4610      	mov	r0, r2
 802c2ee:	f7ff fbf3 	bl	802bad8 <SX1276ReadFifo>
 802c2f2:	e09e      	b.n	802c432 <SX1276LoRaProcess+0x612>
            }
            else
            {
                SX1276Read( REG_LR_NBRXBYTES, &sx1278->SX1276LR->RegNbRxBytes );
 802c2f4:	4b32      	ldr	r3, [pc, #200]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c2f6:	681b      	ldr	r3, [r3, #0]
 802c2f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c2fc:	3313      	adds	r3, #19
 802c2fe:	4619      	mov	r1, r3
 802c300:	2013      	movs	r0, #19
 802c302:	f7ff fb59 	bl	802b9b8 <SX1276Read>
                sx1278->RxPacketSize = sx1278->SX1276LR->RegNbRxBytes;
 802c306:	4b2e      	ldr	r3, [pc, #184]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c308:	681b      	ldr	r3, [r3, #0]
 802c30a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c30e:	7cda      	ldrb	r2, [r3, #19]
 802c310:	4b2b      	ldr	r3, [pc, #172]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c312:	681b      	ldr	r3, [r3, #0]
 802c314:	b292      	uxth	r2, r2
 802c316:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
                SX1276ReadFifo( sx1278->RFBuffer, sx1278->SX1276LR->RegNbRxBytes );
 802c31a:	4b29      	ldr	r3, [pc, #164]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c31c:	681b      	ldr	r3, [r3, #0]
 802c31e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802c322:	4b27      	ldr	r3, [pc, #156]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c324:	681b      	ldr	r3, [r3, #0]
 802c326:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c32a:	7cdb      	ldrb	r3, [r3, #19]
 802c32c:	4619      	mov	r1, r3
 802c32e:	4610      	mov	r0, r2
 802c330:	f7ff fbd2 	bl	802bad8 <SX1276ReadFifo>
 802c334:	e07d      	b.n	802c432 <SX1276LoRaProcess+0x612>
            }
        }else // Rx continuous mode
        {
            SX1276Read( REG_LR_FIFORXCURRENTADDR, &sx1278->SX1276LR->RegFifoRxCurrentAddr );
 802c336:	4b22      	ldr	r3, [pc, #136]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c338:	681b      	ldr	r3, [r3, #0]
 802c33a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c33e:	3310      	adds	r3, #16
 802c340:	4619      	mov	r1, r3
 802c342:	2010      	movs	r0, #16
 802c344:	f7ff fb38 	bl	802b9b8 <SX1276Read>

            if( sx1278->LoRaSettings.ImplicitHeaderOn == true )
 802c348:	4b1d      	ldr	r3, [pc, #116]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c34a:	681b      	ldr	r3, [r3, #0]
 802c34c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802c350:	2b00      	cmp	r3, #0
 802c352:	d03b      	beq.n	802c3cc <SX1276LoRaProcess+0x5ac>
            {
                sx1278->RxPacketSize = sx1278->SX1276LR->RegPayloadLength;
 802c354:	4b1a      	ldr	r3, [pc, #104]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c356:	681b      	ldr	r3, [r3, #0]
 802c358:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c35c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 802c360:	4b17      	ldr	r3, [pc, #92]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c362:	681b      	ldr	r3, [r3, #0]
 802c364:	b292      	uxth	r2, r2
 802c366:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
                sx1278->SX1276LR->RegFifoAddrPtr = sx1278->SX1276LR->RegFifoRxCurrentAddr;
 802c36a:	4b15      	ldr	r3, [pc, #84]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c36c:	681b      	ldr	r3, [r3, #0]
 802c36e:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 802c372:	4b13      	ldr	r3, [pc, #76]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c374:	681b      	ldr	r3, [r3, #0]
 802c376:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c37a:	7c12      	ldrb	r2, [r2, #16]
 802c37c:	735a      	strb	r2, [r3, #13]
                SX1276Write( REG_LR_FIFOADDRPTR, sx1278->SX1276LR->RegFifoAddrPtr );
 802c37e:	4b10      	ldr	r3, [pc, #64]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c380:	681b      	ldr	r3, [r3, #0]
 802c382:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c386:	7b5b      	ldrb	r3, [r3, #13]
 802c388:	4619      	mov	r1, r3
 802c38a:	200d      	movs	r0, #13
 802c38c:	f7ff fb02 	bl	802b994 <SX1276Write>
                SX1276ReadFifo( sx1278->RFBuffer, sx1278->SX1276LR->RegPayloadLength );
 802c390:	4b0b      	ldr	r3, [pc, #44]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c392:	681b      	ldr	r3, [r3, #0]
 802c394:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802c398:	4b09      	ldr	r3, [pc, #36]	; (802c3c0 <SX1276LoRaProcess+0x5a0>)
 802c39a:	681b      	ldr	r3, [r3, #0]
 802c39c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c3a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c3a4:	4619      	mov	r1, r3
 802c3a6:	4610      	mov	r0, r2
 802c3a8:	f7ff fb96 	bl	802bad8 <SX1276ReadFifo>
 802c3ac:	e041      	b.n	802c432 <SX1276LoRaProcess+0x612>
 802c3ae:	bf00      	nop
 802c3b0:	295e9e1b 	.word	0x295e9e1b
 802c3b4:	3ff110cb 	.word	0x3ff110cb
 802c3b8:	00000000 	.word	0x00000000
 802c3bc:	4063a000 	.word	0x4063a000
 802c3c0:	20005028 	.word	0x20005028
 802c3c4:	33428eff 	.word	0x33428eff
 802c3c8:	40648000 	.word	0x40648000
            }else
            {
                SX1276Read( REG_LR_NBRXBYTES, &sx1278->SX1276LR->RegNbRxBytes );
 802c3cc:	4bb6      	ldr	r3, [pc, #728]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c3ce:	681b      	ldr	r3, [r3, #0]
 802c3d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c3d4:	3313      	adds	r3, #19
 802c3d6:	4619      	mov	r1, r3
 802c3d8:	2013      	movs	r0, #19
 802c3da:	f7ff faed 	bl	802b9b8 <SX1276Read>
                sx1278->RxPacketSize = sx1278->SX1276LR->RegNbRxBytes;
 802c3de:	4bb2      	ldr	r3, [pc, #712]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c3e0:	681b      	ldr	r3, [r3, #0]
 802c3e2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c3e6:	7cda      	ldrb	r2, [r3, #19]
 802c3e8:	4baf      	ldr	r3, [pc, #700]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c3ea:	681b      	ldr	r3, [r3, #0]
 802c3ec:	b292      	uxth	r2, r2
 802c3ee:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
                sx1278->SX1276LR->RegFifoAddrPtr = sx1278->SX1276LR->RegFifoRxCurrentAddr;  
 802c3f2:	4bad      	ldr	r3, [pc, #692]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c3f4:	681b      	ldr	r3, [r3, #0]
 802c3f6:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 802c3fa:	4bab      	ldr	r3, [pc, #684]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c3fc:	681b      	ldr	r3, [r3, #0]
 802c3fe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c402:	7c12      	ldrb	r2, [r2, #16]
 802c404:	735a      	strb	r2, [r3, #13]
                // SX1276LR->RegFifoAddrPtr = 0;  //所有buffer都用作接收

                SX1276Write( REG_LR_FIFOADDRPTR, sx1278->SX1276LR->RegFifoAddrPtr );
 802c406:	4ba8      	ldr	r3, [pc, #672]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c408:	681b      	ldr	r3, [r3, #0]
 802c40a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c40e:	7b5b      	ldrb	r3, [r3, #13]
 802c410:	4619      	mov	r1, r3
 802c412:	200d      	movs	r0, #13
 802c414:	f7ff fabe 	bl	802b994 <SX1276Write>
                SX1276ReadFifo( sx1278->RFBuffer, sx1278->SX1276LR->RegNbRxBytes );
 802c418:	4ba3      	ldr	r3, [pc, #652]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c41a:	681b      	ldr	r3, [r3, #0]
 802c41c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802c420:	4ba1      	ldr	r3, [pc, #644]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c422:	681b      	ldr	r3, [r3, #0]
 802c424:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c428:	7cdb      	ldrb	r3, [r3, #19]
 802c42a:	4619      	mov	r1, r3
 802c42c:	4610      	mov	r0, r2
 802c42e:	f7ff fb53 	bl	802bad8 <SX1276ReadFifo>

                // SX1276LoRaSetOpMode( RFLR_OPMODE_SLEEP );  //清除FIFO
            }
        }
        
        if( sx1278->LoRaSettings.RxSingleOn == true ) // Rx single mode
 802c432:	4b9d      	ldr	r3, [pc, #628]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c434:	681b      	ldr	r3, [r3, #0]
 802c436:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c43a:	2b00      	cmp	r3, #0
 802c43c:	d005      	beq.n	802c44a <SX1276LoRaProcess+0x62a>
        {
            sx1278->RFLRState = RFLR_STATE_RX_INIT;
 802c43e:	4b9a      	ldr	r3, [pc, #616]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c440:	681b      	ldr	r3, [r3, #0]
 802c442:	2201      	movs	r2, #1
 802c444:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 802c448:	e004      	b.n	802c454 <SX1276LoRaProcess+0x634>
        }
        else // Rx continuous mode
        {
            sx1278->RFLRState = RFLR_STATE_RX_RUNNING;
 802c44a:	4b97      	ldr	r3, [pc, #604]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c44c:	681b      	ldr	r3, [r3, #0]
 802c44e:	2202      	movs	r2, #2
 802c450:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        }
        result = RF_RX_DONE;
 802c454:	2302      	movs	r3, #2
 802c456:	607b      	str	r3, [r7, #4]
        break;
 802c458:	e153      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
    case RFLR_STATE_RX_TIMEOUT:
        sx1278->RFLRState = RFLR_STATE_RX_INIT;
 802c45a:	4b93      	ldr	r3, [pc, #588]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c45c:	681b      	ldr	r3, [r3, #0]
 802c45e:	2201      	movs	r2, #1
 802c460:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        result = RF_RX_TIMEOUT;
 802c464:	2303      	movs	r3, #3
 802c466:	607b      	str	r3, [r7, #4]
        break;
 802c468:	e14b      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
    case RFLR_STATE_TX_INIT:

        SX1276LoRaSetOpMode( RFLR_OPMODE_STANDBY );
 802c46a:	2001      	movs	r0, #1
 802c46c:	f7ff fc14 	bl	802bc98 <SX1276LoRaSetOpMode>

        if( sx1278->LoRaSettings.FreqHopOn == true )
 802c470:	4b8d      	ldr	r3, [pc, #564]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c472:	681b      	ldr	r3, [r3, #0]
 802c474:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802c478:	2b00      	cmp	r3, #0
 802c47a:	d026      	beq.n	802c4ca <SX1276LoRaProcess+0x6aa>
        {
            sx1278->SX1276LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
 802c47c:	4b8a      	ldr	r3, [pc, #552]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c47e:	681b      	ldr	r3, [r3, #0]
 802c480:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c484:	22f5      	movs	r2, #245	; 0xf5
 802c486:	745a      	strb	r2, [r3, #17]
                                        RFLR_IRQFLAGS_VALIDHEADER |
                                        //RFLR_IRQFLAGS_TXDONE |
                                        RFLR_IRQFLAGS_CADDONE |
                                        //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                        RFLR_IRQFLAGS_CADDETECTED;
            sx1278->SX1276LR->RegHopPeriod = sx1278->LoRaSettings.HopPeriod;
 802c488:	4b87      	ldr	r3, [pc, #540]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c48a:	681a      	ldr	r2, [r3, #0]
 802c48c:	4b86      	ldr	r3, [pc, #536]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c48e:	681b      	ldr	r3, [r3, #0]
 802c490:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c494:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 802c498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            SX1276Read( REG_LR_HOPCHANNEL, &sx1278->SX1276LR->RegHopChannel );
 802c49c:	4b82      	ldr	r3, [pc, #520]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c49e:	681b      	ldr	r3, [r3, #0]
 802c4a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c4a4:	331c      	adds	r3, #28
 802c4a6:	4619      	mov	r1, r3
 802c4a8:	201c      	movs	r0, #28
 802c4aa:	f7ff fa85 	bl	802b9b8 <SX1276Read>
            SX1276LoRaSetRFFrequency( HoppingFrequencies[sx1278->SX1276LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
 802c4ae:	4b7e      	ldr	r3, [pc, #504]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c4b0:	681b      	ldr	r3, [r3, #0]
 802c4b2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c4b6:	7f1b      	ldrb	r3, [r3, #28]
 802c4b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c4bc:	4a7b      	ldr	r2, [pc, #492]	; (802c6ac <SX1276LoRaProcess+0x88c>)
 802c4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802c4c2:	4618      	mov	r0, r3
 802c4c4:	f000 f928 	bl	802c718 <SX1276LoRaSetRFFrequency>
 802c4c8:	e00c      	b.n	802c4e4 <SX1276LoRaProcess+0x6c4>
        }else
        {
            sx1278->SX1276LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
 802c4ca:	4b77      	ldr	r3, [pc, #476]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c4cc:	681b      	ldr	r3, [r3, #0]
 802c4ce:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c4d2:	22f7      	movs	r2, #247	; 0xf7
 802c4d4:	745a      	strb	r2, [r3, #17]
                                        RFLR_IRQFLAGS_VALIDHEADER |
                                        //RFLR_IRQFLAGS_TXDONE |
                                        RFLR_IRQFLAGS_CADDONE |
                                        RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                        RFLR_IRQFLAGS_CADDETECTED;
            sx1278->SX1276LR->RegHopPeriod = 0;
 802c4d6:	4b74      	ldr	r3, [pc, #464]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c4d8:	681b      	ldr	r3, [r3, #0]
 802c4da:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c4de:	2200      	movs	r2, #0
 802c4e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
        // SX1276Write( REG_LR_HOPPERIOD, SX1276LR->RegHopPeriod );
        SX1276Write( REG_LR_IRQFLAGSMASK, sx1278->SX1276LR->RegIrqFlagsMask );
 802c4e4:	4b70      	ldr	r3, [pc, #448]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c4e6:	681b      	ldr	r3, [r3, #0]
 802c4e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c4ec:	7c5b      	ldrb	r3, [r3, #17]
 802c4ee:	4619      	mov	r1, r3
 802c4f0:	2011      	movs	r0, #17
 802c4f2:	f7ff fa4f 	bl	802b994 <SX1276Write>

        // Initializes the payload size
        sx1278->SX1276LR->RegPayloadLength = sx1278->TxPacketSize;
 802c4f6:	4b6c      	ldr	r3, [pc, #432]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c4f8:	681b      	ldr	r3, [r3, #0]
 802c4fa:	f8b3 2154 	ldrh.w	r2, [r3, #340]	; 0x154
 802c4fe:	4b6a      	ldr	r3, [pc, #424]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c500:	681b      	ldr	r3, [r3, #0]
 802c502:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c506:	b2d2      	uxtb	r2, r2
 802c508:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        SX1276Write( REG_LR_PAYLOADLENGTH, sx1278->SX1276LR->RegPayloadLength );
 802c50c:	4b66      	ldr	r3, [pc, #408]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c50e:	681b      	ldr	r3, [r3, #0]
 802c510:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c514:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c518:	4619      	mov	r1, r3
 802c51a:	2022      	movs	r0, #34	; 0x22
 802c51c:	f7ff fa3a 	bl	802b994 <SX1276Write>
        
        sx1278->SX1276LR->RegFifoTxBaseAddr = 0x00; // Full buffer used for Tx
 802c520:	4b61      	ldr	r3, [pc, #388]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c522:	681b      	ldr	r3, [r3, #0]
 802c524:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c528:	2200      	movs	r2, #0
 802c52a:	739a      	strb	r2, [r3, #14]
        SX1276Write( REG_LR_FIFOTXBASEADDR, sx1278->SX1276LR->RegFifoTxBaseAddr );
 802c52c:	4b5e      	ldr	r3, [pc, #376]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c52e:	681b      	ldr	r3, [r3, #0]
 802c530:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c534:	7b9b      	ldrb	r3, [r3, #14]
 802c536:	4619      	mov	r1, r3
 802c538:	200e      	movs	r0, #14
 802c53a:	f7ff fa2b 	bl	802b994 <SX1276Write>

        sx1278->SX1276LR->RegFifoAddrPtr = sx1278->SX1276LR->RegFifoTxBaseAddr;
 802c53e:	4b5a      	ldr	r3, [pc, #360]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c540:	681b      	ldr	r3, [r3, #0]
 802c542:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 802c546:	4b58      	ldr	r3, [pc, #352]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c548:	681b      	ldr	r3, [r3, #0]
 802c54a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c54e:	7b92      	ldrb	r2, [r2, #14]
 802c550:	735a      	strb	r2, [r3, #13]
        SX1276Write( REG_LR_FIFOADDRPTR, sx1278->SX1276LR->RegFifoAddrPtr );
 802c552:	4b55      	ldr	r3, [pc, #340]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c554:	681b      	ldr	r3, [r3, #0]
 802c556:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c55a:	7b5b      	ldrb	r3, [r3, #13]
 802c55c:	4619      	mov	r1, r3
 802c55e:	200d      	movs	r0, #13
 802c560:	f7ff fa18 	bl	802b994 <SX1276Write>
        
        // Write payload buffer to LORA modem
        SX1276WriteFifo( sx1278->RFBuffer, sx1278->SX1276LR->RegPayloadLength );
 802c564:	4b50      	ldr	r3, [pc, #320]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c566:	681b      	ldr	r3, [r3, #0]
 802c568:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802c56c:	4b4e      	ldr	r3, [pc, #312]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c56e:	681b      	ldr	r3, [r3, #0]
 802c570:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c574:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802c578:	4619      	mov	r1, r3
 802c57a:	4610      	mov	r0, r2
 802c57c:	f7ff fa9c 	bl	802bab8 <SX1276WriteFifo>
                                        // TxDone               RxTimeout                   FhssChangeChannel          ValidHeader         
        sx1278->SX1276LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_01;
 802c580:	4b49      	ldr	r3, [pc, #292]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c582:	681b      	ldr	r3, [r3, #0]
 802c584:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c588:	2241      	movs	r2, #65	; 0x41
 802c58a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                                        // PllLock              Mode Ready
        sx1278->SX1276LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_01 | RFLR_DIOMAPPING2_DIO5_00;
 802c58e:	4b46      	ldr	r3, [pc, #280]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c590:	681b      	ldr	r3, [r3, #0]
 802c592:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c596:	2240      	movs	r2, #64	; 0x40
 802c598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        SX1276WriteBuffer( REG_LR_DIOMAPPING1, &sx1278->SX1276LR->RegDioMapping1, 2 );
 802c59c:	4b42      	ldr	r3, [pc, #264]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c59e:	681b      	ldr	r3, [r3, #0]
 802c5a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c5a4:	333d      	adds	r3, #61	; 0x3d
 802c5a6:	2202      	movs	r2, #2
 802c5a8:	4619      	mov	r1, r3
 802c5aa:	2040      	movs	r0, #64	; 0x40
 802c5ac:	f7ff fa14 	bl	802b9d8 <SX1276WriteBuffer>

        SX1276LoRaSetOpMode( RFLR_OPMODE_TRANSMITTER );
 802c5b0:	2003      	movs	r0, #3
 802c5b2:	f7ff fb71 	bl	802bc98 <SX1276LoRaSetOpMode>
        sx1278->RFLRState = RFLR_STATE_TX_RUNNING;
 802c5b6:	4b3c      	ldr	r3, [pc, #240]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c5b8:	681b      	ldr	r3, [r3, #0]
 802c5ba:	2206      	movs	r2, #6
 802c5bc:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        break;
 802c5c0:	e09f      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
    case RFLR_STATE_TX_RUNNING:
        if( DIO0 != 0 ) // TxDone
 802c5c2:	f7ff fa99 	bl	802baf8 <SX1276ReadDio0>
 802c5c6:	4603      	mov	r3, r0
 802c5c8:	2b00      	cmp	r3, #0
 802c5ca:	d008      	beq.n	802c5de <SX1276LoRaProcess+0x7be>
        {
            // Clear Irq
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE  );
 802c5cc:	2108      	movs	r1, #8
 802c5ce:	2012      	movs	r0, #18
 802c5d0:	f7ff f9e0 	bl	802b994 <SX1276Write>
            sx1278->RFLRState = RFLR_STATE_TX_DONE;
 802c5d4:	4b34      	ldr	r3, [pc, #208]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c5d6:	681b      	ldr	r3, [r3, #0]
 802c5d8:	2207      	movs	r2, #7
 802c5da:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        }
        if( DIO2 == 1 ) // FHSS Changed Channel
 802c5de:	f7ff fa9f 	bl	802bb20 <SX1276ReadDio2>
 802c5e2:	4603      	mov	r3, r0
 802c5e4:	2b01      	cmp	r3, #1
 802c5e6:	f040 8089 	bne.w	802c6fc <SX1276LoRaProcess+0x8dc>
        {
            if( sx1278->LoRaSettings.FreqHopOn == true )
 802c5ea:	4b2f      	ldr	r3, [pc, #188]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c5ec:	681b      	ldr	r3, [r3, #0]
 802c5ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802c5f2:	2b00      	cmp	r3, #0
 802c5f4:	d015      	beq.n	802c622 <SX1276LoRaProcess+0x802>
            {
                SX1276Read( REG_LR_HOPCHANNEL, &sx1278->SX1276LR->RegHopChannel );
 802c5f6:	4b2c      	ldr	r3, [pc, #176]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c5f8:	681b      	ldr	r3, [r3, #0]
 802c5fa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c5fe:	331c      	adds	r3, #28
 802c600:	4619      	mov	r1, r3
 802c602:	201c      	movs	r0, #28
 802c604:	f7ff f9d8 	bl	802b9b8 <SX1276Read>
                SX1276LoRaSetRFFrequency( HoppingFrequencies[sx1278->SX1276LR->RegHopChannel & RFLR_HOPCHANNEL_CHANNEL_MASK] );
 802c608:	4b27      	ldr	r3, [pc, #156]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c60a:	681b      	ldr	r3, [r3, #0]
 802c60c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c610:	7f1b      	ldrb	r3, [r3, #28]
 802c612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c616:	4a25      	ldr	r2, [pc, #148]	; (802c6ac <SX1276LoRaProcess+0x88c>)
 802c618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802c61c:	4618      	mov	r0, r3
 802c61e:	f000 f87b 	bl	802c718 <SX1276LoRaSetRFFrequency>
            }
            // Clear Irq
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 802c622:	2102      	movs	r1, #2
 802c624:	2012      	movs	r0, #18
 802c626:	f7ff f9b5 	bl	802b994 <SX1276Write>
        }
        break;
 802c62a:	e067      	b.n	802c6fc <SX1276LoRaProcess+0x8dc>
    case RFLR_STATE_TX_DONE:
        // optimize the power consumption by switching off the transmitter as soon as the packet has been sent
        SX1276LoRaSetOpMode( RFLR_OPMODE_STANDBY );
 802c62c:	2001      	movs	r0, #1
 802c62e:	f7ff fb33 	bl	802bc98 <SX1276LoRaSetOpMode>

        sx1278->RFLRState = RFLR_STATE_IDLE;
 802c632:	4b1d      	ldr	r3, [pc, #116]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c634:	681b      	ldr	r3, [r3, #0]
 802c636:	2200      	movs	r2, #0
 802c638:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        result = RF_TX_DONE;
 802c63c:	2304      	movs	r3, #4
 802c63e:	607b      	str	r3, [r7, #4]
        break;
 802c640:	e05f      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
    case RFLR_STATE_CAD_INIT:    
        SX1276LoRaSetOpMode( RFLR_OPMODE_STANDBY );
 802c642:	2001      	movs	r0, #1
 802c644:	f7ff fb28 	bl	802bc98 <SX1276LoRaSetOpMode>
    
        sx1278->SX1276LR->RegIrqFlagsMask = RFLR_IRQFLAGS_RXTIMEOUT |
 802c648:	4b17      	ldr	r3, [pc, #92]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c64a:	681b      	ldr	r3, [r3, #0]
 802c64c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c650:	22fa      	movs	r2, #250	; 0xfa
 802c652:	745a      	strb	r2, [r3, #17]
                                    RFLR_IRQFLAGS_VALIDHEADER |
                                    RFLR_IRQFLAGS_TXDONE |
                                    //RFLR_IRQFLAGS_CADDONE |
                                    RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL; // |
                                    //RFLR_IRQFLAGS_CADDETECTED;
        SX1276Write( REG_LR_IRQFLAGSMASK, sx1278->SX1276LR->RegIrqFlagsMask );
 802c654:	4b14      	ldr	r3, [pc, #80]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c656:	681b      	ldr	r3, [r3, #0]
 802c658:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c65c:	7c5b      	ldrb	r3, [r3, #17]
 802c65e:	4619      	mov	r1, r3
 802c660:	2011      	movs	r0, #17
 802c662:	f7ff f997 	bl	802b994 <SX1276Write>
           
                                    // RxDone                   RxTimeout                   FhssChangeChannel           CadDone
        sx1278->SX1276LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_00;
 802c666:	4b10      	ldr	r3, [pc, #64]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c668:	681b      	ldr	r3, [r3, #0]
 802c66a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c66e:	2200      	movs	r2, #0
 802c670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                                    // CAD Detected              ModeReady
        sx1278->SX1276LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_00 | RFLR_DIOMAPPING2_DIO5_00;
 802c674:	4b0c      	ldr	r3, [pc, #48]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c676:	681b      	ldr	r3, [r3, #0]
 802c678:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c67c:	2200      	movs	r2, #0
 802c67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        SX1276WriteBuffer( REG_LR_DIOMAPPING1, &sx1278->SX1276LR->RegDioMapping1, 2 );
 802c682:	4b09      	ldr	r3, [pc, #36]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c684:	681b      	ldr	r3, [r3, #0]
 802c686:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c68a:	333d      	adds	r3, #61	; 0x3d
 802c68c:	2202      	movs	r2, #2
 802c68e:	4619      	mov	r1, r3
 802c690:	2040      	movs	r0, #64	; 0x40
 802c692:	f7ff f9a1 	bl	802b9d8 <SX1276WriteBuffer>
            
        SX1276LoRaSetOpMode( RFLR_OPMODE_CAD );
 802c696:	2007      	movs	r0, #7
 802c698:	f7ff fafe 	bl	802bc98 <SX1276LoRaSetOpMode>
        sx1278->RFLRState = RFLR_STATE_CAD_RUNNING;
 802c69c:	4b02      	ldr	r3, [pc, #8]	; (802c6a8 <SX1276LoRaProcess+0x888>)
 802c69e:	681b      	ldr	r3, [r3, #0]
 802c6a0:	220a      	movs	r2, #10
 802c6a2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        break;
 802c6a6:	e02c      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
 802c6a8:	20005028 	.word	0x20005028
 802c6ac:	0802e628 	.word	0x0802e628
    case RFLR_STATE_CAD_RUNNING:
        if( DIO3 == 1 ) //CAD Done interrupt
 802c6b0:	f7ff fa3e 	bl	802bb30 <SX1276ReadDio3>
 802c6b4:	4603      	mov	r3, r0
 802c6b6:	2b01      	cmp	r3, #1
 802c6b8:	d122      	bne.n	802c700 <SX1276LoRaProcess+0x8e0>
        { 
            // Clear Irq
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE  );
 802c6ba:	2104      	movs	r1, #4
 802c6bc:	2012      	movs	r0, #18
 802c6be:	f7ff f969 	bl	802b994 <SX1276Write>
            if( DIO4 == 1 ) // CAD Detected interrupt
 802c6c2:	f7ff fa3d 	bl	802bb40 <SX1276ReadDio4>
 802c6c6:	4603      	mov	r3, r0
 802c6c8:	2b01      	cmp	r3, #1
 802c6ca:	d10b      	bne.n	802c6e4 <SX1276LoRaProcess+0x8c4>
            {
                // Clear Irq
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED  );
 802c6cc:	2101      	movs	r1, #1
 802c6ce:	2012      	movs	r0, #18
 802c6d0:	f7ff f960 	bl	802b994 <SX1276Write>
                // CAD detected, we have a LoRa preamble
                sx1278->RFLRState = RFLR_STATE_RX_INIT;
 802c6d4:	4b0e      	ldr	r3, [pc, #56]	; (802c710 <SX1276LoRaProcess+0x8f0>)
 802c6d6:	681b      	ldr	r3, [r3, #0]
 802c6d8:	2201      	movs	r2, #1
 802c6da:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                result = RF_CHANNEL_ACTIVITY_DETECTED;
 802c6de:	2308      	movs	r3, #8
 802c6e0:	607b      	str	r3, [r7, #4]
                // The device goes in Standby Mode automatically    
                sx1278->RFLRState = RFLR_STATE_IDLE;
                result = RF_CHANNEL_EMPTY;
            }
        }   
        break;
 802c6e2:	e00d      	b.n	802c700 <SX1276LoRaProcess+0x8e0>
                sx1278->RFLRState = RFLR_STATE_IDLE;
 802c6e4:	4b0a      	ldr	r3, [pc, #40]	; (802c710 <SX1276LoRaProcess+0x8f0>)
 802c6e6:	681b      	ldr	r3, [r3, #0]
 802c6e8:	2200      	movs	r2, #0
 802c6ea:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                result = RF_CHANNEL_EMPTY;
 802c6ee:	2307      	movs	r3, #7
 802c6f0:	607b      	str	r3, [r7, #4]
        break;
 802c6f2:	e005      	b.n	802c700 <SX1276LoRaProcess+0x8e0>
    
    default:
        break;
 802c6f4:	bf00      	nop
 802c6f6:	e004      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
        break;
 802c6f8:	bf00      	nop
 802c6fa:	e002      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
        break;
 802c6fc:	bf00      	nop
 802c6fe:	e000      	b.n	802c702 <SX1276LoRaProcess+0x8e2>
        break;
 802c700:	bf00      	nop
    } 
    return result;
 802c702:	687b      	ldr	r3, [r7, #4]
}
 802c704:	4618      	mov	r0, r3
 802c706:	370c      	adds	r7, #12
 802c708:	46bd      	mov	sp, r7
 802c70a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 802c70e:	bf00      	nop
 802c710:	20005028 	.word	0x20005028
 802c714:	00000000 	.word	0x00000000

0802c718 <SX1276LoRaSetRFFrequency>:
extern SX1278Class * sx1278;
extern SX1278Class sx1278_m;
extern SX1278Class sx1278_s;

void SX1276LoRaSetRFFrequency( uint32_t freq )
{
 802c718:	b580      	push	{r7, lr}
 802c71a:	b082      	sub	sp, #8
 802c71c:	af00      	add	r7, sp, #0
 802c71e:	6078      	str	r0, [r7, #4]
	sx1278->LoRaSettings.RFFrequency = freq;
 802c720:	4b1f      	ldr	r3, [pc, #124]	; (802c7a0 <SX1276LoRaSetRFFrequency+0x88>)
 802c722:	681b      	ldr	r3, [r3, #0]
 802c724:	687a      	ldr	r2, [r7, #4]
 802c726:	619a      	str	r2, [r3, #24]

    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 802c728:	6878      	ldr	r0, [r7, #4]
 802c72a:	f7f3 feeb 	bl	8020504 <__aeabi_ui2d>
 802c72e:	a31a      	add	r3, pc, #104	; (adr r3, 802c798 <SX1276LoRaSetRFFrequency+0x80>)
 802c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c734:	f7f4 f88a 	bl	802084c <__aeabi_ddiv>
 802c738:	4602      	mov	r2, r0
 802c73a:	460b      	mov	r3, r1
 802c73c:	4610      	mov	r0, r2
 802c73e:	4619      	mov	r1, r3
 802c740:	f7f4 f96c 	bl	8020a1c <__aeabi_d2uiz>
 802c744:	4603      	mov	r3, r0
 802c746:	607b      	str	r3, [r7, #4]
    sx1278->SX1276LR->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 802c748:	687b      	ldr	r3, [r7, #4]
 802c74a:	0c1a      	lsrs	r2, r3, #16
 802c74c:	4b14      	ldr	r3, [pc, #80]	; (802c7a0 <SX1276LoRaSetRFFrequency+0x88>)
 802c74e:	681b      	ldr	r3, [r3, #0]
 802c750:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c754:	b2d2      	uxtb	r2, r2
 802c756:	719a      	strb	r2, [r3, #6]
    sx1278->SX1276LR->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 802c758:	687b      	ldr	r3, [r7, #4]
 802c75a:	0a1a      	lsrs	r2, r3, #8
 802c75c:	4b10      	ldr	r3, [pc, #64]	; (802c7a0 <SX1276LoRaSetRFFrequency+0x88>)
 802c75e:	681b      	ldr	r3, [r3, #0]
 802c760:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c764:	b2d2      	uxtb	r2, r2
 802c766:	71da      	strb	r2, [r3, #7]
    sx1278->SX1276LR->RegFrfLsb = ( uint8_t )( freq & 0xFF );
 802c768:	4b0d      	ldr	r3, [pc, #52]	; (802c7a0 <SX1276LoRaSetRFFrequency+0x88>)
 802c76a:	681b      	ldr	r3, [r3, #0]
 802c76c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c770:	687a      	ldr	r2, [r7, #4]
 802c772:	b2d2      	uxtb	r2, r2
 802c774:	721a      	strb	r2, [r3, #8]
    SX1276WriteBuffer( REG_LR_FRFMSB, &sx1278->SX1276LR->RegFrfMsb, 3 );
 802c776:	4b0a      	ldr	r3, [pc, #40]	; (802c7a0 <SX1276LoRaSetRFFrequency+0x88>)
 802c778:	681b      	ldr	r3, [r3, #0]
 802c77a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c77e:	3306      	adds	r3, #6
 802c780:	2203      	movs	r2, #3
 802c782:	4619      	mov	r1, r3
 802c784:	2006      	movs	r0, #6
 802c786:	f7ff f927 	bl	802b9d8 <SX1276WriteBuffer>
}
 802c78a:	bf00      	nop
 802c78c:	3708      	adds	r7, #8
 802c78e:	46bd      	mov	sp, r7
 802c790:	bd80      	pop	{r7, pc}
 802c792:	bf00      	nop
 802c794:	f3af 8000 	nop.w
 802c798:	00000000 	.word	0x00000000
 802c79c:	404e8480 	.word	0x404e8480
 802c7a0:	20005028 	.word	0x20005028

0802c7a4 <SX1276LoRaSetRFPower>:

    return sx1278->LoRaSettings.RFFrequency;
}

void SX1276LoRaSetRFPower( int8_t power )
{
 802c7a4:	b580      	push	{r7, lr}
 802c7a6:	b082      	sub	sp, #8
 802c7a8:	af00      	add	r7, sp, #0
 802c7aa:	4603      	mov	r3, r0
 802c7ac:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_PACONFIG, &sx1278->SX1276LR->RegPaConfig );
 802c7ae:	4b65      	ldr	r3, [pc, #404]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c7b0:	681b      	ldr	r3, [r3, #0]
 802c7b2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c7b6:	3309      	adds	r3, #9
 802c7b8:	4619      	mov	r1, r3
 802c7ba:	2009      	movs	r0, #9
 802c7bc:	f7ff f8fc 	bl	802b9b8 <SX1276Read>
    SX1276Read( REG_LR_PADAC, &sx1278->SX1276LR->RegPaDac );
 802c7c0:	4b60      	ldr	r3, [pc, #384]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c7c2:	681b      	ldr	r3, [r3, #0]
 802c7c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c7c8:	3349      	adds	r3, #73	; 0x49
 802c7ca:	4619      	mov	r1, r3
 802c7cc:	204d      	movs	r0, #77	; 0x4d
 802c7ce:	f7ff f8f3 	bl	802b9b8 <SX1276Read>
    
    if( ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
 802c7d2:	4b5c      	ldr	r3, [pc, #368]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c7d4:	681b      	ldr	r3, [r3, #0]
 802c7d6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c7da:	7a5b      	ldrb	r3, [r3, #9]
 802c7dc:	b25b      	sxtb	r3, r3
 802c7de:	2b00      	cmp	r3, #0
 802c7e0:	da6d      	bge.n	802c8be <SX1276LoRaSetRFPower+0x11a>
    {
        if( ( sx1278->SX1276LR->RegPaDac & 0x87 ) == 0x87 )
 802c7e2:	4b58      	ldr	r3, [pc, #352]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c7e4:	681b      	ldr	r3, [r3, #0]
 802c7e6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c7ea:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802c7ee:	f003 0387 	and.w	r3, r3, #135	; 0x87
 802c7f2:	2b87      	cmp	r3, #135	; 0x87
 802c7f4:	d131      	bne.n	802c85a <SX1276LoRaSetRFPower+0xb6>
        {
            if( power < 5 )
 802c7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c7fa:	2b04      	cmp	r3, #4
 802c7fc:	dc01      	bgt.n	802c802 <SX1276LoRaSetRFPower+0x5e>
            {
                power = 5;
 802c7fe:	2305      	movs	r3, #5
 802c800:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 802c802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c806:	2b14      	cmp	r3, #20
 802c808:	dd01      	ble.n	802c80e <SX1276LoRaSetRFPower+0x6a>
            {
                power = 20;
 802c80a:	2314      	movs	r3, #20
 802c80c:	71fb      	strb	r3, [r7, #7]
            }
            sx1278->SX1276LR->RegPaConfig = ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_MAX_POWER_MASK ) | 0x70;
 802c80e:	4b4d      	ldr	r3, [pc, #308]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c810:	681b      	ldr	r3, [r3, #0]
 802c812:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c816:	7a5a      	ldrb	r2, [r3, #9]
 802c818:	4b4a      	ldr	r3, [pc, #296]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c820:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 802c824:	b2d2      	uxtb	r2, r2
 802c826:	725a      	strb	r2, [r3, #9]
            sx1278->SX1276LR->RegPaConfig = ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 802c828:	4b46      	ldr	r3, [pc, #280]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c82a:	681b      	ldr	r3, [r3, #0]
 802c82c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c830:	7a5b      	ldrb	r3, [r3, #9]
 802c832:	b25b      	sxtb	r3, r3
 802c834:	f023 030f 	bic.w	r3, r3, #15
 802c838:	b25a      	sxtb	r2, r3
 802c83a:	79fb      	ldrb	r3, [r7, #7]
 802c83c:	3b05      	subs	r3, #5
 802c83e:	b2db      	uxtb	r3, r3
 802c840:	b25b      	sxtb	r3, r3
 802c842:	f003 030f 	and.w	r3, r3, #15
 802c846:	b25b      	sxtb	r3, r3
 802c848:	4313      	orrs	r3, r2
 802c84a:	b25a      	sxtb	r2, r3
 802c84c:	4b3d      	ldr	r3, [pc, #244]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c84e:	681b      	ldr	r3, [r3, #0]
 802c850:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c854:	b2d2      	uxtb	r2, r2
 802c856:	725a      	strb	r2, [r3, #9]
 802c858:	e063      	b.n	802c922 <SX1276LoRaSetRFPower+0x17e>
        }
        else
        {
            if( power < 2 )
 802c85a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c85e:	2b01      	cmp	r3, #1
 802c860:	dc01      	bgt.n	802c866 <SX1276LoRaSetRFPower+0xc2>
            {
                power = 2;
 802c862:	2302      	movs	r3, #2
 802c864:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 802c866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c86a:	2b11      	cmp	r3, #17
 802c86c:	dd01      	ble.n	802c872 <SX1276LoRaSetRFPower+0xce>
            {
                power = 17;
 802c86e:	2311      	movs	r3, #17
 802c870:	71fb      	strb	r3, [r7, #7]
            }
            sx1278->SX1276LR->RegPaConfig = ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_MAX_POWER_MASK ) | 0x70;
 802c872:	4b34      	ldr	r3, [pc, #208]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c874:	681b      	ldr	r3, [r3, #0]
 802c876:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c87a:	7a5a      	ldrb	r2, [r3, #9]
 802c87c:	4b31      	ldr	r3, [pc, #196]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c87e:	681b      	ldr	r3, [r3, #0]
 802c880:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c884:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 802c888:	b2d2      	uxtb	r2, r2
 802c88a:	725a      	strb	r2, [r3, #9]
            sx1278->SX1276LR->RegPaConfig = ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 802c88c:	4b2d      	ldr	r3, [pc, #180]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c88e:	681b      	ldr	r3, [r3, #0]
 802c890:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c894:	7a5b      	ldrb	r3, [r3, #9]
 802c896:	b25b      	sxtb	r3, r3
 802c898:	f023 030f 	bic.w	r3, r3, #15
 802c89c:	b25a      	sxtb	r2, r3
 802c89e:	79fb      	ldrb	r3, [r7, #7]
 802c8a0:	3b02      	subs	r3, #2
 802c8a2:	b2db      	uxtb	r3, r3
 802c8a4:	b25b      	sxtb	r3, r3
 802c8a6:	f003 030f 	and.w	r3, r3, #15
 802c8aa:	b25b      	sxtb	r3, r3
 802c8ac:	4313      	orrs	r3, r2
 802c8ae:	b25a      	sxtb	r2, r3
 802c8b0:	4b24      	ldr	r3, [pc, #144]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c8b2:	681b      	ldr	r3, [r3, #0]
 802c8b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c8b8:	b2d2      	uxtb	r2, r2
 802c8ba:	725a      	strb	r2, [r3, #9]
 802c8bc:	e031      	b.n	802c922 <SX1276LoRaSetRFPower+0x17e>
        }
    }else
    {
        if( power < -1 )
 802c8be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c8c6:	da01      	bge.n	802c8cc <SX1276LoRaSetRFPower+0x128>
        {
            power = -1;
 802c8c8:	23ff      	movs	r3, #255	; 0xff
 802c8ca:	71fb      	strb	r3, [r7, #7]
        }
        if( power > 14 )
 802c8cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802c8d0:	2b0e      	cmp	r3, #14
 802c8d2:	dd01      	ble.n	802c8d8 <SX1276LoRaSetRFPower+0x134>
        {
            power = 14;
 802c8d4:	230e      	movs	r3, #14
 802c8d6:	71fb      	strb	r3, [r7, #7]
        }
        sx1278->SX1276LR->RegPaConfig = ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_MAX_POWER_MASK ) | 0x70;
 802c8d8:	4b1a      	ldr	r3, [pc, #104]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c8da:	681b      	ldr	r3, [r3, #0]
 802c8dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c8e0:	7a5a      	ldrb	r2, [r3, #9]
 802c8e2:	4b18      	ldr	r3, [pc, #96]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c8e4:	681b      	ldr	r3, [r3, #0]
 802c8e6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c8ea:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 802c8ee:	b2d2      	uxtb	r2, r2
 802c8f0:	725a      	strb	r2, [r3, #9]
        sx1278->SX1276LR->RegPaConfig = ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 802c8f2:	4b14      	ldr	r3, [pc, #80]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c8f4:	681b      	ldr	r3, [r3, #0]
 802c8f6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c8fa:	7a5b      	ldrb	r3, [r3, #9]
 802c8fc:	b25b      	sxtb	r3, r3
 802c8fe:	f023 030f 	bic.w	r3, r3, #15
 802c902:	b25a      	sxtb	r2, r3
 802c904:	79fb      	ldrb	r3, [r7, #7]
 802c906:	3301      	adds	r3, #1
 802c908:	b2db      	uxtb	r3, r3
 802c90a:	b25b      	sxtb	r3, r3
 802c90c:	f003 030f 	and.w	r3, r3, #15
 802c910:	b25b      	sxtb	r3, r3
 802c912:	4313      	orrs	r3, r2
 802c914:	b25a      	sxtb	r2, r3
 802c916:	4b0b      	ldr	r3, [pc, #44]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c918:	681b      	ldr	r3, [r3, #0]
 802c91a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c91e:	b2d2      	uxtb	r2, r2
 802c920:	725a      	strb	r2, [r3, #9]
    }
    SX1276Write( REG_LR_PACONFIG, sx1278->SX1276LR->RegPaConfig );
 802c922:	4b08      	ldr	r3, [pc, #32]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c924:	681b      	ldr	r3, [r3, #0]
 802c926:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c92a:	7a5b      	ldrb	r3, [r3, #9]
 802c92c:	4619      	mov	r1, r3
 802c92e:	2009      	movs	r0, #9
 802c930:	f7ff f830 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.Power = power;
 802c934:	4b03      	ldr	r3, [pc, #12]	; (802c944 <SX1276LoRaSetRFPower+0x1a0>)
 802c936:	681b      	ldr	r3, [r3, #0]
 802c938:	79fa      	ldrb	r2, [r7, #7]
 802c93a:	771a      	strb	r2, [r3, #28]
}
 802c93c:	bf00      	nop
 802c93e:	3708      	adds	r7, #8
 802c940:	46bd      	mov	sp, r7
 802c942:	bd80      	pop	{r7, pc}
 802c944:	20005028 	.word	0x20005028

0802c948 <SX1276LoRaSetSignalBandwidth>:
    }
    return sx1278->LoRaSettings.Power;
}

void SX1276LoRaSetSignalBandwidth( uint8_t bw )
{
 802c948:	b580      	push	{r7, lr}
 802c94a:	b082      	sub	sp, #8
 802c94c:	af00      	add	r7, sp, #0
 802c94e:	4603      	mov	r3, r0
 802c950:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_MODEMCONFIG1, &sx1278->SX1276LR->RegModemConfig1 );
 802c952:	4b17      	ldr	r3, [pc, #92]	; (802c9b0 <SX1276LoRaSetSignalBandwidth+0x68>)
 802c954:	681b      	ldr	r3, [r3, #0]
 802c956:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c95a:	331d      	adds	r3, #29
 802c95c:	4619      	mov	r1, r3
 802c95e:	201d      	movs	r0, #29
 802c960:	f7ff f82a 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegModemConfig1 = ( sx1278->SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_BW_MASK ) | ( bw << 4 );
 802c964:	4b12      	ldr	r3, [pc, #72]	; (802c9b0 <SX1276LoRaSetSignalBandwidth+0x68>)
 802c966:	681b      	ldr	r3, [r3, #0]
 802c968:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c96c:	7f5b      	ldrb	r3, [r3, #29]
 802c96e:	b25b      	sxtb	r3, r3
 802c970:	f003 030f 	and.w	r3, r3, #15
 802c974:	b25a      	sxtb	r2, r3
 802c976:	79fb      	ldrb	r3, [r7, #7]
 802c978:	011b      	lsls	r3, r3, #4
 802c97a:	b25b      	sxtb	r3, r3
 802c97c:	4313      	orrs	r3, r2
 802c97e:	b25a      	sxtb	r2, r3
 802c980:	4b0b      	ldr	r3, [pc, #44]	; (802c9b0 <SX1276LoRaSetSignalBandwidth+0x68>)
 802c982:	681b      	ldr	r3, [r3, #0]
 802c984:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c988:	b2d2      	uxtb	r2, r2
 802c98a:	775a      	strb	r2, [r3, #29]
    SX1276Write( REG_LR_MODEMCONFIG1, sx1278->SX1276LR->RegModemConfig1 );
 802c98c:	4b08      	ldr	r3, [pc, #32]	; (802c9b0 <SX1276LoRaSetSignalBandwidth+0x68>)
 802c98e:	681b      	ldr	r3, [r3, #0]
 802c990:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c994:	7f5b      	ldrb	r3, [r3, #29]
 802c996:	4619      	mov	r1, r3
 802c998:	201d      	movs	r0, #29
 802c99a:	f7fe fffb 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.SignalBw = bw;
 802c99e:	4b04      	ldr	r3, [pc, #16]	; (802c9b0 <SX1276LoRaSetSignalBandwidth+0x68>)
 802c9a0:	681b      	ldr	r3, [r3, #0]
 802c9a2:	79fa      	ldrb	r2, [r7, #7]
 802c9a4:	775a      	strb	r2, [r3, #29]
}
 802c9a6:	bf00      	nop
 802c9a8:	3708      	adds	r7, #8
 802c9aa:	46bd      	mov	sp, r7
 802c9ac:	bd80      	pop	{r7, pc}
 802c9ae:	bf00      	nop
 802c9b0:	20005028 	.word	0x20005028

0802c9b4 <SX1276LoRaSetSpreadingFactor>:
    sx1278->LoRaSettings.SignalBw = ( sx1278->SX1276LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_BW_MASK ) >> 4;
    return sx1278->LoRaSettings.SignalBw;
}

void SX1276LoRaSetSpreadingFactor( uint8_t factor )
{
 802c9b4:	b580      	push	{r7, lr}
 802c9b6:	b082      	sub	sp, #8
 802c9b8:	af00      	add	r7, sp, #0
 802c9ba:	4603      	mov	r3, r0
 802c9bc:	71fb      	strb	r3, [r7, #7]

    if( factor > 12 )
 802c9be:	79fb      	ldrb	r3, [r7, #7]
 802c9c0:	2b0c      	cmp	r3, #12
 802c9c2:	d902      	bls.n	802c9ca <SX1276LoRaSetSpreadingFactor+0x16>
    {
        factor = 12;
 802c9c4:	230c      	movs	r3, #12
 802c9c6:	71fb      	strb	r3, [r7, #7]
 802c9c8:	e004      	b.n	802c9d4 <SX1276LoRaSetSpreadingFactor+0x20>
    }
    else if( factor < 6 )
 802c9ca:	79fb      	ldrb	r3, [r7, #7]
 802c9cc:	2b05      	cmp	r3, #5
 802c9ce:	d801      	bhi.n	802c9d4 <SX1276LoRaSetSpreadingFactor+0x20>
    {
        factor = 6;
 802c9d0:	2306      	movs	r3, #6
 802c9d2:	71fb      	strb	r3, [r7, #7]
    }

    if( factor == 6 )
 802c9d4:	79fb      	ldrb	r3, [r7, #7]
 802c9d6:	2b06      	cmp	r3, #6
 802c9d8:	d103      	bne.n	802c9e2 <SX1276LoRaSetSpreadingFactor+0x2e>
    {
        SX1276LoRaSetNbTrigPeaks( 5 );
 802c9da:	2005      	movs	r0, #5
 802c9dc:	f000 fa0e 	bl	802cdfc <SX1276LoRaSetNbTrigPeaks>
 802c9e0:	e002      	b.n	802c9e8 <SX1276LoRaSetSpreadingFactor+0x34>
    }
    else
    {
        SX1276LoRaSetNbTrigPeaks( 3 );
 802c9e2:	2003      	movs	r0, #3
 802c9e4:	f000 fa0a 	bl	802cdfc <SX1276LoRaSetNbTrigPeaks>
    }

    SX1276Read( REG_LR_MODEMCONFIG2, &sx1278->SX1276LR->RegModemConfig2 );
 802c9e8:	4b16      	ldr	r3, [pc, #88]	; (802ca44 <SX1276LoRaSetSpreadingFactor+0x90>)
 802c9ea:	681b      	ldr	r3, [r3, #0]
 802c9ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802c9f0:	331e      	adds	r3, #30
 802c9f2:	4619      	mov	r1, r3
 802c9f4:	201e      	movs	r0, #30
 802c9f6:	f7fe ffdf 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegModemConfig2 = ( sx1278->SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SF_MASK ) | ( factor << 4 );
 802c9fa:	4b12      	ldr	r3, [pc, #72]	; (802ca44 <SX1276LoRaSetSpreadingFactor+0x90>)
 802c9fc:	681b      	ldr	r3, [r3, #0]
 802c9fe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca02:	7f9b      	ldrb	r3, [r3, #30]
 802ca04:	b25b      	sxtb	r3, r3
 802ca06:	f003 030f 	and.w	r3, r3, #15
 802ca0a:	b25a      	sxtb	r2, r3
 802ca0c:	79fb      	ldrb	r3, [r7, #7]
 802ca0e:	011b      	lsls	r3, r3, #4
 802ca10:	b25b      	sxtb	r3, r3
 802ca12:	4313      	orrs	r3, r2
 802ca14:	b25a      	sxtb	r2, r3
 802ca16:	4b0b      	ldr	r3, [pc, #44]	; (802ca44 <SX1276LoRaSetSpreadingFactor+0x90>)
 802ca18:	681b      	ldr	r3, [r3, #0]
 802ca1a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca1e:	b2d2      	uxtb	r2, r2
 802ca20:	779a      	strb	r2, [r3, #30]
    SX1276Write( REG_LR_MODEMCONFIG2, sx1278->SX1276LR->RegModemConfig2 );
 802ca22:	4b08      	ldr	r3, [pc, #32]	; (802ca44 <SX1276LoRaSetSpreadingFactor+0x90>)
 802ca24:	681b      	ldr	r3, [r3, #0]
 802ca26:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca2a:	7f9b      	ldrb	r3, [r3, #30]
 802ca2c:	4619      	mov	r1, r3
 802ca2e:	201e      	movs	r0, #30
 802ca30:	f7fe ffb0 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.SpreadingFactor = factor;
 802ca34:	4b03      	ldr	r3, [pc, #12]	; (802ca44 <SX1276LoRaSetSpreadingFactor+0x90>)
 802ca36:	681b      	ldr	r3, [r3, #0]
 802ca38:	79fa      	ldrb	r2, [r7, #7]
 802ca3a:	779a      	strb	r2, [r3, #30]
}
 802ca3c:	bf00      	nop
 802ca3e:	3708      	adds	r7, #8
 802ca40:	46bd      	mov	sp, r7
 802ca42:	bd80      	pop	{r7, pc}
 802ca44:	20005028 	.word	0x20005028

0802ca48 <SX1276LoRaSetErrorCoding>:
    sx1278->LoRaSettings.SpreadingFactor = ( sx1278->SX1276LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SF_MASK ) >> 4;
    return sx1278->LoRaSettings.SpreadingFactor;
}

void SX1276LoRaSetErrorCoding( uint8_t value )
{
 802ca48:	b580      	push	{r7, lr}
 802ca4a:	b082      	sub	sp, #8
 802ca4c:	af00      	add	r7, sp, #0
 802ca4e:	4603      	mov	r3, r0
 802ca50:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_MODEMCONFIG1, &sx1278->SX1276LR->RegModemConfig1 );
 802ca52:	4b17      	ldr	r3, [pc, #92]	; (802cab0 <SX1276LoRaSetErrorCoding+0x68>)
 802ca54:	681b      	ldr	r3, [r3, #0]
 802ca56:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca5a:	331d      	adds	r3, #29
 802ca5c:	4619      	mov	r1, r3
 802ca5e:	201d      	movs	r0, #29
 802ca60:	f7fe ffaa 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegModemConfig1 = ( sx1278->SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_CODINGRATE_MASK ) | ( value << 1 );
 802ca64:	4b12      	ldr	r3, [pc, #72]	; (802cab0 <SX1276LoRaSetErrorCoding+0x68>)
 802ca66:	681b      	ldr	r3, [r3, #0]
 802ca68:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca6c:	7f5b      	ldrb	r3, [r3, #29]
 802ca6e:	b25b      	sxtb	r3, r3
 802ca70:	f023 030e 	bic.w	r3, r3, #14
 802ca74:	b25a      	sxtb	r2, r3
 802ca76:	79fb      	ldrb	r3, [r7, #7]
 802ca78:	005b      	lsls	r3, r3, #1
 802ca7a:	b25b      	sxtb	r3, r3
 802ca7c:	4313      	orrs	r3, r2
 802ca7e:	b25a      	sxtb	r2, r3
 802ca80:	4b0b      	ldr	r3, [pc, #44]	; (802cab0 <SX1276LoRaSetErrorCoding+0x68>)
 802ca82:	681b      	ldr	r3, [r3, #0]
 802ca84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca88:	b2d2      	uxtb	r2, r2
 802ca8a:	775a      	strb	r2, [r3, #29]
    SX1276Write( REG_LR_MODEMCONFIG1, sx1278->SX1276LR->RegModemConfig1 );
 802ca8c:	4b08      	ldr	r3, [pc, #32]	; (802cab0 <SX1276LoRaSetErrorCoding+0x68>)
 802ca8e:	681b      	ldr	r3, [r3, #0]
 802ca90:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ca94:	7f5b      	ldrb	r3, [r3, #29]
 802ca96:	4619      	mov	r1, r3
 802ca98:	201d      	movs	r0, #29
 802ca9a:	f7fe ff7b 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.ErrorCoding = value;
 802ca9e:	4b04      	ldr	r3, [pc, #16]	; (802cab0 <SX1276LoRaSetErrorCoding+0x68>)
 802caa0:	681b      	ldr	r3, [r3, #0]
 802caa2:	79fa      	ldrb	r2, [r7, #7]
 802caa4:	77da      	strb	r2, [r3, #31]
}
 802caa6:	bf00      	nop
 802caa8:	3708      	adds	r7, #8
 802caaa:	46bd      	mov	sp, r7
 802caac:	bd80      	pop	{r7, pc}
 802caae:	bf00      	nop
 802cab0:	20005028 	.word	0x20005028

0802cab4 <SX1276LoRaSetPacketCrcOn>:
    sx1278->LoRaSettings.ErrorCoding = ( sx1278->SX1276LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_CODINGRATE_MASK ) >> 1;
    return sx1278->LoRaSettings.ErrorCoding;
}

void SX1276LoRaSetPacketCrcOn( bool enable )
{
 802cab4:	b580      	push	{r7, lr}
 802cab6:	b082      	sub	sp, #8
 802cab8:	af00      	add	r7, sp, #0
 802caba:	4603      	mov	r3, r0
 802cabc:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_MODEMCONFIG2, &sx1278->SX1276LR->RegModemConfig2 );
 802cabe:	4b17      	ldr	r3, [pc, #92]	; (802cb1c <SX1276LoRaSetPacketCrcOn+0x68>)
 802cac0:	681b      	ldr	r3, [r3, #0]
 802cac2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cac6:	331e      	adds	r3, #30
 802cac8:	4619      	mov	r1, r3
 802caca:	201e      	movs	r0, #30
 802cacc:	f7fe ff74 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegModemConfig2 = ( sx1278->SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) | ( enable << 2 );
 802cad0:	4b12      	ldr	r3, [pc, #72]	; (802cb1c <SX1276LoRaSetPacketCrcOn+0x68>)
 802cad2:	681b      	ldr	r3, [r3, #0]
 802cad4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cad8:	7f9b      	ldrb	r3, [r3, #30]
 802cada:	b25b      	sxtb	r3, r3
 802cadc:	f023 0304 	bic.w	r3, r3, #4
 802cae0:	b25a      	sxtb	r2, r3
 802cae2:	79fb      	ldrb	r3, [r7, #7]
 802cae4:	009b      	lsls	r3, r3, #2
 802cae6:	b25b      	sxtb	r3, r3
 802cae8:	4313      	orrs	r3, r2
 802caea:	b25a      	sxtb	r2, r3
 802caec:	4b0b      	ldr	r3, [pc, #44]	; (802cb1c <SX1276LoRaSetPacketCrcOn+0x68>)
 802caee:	681b      	ldr	r3, [r3, #0]
 802caf0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802caf4:	b2d2      	uxtb	r2, r2
 802caf6:	779a      	strb	r2, [r3, #30]
    SX1276Write( REG_LR_MODEMCONFIG2, sx1278->SX1276LR->RegModemConfig2 );
 802caf8:	4b08      	ldr	r3, [pc, #32]	; (802cb1c <SX1276LoRaSetPacketCrcOn+0x68>)
 802cafa:	681b      	ldr	r3, [r3, #0]
 802cafc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cb00:	7f9b      	ldrb	r3, [r3, #30]
 802cb02:	4619      	mov	r1, r3
 802cb04:	201e      	movs	r0, #30
 802cb06:	f7fe ff45 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.CrcOn = enable;
 802cb0a:	4b04      	ldr	r3, [pc, #16]	; (802cb1c <SX1276LoRaSetPacketCrcOn+0x68>)
 802cb0c:	681b      	ldr	r3, [r3, #0]
 802cb0e:	79fa      	ldrb	r2, [r7, #7]
 802cb10:	f883 2020 	strb.w	r2, [r3, #32]
}
 802cb14:	bf00      	nop
 802cb16:	3708      	adds	r7, #8
 802cb18:	46bd      	mov	sp, r7
 802cb1a:	bd80      	pop	{r7, pc}
 802cb1c:	20005028 	.word	0x20005028

0802cb20 <SX1276LoRaSetPreambleLength>:

void SX1276LoRaSetPreambleLength( uint16_t value )
{
 802cb20:	b580      	push	{r7, lr}
 802cb22:	b082      	sub	sp, #8
 802cb24:	af00      	add	r7, sp, #0
 802cb26:	4603      	mov	r3, r0
 802cb28:	80fb      	strh	r3, [r7, #6]
    SX1276ReadBuffer( REG_LR_PREAMBLEMSB, &sx1278->SX1276LR->RegPreambleMsb, 2 );
 802cb2a:	4b15      	ldr	r3, [pc, #84]	; (802cb80 <SX1276LoRaSetPreambleLength+0x60>)
 802cb2c:	681b      	ldr	r3, [r3, #0]
 802cb2e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cb32:	3320      	adds	r3, #32
 802cb34:	2202      	movs	r2, #2
 802cb36:	4619      	mov	r1, r3
 802cb38:	2020      	movs	r0, #32
 802cb3a:	f7fe ff85 	bl	802ba48 <SX1276ReadBuffer>

    sx1278->SX1276LR->RegPreambleMsb = ( value >> 8 ) & 0x00FF;
 802cb3e:	88fb      	ldrh	r3, [r7, #6]
 802cb40:	0a1b      	lsrs	r3, r3, #8
 802cb42:	b29a      	uxth	r2, r3
 802cb44:	4b0e      	ldr	r3, [pc, #56]	; (802cb80 <SX1276LoRaSetPreambleLength+0x60>)
 802cb46:	681b      	ldr	r3, [r3, #0]
 802cb48:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cb4c:	b2d2      	uxtb	r2, r2
 802cb4e:	f883 2020 	strb.w	r2, [r3, #32]
    sx1278->SX1276LR->RegPreambleLsb = value & 0xFF;
 802cb52:	4b0b      	ldr	r3, [pc, #44]	; (802cb80 <SX1276LoRaSetPreambleLength+0x60>)
 802cb54:	681b      	ldr	r3, [r3, #0]
 802cb56:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cb5a:	88fa      	ldrh	r2, [r7, #6]
 802cb5c:	b2d2      	uxtb	r2, r2
 802cb5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SX1276WriteBuffer( REG_LR_PREAMBLEMSB, &sx1278->SX1276LR->RegPreambleMsb, 2 );
 802cb62:	4b07      	ldr	r3, [pc, #28]	; (802cb80 <SX1276LoRaSetPreambleLength+0x60>)
 802cb64:	681b      	ldr	r3, [r3, #0]
 802cb66:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cb6a:	3320      	adds	r3, #32
 802cb6c:	2202      	movs	r2, #2
 802cb6e:	4619      	mov	r1, r3
 802cb70:	2020      	movs	r0, #32
 802cb72:	f7fe ff31 	bl	802b9d8 <SX1276WriteBuffer>
}
 802cb76:	bf00      	nop
 802cb78:	3708      	adds	r7, #8
 802cb7a:	46bd      	mov	sp, r7
 802cb7c:	bd80      	pop	{r7, pc}
 802cb7e:	bf00      	nop
 802cb80:	20005028 	.word	0x20005028

0802cb84 <SX1276LoRaSetImplicitHeaderOn>:
    sx1278->LoRaSettings.CrcOn = ( sx1278->SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON ) >> 1;
    return sx1278->LoRaSettings.CrcOn;
}

void SX1276LoRaSetImplicitHeaderOn( bool enable )
{
 802cb84:	b580      	push	{r7, lr}
 802cb86:	b082      	sub	sp, #8
 802cb88:	af00      	add	r7, sp, #0
 802cb8a:	4603      	mov	r3, r0
 802cb8c:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_MODEMCONFIG1, &sx1278->SX1276LR->RegModemConfig1 );
 802cb8e:	4b17      	ldr	r3, [pc, #92]	; (802cbec <SX1276LoRaSetImplicitHeaderOn+0x68>)
 802cb90:	681b      	ldr	r3, [r3, #0]
 802cb92:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cb96:	331d      	adds	r3, #29
 802cb98:	4619      	mov	r1, r3
 802cb9a:	201d      	movs	r0, #29
 802cb9c:	f7fe ff0c 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegModemConfig1 = ( sx1278->SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) | ( enable );
 802cba0:	4b12      	ldr	r3, [pc, #72]	; (802cbec <SX1276LoRaSetImplicitHeaderOn+0x68>)
 802cba2:	681b      	ldr	r3, [r3, #0]
 802cba4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cba8:	7f5b      	ldrb	r3, [r3, #29]
 802cbaa:	b25b      	sxtb	r3, r3
 802cbac:	f023 0301 	bic.w	r3, r3, #1
 802cbb0:	b25a      	sxtb	r2, r3
 802cbb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802cbb6:	4313      	orrs	r3, r2
 802cbb8:	b25a      	sxtb	r2, r3
 802cbba:	4b0c      	ldr	r3, [pc, #48]	; (802cbec <SX1276LoRaSetImplicitHeaderOn+0x68>)
 802cbbc:	681b      	ldr	r3, [r3, #0]
 802cbbe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cbc2:	b2d2      	uxtb	r2, r2
 802cbc4:	775a      	strb	r2, [r3, #29]
    SX1276Write( REG_LR_MODEMCONFIG1, sx1278->SX1276LR->RegModemConfig1 );
 802cbc6:	4b09      	ldr	r3, [pc, #36]	; (802cbec <SX1276LoRaSetImplicitHeaderOn+0x68>)
 802cbc8:	681b      	ldr	r3, [r3, #0]
 802cbca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cbce:	7f5b      	ldrb	r3, [r3, #29]
 802cbd0:	4619      	mov	r1, r3
 802cbd2:	201d      	movs	r0, #29
 802cbd4:	f7fe fede 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.ImplicitHeaderOn = enable;
 802cbd8:	4b04      	ldr	r3, [pc, #16]	; (802cbec <SX1276LoRaSetImplicitHeaderOn+0x68>)
 802cbda:	681b      	ldr	r3, [r3, #0]
 802cbdc:	79fa      	ldrb	r2, [r7, #7]
 802cbde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 802cbe2:	bf00      	nop
 802cbe4:	3708      	adds	r7, #8
 802cbe6:	46bd      	mov	sp, r7
 802cbe8:	bd80      	pop	{r7, pc}
 802cbea:	bf00      	nop
 802cbec:	20005028 	.word	0x20005028

0802cbf0 <SX1276LoRaSetPayloadLength>:
{
    return sx1278->LoRaSettings.RxPacketTimeout;
}

void SX1276LoRaSetPayloadLength( uint8_t value )
{
 802cbf0:	b580      	push	{r7, lr}
 802cbf2:	b082      	sub	sp, #8
 802cbf4:	af00      	add	r7, sp, #0
 802cbf6:	4603      	mov	r3, r0
 802cbf8:	71fb      	strb	r3, [r7, #7]
	sx1278->SX1276LR->RegPayloadLength = value;
 802cbfa:	4b0d      	ldr	r3, [pc, #52]	; (802cc30 <SX1276LoRaSetPayloadLength+0x40>)
 802cbfc:	681b      	ldr	r3, [r3, #0]
 802cbfe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc02:	79fa      	ldrb	r2, [r7, #7]
 802cc04:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SX1276Write( REG_LR_PAYLOADLENGTH, sx1278->SX1276LR->RegPayloadLength );
 802cc08:	4b09      	ldr	r3, [pc, #36]	; (802cc30 <SX1276LoRaSetPayloadLength+0x40>)
 802cc0a:	681b      	ldr	r3, [r3, #0]
 802cc0c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc10:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802cc14:	4619      	mov	r1, r3
 802cc16:	2022      	movs	r0, #34	; 0x22
 802cc18:	f7fe febc 	bl	802b994 <SX1276Write>
    sx1278->LoRaSettings.PayloadLength = value;
 802cc1c:	4b04      	ldr	r3, [pc, #16]	; (802cc30 <SX1276LoRaSetPayloadLength+0x40>)
 802cc1e:	681b      	ldr	r3, [r3, #0]
 802cc20:	79fa      	ldrb	r2, [r7, #7]
 802cc22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 802cc26:	bf00      	nop
 802cc28:	3708      	adds	r7, #8
 802cc2a:	46bd      	mov	sp, r7
 802cc2c:	bd80      	pop	{r7, pc}
 802cc2e:	bf00      	nop
 802cc30:	20005028 	.word	0x20005028

0802cc34 <SX1276LoRaSetPa20dBm>:
    sx1278->LoRaSettings.PayloadLength = sx1278->SX1276LR->RegPayloadLength;
    return sx1278->LoRaSettings.PayloadLength;
}

void SX1276LoRaSetPa20dBm( bool enale )
{
 802cc34:	b580      	push	{r7, lr}
 802cc36:	b082      	sub	sp, #8
 802cc38:	af00      	add	r7, sp, #0
 802cc3a:	4603      	mov	r3, r0
 802cc3c:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_PADAC, &sx1278->SX1276LR->RegPaDac );
 802cc3e:	4b1d      	ldr	r3, [pc, #116]	; (802ccb4 <SX1276LoRaSetPa20dBm+0x80>)
 802cc40:	681b      	ldr	r3, [r3, #0]
 802cc42:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc46:	3349      	adds	r3, #73	; 0x49
 802cc48:	4619      	mov	r1, r3
 802cc4a:	204d      	movs	r0, #77	; 0x4d
 802cc4c:	f7fe feb4 	bl	802b9b8 <SX1276Read>
    SX1276Read( REG_LR_PACONFIG, &sx1278->SX1276LR->RegPaConfig );
 802cc50:	4b18      	ldr	r3, [pc, #96]	; (802ccb4 <SX1276LoRaSetPa20dBm+0x80>)
 802cc52:	681b      	ldr	r3, [r3, #0]
 802cc54:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc58:	3309      	adds	r3, #9
 802cc5a:	4619      	mov	r1, r3
 802cc5c:	2009      	movs	r0, #9
 802cc5e:	f7fe feab 	bl	802b9b8 <SX1276Read>

    if( ( sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
 802cc62:	4b14      	ldr	r3, [pc, #80]	; (802ccb4 <SX1276LoRaSetPa20dBm+0x80>)
 802cc64:	681b      	ldr	r3, [r3, #0]
 802cc66:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc6a:	7a5b      	ldrb	r3, [r3, #9]
 802cc6c:	b25b      	sxtb	r3, r3
 802cc6e:	2b00      	cmp	r3, #0
 802cc70:	da0a      	bge.n	802cc88 <SX1276LoRaSetPa20dBm+0x54>
    {    
        if( enale == true )
 802cc72:	79fb      	ldrb	r3, [r7, #7]
 802cc74:	2b00      	cmp	r3, #0
 802cc76:	d00e      	beq.n	802cc96 <SX1276LoRaSetPa20dBm+0x62>
        {
        	sx1278->SX1276LR->RegPaDac = 0x87;
 802cc78:	4b0e      	ldr	r3, [pc, #56]	; (802ccb4 <SX1276LoRaSetPa20dBm+0x80>)
 802cc7a:	681b      	ldr	r3, [r3, #0]
 802cc7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc80:	2287      	movs	r2, #135	; 0x87
 802cc82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 802cc86:	e006      	b.n	802cc96 <SX1276LoRaSetPa20dBm+0x62>
        }
    }
    else
    {
    	sx1278->SX1276LR->RegPaDac = 0x84;
 802cc88:	4b0a      	ldr	r3, [pc, #40]	; (802ccb4 <SX1276LoRaSetPa20dBm+0x80>)
 802cc8a:	681b      	ldr	r3, [r3, #0]
 802cc8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc90:	2284      	movs	r2, #132	; 0x84
 802cc92:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    SX1276Write( REG_LR_PADAC, sx1278->SX1276LR->RegPaDac );
 802cc96:	4b07      	ldr	r3, [pc, #28]	; (802ccb4 <SX1276LoRaSetPa20dBm+0x80>)
 802cc98:	681b      	ldr	r3, [r3, #0]
 802cc9a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cc9e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802cca2:	4619      	mov	r1, r3
 802cca4:	204d      	movs	r0, #77	; 0x4d
 802cca6:	f7fe fe75 	bl	802b994 <SX1276Write>
}
 802ccaa:	bf00      	nop
 802ccac:	3708      	adds	r7, #8
 802ccae:	46bd      	mov	sp, r7
 802ccb0:	bd80      	pop	{r7, pc}
 802ccb2:	bf00      	nop
 802ccb4:	20005028 	.word	0x20005028

0802ccb8 <SX1276LoRaSetPAOutput>:
    
    return ( ( sx1278->SX1276LR->RegPaDac & 0x07 ) == 0x07 ) ? true : false;
}

void SX1276LoRaSetPAOutput( uint8_t outputPin )
{
 802ccb8:	b580      	push	{r7, lr}
 802ccba:	b082      	sub	sp, #8
 802ccbc:	af00      	add	r7, sp, #0
 802ccbe:	4603      	mov	r3, r0
 802ccc0:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_PACONFIG, &sx1278->SX1276LR->RegPaConfig );
 802ccc2:	4b14      	ldr	r3, [pc, #80]	; (802cd14 <SX1276LoRaSetPAOutput+0x5c>)
 802ccc4:	681b      	ldr	r3, [r3, #0]
 802ccc6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ccca:	3309      	adds	r3, #9
 802cccc:	4619      	mov	r1, r3
 802ccce:	2009      	movs	r0, #9
 802ccd0:	f7fe fe72 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegPaConfig = (sx1278->SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_MASK ) | outputPin;
 802ccd4:	4b0f      	ldr	r3, [pc, #60]	; (802cd14 <SX1276LoRaSetPAOutput+0x5c>)
 802ccd6:	681b      	ldr	r3, [r3, #0]
 802ccd8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ccdc:	7a5b      	ldrb	r3, [r3, #9]
 802ccde:	b25b      	sxtb	r3, r3
 802cce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802cce4:	b25a      	sxtb	r2, r3
 802cce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802ccea:	4313      	orrs	r3, r2
 802ccec:	b25a      	sxtb	r2, r3
 802ccee:	4b09      	ldr	r3, [pc, #36]	; (802cd14 <SX1276LoRaSetPAOutput+0x5c>)
 802ccf0:	681b      	ldr	r3, [r3, #0]
 802ccf2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ccf6:	b2d2      	uxtb	r2, r2
 802ccf8:	725a      	strb	r2, [r3, #9]
    SX1276Write( REG_LR_PACONFIG, sx1278->SX1276LR->RegPaConfig );
 802ccfa:	4b06      	ldr	r3, [pc, #24]	; (802cd14 <SX1276LoRaSetPAOutput+0x5c>)
 802ccfc:	681b      	ldr	r3, [r3, #0]
 802ccfe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cd02:	7a5b      	ldrb	r3, [r3, #9]
 802cd04:	4619      	mov	r1, r3
 802cd06:	2009      	movs	r0, #9
 802cd08:	f7fe fe44 	bl	802b994 <SX1276Write>
}
 802cd0c:	bf00      	nop
 802cd0e:	3708      	adds	r7, #8
 802cd10:	46bd      	mov	sp, r7
 802cd12:	bd80      	pop	{r7, pc}
 802cd14:	20005028 	.word	0x20005028

0802cd18 <SX1276LoRaSetSymbTimeout>:
    SX1276Read( REG_LR_PARAMP, &sx1278->SX1276LR->RegPaRamp );
    return sx1278->SX1276LR->RegPaRamp & ~RFLR_PARAMP_MASK;
}

void SX1276LoRaSetSymbTimeout( uint16_t value )
{
 802cd18:	b580      	push	{r7, lr}
 802cd1a:	b082      	sub	sp, #8
 802cd1c:	af00      	add	r7, sp, #0
 802cd1e:	4603      	mov	r3, r0
 802cd20:	80fb      	strh	r3, [r7, #6]
    SX1276ReadBuffer( REG_LR_MODEMCONFIG2, &sx1278->SX1276LR->RegModemConfig2, 2 );
 802cd22:	4b1b      	ldr	r3, [pc, #108]	; (802cd90 <SX1276LoRaSetSymbTimeout+0x78>)
 802cd24:	681b      	ldr	r3, [r3, #0]
 802cd26:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cd2a:	331e      	adds	r3, #30
 802cd2c:	2202      	movs	r2, #2
 802cd2e:	4619      	mov	r1, r3
 802cd30:	201e      	movs	r0, #30
 802cd32:	f7fe fe89 	bl	802ba48 <SX1276ReadBuffer>

    sx1278->SX1276LR->RegModemConfig2 = ( sx1278->SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) | ( ( value >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );
 802cd36:	4b16      	ldr	r3, [pc, #88]	; (802cd90 <SX1276LoRaSetSymbTimeout+0x78>)
 802cd38:	681b      	ldr	r3, [r3, #0]
 802cd3a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cd3e:	7f9b      	ldrb	r3, [r3, #30]
 802cd40:	b25b      	sxtb	r3, r3
 802cd42:	f023 0303 	bic.w	r3, r3, #3
 802cd46:	b25a      	sxtb	r2, r3
 802cd48:	88fb      	ldrh	r3, [r7, #6]
 802cd4a:	0a1b      	lsrs	r3, r3, #8
 802cd4c:	b29b      	uxth	r3, r3
 802cd4e:	b25b      	sxtb	r3, r3
 802cd50:	f003 0303 	and.w	r3, r3, #3
 802cd54:	b25b      	sxtb	r3, r3
 802cd56:	4313      	orrs	r3, r2
 802cd58:	b25a      	sxtb	r2, r3
 802cd5a:	4b0d      	ldr	r3, [pc, #52]	; (802cd90 <SX1276LoRaSetSymbTimeout+0x78>)
 802cd5c:	681b      	ldr	r3, [r3, #0]
 802cd5e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cd62:	b2d2      	uxtb	r2, r2
 802cd64:	779a      	strb	r2, [r3, #30]
    sx1278->SX1276LR->RegSymbTimeoutLsb = value & 0xFF;
 802cd66:	4b0a      	ldr	r3, [pc, #40]	; (802cd90 <SX1276LoRaSetSymbTimeout+0x78>)
 802cd68:	681b      	ldr	r3, [r3, #0]
 802cd6a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cd6e:	88fa      	ldrh	r2, [r7, #6]
 802cd70:	b2d2      	uxtb	r2, r2
 802cd72:	77da      	strb	r2, [r3, #31]
    SX1276WriteBuffer( REG_LR_MODEMCONFIG2, &sx1278->SX1276LR->RegModemConfig2, 2 );
 802cd74:	4b06      	ldr	r3, [pc, #24]	; (802cd90 <SX1276LoRaSetSymbTimeout+0x78>)
 802cd76:	681b      	ldr	r3, [r3, #0]
 802cd78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cd7c:	331e      	adds	r3, #30
 802cd7e:	2202      	movs	r2, #2
 802cd80:	4619      	mov	r1, r3
 802cd82:	201e      	movs	r0, #30
 802cd84:	f7fe fe28 	bl	802b9d8 <SX1276WriteBuffer>
}
 802cd88:	bf00      	nop
 802cd8a:	3708      	adds	r7, #8
 802cd8c:	46bd      	mov	sp, r7
 802cd8e:	bd80      	pop	{r7, pc}
 802cd90:	20005028 	.word	0x20005028

0802cd94 <SX1276LoRaSetLowDatarateOptimize>:
    SX1276ReadBuffer( REG_LR_MODEMCONFIG2, &sx1278->SX1276LR->RegModemConfig2, 2 );
    return ( ( sx1278->SX1276LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) << 8 ) | sx1278->SX1276LR->RegSymbTimeoutLsb;
}

void SX1276LoRaSetLowDatarateOptimize( bool enable )
{
 802cd94:	b580      	push	{r7, lr}
 802cd96:	b082      	sub	sp, #8
 802cd98:	af00      	add	r7, sp, #0
 802cd9a:	4603      	mov	r3, r0
 802cd9c:	71fb      	strb	r3, [r7, #7]
    SX1276Read( REG_LR_MODEMCONFIG3, &sx1278->SX1276LR->RegModemConfig3 );
 802cd9e:	4b16      	ldr	r3, [pc, #88]	; (802cdf8 <SX1276LoRaSetLowDatarateOptimize+0x64>)
 802cda0:	681b      	ldr	r3, [r3, #0]
 802cda2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cda6:	3326      	adds	r3, #38	; 0x26
 802cda8:	4619      	mov	r1, r3
 802cdaa:	2026      	movs	r0, #38	; 0x26
 802cdac:	f7fe fe04 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegModemConfig3 = ( sx1278->SX1276LR->RegModemConfig3 & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) | ( enable << 3 );
 802cdb0:	4b11      	ldr	r3, [pc, #68]	; (802cdf8 <SX1276LoRaSetLowDatarateOptimize+0x64>)
 802cdb2:	681b      	ldr	r3, [r3, #0]
 802cdb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cdb8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802cdbc:	b25b      	sxtb	r3, r3
 802cdbe:	f023 0308 	bic.w	r3, r3, #8
 802cdc2:	b25a      	sxtb	r2, r3
 802cdc4:	79fb      	ldrb	r3, [r7, #7]
 802cdc6:	00db      	lsls	r3, r3, #3
 802cdc8:	b25b      	sxtb	r3, r3
 802cdca:	4313      	orrs	r3, r2
 802cdcc:	b25a      	sxtb	r2, r3
 802cdce:	4b0a      	ldr	r3, [pc, #40]	; (802cdf8 <SX1276LoRaSetLowDatarateOptimize+0x64>)
 802cdd0:	681b      	ldr	r3, [r3, #0]
 802cdd2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cdd6:	b2d2      	uxtb	r2, r2
 802cdd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    SX1276Write( REG_LR_MODEMCONFIG3, sx1278->SX1276LR->RegModemConfig3 );
 802cddc:	4b06      	ldr	r3, [pc, #24]	; (802cdf8 <SX1276LoRaSetLowDatarateOptimize+0x64>)
 802cdde:	681b      	ldr	r3, [r3, #0]
 802cde0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cde4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802cde8:	4619      	mov	r1, r3
 802cdea:	2026      	movs	r0, #38	; 0x26
 802cdec:	f7fe fdd2 	bl	802b994 <SX1276Write>
}
 802cdf0:	bf00      	nop
 802cdf2:	3708      	adds	r7, #8
 802cdf4:	46bd      	mov	sp, r7
 802cdf6:	bd80      	pop	{r7, pc}
 802cdf8:	20005028 	.word	0x20005028

0802cdfc <SX1276LoRaSetNbTrigPeaks>:
    SX1276Read( REG_LR_MODEMCONFIG3, &sx1278->SX1276LR->RegModemConfig3 );
    return ( ( sx1278->SX1276LR->RegModemConfig3 & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON ) >> 3 );
}

void SX1276LoRaSetNbTrigPeaks( uint8_t value )
{
 802cdfc:	b580      	push	{r7, lr}
 802cdfe:	b082      	sub	sp, #8
 802ce00:	af00      	add	r7, sp, #0
 802ce02:	4603      	mov	r3, r0
 802ce04:	71fb      	strb	r3, [r7, #7]
    SX1276Read( 0x31, &sx1278->SX1276LR->RegDetectOptimize );
 802ce06:	4b16      	ldr	r3, [pc, #88]	; (802ce60 <SX1276LoRaSetNbTrigPeaks+0x64>)
 802ce08:	681b      	ldr	r3, [r3, #0]
 802ce0a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ce0e:	3330      	adds	r3, #48	; 0x30
 802ce10:	4619      	mov	r1, r3
 802ce12:	2031      	movs	r0, #49	; 0x31
 802ce14:	f7fe fdd0 	bl	802b9b8 <SX1276Read>
    sx1278->SX1276LR->RegDetectOptimize = ( sx1278->SX1276LR->RegDetectOptimize & 0xF8 ) | value;
 802ce18:	4b11      	ldr	r3, [pc, #68]	; (802ce60 <SX1276LoRaSetNbTrigPeaks+0x64>)
 802ce1a:	681b      	ldr	r3, [r3, #0]
 802ce1c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ce20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802ce24:	b25b      	sxtb	r3, r3
 802ce26:	f023 0307 	bic.w	r3, r3, #7
 802ce2a:	b25a      	sxtb	r2, r3
 802ce2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802ce30:	4313      	orrs	r3, r2
 802ce32:	b25a      	sxtb	r2, r3
 802ce34:	4b0a      	ldr	r3, [pc, #40]	; (802ce60 <SX1276LoRaSetNbTrigPeaks+0x64>)
 802ce36:	681b      	ldr	r3, [r3, #0]
 802ce38:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ce3c:	b2d2      	uxtb	r2, r2
 802ce3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    SX1276Write( 0x31, sx1278->SX1276LR->RegDetectOptimize );
 802ce42:	4b07      	ldr	r3, [pc, #28]	; (802ce60 <SX1276LoRaSetNbTrigPeaks+0x64>)
 802ce44:	681b      	ldr	r3, [r3, #0]
 802ce46:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802ce4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802ce4e:	4619      	mov	r1, r3
 802ce50:	2031      	movs	r0, #49	; 0x31
 802ce52:	f7fe fd9f 	bl	802b994 <SX1276Write>
}
 802ce56:	bf00      	nop
 802ce58:	3708      	adds	r7, #8
 802ce5a:	46bd      	mov	sp, r7
 802ce5c:	bd80      	pop	{r7, pc}
 802ce5e:	bf00      	nop
 802ce60:	20005028 	.word	0x20005028

0802ce64 <SX1276Init>:
//static bool LoRaOn = false;
//static bool LoRaOnState = false;
//extern tSX1276* SX1276;

void SX1276Init( void )
{
 802ce64:	b580      	push	{r7, lr}
 802ce66:	af00      	add	r7, sp, #0
    // Initialize FSK and LoRa registers structure
	sx1278->SX1276 = ( tSX1276* )sx1278->SX1276Regs;
 802ce68:	4b10      	ldr	r3, [pc, #64]	; (802ceac <SX1276Init+0x48>)
 802ce6a:	681a      	ldr	r2, [r3, #0]
 802ce6c:	4b0f      	ldr	r3, [pc, #60]	; (802ceac <SX1276Init+0x48>)
 802ce6e:	681b      	ldr	r3, [r3, #0]
 802ce70:	f502 72ab 	add.w	r2, r2, #342	; 0x156
 802ce74:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	sx1278->SX1276LR = ( tSX1276LR* )sx1278->SX1276Regs;
 802ce78:	4b0c      	ldr	r3, [pc, #48]	; (802ceac <SX1276Init+0x48>)
 802ce7a:	681a      	ldr	r2, [r3, #0]
 802ce7c:	4b0b      	ldr	r3, [pc, #44]	; (802ceac <SX1276Init+0x48>)
 802ce7e:	681b      	ldr	r3, [r3, #0]
 802ce80:	f502 72ab 	add.w	r2, r2, #342	; 0x156
 802ce84:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

    SX1276Reset();
 802ce88:	f000 f812 	bl	802ceb0 <SX1276Reset>
    // Initialize FSK modem
    SX1276FskInit( );

#else

    sx1278->LoRaOn = true;
 802ce8c:	4b07      	ldr	r3, [pc, #28]	; (802ceac <SX1276Init+0x48>)
 802ce8e:	681b      	ldr	r3, [r3, #0]
 802ce90:	2201      	movs	r2, #1
 802ce92:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
    SX1276SetLoRaOn( sx1278->LoRaOn );
 802ce96:	4b05      	ldr	r3, [pc, #20]	; (802ceac <SX1276Init+0x48>)
 802ce98:	681b      	ldr	r3, [r3, #0]
 802ce9a:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 802ce9e:	4618      	mov	r0, r3
 802cea0:	f000 f814 	bl	802cecc <SX1276SetLoRaOn>
    // Initialize LoRa modem
    SX1276LoRaInit();
 802cea4:	f7fe fe60 	bl	802bb68 <SX1276LoRaInit>
    
#endif

}
 802cea8:	bf00      	nop
 802ceaa:	bd80      	pop	{r7, pc}
 802ceac:	20005028 	.word	0x20005028

0802ceb0 <SX1276Reset>:

void SX1276Reset( void )
{
 802ceb0:	b580      	push	{r7, lr}
 802ceb2:	af00      	add	r7, sp, #0
    SX1276SetReset( RADIO_RESET_OFF );
 802ceb4:	2000      	movs	r0, #0
 802ceb6:	f7fe fd59 	bl	802b96c <SX1276SetReset>
    
    HAL_Delay(10);
 802ceba:	200a      	movs	r0, #10
 802cebc:	f7f8 f868 	bl	8024f90 <HAL_Delay>
    
    SX1276SetReset( RADIO_RESET_ON );
 802cec0:	2001      	movs	r0, #1
 802cec2:	f7fe fd53 	bl	802b96c <SX1276SetReset>
}
 802cec6:	bf00      	nop
 802cec8:	bd80      	pop	{r7, pc}
	...

0802cecc <SX1276SetLoRaOn>:

void SX1276SetLoRaOn( bool enable )
{
 802cecc:	b580      	push	{r7, lr}
 802cece:	b082      	sub	sp, #8
 802ced0:	af00      	add	r7, sp, #0
 802ced2:	4603      	mov	r3, r0
 802ced4:	71fb      	strb	r3, [r7, #7]
    if( sx1278->LoRaOnState == enable )
 802ced6:	4b40      	ldr	r3, [pc, #256]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802ced8:	681b      	ldr	r3, [r3, #0]
 802ceda:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 802cede:	79fa      	ldrb	r2, [r7, #7]
 802cee0:	429a      	cmp	r2, r3
 802cee2:	d075      	beq.n	802cfd0 <SX1276SetLoRaOn+0x104>
    {
        return;
    }
    sx1278->LoRaOnState = enable;
 802cee4:	4b3c      	ldr	r3, [pc, #240]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cee6:	681b      	ldr	r3, [r3, #0]
 802cee8:	79fa      	ldrb	r2, [r7, #7]
 802ceea:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
    sx1278->LoRaOn = enable;
 802ceee:	4b3a      	ldr	r3, [pc, #232]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cef0:	681b      	ldr	r3, [r3, #0]
 802cef2:	79fa      	ldrb	r2, [r7, #7]
 802cef4:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6

    if( sx1278->LoRaOn == true )
 802cef8:	4b37      	ldr	r3, [pc, #220]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cefa:	681b      	ldr	r3, [r3, #0]
 802cefc:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 802cf00:	2b00      	cmp	r3, #0
 802cf02:	d03e      	beq.n	802cf82 <SX1276SetLoRaOn+0xb6>
    {
        SX1276LoRaSetOpMode( RFLR_OPMODE_SLEEP );
 802cf04:	2000      	movs	r0, #0
 802cf06:	f7fe fec7 	bl	802bc98 <SX1276LoRaSetOpMode>
        
        sx1278->SX1276LR->RegOpMode = ( sx1278->SX1276LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON;
 802cf0a:	4b33      	ldr	r3, [pc, #204]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf0c:	681b      	ldr	r3, [r3, #0]
 802cf0e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf12:	785a      	ldrb	r2, [r3, #1]
 802cf14:	4b30      	ldr	r3, [pc, #192]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf16:	681b      	ldr	r3, [r3, #0]
 802cf18:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 802cf20:	b2d2      	uxtb	r2, r2
 802cf22:	705a      	strb	r2, [r3, #1]
        SX1276Write( REG_LR_OPMODE, sx1278->SX1276LR->RegOpMode );
 802cf24:	4b2c      	ldr	r3, [pc, #176]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf26:	681b      	ldr	r3, [r3, #0]
 802cf28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf2c:	785b      	ldrb	r3, [r3, #1]
 802cf2e:	4619      	mov	r1, r3
 802cf30:	2001      	movs	r0, #1
 802cf32:	f7fe fd2f 	bl	802b994 <SX1276Write>
        
        SX1276LoRaSetOpMode( RFLR_OPMODE_STANDBY );
 802cf36:	2001      	movs	r0, #1
 802cf38:	f7fe feae 	bl	802bc98 <SX1276LoRaSetOpMode>
                                        // RxDone               RxTimeout                   FhssChangeChannel           CadDone
        sx1278->SX1276LR->RegDioMapping1 = RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO1_00 | RFLR_DIOMAPPING1_DIO2_00 | RFLR_DIOMAPPING1_DIO3_00;
 802cf3c:	4b26      	ldr	r3, [pc, #152]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf3e:	681b      	ldr	r3, [r3, #0]
 802cf40:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf44:	2200      	movs	r2, #0
 802cf46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                                        // CadDetected          ModeReady
        sx1278->SX1276LR->RegDioMapping2 = RFLR_DIOMAPPING2_DIO4_00 | RFLR_DIOMAPPING2_DIO5_00;
 802cf4a:	4b23      	ldr	r3, [pc, #140]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf4c:	681b      	ldr	r3, [r3, #0]
 802cf4e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf52:	2200      	movs	r2, #0
 802cf54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        SX1276WriteBuffer( REG_LR_DIOMAPPING1, &sx1278->SX1276LR->RegDioMapping1, 2 );
 802cf58:	4b1f      	ldr	r3, [pc, #124]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf5a:	681b      	ldr	r3, [r3, #0]
 802cf5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf60:	333d      	adds	r3, #61	; 0x3d
 802cf62:	2202      	movs	r2, #2
 802cf64:	4619      	mov	r1, r3
 802cf66:	2040      	movs	r0, #64	; 0x40
 802cf68:	f7fe fd36 	bl	802b9d8 <SX1276WriteBuffer>
        
        SX1276ReadBuffer( REG_LR_OPMODE, sx1278->SX1276Regs + 1, 0x70 - 1 );
 802cf6c:	4b1a      	ldr	r3, [pc, #104]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf6e:	681b      	ldr	r3, [r3, #0]
 802cf70:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 802cf74:	3301      	adds	r3, #1
 802cf76:	226f      	movs	r2, #111	; 0x6f
 802cf78:	4619      	mov	r1, r3
 802cf7a:	2001      	movs	r0, #1
 802cf7c:	f7fe fd64 	bl	802ba48 <SX1276ReadBuffer>
 802cf80:	e027      	b.n	802cfd2 <SX1276SetLoRaOn+0x106>
    }
    else
    {
        SX1276LoRaSetOpMode( RFLR_OPMODE_SLEEP );
 802cf82:	2000      	movs	r0, #0
 802cf84:	f7fe fe88 	bl	802bc98 <SX1276LoRaSetOpMode>
        
        sx1278->SX1276LR->RegOpMode = ( sx1278->SX1276LR->RegOpMode & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF;
 802cf88:	4b13      	ldr	r3, [pc, #76]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf8a:	681b      	ldr	r3, [r3, #0]
 802cf8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf90:	785a      	ldrb	r2, [r3, #1]
 802cf92:	4b11      	ldr	r3, [pc, #68]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cf94:	681b      	ldr	r3, [r3, #0]
 802cf96:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cf9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802cf9e:	b2d2      	uxtb	r2, r2
 802cfa0:	705a      	strb	r2, [r3, #1]
        SX1276Write( REG_LR_OPMODE, sx1278->SX1276LR->RegOpMode );
 802cfa2:	4b0d      	ldr	r3, [pc, #52]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cfa4:	681b      	ldr	r3, [r3, #0]
 802cfa6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 802cfaa:	785b      	ldrb	r3, [r3, #1]
 802cfac:	4619      	mov	r1, r3
 802cfae:	2001      	movs	r0, #1
 802cfb0:	f7fe fcf0 	bl	802b994 <SX1276Write>
        
        SX1276LoRaSetOpMode( RFLR_OPMODE_STANDBY );
 802cfb4:	2001      	movs	r0, #1
 802cfb6:	f7fe fe6f 	bl	802bc98 <SX1276LoRaSetOpMode>
        
        SX1276ReadBuffer( REG_OPMODE, sx1278->SX1276Regs + 1, 0x70 - 1 );
 802cfba:	4b07      	ldr	r3, [pc, #28]	; (802cfd8 <SX1276SetLoRaOn+0x10c>)
 802cfbc:	681b      	ldr	r3, [r3, #0]
 802cfbe:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 802cfc2:	3301      	adds	r3, #1
 802cfc4:	226f      	movs	r2, #111	; 0x6f
 802cfc6:	4619      	mov	r1, r3
 802cfc8:	2001      	movs	r0, #1
 802cfca:	f7fe fd3d 	bl	802ba48 <SX1276ReadBuffer>
 802cfce:	e000      	b.n	802cfd2 <SX1276SetLoRaOn+0x106>
        return;
 802cfd0:	bf00      	nop
    }
}
 802cfd2:	3708      	adds	r7, #8
 802cfd4:	46bd      	mov	sp, r7
 802cfd6:	bd80      	pop	{r7, pc}
 802cfd8:	20005028 	.word	0x20005028

0802cfdc <SX1276GetRxPacket>:
        SX1276LoRaSetRFState( RFLR_STATE_RX_INIT );
    }
}

void SX1276GetRxPacket( void *buffer, uint16_t *size )
{
 802cfdc:	b580      	push	{r7, lr}
 802cfde:	b082      	sub	sp, #8
 802cfe0:	af00      	add	r7, sp, #0
 802cfe2:	6078      	str	r0, [r7, #4]
 802cfe4:	6039      	str	r1, [r7, #0]
    if( sx1278->LoRaOn == false )
 802cfe6:	4b08      	ldr	r3, [pc, #32]	; (802d008 <SX1276GetRxPacket+0x2c>)
 802cfe8:	681b      	ldr	r3, [r3, #0]
 802cfea:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 802cfee:	f083 0301 	eor.w	r3, r3, #1
 802cff2:	b2db      	uxtb	r3, r3
 802cff4:	2b00      	cmp	r3, #0
 802cff6:	d103      	bne.n	802d000 <SX1276GetRxPacket+0x24>
    {
//        SX1276FskGetRxPacket( buffer, size );
    }
    else
    {
        SX1276LoRaGetRxPacket( buffer, size );
 802cff8:	6839      	ldr	r1, [r7, #0]
 802cffa:	6878      	ldr	r0, [r7, #4]
 802cffc:	f7fe feb6 	bl	802bd6c <SX1276LoRaGetRxPacket>
    }
}
 802d000:	bf00      	nop
 802d002:	3708      	adds	r7, #8
 802d004:	46bd      	mov	sp, r7
 802d006:	bd80      	pop	{r7, pc}
 802d008:	20005028 	.word	0x20005028

0802d00c <__errno>:
 802d00c:	4b01      	ldr	r3, [pc, #4]	; (802d014 <__errno+0x8>)
 802d00e:	6818      	ldr	r0, [r3, #0]
 802d010:	4770      	bx	lr
 802d012:	bf00      	nop
 802d014:	200003f4 	.word	0x200003f4

0802d018 <__libc_init_array>:
 802d018:	b570      	push	{r4, r5, r6, lr}
 802d01a:	4d0d      	ldr	r5, [pc, #52]	; (802d050 <__libc_init_array+0x38>)
 802d01c:	4c0d      	ldr	r4, [pc, #52]	; (802d054 <__libc_init_array+0x3c>)
 802d01e:	1b64      	subs	r4, r4, r5
 802d020:	10a4      	asrs	r4, r4, #2
 802d022:	2600      	movs	r6, #0
 802d024:	42a6      	cmp	r6, r4
 802d026:	d109      	bne.n	802d03c <__libc_init_array+0x24>
 802d028:	4d0b      	ldr	r5, [pc, #44]	; (802d058 <__libc_init_array+0x40>)
 802d02a:	4c0c      	ldr	r4, [pc, #48]	; (802d05c <__libc_init_array+0x44>)
 802d02c:	f001 fa3a 	bl	802e4a4 <_init>
 802d030:	1b64      	subs	r4, r4, r5
 802d032:	10a4      	asrs	r4, r4, #2
 802d034:	2600      	movs	r6, #0
 802d036:	42a6      	cmp	r6, r4
 802d038:	d105      	bne.n	802d046 <__libc_init_array+0x2e>
 802d03a:	bd70      	pop	{r4, r5, r6, pc}
 802d03c:	f855 3b04 	ldr.w	r3, [r5], #4
 802d040:	4798      	blx	r3
 802d042:	3601      	adds	r6, #1
 802d044:	e7ee      	b.n	802d024 <__libc_init_array+0xc>
 802d046:	f855 3b04 	ldr.w	r3, [r5], #4
 802d04a:	4798      	blx	r3
 802d04c:	3601      	adds	r6, #1
 802d04e:	e7f2      	b.n	802d036 <__libc_init_array+0x1e>
 802d050:	0802e848 	.word	0x0802e848
 802d054:	0802e848 	.word	0x0802e848
 802d058:	0802e848 	.word	0x0802e848
 802d05c:	0802e84c 	.word	0x0802e84c

0802d060 <memcpy>:
 802d060:	440a      	add	r2, r1
 802d062:	4291      	cmp	r1, r2
 802d064:	f100 33ff 	add.w	r3, r0, #4294967295
 802d068:	d100      	bne.n	802d06c <memcpy+0xc>
 802d06a:	4770      	bx	lr
 802d06c:	b510      	push	{r4, lr}
 802d06e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d072:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d076:	4291      	cmp	r1, r2
 802d078:	d1f9      	bne.n	802d06e <memcpy+0xe>
 802d07a:	bd10      	pop	{r4, pc}

0802d07c <memset>:
 802d07c:	4402      	add	r2, r0
 802d07e:	4603      	mov	r3, r0
 802d080:	4293      	cmp	r3, r2
 802d082:	d100      	bne.n	802d086 <memset+0xa>
 802d084:	4770      	bx	lr
 802d086:	f803 1b01 	strb.w	r1, [r3], #1
 802d08a:	e7f9      	b.n	802d080 <memset+0x4>

0802d08c <srand>:
 802d08c:	b538      	push	{r3, r4, r5, lr}
 802d08e:	4b10      	ldr	r3, [pc, #64]	; (802d0d0 <srand+0x44>)
 802d090:	681d      	ldr	r5, [r3, #0]
 802d092:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802d094:	4604      	mov	r4, r0
 802d096:	b9b3      	cbnz	r3, 802d0c6 <srand+0x3a>
 802d098:	2018      	movs	r0, #24
 802d09a:	f000 f8cd 	bl	802d238 <malloc>
 802d09e:	4602      	mov	r2, r0
 802d0a0:	63a8      	str	r0, [r5, #56]	; 0x38
 802d0a2:	b920      	cbnz	r0, 802d0ae <srand+0x22>
 802d0a4:	4b0b      	ldr	r3, [pc, #44]	; (802d0d4 <srand+0x48>)
 802d0a6:	480c      	ldr	r0, [pc, #48]	; (802d0d8 <srand+0x4c>)
 802d0a8:	2142      	movs	r1, #66	; 0x42
 802d0aa:	f000 f895 	bl	802d1d8 <__assert_func>
 802d0ae:	490b      	ldr	r1, [pc, #44]	; (802d0dc <srand+0x50>)
 802d0b0:	4b0b      	ldr	r3, [pc, #44]	; (802d0e0 <srand+0x54>)
 802d0b2:	e9c0 1300 	strd	r1, r3, [r0]
 802d0b6:	4b0b      	ldr	r3, [pc, #44]	; (802d0e4 <srand+0x58>)
 802d0b8:	6083      	str	r3, [r0, #8]
 802d0ba:	230b      	movs	r3, #11
 802d0bc:	8183      	strh	r3, [r0, #12]
 802d0be:	2100      	movs	r1, #0
 802d0c0:	2001      	movs	r0, #1
 802d0c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802d0c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802d0c8:	2200      	movs	r2, #0
 802d0ca:	611c      	str	r4, [r3, #16]
 802d0cc:	615a      	str	r2, [r3, #20]
 802d0ce:	bd38      	pop	{r3, r4, r5, pc}
 802d0d0:	200003f4 	.word	0x200003f4
 802d0d4:	0802e6f8 	.word	0x0802e6f8
 802d0d8:	0802e70f 	.word	0x0802e70f
 802d0dc:	abcd330e 	.word	0xabcd330e
 802d0e0:	e66d1234 	.word	0xe66d1234
 802d0e4:	0005deec 	.word	0x0005deec

0802d0e8 <rand>:
 802d0e8:	4b17      	ldr	r3, [pc, #92]	; (802d148 <rand+0x60>)
 802d0ea:	b510      	push	{r4, lr}
 802d0ec:	681c      	ldr	r4, [r3, #0]
 802d0ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802d0f0:	b9b3      	cbnz	r3, 802d120 <rand+0x38>
 802d0f2:	2018      	movs	r0, #24
 802d0f4:	f000 f8a0 	bl	802d238 <malloc>
 802d0f8:	63a0      	str	r0, [r4, #56]	; 0x38
 802d0fa:	b928      	cbnz	r0, 802d108 <rand+0x20>
 802d0fc:	4602      	mov	r2, r0
 802d0fe:	4b13      	ldr	r3, [pc, #76]	; (802d14c <rand+0x64>)
 802d100:	4813      	ldr	r0, [pc, #76]	; (802d150 <rand+0x68>)
 802d102:	214e      	movs	r1, #78	; 0x4e
 802d104:	f000 f868 	bl	802d1d8 <__assert_func>
 802d108:	4a12      	ldr	r2, [pc, #72]	; (802d154 <rand+0x6c>)
 802d10a:	4b13      	ldr	r3, [pc, #76]	; (802d158 <rand+0x70>)
 802d10c:	e9c0 2300 	strd	r2, r3, [r0]
 802d110:	4b12      	ldr	r3, [pc, #72]	; (802d15c <rand+0x74>)
 802d112:	6083      	str	r3, [r0, #8]
 802d114:	230b      	movs	r3, #11
 802d116:	8183      	strh	r3, [r0, #12]
 802d118:	2201      	movs	r2, #1
 802d11a:	2300      	movs	r3, #0
 802d11c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802d120:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d122:	480f      	ldr	r0, [pc, #60]	; (802d160 <rand+0x78>)
 802d124:	690a      	ldr	r2, [r1, #16]
 802d126:	694b      	ldr	r3, [r1, #20]
 802d128:	4c0e      	ldr	r4, [pc, #56]	; (802d164 <rand+0x7c>)
 802d12a:	4350      	muls	r0, r2
 802d12c:	fb04 0003 	mla	r0, r4, r3, r0
 802d130:	fba2 3404 	umull	r3, r4, r2, r4
 802d134:	1c5a      	adds	r2, r3, #1
 802d136:	4404      	add	r4, r0
 802d138:	f144 0000 	adc.w	r0, r4, #0
 802d13c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 802d140:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802d144:	bd10      	pop	{r4, pc}
 802d146:	bf00      	nop
 802d148:	200003f4 	.word	0x200003f4
 802d14c:	0802e6f8 	.word	0x0802e6f8
 802d150:	0802e70f 	.word	0x0802e70f
 802d154:	abcd330e 	.word	0xabcd330e
 802d158:	e66d1234 	.word	0xe66d1234
 802d15c:	0005deec 	.word	0x0005deec
 802d160:	5851f42d 	.word	0x5851f42d
 802d164:	4c957f2d 	.word	0x4c957f2d

0802d168 <siprintf>:
 802d168:	b40e      	push	{r1, r2, r3}
 802d16a:	b500      	push	{lr}
 802d16c:	b09c      	sub	sp, #112	; 0x70
 802d16e:	ab1d      	add	r3, sp, #116	; 0x74
 802d170:	9002      	str	r0, [sp, #8]
 802d172:	9006      	str	r0, [sp, #24]
 802d174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d178:	4809      	ldr	r0, [pc, #36]	; (802d1a0 <siprintf+0x38>)
 802d17a:	9107      	str	r1, [sp, #28]
 802d17c:	9104      	str	r1, [sp, #16]
 802d17e:	4909      	ldr	r1, [pc, #36]	; (802d1a4 <siprintf+0x3c>)
 802d180:	f853 2b04 	ldr.w	r2, [r3], #4
 802d184:	9105      	str	r1, [sp, #20]
 802d186:	6800      	ldr	r0, [r0, #0]
 802d188:	9301      	str	r3, [sp, #4]
 802d18a:	a902      	add	r1, sp, #8
 802d18c:	f000 f962 	bl	802d454 <_svfiprintf_r>
 802d190:	9b02      	ldr	r3, [sp, #8]
 802d192:	2200      	movs	r2, #0
 802d194:	701a      	strb	r2, [r3, #0]
 802d196:	b01c      	add	sp, #112	; 0x70
 802d198:	f85d eb04 	ldr.w	lr, [sp], #4
 802d19c:	b003      	add	sp, #12
 802d19e:	4770      	bx	lr
 802d1a0:	200003f4 	.word	0x200003f4
 802d1a4:	ffff0208 	.word	0xffff0208

0802d1a8 <strstr>:
 802d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d1aa:	780c      	ldrb	r4, [r1, #0]
 802d1ac:	b164      	cbz	r4, 802d1c8 <strstr+0x20>
 802d1ae:	4603      	mov	r3, r0
 802d1b0:	781a      	ldrb	r2, [r3, #0]
 802d1b2:	4618      	mov	r0, r3
 802d1b4:	1c5e      	adds	r6, r3, #1
 802d1b6:	b90a      	cbnz	r2, 802d1bc <strstr+0x14>
 802d1b8:	4610      	mov	r0, r2
 802d1ba:	e005      	b.n	802d1c8 <strstr+0x20>
 802d1bc:	4294      	cmp	r4, r2
 802d1be:	d108      	bne.n	802d1d2 <strstr+0x2a>
 802d1c0:	460d      	mov	r5, r1
 802d1c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802d1c6:	b902      	cbnz	r2, 802d1ca <strstr+0x22>
 802d1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d1ca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802d1ce:	4297      	cmp	r7, r2
 802d1d0:	d0f7      	beq.n	802d1c2 <strstr+0x1a>
 802d1d2:	4633      	mov	r3, r6
 802d1d4:	e7ec      	b.n	802d1b0 <strstr+0x8>
	...

0802d1d8 <__assert_func>:
 802d1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802d1da:	4614      	mov	r4, r2
 802d1dc:	461a      	mov	r2, r3
 802d1de:	4b09      	ldr	r3, [pc, #36]	; (802d204 <__assert_func+0x2c>)
 802d1e0:	681b      	ldr	r3, [r3, #0]
 802d1e2:	4605      	mov	r5, r0
 802d1e4:	68d8      	ldr	r0, [r3, #12]
 802d1e6:	b14c      	cbz	r4, 802d1fc <__assert_func+0x24>
 802d1e8:	4b07      	ldr	r3, [pc, #28]	; (802d208 <__assert_func+0x30>)
 802d1ea:	9100      	str	r1, [sp, #0]
 802d1ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802d1f0:	4906      	ldr	r1, [pc, #24]	; (802d20c <__assert_func+0x34>)
 802d1f2:	462b      	mov	r3, r5
 802d1f4:	f000 f80e 	bl	802d214 <fiprintf>
 802d1f8:	f000 fdea 	bl	802ddd0 <abort>
 802d1fc:	4b04      	ldr	r3, [pc, #16]	; (802d210 <__assert_func+0x38>)
 802d1fe:	461c      	mov	r4, r3
 802d200:	e7f3      	b.n	802d1ea <__assert_func+0x12>
 802d202:	bf00      	nop
 802d204:	200003f4 	.word	0x200003f4
 802d208:	0802e76e 	.word	0x0802e76e
 802d20c:	0802e77b 	.word	0x0802e77b
 802d210:	0802e7a9 	.word	0x0802e7a9

0802d214 <fiprintf>:
 802d214:	b40e      	push	{r1, r2, r3}
 802d216:	b503      	push	{r0, r1, lr}
 802d218:	4601      	mov	r1, r0
 802d21a:	ab03      	add	r3, sp, #12
 802d21c:	4805      	ldr	r0, [pc, #20]	; (802d234 <fiprintf+0x20>)
 802d21e:	f853 2b04 	ldr.w	r2, [r3], #4
 802d222:	6800      	ldr	r0, [r0, #0]
 802d224:	9301      	str	r3, [sp, #4]
 802d226:	f000 fa3f 	bl	802d6a8 <_vfiprintf_r>
 802d22a:	b002      	add	sp, #8
 802d22c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d230:	b003      	add	sp, #12
 802d232:	4770      	bx	lr
 802d234:	200003f4 	.word	0x200003f4

0802d238 <malloc>:
 802d238:	4b02      	ldr	r3, [pc, #8]	; (802d244 <malloc+0xc>)
 802d23a:	4601      	mov	r1, r0
 802d23c:	6818      	ldr	r0, [r3, #0]
 802d23e:	f000 b853 	b.w	802d2e8 <_malloc_r>
 802d242:	bf00      	nop
 802d244:	200003f4 	.word	0x200003f4

0802d248 <_free_r>:
 802d248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d24a:	2900      	cmp	r1, #0
 802d24c:	d048      	beq.n	802d2e0 <_free_r+0x98>
 802d24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d252:	9001      	str	r0, [sp, #4]
 802d254:	2b00      	cmp	r3, #0
 802d256:	f1a1 0404 	sub.w	r4, r1, #4
 802d25a:	bfb8      	it	lt
 802d25c:	18e4      	addlt	r4, r4, r3
 802d25e:	f000 fff7 	bl	802e250 <__malloc_lock>
 802d262:	4a20      	ldr	r2, [pc, #128]	; (802d2e4 <_free_r+0x9c>)
 802d264:	9801      	ldr	r0, [sp, #4]
 802d266:	6813      	ldr	r3, [r2, #0]
 802d268:	4615      	mov	r5, r2
 802d26a:	b933      	cbnz	r3, 802d27a <_free_r+0x32>
 802d26c:	6063      	str	r3, [r4, #4]
 802d26e:	6014      	str	r4, [r2, #0]
 802d270:	b003      	add	sp, #12
 802d272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d276:	f000 bff1 	b.w	802e25c <__malloc_unlock>
 802d27a:	42a3      	cmp	r3, r4
 802d27c:	d90b      	bls.n	802d296 <_free_r+0x4e>
 802d27e:	6821      	ldr	r1, [r4, #0]
 802d280:	1862      	adds	r2, r4, r1
 802d282:	4293      	cmp	r3, r2
 802d284:	bf04      	itt	eq
 802d286:	681a      	ldreq	r2, [r3, #0]
 802d288:	685b      	ldreq	r3, [r3, #4]
 802d28a:	6063      	str	r3, [r4, #4]
 802d28c:	bf04      	itt	eq
 802d28e:	1852      	addeq	r2, r2, r1
 802d290:	6022      	streq	r2, [r4, #0]
 802d292:	602c      	str	r4, [r5, #0]
 802d294:	e7ec      	b.n	802d270 <_free_r+0x28>
 802d296:	461a      	mov	r2, r3
 802d298:	685b      	ldr	r3, [r3, #4]
 802d29a:	b10b      	cbz	r3, 802d2a0 <_free_r+0x58>
 802d29c:	42a3      	cmp	r3, r4
 802d29e:	d9fa      	bls.n	802d296 <_free_r+0x4e>
 802d2a0:	6811      	ldr	r1, [r2, #0]
 802d2a2:	1855      	adds	r5, r2, r1
 802d2a4:	42a5      	cmp	r5, r4
 802d2a6:	d10b      	bne.n	802d2c0 <_free_r+0x78>
 802d2a8:	6824      	ldr	r4, [r4, #0]
 802d2aa:	4421      	add	r1, r4
 802d2ac:	1854      	adds	r4, r2, r1
 802d2ae:	42a3      	cmp	r3, r4
 802d2b0:	6011      	str	r1, [r2, #0]
 802d2b2:	d1dd      	bne.n	802d270 <_free_r+0x28>
 802d2b4:	681c      	ldr	r4, [r3, #0]
 802d2b6:	685b      	ldr	r3, [r3, #4]
 802d2b8:	6053      	str	r3, [r2, #4]
 802d2ba:	4421      	add	r1, r4
 802d2bc:	6011      	str	r1, [r2, #0]
 802d2be:	e7d7      	b.n	802d270 <_free_r+0x28>
 802d2c0:	d902      	bls.n	802d2c8 <_free_r+0x80>
 802d2c2:	230c      	movs	r3, #12
 802d2c4:	6003      	str	r3, [r0, #0]
 802d2c6:	e7d3      	b.n	802d270 <_free_r+0x28>
 802d2c8:	6825      	ldr	r5, [r4, #0]
 802d2ca:	1961      	adds	r1, r4, r5
 802d2cc:	428b      	cmp	r3, r1
 802d2ce:	bf04      	itt	eq
 802d2d0:	6819      	ldreq	r1, [r3, #0]
 802d2d2:	685b      	ldreq	r3, [r3, #4]
 802d2d4:	6063      	str	r3, [r4, #4]
 802d2d6:	bf04      	itt	eq
 802d2d8:	1949      	addeq	r1, r1, r5
 802d2da:	6021      	streq	r1, [r4, #0]
 802d2dc:	6054      	str	r4, [r2, #4]
 802d2de:	e7c7      	b.n	802d270 <_free_r+0x28>
 802d2e0:	b003      	add	sp, #12
 802d2e2:	bd30      	pop	{r4, r5, pc}
 802d2e4:	20004c2c 	.word	0x20004c2c

0802d2e8 <_malloc_r>:
 802d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d2ea:	1ccd      	adds	r5, r1, #3
 802d2ec:	f025 0503 	bic.w	r5, r5, #3
 802d2f0:	3508      	adds	r5, #8
 802d2f2:	2d0c      	cmp	r5, #12
 802d2f4:	bf38      	it	cc
 802d2f6:	250c      	movcc	r5, #12
 802d2f8:	2d00      	cmp	r5, #0
 802d2fa:	4606      	mov	r6, r0
 802d2fc:	db01      	blt.n	802d302 <_malloc_r+0x1a>
 802d2fe:	42a9      	cmp	r1, r5
 802d300:	d903      	bls.n	802d30a <_malloc_r+0x22>
 802d302:	230c      	movs	r3, #12
 802d304:	6033      	str	r3, [r6, #0]
 802d306:	2000      	movs	r0, #0
 802d308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d30a:	f000 ffa1 	bl	802e250 <__malloc_lock>
 802d30e:	4921      	ldr	r1, [pc, #132]	; (802d394 <_malloc_r+0xac>)
 802d310:	680a      	ldr	r2, [r1, #0]
 802d312:	4614      	mov	r4, r2
 802d314:	b99c      	cbnz	r4, 802d33e <_malloc_r+0x56>
 802d316:	4f20      	ldr	r7, [pc, #128]	; (802d398 <_malloc_r+0xb0>)
 802d318:	683b      	ldr	r3, [r7, #0]
 802d31a:	b923      	cbnz	r3, 802d326 <_malloc_r+0x3e>
 802d31c:	4621      	mov	r1, r4
 802d31e:	4630      	mov	r0, r6
 802d320:	f000 fc86 	bl	802dc30 <_sbrk_r>
 802d324:	6038      	str	r0, [r7, #0]
 802d326:	4629      	mov	r1, r5
 802d328:	4630      	mov	r0, r6
 802d32a:	f000 fc81 	bl	802dc30 <_sbrk_r>
 802d32e:	1c43      	adds	r3, r0, #1
 802d330:	d123      	bne.n	802d37a <_malloc_r+0x92>
 802d332:	230c      	movs	r3, #12
 802d334:	6033      	str	r3, [r6, #0]
 802d336:	4630      	mov	r0, r6
 802d338:	f000 ff90 	bl	802e25c <__malloc_unlock>
 802d33c:	e7e3      	b.n	802d306 <_malloc_r+0x1e>
 802d33e:	6823      	ldr	r3, [r4, #0]
 802d340:	1b5b      	subs	r3, r3, r5
 802d342:	d417      	bmi.n	802d374 <_malloc_r+0x8c>
 802d344:	2b0b      	cmp	r3, #11
 802d346:	d903      	bls.n	802d350 <_malloc_r+0x68>
 802d348:	6023      	str	r3, [r4, #0]
 802d34a:	441c      	add	r4, r3
 802d34c:	6025      	str	r5, [r4, #0]
 802d34e:	e004      	b.n	802d35a <_malloc_r+0x72>
 802d350:	6863      	ldr	r3, [r4, #4]
 802d352:	42a2      	cmp	r2, r4
 802d354:	bf0c      	ite	eq
 802d356:	600b      	streq	r3, [r1, #0]
 802d358:	6053      	strne	r3, [r2, #4]
 802d35a:	4630      	mov	r0, r6
 802d35c:	f000 ff7e 	bl	802e25c <__malloc_unlock>
 802d360:	f104 000b 	add.w	r0, r4, #11
 802d364:	1d23      	adds	r3, r4, #4
 802d366:	f020 0007 	bic.w	r0, r0, #7
 802d36a:	1ac2      	subs	r2, r0, r3
 802d36c:	d0cc      	beq.n	802d308 <_malloc_r+0x20>
 802d36e:	1a1b      	subs	r3, r3, r0
 802d370:	50a3      	str	r3, [r4, r2]
 802d372:	e7c9      	b.n	802d308 <_malloc_r+0x20>
 802d374:	4622      	mov	r2, r4
 802d376:	6864      	ldr	r4, [r4, #4]
 802d378:	e7cc      	b.n	802d314 <_malloc_r+0x2c>
 802d37a:	1cc4      	adds	r4, r0, #3
 802d37c:	f024 0403 	bic.w	r4, r4, #3
 802d380:	42a0      	cmp	r0, r4
 802d382:	d0e3      	beq.n	802d34c <_malloc_r+0x64>
 802d384:	1a21      	subs	r1, r4, r0
 802d386:	4630      	mov	r0, r6
 802d388:	f000 fc52 	bl	802dc30 <_sbrk_r>
 802d38c:	3001      	adds	r0, #1
 802d38e:	d1dd      	bne.n	802d34c <_malloc_r+0x64>
 802d390:	e7cf      	b.n	802d332 <_malloc_r+0x4a>
 802d392:	bf00      	nop
 802d394:	20004c2c 	.word	0x20004c2c
 802d398:	20004c30 	.word	0x20004c30

0802d39c <__ssputs_r>:
 802d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d3a0:	688e      	ldr	r6, [r1, #8]
 802d3a2:	429e      	cmp	r6, r3
 802d3a4:	4682      	mov	sl, r0
 802d3a6:	460c      	mov	r4, r1
 802d3a8:	4690      	mov	r8, r2
 802d3aa:	461f      	mov	r7, r3
 802d3ac:	d838      	bhi.n	802d420 <__ssputs_r+0x84>
 802d3ae:	898a      	ldrh	r2, [r1, #12]
 802d3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802d3b4:	d032      	beq.n	802d41c <__ssputs_r+0x80>
 802d3b6:	6825      	ldr	r5, [r4, #0]
 802d3b8:	6909      	ldr	r1, [r1, #16]
 802d3ba:	eba5 0901 	sub.w	r9, r5, r1
 802d3be:	6965      	ldr	r5, [r4, #20]
 802d3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d3c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d3c8:	3301      	adds	r3, #1
 802d3ca:	444b      	add	r3, r9
 802d3cc:	106d      	asrs	r5, r5, #1
 802d3ce:	429d      	cmp	r5, r3
 802d3d0:	bf38      	it	cc
 802d3d2:	461d      	movcc	r5, r3
 802d3d4:	0553      	lsls	r3, r2, #21
 802d3d6:	d531      	bpl.n	802d43c <__ssputs_r+0xa0>
 802d3d8:	4629      	mov	r1, r5
 802d3da:	f7ff ff85 	bl	802d2e8 <_malloc_r>
 802d3de:	4606      	mov	r6, r0
 802d3e0:	b950      	cbnz	r0, 802d3f8 <__ssputs_r+0x5c>
 802d3e2:	230c      	movs	r3, #12
 802d3e4:	f8ca 3000 	str.w	r3, [sl]
 802d3e8:	89a3      	ldrh	r3, [r4, #12]
 802d3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d3ee:	81a3      	strh	r3, [r4, #12]
 802d3f0:	f04f 30ff 	mov.w	r0, #4294967295
 802d3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d3f8:	6921      	ldr	r1, [r4, #16]
 802d3fa:	464a      	mov	r2, r9
 802d3fc:	f7ff fe30 	bl	802d060 <memcpy>
 802d400:	89a3      	ldrh	r3, [r4, #12]
 802d402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802d406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d40a:	81a3      	strh	r3, [r4, #12]
 802d40c:	6126      	str	r6, [r4, #16]
 802d40e:	6165      	str	r5, [r4, #20]
 802d410:	444e      	add	r6, r9
 802d412:	eba5 0509 	sub.w	r5, r5, r9
 802d416:	6026      	str	r6, [r4, #0]
 802d418:	60a5      	str	r5, [r4, #8]
 802d41a:	463e      	mov	r6, r7
 802d41c:	42be      	cmp	r6, r7
 802d41e:	d900      	bls.n	802d422 <__ssputs_r+0x86>
 802d420:	463e      	mov	r6, r7
 802d422:	4632      	mov	r2, r6
 802d424:	6820      	ldr	r0, [r4, #0]
 802d426:	4641      	mov	r1, r8
 802d428:	f000 fef8 	bl	802e21c <memmove>
 802d42c:	68a3      	ldr	r3, [r4, #8]
 802d42e:	6822      	ldr	r2, [r4, #0]
 802d430:	1b9b      	subs	r3, r3, r6
 802d432:	4432      	add	r2, r6
 802d434:	60a3      	str	r3, [r4, #8]
 802d436:	6022      	str	r2, [r4, #0]
 802d438:	2000      	movs	r0, #0
 802d43a:	e7db      	b.n	802d3f4 <__ssputs_r+0x58>
 802d43c:	462a      	mov	r2, r5
 802d43e:	f000 ff13 	bl	802e268 <_realloc_r>
 802d442:	4606      	mov	r6, r0
 802d444:	2800      	cmp	r0, #0
 802d446:	d1e1      	bne.n	802d40c <__ssputs_r+0x70>
 802d448:	6921      	ldr	r1, [r4, #16]
 802d44a:	4650      	mov	r0, sl
 802d44c:	f7ff fefc 	bl	802d248 <_free_r>
 802d450:	e7c7      	b.n	802d3e2 <__ssputs_r+0x46>
	...

0802d454 <_svfiprintf_r>:
 802d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d458:	4698      	mov	r8, r3
 802d45a:	898b      	ldrh	r3, [r1, #12]
 802d45c:	061b      	lsls	r3, r3, #24
 802d45e:	b09d      	sub	sp, #116	; 0x74
 802d460:	4607      	mov	r7, r0
 802d462:	460d      	mov	r5, r1
 802d464:	4614      	mov	r4, r2
 802d466:	d50e      	bpl.n	802d486 <_svfiprintf_r+0x32>
 802d468:	690b      	ldr	r3, [r1, #16]
 802d46a:	b963      	cbnz	r3, 802d486 <_svfiprintf_r+0x32>
 802d46c:	2140      	movs	r1, #64	; 0x40
 802d46e:	f7ff ff3b 	bl	802d2e8 <_malloc_r>
 802d472:	6028      	str	r0, [r5, #0]
 802d474:	6128      	str	r0, [r5, #16]
 802d476:	b920      	cbnz	r0, 802d482 <_svfiprintf_r+0x2e>
 802d478:	230c      	movs	r3, #12
 802d47a:	603b      	str	r3, [r7, #0]
 802d47c:	f04f 30ff 	mov.w	r0, #4294967295
 802d480:	e0d1      	b.n	802d626 <_svfiprintf_r+0x1d2>
 802d482:	2340      	movs	r3, #64	; 0x40
 802d484:	616b      	str	r3, [r5, #20]
 802d486:	2300      	movs	r3, #0
 802d488:	9309      	str	r3, [sp, #36]	; 0x24
 802d48a:	2320      	movs	r3, #32
 802d48c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d490:	f8cd 800c 	str.w	r8, [sp, #12]
 802d494:	2330      	movs	r3, #48	; 0x30
 802d496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802d640 <_svfiprintf_r+0x1ec>
 802d49a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d49e:	f04f 0901 	mov.w	r9, #1
 802d4a2:	4623      	mov	r3, r4
 802d4a4:	469a      	mov	sl, r3
 802d4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d4aa:	b10a      	cbz	r2, 802d4b0 <_svfiprintf_r+0x5c>
 802d4ac:	2a25      	cmp	r2, #37	; 0x25
 802d4ae:	d1f9      	bne.n	802d4a4 <_svfiprintf_r+0x50>
 802d4b0:	ebba 0b04 	subs.w	fp, sl, r4
 802d4b4:	d00b      	beq.n	802d4ce <_svfiprintf_r+0x7a>
 802d4b6:	465b      	mov	r3, fp
 802d4b8:	4622      	mov	r2, r4
 802d4ba:	4629      	mov	r1, r5
 802d4bc:	4638      	mov	r0, r7
 802d4be:	f7ff ff6d 	bl	802d39c <__ssputs_r>
 802d4c2:	3001      	adds	r0, #1
 802d4c4:	f000 80aa 	beq.w	802d61c <_svfiprintf_r+0x1c8>
 802d4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d4ca:	445a      	add	r2, fp
 802d4cc:	9209      	str	r2, [sp, #36]	; 0x24
 802d4ce:	f89a 3000 	ldrb.w	r3, [sl]
 802d4d2:	2b00      	cmp	r3, #0
 802d4d4:	f000 80a2 	beq.w	802d61c <_svfiprintf_r+0x1c8>
 802d4d8:	2300      	movs	r3, #0
 802d4da:	f04f 32ff 	mov.w	r2, #4294967295
 802d4de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d4e2:	f10a 0a01 	add.w	sl, sl, #1
 802d4e6:	9304      	str	r3, [sp, #16]
 802d4e8:	9307      	str	r3, [sp, #28]
 802d4ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d4ee:	931a      	str	r3, [sp, #104]	; 0x68
 802d4f0:	4654      	mov	r4, sl
 802d4f2:	2205      	movs	r2, #5
 802d4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d4f8:	4851      	ldr	r0, [pc, #324]	; (802d640 <_svfiprintf_r+0x1ec>)
 802d4fa:	f7f2 fe71 	bl	80201e0 <memchr>
 802d4fe:	9a04      	ldr	r2, [sp, #16]
 802d500:	b9d8      	cbnz	r0, 802d53a <_svfiprintf_r+0xe6>
 802d502:	06d0      	lsls	r0, r2, #27
 802d504:	bf44      	itt	mi
 802d506:	2320      	movmi	r3, #32
 802d508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d50c:	0711      	lsls	r1, r2, #28
 802d50e:	bf44      	itt	mi
 802d510:	232b      	movmi	r3, #43	; 0x2b
 802d512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d516:	f89a 3000 	ldrb.w	r3, [sl]
 802d51a:	2b2a      	cmp	r3, #42	; 0x2a
 802d51c:	d015      	beq.n	802d54a <_svfiprintf_r+0xf6>
 802d51e:	9a07      	ldr	r2, [sp, #28]
 802d520:	4654      	mov	r4, sl
 802d522:	2000      	movs	r0, #0
 802d524:	f04f 0c0a 	mov.w	ip, #10
 802d528:	4621      	mov	r1, r4
 802d52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d52e:	3b30      	subs	r3, #48	; 0x30
 802d530:	2b09      	cmp	r3, #9
 802d532:	d94e      	bls.n	802d5d2 <_svfiprintf_r+0x17e>
 802d534:	b1b0      	cbz	r0, 802d564 <_svfiprintf_r+0x110>
 802d536:	9207      	str	r2, [sp, #28]
 802d538:	e014      	b.n	802d564 <_svfiprintf_r+0x110>
 802d53a:	eba0 0308 	sub.w	r3, r0, r8
 802d53e:	fa09 f303 	lsl.w	r3, r9, r3
 802d542:	4313      	orrs	r3, r2
 802d544:	9304      	str	r3, [sp, #16]
 802d546:	46a2      	mov	sl, r4
 802d548:	e7d2      	b.n	802d4f0 <_svfiprintf_r+0x9c>
 802d54a:	9b03      	ldr	r3, [sp, #12]
 802d54c:	1d19      	adds	r1, r3, #4
 802d54e:	681b      	ldr	r3, [r3, #0]
 802d550:	9103      	str	r1, [sp, #12]
 802d552:	2b00      	cmp	r3, #0
 802d554:	bfbb      	ittet	lt
 802d556:	425b      	neglt	r3, r3
 802d558:	f042 0202 	orrlt.w	r2, r2, #2
 802d55c:	9307      	strge	r3, [sp, #28]
 802d55e:	9307      	strlt	r3, [sp, #28]
 802d560:	bfb8      	it	lt
 802d562:	9204      	strlt	r2, [sp, #16]
 802d564:	7823      	ldrb	r3, [r4, #0]
 802d566:	2b2e      	cmp	r3, #46	; 0x2e
 802d568:	d10c      	bne.n	802d584 <_svfiprintf_r+0x130>
 802d56a:	7863      	ldrb	r3, [r4, #1]
 802d56c:	2b2a      	cmp	r3, #42	; 0x2a
 802d56e:	d135      	bne.n	802d5dc <_svfiprintf_r+0x188>
 802d570:	9b03      	ldr	r3, [sp, #12]
 802d572:	1d1a      	adds	r2, r3, #4
 802d574:	681b      	ldr	r3, [r3, #0]
 802d576:	9203      	str	r2, [sp, #12]
 802d578:	2b00      	cmp	r3, #0
 802d57a:	bfb8      	it	lt
 802d57c:	f04f 33ff 	movlt.w	r3, #4294967295
 802d580:	3402      	adds	r4, #2
 802d582:	9305      	str	r3, [sp, #20]
 802d584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802d650 <_svfiprintf_r+0x1fc>
 802d588:	7821      	ldrb	r1, [r4, #0]
 802d58a:	2203      	movs	r2, #3
 802d58c:	4650      	mov	r0, sl
 802d58e:	f7f2 fe27 	bl	80201e0 <memchr>
 802d592:	b140      	cbz	r0, 802d5a6 <_svfiprintf_r+0x152>
 802d594:	2340      	movs	r3, #64	; 0x40
 802d596:	eba0 000a 	sub.w	r0, r0, sl
 802d59a:	fa03 f000 	lsl.w	r0, r3, r0
 802d59e:	9b04      	ldr	r3, [sp, #16]
 802d5a0:	4303      	orrs	r3, r0
 802d5a2:	3401      	adds	r4, #1
 802d5a4:	9304      	str	r3, [sp, #16]
 802d5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d5aa:	4826      	ldr	r0, [pc, #152]	; (802d644 <_svfiprintf_r+0x1f0>)
 802d5ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d5b0:	2206      	movs	r2, #6
 802d5b2:	f7f2 fe15 	bl	80201e0 <memchr>
 802d5b6:	2800      	cmp	r0, #0
 802d5b8:	d038      	beq.n	802d62c <_svfiprintf_r+0x1d8>
 802d5ba:	4b23      	ldr	r3, [pc, #140]	; (802d648 <_svfiprintf_r+0x1f4>)
 802d5bc:	bb1b      	cbnz	r3, 802d606 <_svfiprintf_r+0x1b2>
 802d5be:	9b03      	ldr	r3, [sp, #12]
 802d5c0:	3307      	adds	r3, #7
 802d5c2:	f023 0307 	bic.w	r3, r3, #7
 802d5c6:	3308      	adds	r3, #8
 802d5c8:	9303      	str	r3, [sp, #12]
 802d5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d5cc:	4433      	add	r3, r6
 802d5ce:	9309      	str	r3, [sp, #36]	; 0x24
 802d5d0:	e767      	b.n	802d4a2 <_svfiprintf_r+0x4e>
 802d5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 802d5d6:	460c      	mov	r4, r1
 802d5d8:	2001      	movs	r0, #1
 802d5da:	e7a5      	b.n	802d528 <_svfiprintf_r+0xd4>
 802d5dc:	2300      	movs	r3, #0
 802d5de:	3401      	adds	r4, #1
 802d5e0:	9305      	str	r3, [sp, #20]
 802d5e2:	4619      	mov	r1, r3
 802d5e4:	f04f 0c0a 	mov.w	ip, #10
 802d5e8:	4620      	mov	r0, r4
 802d5ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d5ee:	3a30      	subs	r2, #48	; 0x30
 802d5f0:	2a09      	cmp	r2, #9
 802d5f2:	d903      	bls.n	802d5fc <_svfiprintf_r+0x1a8>
 802d5f4:	2b00      	cmp	r3, #0
 802d5f6:	d0c5      	beq.n	802d584 <_svfiprintf_r+0x130>
 802d5f8:	9105      	str	r1, [sp, #20]
 802d5fa:	e7c3      	b.n	802d584 <_svfiprintf_r+0x130>
 802d5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 802d600:	4604      	mov	r4, r0
 802d602:	2301      	movs	r3, #1
 802d604:	e7f0      	b.n	802d5e8 <_svfiprintf_r+0x194>
 802d606:	ab03      	add	r3, sp, #12
 802d608:	9300      	str	r3, [sp, #0]
 802d60a:	462a      	mov	r2, r5
 802d60c:	4b0f      	ldr	r3, [pc, #60]	; (802d64c <_svfiprintf_r+0x1f8>)
 802d60e:	a904      	add	r1, sp, #16
 802d610:	4638      	mov	r0, r7
 802d612:	f3af 8000 	nop.w
 802d616:	1c42      	adds	r2, r0, #1
 802d618:	4606      	mov	r6, r0
 802d61a:	d1d6      	bne.n	802d5ca <_svfiprintf_r+0x176>
 802d61c:	89ab      	ldrh	r3, [r5, #12]
 802d61e:	065b      	lsls	r3, r3, #25
 802d620:	f53f af2c 	bmi.w	802d47c <_svfiprintf_r+0x28>
 802d624:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d626:	b01d      	add	sp, #116	; 0x74
 802d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d62c:	ab03      	add	r3, sp, #12
 802d62e:	9300      	str	r3, [sp, #0]
 802d630:	462a      	mov	r2, r5
 802d632:	4b06      	ldr	r3, [pc, #24]	; (802d64c <_svfiprintf_r+0x1f8>)
 802d634:	a904      	add	r1, sp, #16
 802d636:	4638      	mov	r0, r7
 802d638:	f000 f9d4 	bl	802d9e4 <_printf_i>
 802d63c:	e7eb      	b.n	802d616 <_svfiprintf_r+0x1c2>
 802d63e:	bf00      	nop
 802d640:	0802e7aa 	.word	0x0802e7aa
 802d644:	0802e7b4 	.word	0x0802e7b4
 802d648:	00000000 	.word	0x00000000
 802d64c:	0802d39d 	.word	0x0802d39d
 802d650:	0802e7b0 	.word	0x0802e7b0

0802d654 <__sfputc_r>:
 802d654:	6893      	ldr	r3, [r2, #8]
 802d656:	3b01      	subs	r3, #1
 802d658:	2b00      	cmp	r3, #0
 802d65a:	b410      	push	{r4}
 802d65c:	6093      	str	r3, [r2, #8]
 802d65e:	da08      	bge.n	802d672 <__sfputc_r+0x1e>
 802d660:	6994      	ldr	r4, [r2, #24]
 802d662:	42a3      	cmp	r3, r4
 802d664:	db01      	blt.n	802d66a <__sfputc_r+0x16>
 802d666:	290a      	cmp	r1, #10
 802d668:	d103      	bne.n	802d672 <__sfputc_r+0x1e>
 802d66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d66e:	f000 baef 	b.w	802dc50 <__swbuf_r>
 802d672:	6813      	ldr	r3, [r2, #0]
 802d674:	1c58      	adds	r0, r3, #1
 802d676:	6010      	str	r0, [r2, #0]
 802d678:	7019      	strb	r1, [r3, #0]
 802d67a:	4608      	mov	r0, r1
 802d67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d680:	4770      	bx	lr

0802d682 <__sfputs_r>:
 802d682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d684:	4606      	mov	r6, r0
 802d686:	460f      	mov	r7, r1
 802d688:	4614      	mov	r4, r2
 802d68a:	18d5      	adds	r5, r2, r3
 802d68c:	42ac      	cmp	r4, r5
 802d68e:	d101      	bne.n	802d694 <__sfputs_r+0x12>
 802d690:	2000      	movs	r0, #0
 802d692:	e007      	b.n	802d6a4 <__sfputs_r+0x22>
 802d694:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d698:	463a      	mov	r2, r7
 802d69a:	4630      	mov	r0, r6
 802d69c:	f7ff ffda 	bl	802d654 <__sfputc_r>
 802d6a0:	1c43      	adds	r3, r0, #1
 802d6a2:	d1f3      	bne.n	802d68c <__sfputs_r+0xa>
 802d6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802d6a8 <_vfiprintf_r>:
 802d6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d6ac:	460d      	mov	r5, r1
 802d6ae:	b09d      	sub	sp, #116	; 0x74
 802d6b0:	4614      	mov	r4, r2
 802d6b2:	4698      	mov	r8, r3
 802d6b4:	4606      	mov	r6, r0
 802d6b6:	b118      	cbz	r0, 802d6c0 <_vfiprintf_r+0x18>
 802d6b8:	6983      	ldr	r3, [r0, #24]
 802d6ba:	b90b      	cbnz	r3, 802d6c0 <_vfiprintf_r+0x18>
 802d6bc:	f000 fcaa 	bl	802e014 <__sinit>
 802d6c0:	4b89      	ldr	r3, [pc, #548]	; (802d8e8 <_vfiprintf_r+0x240>)
 802d6c2:	429d      	cmp	r5, r3
 802d6c4:	d11b      	bne.n	802d6fe <_vfiprintf_r+0x56>
 802d6c6:	6875      	ldr	r5, [r6, #4]
 802d6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d6ca:	07d9      	lsls	r1, r3, #31
 802d6cc:	d405      	bmi.n	802d6da <_vfiprintf_r+0x32>
 802d6ce:	89ab      	ldrh	r3, [r5, #12]
 802d6d0:	059a      	lsls	r2, r3, #22
 802d6d2:	d402      	bmi.n	802d6da <_vfiprintf_r+0x32>
 802d6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d6d6:	f000 fd3b 	bl	802e150 <__retarget_lock_acquire_recursive>
 802d6da:	89ab      	ldrh	r3, [r5, #12]
 802d6dc:	071b      	lsls	r3, r3, #28
 802d6de:	d501      	bpl.n	802d6e4 <_vfiprintf_r+0x3c>
 802d6e0:	692b      	ldr	r3, [r5, #16]
 802d6e2:	b9eb      	cbnz	r3, 802d720 <_vfiprintf_r+0x78>
 802d6e4:	4629      	mov	r1, r5
 802d6e6:	4630      	mov	r0, r6
 802d6e8:	f000 fb04 	bl	802dcf4 <__swsetup_r>
 802d6ec:	b1c0      	cbz	r0, 802d720 <_vfiprintf_r+0x78>
 802d6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d6f0:	07dc      	lsls	r4, r3, #31
 802d6f2:	d50e      	bpl.n	802d712 <_vfiprintf_r+0x6a>
 802d6f4:	f04f 30ff 	mov.w	r0, #4294967295
 802d6f8:	b01d      	add	sp, #116	; 0x74
 802d6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d6fe:	4b7b      	ldr	r3, [pc, #492]	; (802d8ec <_vfiprintf_r+0x244>)
 802d700:	429d      	cmp	r5, r3
 802d702:	d101      	bne.n	802d708 <_vfiprintf_r+0x60>
 802d704:	68b5      	ldr	r5, [r6, #8]
 802d706:	e7df      	b.n	802d6c8 <_vfiprintf_r+0x20>
 802d708:	4b79      	ldr	r3, [pc, #484]	; (802d8f0 <_vfiprintf_r+0x248>)
 802d70a:	429d      	cmp	r5, r3
 802d70c:	bf08      	it	eq
 802d70e:	68f5      	ldreq	r5, [r6, #12]
 802d710:	e7da      	b.n	802d6c8 <_vfiprintf_r+0x20>
 802d712:	89ab      	ldrh	r3, [r5, #12]
 802d714:	0598      	lsls	r0, r3, #22
 802d716:	d4ed      	bmi.n	802d6f4 <_vfiprintf_r+0x4c>
 802d718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d71a:	f000 fd1a 	bl	802e152 <__retarget_lock_release_recursive>
 802d71e:	e7e9      	b.n	802d6f4 <_vfiprintf_r+0x4c>
 802d720:	2300      	movs	r3, #0
 802d722:	9309      	str	r3, [sp, #36]	; 0x24
 802d724:	2320      	movs	r3, #32
 802d726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d72a:	f8cd 800c 	str.w	r8, [sp, #12]
 802d72e:	2330      	movs	r3, #48	; 0x30
 802d730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802d8f4 <_vfiprintf_r+0x24c>
 802d734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d738:	f04f 0901 	mov.w	r9, #1
 802d73c:	4623      	mov	r3, r4
 802d73e:	469a      	mov	sl, r3
 802d740:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d744:	b10a      	cbz	r2, 802d74a <_vfiprintf_r+0xa2>
 802d746:	2a25      	cmp	r2, #37	; 0x25
 802d748:	d1f9      	bne.n	802d73e <_vfiprintf_r+0x96>
 802d74a:	ebba 0b04 	subs.w	fp, sl, r4
 802d74e:	d00b      	beq.n	802d768 <_vfiprintf_r+0xc0>
 802d750:	465b      	mov	r3, fp
 802d752:	4622      	mov	r2, r4
 802d754:	4629      	mov	r1, r5
 802d756:	4630      	mov	r0, r6
 802d758:	f7ff ff93 	bl	802d682 <__sfputs_r>
 802d75c:	3001      	adds	r0, #1
 802d75e:	f000 80aa 	beq.w	802d8b6 <_vfiprintf_r+0x20e>
 802d762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d764:	445a      	add	r2, fp
 802d766:	9209      	str	r2, [sp, #36]	; 0x24
 802d768:	f89a 3000 	ldrb.w	r3, [sl]
 802d76c:	2b00      	cmp	r3, #0
 802d76e:	f000 80a2 	beq.w	802d8b6 <_vfiprintf_r+0x20e>
 802d772:	2300      	movs	r3, #0
 802d774:	f04f 32ff 	mov.w	r2, #4294967295
 802d778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d77c:	f10a 0a01 	add.w	sl, sl, #1
 802d780:	9304      	str	r3, [sp, #16]
 802d782:	9307      	str	r3, [sp, #28]
 802d784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d788:	931a      	str	r3, [sp, #104]	; 0x68
 802d78a:	4654      	mov	r4, sl
 802d78c:	2205      	movs	r2, #5
 802d78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d792:	4858      	ldr	r0, [pc, #352]	; (802d8f4 <_vfiprintf_r+0x24c>)
 802d794:	f7f2 fd24 	bl	80201e0 <memchr>
 802d798:	9a04      	ldr	r2, [sp, #16]
 802d79a:	b9d8      	cbnz	r0, 802d7d4 <_vfiprintf_r+0x12c>
 802d79c:	06d1      	lsls	r1, r2, #27
 802d79e:	bf44      	itt	mi
 802d7a0:	2320      	movmi	r3, #32
 802d7a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d7a6:	0713      	lsls	r3, r2, #28
 802d7a8:	bf44      	itt	mi
 802d7aa:	232b      	movmi	r3, #43	; 0x2b
 802d7ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d7b0:	f89a 3000 	ldrb.w	r3, [sl]
 802d7b4:	2b2a      	cmp	r3, #42	; 0x2a
 802d7b6:	d015      	beq.n	802d7e4 <_vfiprintf_r+0x13c>
 802d7b8:	9a07      	ldr	r2, [sp, #28]
 802d7ba:	4654      	mov	r4, sl
 802d7bc:	2000      	movs	r0, #0
 802d7be:	f04f 0c0a 	mov.w	ip, #10
 802d7c2:	4621      	mov	r1, r4
 802d7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d7c8:	3b30      	subs	r3, #48	; 0x30
 802d7ca:	2b09      	cmp	r3, #9
 802d7cc:	d94e      	bls.n	802d86c <_vfiprintf_r+0x1c4>
 802d7ce:	b1b0      	cbz	r0, 802d7fe <_vfiprintf_r+0x156>
 802d7d0:	9207      	str	r2, [sp, #28]
 802d7d2:	e014      	b.n	802d7fe <_vfiprintf_r+0x156>
 802d7d4:	eba0 0308 	sub.w	r3, r0, r8
 802d7d8:	fa09 f303 	lsl.w	r3, r9, r3
 802d7dc:	4313      	orrs	r3, r2
 802d7de:	9304      	str	r3, [sp, #16]
 802d7e0:	46a2      	mov	sl, r4
 802d7e2:	e7d2      	b.n	802d78a <_vfiprintf_r+0xe2>
 802d7e4:	9b03      	ldr	r3, [sp, #12]
 802d7e6:	1d19      	adds	r1, r3, #4
 802d7e8:	681b      	ldr	r3, [r3, #0]
 802d7ea:	9103      	str	r1, [sp, #12]
 802d7ec:	2b00      	cmp	r3, #0
 802d7ee:	bfbb      	ittet	lt
 802d7f0:	425b      	neglt	r3, r3
 802d7f2:	f042 0202 	orrlt.w	r2, r2, #2
 802d7f6:	9307      	strge	r3, [sp, #28]
 802d7f8:	9307      	strlt	r3, [sp, #28]
 802d7fa:	bfb8      	it	lt
 802d7fc:	9204      	strlt	r2, [sp, #16]
 802d7fe:	7823      	ldrb	r3, [r4, #0]
 802d800:	2b2e      	cmp	r3, #46	; 0x2e
 802d802:	d10c      	bne.n	802d81e <_vfiprintf_r+0x176>
 802d804:	7863      	ldrb	r3, [r4, #1]
 802d806:	2b2a      	cmp	r3, #42	; 0x2a
 802d808:	d135      	bne.n	802d876 <_vfiprintf_r+0x1ce>
 802d80a:	9b03      	ldr	r3, [sp, #12]
 802d80c:	1d1a      	adds	r2, r3, #4
 802d80e:	681b      	ldr	r3, [r3, #0]
 802d810:	9203      	str	r2, [sp, #12]
 802d812:	2b00      	cmp	r3, #0
 802d814:	bfb8      	it	lt
 802d816:	f04f 33ff 	movlt.w	r3, #4294967295
 802d81a:	3402      	adds	r4, #2
 802d81c:	9305      	str	r3, [sp, #20]
 802d81e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802d904 <_vfiprintf_r+0x25c>
 802d822:	7821      	ldrb	r1, [r4, #0]
 802d824:	2203      	movs	r2, #3
 802d826:	4650      	mov	r0, sl
 802d828:	f7f2 fcda 	bl	80201e0 <memchr>
 802d82c:	b140      	cbz	r0, 802d840 <_vfiprintf_r+0x198>
 802d82e:	2340      	movs	r3, #64	; 0x40
 802d830:	eba0 000a 	sub.w	r0, r0, sl
 802d834:	fa03 f000 	lsl.w	r0, r3, r0
 802d838:	9b04      	ldr	r3, [sp, #16]
 802d83a:	4303      	orrs	r3, r0
 802d83c:	3401      	adds	r4, #1
 802d83e:	9304      	str	r3, [sp, #16]
 802d840:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d844:	482c      	ldr	r0, [pc, #176]	; (802d8f8 <_vfiprintf_r+0x250>)
 802d846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d84a:	2206      	movs	r2, #6
 802d84c:	f7f2 fcc8 	bl	80201e0 <memchr>
 802d850:	2800      	cmp	r0, #0
 802d852:	d03f      	beq.n	802d8d4 <_vfiprintf_r+0x22c>
 802d854:	4b29      	ldr	r3, [pc, #164]	; (802d8fc <_vfiprintf_r+0x254>)
 802d856:	bb1b      	cbnz	r3, 802d8a0 <_vfiprintf_r+0x1f8>
 802d858:	9b03      	ldr	r3, [sp, #12]
 802d85a:	3307      	adds	r3, #7
 802d85c:	f023 0307 	bic.w	r3, r3, #7
 802d860:	3308      	adds	r3, #8
 802d862:	9303      	str	r3, [sp, #12]
 802d864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d866:	443b      	add	r3, r7
 802d868:	9309      	str	r3, [sp, #36]	; 0x24
 802d86a:	e767      	b.n	802d73c <_vfiprintf_r+0x94>
 802d86c:	fb0c 3202 	mla	r2, ip, r2, r3
 802d870:	460c      	mov	r4, r1
 802d872:	2001      	movs	r0, #1
 802d874:	e7a5      	b.n	802d7c2 <_vfiprintf_r+0x11a>
 802d876:	2300      	movs	r3, #0
 802d878:	3401      	adds	r4, #1
 802d87a:	9305      	str	r3, [sp, #20]
 802d87c:	4619      	mov	r1, r3
 802d87e:	f04f 0c0a 	mov.w	ip, #10
 802d882:	4620      	mov	r0, r4
 802d884:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d888:	3a30      	subs	r2, #48	; 0x30
 802d88a:	2a09      	cmp	r2, #9
 802d88c:	d903      	bls.n	802d896 <_vfiprintf_r+0x1ee>
 802d88e:	2b00      	cmp	r3, #0
 802d890:	d0c5      	beq.n	802d81e <_vfiprintf_r+0x176>
 802d892:	9105      	str	r1, [sp, #20]
 802d894:	e7c3      	b.n	802d81e <_vfiprintf_r+0x176>
 802d896:	fb0c 2101 	mla	r1, ip, r1, r2
 802d89a:	4604      	mov	r4, r0
 802d89c:	2301      	movs	r3, #1
 802d89e:	e7f0      	b.n	802d882 <_vfiprintf_r+0x1da>
 802d8a0:	ab03      	add	r3, sp, #12
 802d8a2:	9300      	str	r3, [sp, #0]
 802d8a4:	462a      	mov	r2, r5
 802d8a6:	4b16      	ldr	r3, [pc, #88]	; (802d900 <_vfiprintf_r+0x258>)
 802d8a8:	a904      	add	r1, sp, #16
 802d8aa:	4630      	mov	r0, r6
 802d8ac:	f3af 8000 	nop.w
 802d8b0:	4607      	mov	r7, r0
 802d8b2:	1c78      	adds	r0, r7, #1
 802d8b4:	d1d6      	bne.n	802d864 <_vfiprintf_r+0x1bc>
 802d8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d8b8:	07d9      	lsls	r1, r3, #31
 802d8ba:	d405      	bmi.n	802d8c8 <_vfiprintf_r+0x220>
 802d8bc:	89ab      	ldrh	r3, [r5, #12]
 802d8be:	059a      	lsls	r2, r3, #22
 802d8c0:	d402      	bmi.n	802d8c8 <_vfiprintf_r+0x220>
 802d8c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d8c4:	f000 fc45 	bl	802e152 <__retarget_lock_release_recursive>
 802d8c8:	89ab      	ldrh	r3, [r5, #12]
 802d8ca:	065b      	lsls	r3, r3, #25
 802d8cc:	f53f af12 	bmi.w	802d6f4 <_vfiprintf_r+0x4c>
 802d8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d8d2:	e711      	b.n	802d6f8 <_vfiprintf_r+0x50>
 802d8d4:	ab03      	add	r3, sp, #12
 802d8d6:	9300      	str	r3, [sp, #0]
 802d8d8:	462a      	mov	r2, r5
 802d8da:	4b09      	ldr	r3, [pc, #36]	; (802d900 <_vfiprintf_r+0x258>)
 802d8dc:	a904      	add	r1, sp, #16
 802d8de:	4630      	mov	r0, r6
 802d8e0:	f000 f880 	bl	802d9e4 <_printf_i>
 802d8e4:	e7e4      	b.n	802d8b0 <_vfiprintf_r+0x208>
 802d8e6:	bf00      	nop
 802d8e8:	0802e800 	.word	0x0802e800
 802d8ec:	0802e820 	.word	0x0802e820
 802d8f0:	0802e7e0 	.word	0x0802e7e0
 802d8f4:	0802e7aa 	.word	0x0802e7aa
 802d8f8:	0802e7b4 	.word	0x0802e7b4
 802d8fc:	00000000 	.word	0x00000000
 802d900:	0802d683 	.word	0x0802d683
 802d904:	0802e7b0 	.word	0x0802e7b0

0802d908 <_printf_common>:
 802d908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d90c:	4616      	mov	r6, r2
 802d90e:	4699      	mov	r9, r3
 802d910:	688a      	ldr	r2, [r1, #8]
 802d912:	690b      	ldr	r3, [r1, #16]
 802d914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d918:	4293      	cmp	r3, r2
 802d91a:	bfb8      	it	lt
 802d91c:	4613      	movlt	r3, r2
 802d91e:	6033      	str	r3, [r6, #0]
 802d920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d924:	4607      	mov	r7, r0
 802d926:	460c      	mov	r4, r1
 802d928:	b10a      	cbz	r2, 802d92e <_printf_common+0x26>
 802d92a:	3301      	adds	r3, #1
 802d92c:	6033      	str	r3, [r6, #0]
 802d92e:	6823      	ldr	r3, [r4, #0]
 802d930:	0699      	lsls	r1, r3, #26
 802d932:	bf42      	ittt	mi
 802d934:	6833      	ldrmi	r3, [r6, #0]
 802d936:	3302      	addmi	r3, #2
 802d938:	6033      	strmi	r3, [r6, #0]
 802d93a:	6825      	ldr	r5, [r4, #0]
 802d93c:	f015 0506 	ands.w	r5, r5, #6
 802d940:	d106      	bne.n	802d950 <_printf_common+0x48>
 802d942:	f104 0a19 	add.w	sl, r4, #25
 802d946:	68e3      	ldr	r3, [r4, #12]
 802d948:	6832      	ldr	r2, [r6, #0]
 802d94a:	1a9b      	subs	r3, r3, r2
 802d94c:	42ab      	cmp	r3, r5
 802d94e:	dc26      	bgt.n	802d99e <_printf_common+0x96>
 802d950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802d954:	1e13      	subs	r3, r2, #0
 802d956:	6822      	ldr	r2, [r4, #0]
 802d958:	bf18      	it	ne
 802d95a:	2301      	movne	r3, #1
 802d95c:	0692      	lsls	r2, r2, #26
 802d95e:	d42b      	bmi.n	802d9b8 <_printf_common+0xb0>
 802d960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d964:	4649      	mov	r1, r9
 802d966:	4638      	mov	r0, r7
 802d968:	47c0      	blx	r8
 802d96a:	3001      	adds	r0, #1
 802d96c:	d01e      	beq.n	802d9ac <_printf_common+0xa4>
 802d96e:	6823      	ldr	r3, [r4, #0]
 802d970:	68e5      	ldr	r5, [r4, #12]
 802d972:	6832      	ldr	r2, [r6, #0]
 802d974:	f003 0306 	and.w	r3, r3, #6
 802d978:	2b04      	cmp	r3, #4
 802d97a:	bf08      	it	eq
 802d97c:	1aad      	subeq	r5, r5, r2
 802d97e:	68a3      	ldr	r3, [r4, #8]
 802d980:	6922      	ldr	r2, [r4, #16]
 802d982:	bf0c      	ite	eq
 802d984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d988:	2500      	movne	r5, #0
 802d98a:	4293      	cmp	r3, r2
 802d98c:	bfc4      	itt	gt
 802d98e:	1a9b      	subgt	r3, r3, r2
 802d990:	18ed      	addgt	r5, r5, r3
 802d992:	2600      	movs	r6, #0
 802d994:	341a      	adds	r4, #26
 802d996:	42b5      	cmp	r5, r6
 802d998:	d11a      	bne.n	802d9d0 <_printf_common+0xc8>
 802d99a:	2000      	movs	r0, #0
 802d99c:	e008      	b.n	802d9b0 <_printf_common+0xa8>
 802d99e:	2301      	movs	r3, #1
 802d9a0:	4652      	mov	r2, sl
 802d9a2:	4649      	mov	r1, r9
 802d9a4:	4638      	mov	r0, r7
 802d9a6:	47c0      	blx	r8
 802d9a8:	3001      	adds	r0, #1
 802d9aa:	d103      	bne.n	802d9b4 <_printf_common+0xac>
 802d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 802d9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d9b4:	3501      	adds	r5, #1
 802d9b6:	e7c6      	b.n	802d946 <_printf_common+0x3e>
 802d9b8:	18e1      	adds	r1, r4, r3
 802d9ba:	1c5a      	adds	r2, r3, #1
 802d9bc:	2030      	movs	r0, #48	; 0x30
 802d9be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d9c2:	4422      	add	r2, r4
 802d9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d9c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d9cc:	3302      	adds	r3, #2
 802d9ce:	e7c7      	b.n	802d960 <_printf_common+0x58>
 802d9d0:	2301      	movs	r3, #1
 802d9d2:	4622      	mov	r2, r4
 802d9d4:	4649      	mov	r1, r9
 802d9d6:	4638      	mov	r0, r7
 802d9d8:	47c0      	blx	r8
 802d9da:	3001      	adds	r0, #1
 802d9dc:	d0e6      	beq.n	802d9ac <_printf_common+0xa4>
 802d9de:	3601      	adds	r6, #1
 802d9e0:	e7d9      	b.n	802d996 <_printf_common+0x8e>
	...

0802d9e4 <_printf_i>:
 802d9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d9e8:	460c      	mov	r4, r1
 802d9ea:	4691      	mov	r9, r2
 802d9ec:	7e27      	ldrb	r7, [r4, #24]
 802d9ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 802d9f0:	2f78      	cmp	r7, #120	; 0x78
 802d9f2:	4680      	mov	r8, r0
 802d9f4:	469a      	mov	sl, r3
 802d9f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d9fa:	d807      	bhi.n	802da0c <_printf_i+0x28>
 802d9fc:	2f62      	cmp	r7, #98	; 0x62
 802d9fe:	d80a      	bhi.n	802da16 <_printf_i+0x32>
 802da00:	2f00      	cmp	r7, #0
 802da02:	f000 80d8 	beq.w	802dbb6 <_printf_i+0x1d2>
 802da06:	2f58      	cmp	r7, #88	; 0x58
 802da08:	f000 80a3 	beq.w	802db52 <_printf_i+0x16e>
 802da0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802da10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802da14:	e03a      	b.n	802da8c <_printf_i+0xa8>
 802da16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802da1a:	2b15      	cmp	r3, #21
 802da1c:	d8f6      	bhi.n	802da0c <_printf_i+0x28>
 802da1e:	a001      	add	r0, pc, #4	; (adr r0, 802da24 <_printf_i+0x40>)
 802da20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802da24:	0802da7d 	.word	0x0802da7d
 802da28:	0802da91 	.word	0x0802da91
 802da2c:	0802da0d 	.word	0x0802da0d
 802da30:	0802da0d 	.word	0x0802da0d
 802da34:	0802da0d 	.word	0x0802da0d
 802da38:	0802da0d 	.word	0x0802da0d
 802da3c:	0802da91 	.word	0x0802da91
 802da40:	0802da0d 	.word	0x0802da0d
 802da44:	0802da0d 	.word	0x0802da0d
 802da48:	0802da0d 	.word	0x0802da0d
 802da4c:	0802da0d 	.word	0x0802da0d
 802da50:	0802db9d 	.word	0x0802db9d
 802da54:	0802dac1 	.word	0x0802dac1
 802da58:	0802db7f 	.word	0x0802db7f
 802da5c:	0802da0d 	.word	0x0802da0d
 802da60:	0802da0d 	.word	0x0802da0d
 802da64:	0802dbbf 	.word	0x0802dbbf
 802da68:	0802da0d 	.word	0x0802da0d
 802da6c:	0802dac1 	.word	0x0802dac1
 802da70:	0802da0d 	.word	0x0802da0d
 802da74:	0802da0d 	.word	0x0802da0d
 802da78:	0802db87 	.word	0x0802db87
 802da7c:	680b      	ldr	r3, [r1, #0]
 802da7e:	1d1a      	adds	r2, r3, #4
 802da80:	681b      	ldr	r3, [r3, #0]
 802da82:	600a      	str	r2, [r1, #0]
 802da84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802da88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802da8c:	2301      	movs	r3, #1
 802da8e:	e0a3      	b.n	802dbd8 <_printf_i+0x1f4>
 802da90:	6825      	ldr	r5, [r4, #0]
 802da92:	6808      	ldr	r0, [r1, #0]
 802da94:	062e      	lsls	r6, r5, #24
 802da96:	f100 0304 	add.w	r3, r0, #4
 802da9a:	d50a      	bpl.n	802dab2 <_printf_i+0xce>
 802da9c:	6805      	ldr	r5, [r0, #0]
 802da9e:	600b      	str	r3, [r1, #0]
 802daa0:	2d00      	cmp	r5, #0
 802daa2:	da03      	bge.n	802daac <_printf_i+0xc8>
 802daa4:	232d      	movs	r3, #45	; 0x2d
 802daa6:	426d      	negs	r5, r5
 802daa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802daac:	485e      	ldr	r0, [pc, #376]	; (802dc28 <_printf_i+0x244>)
 802daae:	230a      	movs	r3, #10
 802dab0:	e019      	b.n	802dae6 <_printf_i+0x102>
 802dab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 802dab6:	6805      	ldr	r5, [r0, #0]
 802dab8:	600b      	str	r3, [r1, #0]
 802daba:	bf18      	it	ne
 802dabc:	b22d      	sxthne	r5, r5
 802dabe:	e7ef      	b.n	802daa0 <_printf_i+0xbc>
 802dac0:	680b      	ldr	r3, [r1, #0]
 802dac2:	6825      	ldr	r5, [r4, #0]
 802dac4:	1d18      	adds	r0, r3, #4
 802dac6:	6008      	str	r0, [r1, #0]
 802dac8:	0628      	lsls	r0, r5, #24
 802daca:	d501      	bpl.n	802dad0 <_printf_i+0xec>
 802dacc:	681d      	ldr	r5, [r3, #0]
 802dace:	e002      	b.n	802dad6 <_printf_i+0xf2>
 802dad0:	0669      	lsls	r1, r5, #25
 802dad2:	d5fb      	bpl.n	802dacc <_printf_i+0xe8>
 802dad4:	881d      	ldrh	r5, [r3, #0]
 802dad6:	4854      	ldr	r0, [pc, #336]	; (802dc28 <_printf_i+0x244>)
 802dad8:	2f6f      	cmp	r7, #111	; 0x6f
 802dada:	bf0c      	ite	eq
 802dadc:	2308      	moveq	r3, #8
 802dade:	230a      	movne	r3, #10
 802dae0:	2100      	movs	r1, #0
 802dae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802dae6:	6866      	ldr	r6, [r4, #4]
 802dae8:	60a6      	str	r6, [r4, #8]
 802daea:	2e00      	cmp	r6, #0
 802daec:	bfa2      	ittt	ge
 802daee:	6821      	ldrge	r1, [r4, #0]
 802daf0:	f021 0104 	bicge.w	r1, r1, #4
 802daf4:	6021      	strge	r1, [r4, #0]
 802daf6:	b90d      	cbnz	r5, 802dafc <_printf_i+0x118>
 802daf8:	2e00      	cmp	r6, #0
 802dafa:	d04d      	beq.n	802db98 <_printf_i+0x1b4>
 802dafc:	4616      	mov	r6, r2
 802dafe:	fbb5 f1f3 	udiv	r1, r5, r3
 802db02:	fb03 5711 	mls	r7, r3, r1, r5
 802db06:	5dc7      	ldrb	r7, [r0, r7]
 802db08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802db0c:	462f      	mov	r7, r5
 802db0e:	42bb      	cmp	r3, r7
 802db10:	460d      	mov	r5, r1
 802db12:	d9f4      	bls.n	802dafe <_printf_i+0x11a>
 802db14:	2b08      	cmp	r3, #8
 802db16:	d10b      	bne.n	802db30 <_printf_i+0x14c>
 802db18:	6823      	ldr	r3, [r4, #0]
 802db1a:	07df      	lsls	r7, r3, #31
 802db1c:	d508      	bpl.n	802db30 <_printf_i+0x14c>
 802db1e:	6923      	ldr	r3, [r4, #16]
 802db20:	6861      	ldr	r1, [r4, #4]
 802db22:	4299      	cmp	r1, r3
 802db24:	bfde      	ittt	le
 802db26:	2330      	movle	r3, #48	; 0x30
 802db28:	f806 3c01 	strble.w	r3, [r6, #-1]
 802db2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 802db30:	1b92      	subs	r2, r2, r6
 802db32:	6122      	str	r2, [r4, #16]
 802db34:	f8cd a000 	str.w	sl, [sp]
 802db38:	464b      	mov	r3, r9
 802db3a:	aa03      	add	r2, sp, #12
 802db3c:	4621      	mov	r1, r4
 802db3e:	4640      	mov	r0, r8
 802db40:	f7ff fee2 	bl	802d908 <_printf_common>
 802db44:	3001      	adds	r0, #1
 802db46:	d14c      	bne.n	802dbe2 <_printf_i+0x1fe>
 802db48:	f04f 30ff 	mov.w	r0, #4294967295
 802db4c:	b004      	add	sp, #16
 802db4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802db52:	4835      	ldr	r0, [pc, #212]	; (802dc28 <_printf_i+0x244>)
 802db54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802db58:	6823      	ldr	r3, [r4, #0]
 802db5a:	680e      	ldr	r6, [r1, #0]
 802db5c:	061f      	lsls	r7, r3, #24
 802db5e:	f856 5b04 	ldr.w	r5, [r6], #4
 802db62:	600e      	str	r6, [r1, #0]
 802db64:	d514      	bpl.n	802db90 <_printf_i+0x1ac>
 802db66:	07d9      	lsls	r1, r3, #31
 802db68:	bf44      	itt	mi
 802db6a:	f043 0320 	orrmi.w	r3, r3, #32
 802db6e:	6023      	strmi	r3, [r4, #0]
 802db70:	b91d      	cbnz	r5, 802db7a <_printf_i+0x196>
 802db72:	6823      	ldr	r3, [r4, #0]
 802db74:	f023 0320 	bic.w	r3, r3, #32
 802db78:	6023      	str	r3, [r4, #0]
 802db7a:	2310      	movs	r3, #16
 802db7c:	e7b0      	b.n	802dae0 <_printf_i+0xfc>
 802db7e:	6823      	ldr	r3, [r4, #0]
 802db80:	f043 0320 	orr.w	r3, r3, #32
 802db84:	6023      	str	r3, [r4, #0]
 802db86:	2378      	movs	r3, #120	; 0x78
 802db88:	4828      	ldr	r0, [pc, #160]	; (802dc2c <_printf_i+0x248>)
 802db8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802db8e:	e7e3      	b.n	802db58 <_printf_i+0x174>
 802db90:	065e      	lsls	r6, r3, #25
 802db92:	bf48      	it	mi
 802db94:	b2ad      	uxthmi	r5, r5
 802db96:	e7e6      	b.n	802db66 <_printf_i+0x182>
 802db98:	4616      	mov	r6, r2
 802db9a:	e7bb      	b.n	802db14 <_printf_i+0x130>
 802db9c:	680b      	ldr	r3, [r1, #0]
 802db9e:	6826      	ldr	r6, [r4, #0]
 802dba0:	6960      	ldr	r0, [r4, #20]
 802dba2:	1d1d      	adds	r5, r3, #4
 802dba4:	600d      	str	r5, [r1, #0]
 802dba6:	0635      	lsls	r5, r6, #24
 802dba8:	681b      	ldr	r3, [r3, #0]
 802dbaa:	d501      	bpl.n	802dbb0 <_printf_i+0x1cc>
 802dbac:	6018      	str	r0, [r3, #0]
 802dbae:	e002      	b.n	802dbb6 <_printf_i+0x1d2>
 802dbb0:	0671      	lsls	r1, r6, #25
 802dbb2:	d5fb      	bpl.n	802dbac <_printf_i+0x1c8>
 802dbb4:	8018      	strh	r0, [r3, #0]
 802dbb6:	2300      	movs	r3, #0
 802dbb8:	6123      	str	r3, [r4, #16]
 802dbba:	4616      	mov	r6, r2
 802dbbc:	e7ba      	b.n	802db34 <_printf_i+0x150>
 802dbbe:	680b      	ldr	r3, [r1, #0]
 802dbc0:	1d1a      	adds	r2, r3, #4
 802dbc2:	600a      	str	r2, [r1, #0]
 802dbc4:	681e      	ldr	r6, [r3, #0]
 802dbc6:	6862      	ldr	r2, [r4, #4]
 802dbc8:	2100      	movs	r1, #0
 802dbca:	4630      	mov	r0, r6
 802dbcc:	f7f2 fb08 	bl	80201e0 <memchr>
 802dbd0:	b108      	cbz	r0, 802dbd6 <_printf_i+0x1f2>
 802dbd2:	1b80      	subs	r0, r0, r6
 802dbd4:	6060      	str	r0, [r4, #4]
 802dbd6:	6863      	ldr	r3, [r4, #4]
 802dbd8:	6123      	str	r3, [r4, #16]
 802dbda:	2300      	movs	r3, #0
 802dbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802dbe0:	e7a8      	b.n	802db34 <_printf_i+0x150>
 802dbe2:	6923      	ldr	r3, [r4, #16]
 802dbe4:	4632      	mov	r2, r6
 802dbe6:	4649      	mov	r1, r9
 802dbe8:	4640      	mov	r0, r8
 802dbea:	47d0      	blx	sl
 802dbec:	3001      	adds	r0, #1
 802dbee:	d0ab      	beq.n	802db48 <_printf_i+0x164>
 802dbf0:	6823      	ldr	r3, [r4, #0]
 802dbf2:	079b      	lsls	r3, r3, #30
 802dbf4:	d413      	bmi.n	802dc1e <_printf_i+0x23a>
 802dbf6:	68e0      	ldr	r0, [r4, #12]
 802dbf8:	9b03      	ldr	r3, [sp, #12]
 802dbfa:	4298      	cmp	r0, r3
 802dbfc:	bfb8      	it	lt
 802dbfe:	4618      	movlt	r0, r3
 802dc00:	e7a4      	b.n	802db4c <_printf_i+0x168>
 802dc02:	2301      	movs	r3, #1
 802dc04:	4632      	mov	r2, r6
 802dc06:	4649      	mov	r1, r9
 802dc08:	4640      	mov	r0, r8
 802dc0a:	47d0      	blx	sl
 802dc0c:	3001      	adds	r0, #1
 802dc0e:	d09b      	beq.n	802db48 <_printf_i+0x164>
 802dc10:	3501      	adds	r5, #1
 802dc12:	68e3      	ldr	r3, [r4, #12]
 802dc14:	9903      	ldr	r1, [sp, #12]
 802dc16:	1a5b      	subs	r3, r3, r1
 802dc18:	42ab      	cmp	r3, r5
 802dc1a:	dcf2      	bgt.n	802dc02 <_printf_i+0x21e>
 802dc1c:	e7eb      	b.n	802dbf6 <_printf_i+0x212>
 802dc1e:	2500      	movs	r5, #0
 802dc20:	f104 0619 	add.w	r6, r4, #25
 802dc24:	e7f5      	b.n	802dc12 <_printf_i+0x22e>
 802dc26:	bf00      	nop
 802dc28:	0802e7bb 	.word	0x0802e7bb
 802dc2c:	0802e7cc 	.word	0x0802e7cc

0802dc30 <_sbrk_r>:
 802dc30:	b538      	push	{r3, r4, r5, lr}
 802dc32:	4d06      	ldr	r5, [pc, #24]	; (802dc4c <_sbrk_r+0x1c>)
 802dc34:	2300      	movs	r3, #0
 802dc36:	4604      	mov	r4, r0
 802dc38:	4608      	mov	r0, r1
 802dc3a:	602b      	str	r3, [r5, #0]
 802dc3c:	f7f5 fea0 	bl	8023980 <_sbrk>
 802dc40:	1c43      	adds	r3, r0, #1
 802dc42:	d102      	bne.n	802dc4a <_sbrk_r+0x1a>
 802dc44:	682b      	ldr	r3, [r5, #0]
 802dc46:	b103      	cbz	r3, 802dc4a <_sbrk_r+0x1a>
 802dc48:	6023      	str	r3, [r4, #0]
 802dc4a:	bd38      	pop	{r3, r4, r5, pc}
 802dc4c:	20005038 	.word	0x20005038

0802dc50 <__swbuf_r>:
 802dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc52:	460e      	mov	r6, r1
 802dc54:	4614      	mov	r4, r2
 802dc56:	4605      	mov	r5, r0
 802dc58:	b118      	cbz	r0, 802dc62 <__swbuf_r+0x12>
 802dc5a:	6983      	ldr	r3, [r0, #24]
 802dc5c:	b90b      	cbnz	r3, 802dc62 <__swbuf_r+0x12>
 802dc5e:	f000 f9d9 	bl	802e014 <__sinit>
 802dc62:	4b21      	ldr	r3, [pc, #132]	; (802dce8 <__swbuf_r+0x98>)
 802dc64:	429c      	cmp	r4, r3
 802dc66:	d12b      	bne.n	802dcc0 <__swbuf_r+0x70>
 802dc68:	686c      	ldr	r4, [r5, #4]
 802dc6a:	69a3      	ldr	r3, [r4, #24]
 802dc6c:	60a3      	str	r3, [r4, #8]
 802dc6e:	89a3      	ldrh	r3, [r4, #12]
 802dc70:	071a      	lsls	r2, r3, #28
 802dc72:	d52f      	bpl.n	802dcd4 <__swbuf_r+0x84>
 802dc74:	6923      	ldr	r3, [r4, #16]
 802dc76:	b36b      	cbz	r3, 802dcd4 <__swbuf_r+0x84>
 802dc78:	6923      	ldr	r3, [r4, #16]
 802dc7a:	6820      	ldr	r0, [r4, #0]
 802dc7c:	1ac0      	subs	r0, r0, r3
 802dc7e:	6963      	ldr	r3, [r4, #20]
 802dc80:	b2f6      	uxtb	r6, r6
 802dc82:	4283      	cmp	r3, r0
 802dc84:	4637      	mov	r7, r6
 802dc86:	dc04      	bgt.n	802dc92 <__swbuf_r+0x42>
 802dc88:	4621      	mov	r1, r4
 802dc8a:	4628      	mov	r0, r5
 802dc8c:	f000 f92e 	bl	802deec <_fflush_r>
 802dc90:	bb30      	cbnz	r0, 802dce0 <__swbuf_r+0x90>
 802dc92:	68a3      	ldr	r3, [r4, #8]
 802dc94:	3b01      	subs	r3, #1
 802dc96:	60a3      	str	r3, [r4, #8]
 802dc98:	6823      	ldr	r3, [r4, #0]
 802dc9a:	1c5a      	adds	r2, r3, #1
 802dc9c:	6022      	str	r2, [r4, #0]
 802dc9e:	701e      	strb	r6, [r3, #0]
 802dca0:	6963      	ldr	r3, [r4, #20]
 802dca2:	3001      	adds	r0, #1
 802dca4:	4283      	cmp	r3, r0
 802dca6:	d004      	beq.n	802dcb2 <__swbuf_r+0x62>
 802dca8:	89a3      	ldrh	r3, [r4, #12]
 802dcaa:	07db      	lsls	r3, r3, #31
 802dcac:	d506      	bpl.n	802dcbc <__swbuf_r+0x6c>
 802dcae:	2e0a      	cmp	r6, #10
 802dcb0:	d104      	bne.n	802dcbc <__swbuf_r+0x6c>
 802dcb2:	4621      	mov	r1, r4
 802dcb4:	4628      	mov	r0, r5
 802dcb6:	f000 f919 	bl	802deec <_fflush_r>
 802dcba:	b988      	cbnz	r0, 802dce0 <__swbuf_r+0x90>
 802dcbc:	4638      	mov	r0, r7
 802dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dcc0:	4b0a      	ldr	r3, [pc, #40]	; (802dcec <__swbuf_r+0x9c>)
 802dcc2:	429c      	cmp	r4, r3
 802dcc4:	d101      	bne.n	802dcca <__swbuf_r+0x7a>
 802dcc6:	68ac      	ldr	r4, [r5, #8]
 802dcc8:	e7cf      	b.n	802dc6a <__swbuf_r+0x1a>
 802dcca:	4b09      	ldr	r3, [pc, #36]	; (802dcf0 <__swbuf_r+0xa0>)
 802dccc:	429c      	cmp	r4, r3
 802dcce:	bf08      	it	eq
 802dcd0:	68ec      	ldreq	r4, [r5, #12]
 802dcd2:	e7ca      	b.n	802dc6a <__swbuf_r+0x1a>
 802dcd4:	4621      	mov	r1, r4
 802dcd6:	4628      	mov	r0, r5
 802dcd8:	f000 f80c 	bl	802dcf4 <__swsetup_r>
 802dcdc:	2800      	cmp	r0, #0
 802dcde:	d0cb      	beq.n	802dc78 <__swbuf_r+0x28>
 802dce0:	f04f 37ff 	mov.w	r7, #4294967295
 802dce4:	e7ea      	b.n	802dcbc <__swbuf_r+0x6c>
 802dce6:	bf00      	nop
 802dce8:	0802e800 	.word	0x0802e800
 802dcec:	0802e820 	.word	0x0802e820
 802dcf0:	0802e7e0 	.word	0x0802e7e0

0802dcf4 <__swsetup_r>:
 802dcf4:	4b32      	ldr	r3, [pc, #200]	; (802ddc0 <__swsetup_r+0xcc>)
 802dcf6:	b570      	push	{r4, r5, r6, lr}
 802dcf8:	681d      	ldr	r5, [r3, #0]
 802dcfa:	4606      	mov	r6, r0
 802dcfc:	460c      	mov	r4, r1
 802dcfe:	b125      	cbz	r5, 802dd0a <__swsetup_r+0x16>
 802dd00:	69ab      	ldr	r3, [r5, #24]
 802dd02:	b913      	cbnz	r3, 802dd0a <__swsetup_r+0x16>
 802dd04:	4628      	mov	r0, r5
 802dd06:	f000 f985 	bl	802e014 <__sinit>
 802dd0a:	4b2e      	ldr	r3, [pc, #184]	; (802ddc4 <__swsetup_r+0xd0>)
 802dd0c:	429c      	cmp	r4, r3
 802dd0e:	d10f      	bne.n	802dd30 <__swsetup_r+0x3c>
 802dd10:	686c      	ldr	r4, [r5, #4]
 802dd12:	89a3      	ldrh	r3, [r4, #12]
 802dd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802dd18:	0719      	lsls	r1, r3, #28
 802dd1a:	d42c      	bmi.n	802dd76 <__swsetup_r+0x82>
 802dd1c:	06dd      	lsls	r5, r3, #27
 802dd1e:	d411      	bmi.n	802dd44 <__swsetup_r+0x50>
 802dd20:	2309      	movs	r3, #9
 802dd22:	6033      	str	r3, [r6, #0]
 802dd24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802dd28:	81a3      	strh	r3, [r4, #12]
 802dd2a:	f04f 30ff 	mov.w	r0, #4294967295
 802dd2e:	e03e      	b.n	802ddae <__swsetup_r+0xba>
 802dd30:	4b25      	ldr	r3, [pc, #148]	; (802ddc8 <__swsetup_r+0xd4>)
 802dd32:	429c      	cmp	r4, r3
 802dd34:	d101      	bne.n	802dd3a <__swsetup_r+0x46>
 802dd36:	68ac      	ldr	r4, [r5, #8]
 802dd38:	e7eb      	b.n	802dd12 <__swsetup_r+0x1e>
 802dd3a:	4b24      	ldr	r3, [pc, #144]	; (802ddcc <__swsetup_r+0xd8>)
 802dd3c:	429c      	cmp	r4, r3
 802dd3e:	bf08      	it	eq
 802dd40:	68ec      	ldreq	r4, [r5, #12]
 802dd42:	e7e6      	b.n	802dd12 <__swsetup_r+0x1e>
 802dd44:	0758      	lsls	r0, r3, #29
 802dd46:	d512      	bpl.n	802dd6e <__swsetup_r+0x7a>
 802dd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dd4a:	b141      	cbz	r1, 802dd5e <__swsetup_r+0x6a>
 802dd4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dd50:	4299      	cmp	r1, r3
 802dd52:	d002      	beq.n	802dd5a <__swsetup_r+0x66>
 802dd54:	4630      	mov	r0, r6
 802dd56:	f7ff fa77 	bl	802d248 <_free_r>
 802dd5a:	2300      	movs	r3, #0
 802dd5c:	6363      	str	r3, [r4, #52]	; 0x34
 802dd5e:	89a3      	ldrh	r3, [r4, #12]
 802dd60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802dd64:	81a3      	strh	r3, [r4, #12]
 802dd66:	2300      	movs	r3, #0
 802dd68:	6063      	str	r3, [r4, #4]
 802dd6a:	6923      	ldr	r3, [r4, #16]
 802dd6c:	6023      	str	r3, [r4, #0]
 802dd6e:	89a3      	ldrh	r3, [r4, #12]
 802dd70:	f043 0308 	orr.w	r3, r3, #8
 802dd74:	81a3      	strh	r3, [r4, #12]
 802dd76:	6923      	ldr	r3, [r4, #16]
 802dd78:	b94b      	cbnz	r3, 802dd8e <__swsetup_r+0x9a>
 802dd7a:	89a3      	ldrh	r3, [r4, #12]
 802dd7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802dd80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802dd84:	d003      	beq.n	802dd8e <__swsetup_r+0x9a>
 802dd86:	4621      	mov	r1, r4
 802dd88:	4630      	mov	r0, r6
 802dd8a:	f000 fa07 	bl	802e19c <__smakebuf_r>
 802dd8e:	89a0      	ldrh	r0, [r4, #12]
 802dd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802dd94:	f010 0301 	ands.w	r3, r0, #1
 802dd98:	d00a      	beq.n	802ddb0 <__swsetup_r+0xbc>
 802dd9a:	2300      	movs	r3, #0
 802dd9c:	60a3      	str	r3, [r4, #8]
 802dd9e:	6963      	ldr	r3, [r4, #20]
 802dda0:	425b      	negs	r3, r3
 802dda2:	61a3      	str	r3, [r4, #24]
 802dda4:	6923      	ldr	r3, [r4, #16]
 802dda6:	b943      	cbnz	r3, 802ddba <__swsetup_r+0xc6>
 802dda8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ddac:	d1ba      	bne.n	802dd24 <__swsetup_r+0x30>
 802ddae:	bd70      	pop	{r4, r5, r6, pc}
 802ddb0:	0781      	lsls	r1, r0, #30
 802ddb2:	bf58      	it	pl
 802ddb4:	6963      	ldrpl	r3, [r4, #20]
 802ddb6:	60a3      	str	r3, [r4, #8]
 802ddb8:	e7f4      	b.n	802dda4 <__swsetup_r+0xb0>
 802ddba:	2000      	movs	r0, #0
 802ddbc:	e7f7      	b.n	802ddae <__swsetup_r+0xba>
 802ddbe:	bf00      	nop
 802ddc0:	200003f4 	.word	0x200003f4
 802ddc4:	0802e800 	.word	0x0802e800
 802ddc8:	0802e820 	.word	0x0802e820
 802ddcc:	0802e7e0 	.word	0x0802e7e0

0802ddd0 <abort>:
 802ddd0:	b508      	push	{r3, lr}
 802ddd2:	2006      	movs	r0, #6
 802ddd4:	f000 fa96 	bl	802e304 <raise>
 802ddd8:	2001      	movs	r0, #1
 802ddda:	f7f5 fd59 	bl	8023890 <_exit>
	...

0802dde0 <__sflush_r>:
 802dde0:	898a      	ldrh	r2, [r1, #12]
 802dde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dde6:	4605      	mov	r5, r0
 802dde8:	0710      	lsls	r0, r2, #28
 802ddea:	460c      	mov	r4, r1
 802ddec:	d458      	bmi.n	802dea0 <__sflush_r+0xc0>
 802ddee:	684b      	ldr	r3, [r1, #4]
 802ddf0:	2b00      	cmp	r3, #0
 802ddf2:	dc05      	bgt.n	802de00 <__sflush_r+0x20>
 802ddf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ddf6:	2b00      	cmp	r3, #0
 802ddf8:	dc02      	bgt.n	802de00 <__sflush_r+0x20>
 802ddfa:	2000      	movs	r0, #0
 802ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802de00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802de02:	2e00      	cmp	r6, #0
 802de04:	d0f9      	beq.n	802ddfa <__sflush_r+0x1a>
 802de06:	2300      	movs	r3, #0
 802de08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802de0c:	682f      	ldr	r7, [r5, #0]
 802de0e:	602b      	str	r3, [r5, #0]
 802de10:	d032      	beq.n	802de78 <__sflush_r+0x98>
 802de12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802de14:	89a3      	ldrh	r3, [r4, #12]
 802de16:	075a      	lsls	r2, r3, #29
 802de18:	d505      	bpl.n	802de26 <__sflush_r+0x46>
 802de1a:	6863      	ldr	r3, [r4, #4]
 802de1c:	1ac0      	subs	r0, r0, r3
 802de1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802de20:	b10b      	cbz	r3, 802de26 <__sflush_r+0x46>
 802de22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802de24:	1ac0      	subs	r0, r0, r3
 802de26:	2300      	movs	r3, #0
 802de28:	4602      	mov	r2, r0
 802de2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802de2c:	6a21      	ldr	r1, [r4, #32]
 802de2e:	4628      	mov	r0, r5
 802de30:	47b0      	blx	r6
 802de32:	1c43      	adds	r3, r0, #1
 802de34:	89a3      	ldrh	r3, [r4, #12]
 802de36:	d106      	bne.n	802de46 <__sflush_r+0x66>
 802de38:	6829      	ldr	r1, [r5, #0]
 802de3a:	291d      	cmp	r1, #29
 802de3c:	d82c      	bhi.n	802de98 <__sflush_r+0xb8>
 802de3e:	4a2a      	ldr	r2, [pc, #168]	; (802dee8 <__sflush_r+0x108>)
 802de40:	40ca      	lsrs	r2, r1
 802de42:	07d6      	lsls	r6, r2, #31
 802de44:	d528      	bpl.n	802de98 <__sflush_r+0xb8>
 802de46:	2200      	movs	r2, #0
 802de48:	6062      	str	r2, [r4, #4]
 802de4a:	04d9      	lsls	r1, r3, #19
 802de4c:	6922      	ldr	r2, [r4, #16]
 802de4e:	6022      	str	r2, [r4, #0]
 802de50:	d504      	bpl.n	802de5c <__sflush_r+0x7c>
 802de52:	1c42      	adds	r2, r0, #1
 802de54:	d101      	bne.n	802de5a <__sflush_r+0x7a>
 802de56:	682b      	ldr	r3, [r5, #0]
 802de58:	b903      	cbnz	r3, 802de5c <__sflush_r+0x7c>
 802de5a:	6560      	str	r0, [r4, #84]	; 0x54
 802de5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802de5e:	602f      	str	r7, [r5, #0]
 802de60:	2900      	cmp	r1, #0
 802de62:	d0ca      	beq.n	802ddfa <__sflush_r+0x1a>
 802de64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802de68:	4299      	cmp	r1, r3
 802de6a:	d002      	beq.n	802de72 <__sflush_r+0x92>
 802de6c:	4628      	mov	r0, r5
 802de6e:	f7ff f9eb 	bl	802d248 <_free_r>
 802de72:	2000      	movs	r0, #0
 802de74:	6360      	str	r0, [r4, #52]	; 0x34
 802de76:	e7c1      	b.n	802ddfc <__sflush_r+0x1c>
 802de78:	6a21      	ldr	r1, [r4, #32]
 802de7a:	2301      	movs	r3, #1
 802de7c:	4628      	mov	r0, r5
 802de7e:	47b0      	blx	r6
 802de80:	1c41      	adds	r1, r0, #1
 802de82:	d1c7      	bne.n	802de14 <__sflush_r+0x34>
 802de84:	682b      	ldr	r3, [r5, #0]
 802de86:	2b00      	cmp	r3, #0
 802de88:	d0c4      	beq.n	802de14 <__sflush_r+0x34>
 802de8a:	2b1d      	cmp	r3, #29
 802de8c:	d001      	beq.n	802de92 <__sflush_r+0xb2>
 802de8e:	2b16      	cmp	r3, #22
 802de90:	d101      	bne.n	802de96 <__sflush_r+0xb6>
 802de92:	602f      	str	r7, [r5, #0]
 802de94:	e7b1      	b.n	802ddfa <__sflush_r+0x1a>
 802de96:	89a3      	ldrh	r3, [r4, #12]
 802de98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802de9c:	81a3      	strh	r3, [r4, #12]
 802de9e:	e7ad      	b.n	802ddfc <__sflush_r+0x1c>
 802dea0:	690f      	ldr	r7, [r1, #16]
 802dea2:	2f00      	cmp	r7, #0
 802dea4:	d0a9      	beq.n	802ddfa <__sflush_r+0x1a>
 802dea6:	0793      	lsls	r3, r2, #30
 802dea8:	680e      	ldr	r6, [r1, #0]
 802deaa:	bf08      	it	eq
 802deac:	694b      	ldreq	r3, [r1, #20]
 802deae:	600f      	str	r7, [r1, #0]
 802deb0:	bf18      	it	ne
 802deb2:	2300      	movne	r3, #0
 802deb4:	eba6 0807 	sub.w	r8, r6, r7
 802deb8:	608b      	str	r3, [r1, #8]
 802deba:	f1b8 0f00 	cmp.w	r8, #0
 802debe:	dd9c      	ble.n	802ddfa <__sflush_r+0x1a>
 802dec0:	6a21      	ldr	r1, [r4, #32]
 802dec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802dec4:	4643      	mov	r3, r8
 802dec6:	463a      	mov	r2, r7
 802dec8:	4628      	mov	r0, r5
 802deca:	47b0      	blx	r6
 802decc:	2800      	cmp	r0, #0
 802dece:	dc06      	bgt.n	802dede <__sflush_r+0xfe>
 802ded0:	89a3      	ldrh	r3, [r4, #12]
 802ded2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ded6:	81a3      	strh	r3, [r4, #12]
 802ded8:	f04f 30ff 	mov.w	r0, #4294967295
 802dedc:	e78e      	b.n	802ddfc <__sflush_r+0x1c>
 802dede:	4407      	add	r7, r0
 802dee0:	eba8 0800 	sub.w	r8, r8, r0
 802dee4:	e7e9      	b.n	802deba <__sflush_r+0xda>
 802dee6:	bf00      	nop
 802dee8:	20400001 	.word	0x20400001

0802deec <_fflush_r>:
 802deec:	b538      	push	{r3, r4, r5, lr}
 802deee:	690b      	ldr	r3, [r1, #16]
 802def0:	4605      	mov	r5, r0
 802def2:	460c      	mov	r4, r1
 802def4:	b913      	cbnz	r3, 802defc <_fflush_r+0x10>
 802def6:	2500      	movs	r5, #0
 802def8:	4628      	mov	r0, r5
 802defa:	bd38      	pop	{r3, r4, r5, pc}
 802defc:	b118      	cbz	r0, 802df06 <_fflush_r+0x1a>
 802defe:	6983      	ldr	r3, [r0, #24]
 802df00:	b90b      	cbnz	r3, 802df06 <_fflush_r+0x1a>
 802df02:	f000 f887 	bl	802e014 <__sinit>
 802df06:	4b14      	ldr	r3, [pc, #80]	; (802df58 <_fflush_r+0x6c>)
 802df08:	429c      	cmp	r4, r3
 802df0a:	d11b      	bne.n	802df44 <_fflush_r+0x58>
 802df0c:	686c      	ldr	r4, [r5, #4]
 802df0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802df12:	2b00      	cmp	r3, #0
 802df14:	d0ef      	beq.n	802def6 <_fflush_r+0xa>
 802df16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802df18:	07d0      	lsls	r0, r2, #31
 802df1a:	d404      	bmi.n	802df26 <_fflush_r+0x3a>
 802df1c:	0599      	lsls	r1, r3, #22
 802df1e:	d402      	bmi.n	802df26 <_fflush_r+0x3a>
 802df20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802df22:	f000 f915 	bl	802e150 <__retarget_lock_acquire_recursive>
 802df26:	4628      	mov	r0, r5
 802df28:	4621      	mov	r1, r4
 802df2a:	f7ff ff59 	bl	802dde0 <__sflush_r>
 802df2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802df30:	07da      	lsls	r2, r3, #31
 802df32:	4605      	mov	r5, r0
 802df34:	d4e0      	bmi.n	802def8 <_fflush_r+0xc>
 802df36:	89a3      	ldrh	r3, [r4, #12]
 802df38:	059b      	lsls	r3, r3, #22
 802df3a:	d4dd      	bmi.n	802def8 <_fflush_r+0xc>
 802df3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802df3e:	f000 f908 	bl	802e152 <__retarget_lock_release_recursive>
 802df42:	e7d9      	b.n	802def8 <_fflush_r+0xc>
 802df44:	4b05      	ldr	r3, [pc, #20]	; (802df5c <_fflush_r+0x70>)
 802df46:	429c      	cmp	r4, r3
 802df48:	d101      	bne.n	802df4e <_fflush_r+0x62>
 802df4a:	68ac      	ldr	r4, [r5, #8]
 802df4c:	e7df      	b.n	802df0e <_fflush_r+0x22>
 802df4e:	4b04      	ldr	r3, [pc, #16]	; (802df60 <_fflush_r+0x74>)
 802df50:	429c      	cmp	r4, r3
 802df52:	bf08      	it	eq
 802df54:	68ec      	ldreq	r4, [r5, #12]
 802df56:	e7da      	b.n	802df0e <_fflush_r+0x22>
 802df58:	0802e800 	.word	0x0802e800
 802df5c:	0802e820 	.word	0x0802e820
 802df60:	0802e7e0 	.word	0x0802e7e0

0802df64 <std>:
 802df64:	2300      	movs	r3, #0
 802df66:	b510      	push	{r4, lr}
 802df68:	4604      	mov	r4, r0
 802df6a:	e9c0 3300 	strd	r3, r3, [r0]
 802df6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802df72:	6083      	str	r3, [r0, #8]
 802df74:	8181      	strh	r1, [r0, #12]
 802df76:	6643      	str	r3, [r0, #100]	; 0x64
 802df78:	81c2      	strh	r2, [r0, #14]
 802df7a:	6183      	str	r3, [r0, #24]
 802df7c:	4619      	mov	r1, r3
 802df7e:	2208      	movs	r2, #8
 802df80:	305c      	adds	r0, #92	; 0x5c
 802df82:	f7ff f87b 	bl	802d07c <memset>
 802df86:	4b05      	ldr	r3, [pc, #20]	; (802df9c <std+0x38>)
 802df88:	6263      	str	r3, [r4, #36]	; 0x24
 802df8a:	4b05      	ldr	r3, [pc, #20]	; (802dfa0 <std+0x3c>)
 802df8c:	62a3      	str	r3, [r4, #40]	; 0x28
 802df8e:	4b05      	ldr	r3, [pc, #20]	; (802dfa4 <std+0x40>)
 802df90:	62e3      	str	r3, [r4, #44]	; 0x2c
 802df92:	4b05      	ldr	r3, [pc, #20]	; (802dfa8 <std+0x44>)
 802df94:	6224      	str	r4, [r4, #32]
 802df96:	6323      	str	r3, [r4, #48]	; 0x30
 802df98:	bd10      	pop	{r4, pc}
 802df9a:	bf00      	nop
 802df9c:	0802e33d 	.word	0x0802e33d
 802dfa0:	0802e35f 	.word	0x0802e35f
 802dfa4:	0802e397 	.word	0x0802e397
 802dfa8:	0802e3bb 	.word	0x0802e3bb

0802dfac <_cleanup_r>:
 802dfac:	4901      	ldr	r1, [pc, #4]	; (802dfb4 <_cleanup_r+0x8>)
 802dfae:	f000 b8af 	b.w	802e110 <_fwalk_reent>
 802dfb2:	bf00      	nop
 802dfb4:	0802deed 	.word	0x0802deed

0802dfb8 <__sfmoreglue>:
 802dfb8:	b570      	push	{r4, r5, r6, lr}
 802dfba:	1e4a      	subs	r2, r1, #1
 802dfbc:	2568      	movs	r5, #104	; 0x68
 802dfbe:	4355      	muls	r5, r2
 802dfc0:	460e      	mov	r6, r1
 802dfc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802dfc6:	f7ff f98f 	bl	802d2e8 <_malloc_r>
 802dfca:	4604      	mov	r4, r0
 802dfcc:	b140      	cbz	r0, 802dfe0 <__sfmoreglue+0x28>
 802dfce:	2100      	movs	r1, #0
 802dfd0:	e9c0 1600 	strd	r1, r6, [r0]
 802dfd4:	300c      	adds	r0, #12
 802dfd6:	60a0      	str	r0, [r4, #8]
 802dfd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802dfdc:	f7ff f84e 	bl	802d07c <memset>
 802dfe0:	4620      	mov	r0, r4
 802dfe2:	bd70      	pop	{r4, r5, r6, pc}

0802dfe4 <__sfp_lock_acquire>:
 802dfe4:	4801      	ldr	r0, [pc, #4]	; (802dfec <__sfp_lock_acquire+0x8>)
 802dfe6:	f000 b8b3 	b.w	802e150 <__retarget_lock_acquire_recursive>
 802dfea:	bf00      	nop
 802dfec:	20005034 	.word	0x20005034

0802dff0 <__sfp_lock_release>:
 802dff0:	4801      	ldr	r0, [pc, #4]	; (802dff8 <__sfp_lock_release+0x8>)
 802dff2:	f000 b8ae 	b.w	802e152 <__retarget_lock_release_recursive>
 802dff6:	bf00      	nop
 802dff8:	20005034 	.word	0x20005034

0802dffc <__sinit_lock_acquire>:
 802dffc:	4801      	ldr	r0, [pc, #4]	; (802e004 <__sinit_lock_acquire+0x8>)
 802dffe:	f000 b8a7 	b.w	802e150 <__retarget_lock_acquire_recursive>
 802e002:	bf00      	nop
 802e004:	2000502f 	.word	0x2000502f

0802e008 <__sinit_lock_release>:
 802e008:	4801      	ldr	r0, [pc, #4]	; (802e010 <__sinit_lock_release+0x8>)
 802e00a:	f000 b8a2 	b.w	802e152 <__retarget_lock_release_recursive>
 802e00e:	bf00      	nop
 802e010:	2000502f 	.word	0x2000502f

0802e014 <__sinit>:
 802e014:	b510      	push	{r4, lr}
 802e016:	4604      	mov	r4, r0
 802e018:	f7ff fff0 	bl	802dffc <__sinit_lock_acquire>
 802e01c:	69a3      	ldr	r3, [r4, #24]
 802e01e:	b11b      	cbz	r3, 802e028 <__sinit+0x14>
 802e020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e024:	f7ff bff0 	b.w	802e008 <__sinit_lock_release>
 802e028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e02c:	6523      	str	r3, [r4, #80]	; 0x50
 802e02e:	4b13      	ldr	r3, [pc, #76]	; (802e07c <__sinit+0x68>)
 802e030:	4a13      	ldr	r2, [pc, #76]	; (802e080 <__sinit+0x6c>)
 802e032:	681b      	ldr	r3, [r3, #0]
 802e034:	62a2      	str	r2, [r4, #40]	; 0x28
 802e036:	42a3      	cmp	r3, r4
 802e038:	bf04      	itt	eq
 802e03a:	2301      	moveq	r3, #1
 802e03c:	61a3      	streq	r3, [r4, #24]
 802e03e:	4620      	mov	r0, r4
 802e040:	f000 f820 	bl	802e084 <__sfp>
 802e044:	6060      	str	r0, [r4, #4]
 802e046:	4620      	mov	r0, r4
 802e048:	f000 f81c 	bl	802e084 <__sfp>
 802e04c:	60a0      	str	r0, [r4, #8]
 802e04e:	4620      	mov	r0, r4
 802e050:	f000 f818 	bl	802e084 <__sfp>
 802e054:	2200      	movs	r2, #0
 802e056:	60e0      	str	r0, [r4, #12]
 802e058:	2104      	movs	r1, #4
 802e05a:	6860      	ldr	r0, [r4, #4]
 802e05c:	f7ff ff82 	bl	802df64 <std>
 802e060:	68a0      	ldr	r0, [r4, #8]
 802e062:	2201      	movs	r2, #1
 802e064:	2109      	movs	r1, #9
 802e066:	f7ff ff7d 	bl	802df64 <std>
 802e06a:	68e0      	ldr	r0, [r4, #12]
 802e06c:	2202      	movs	r2, #2
 802e06e:	2112      	movs	r1, #18
 802e070:	f7ff ff78 	bl	802df64 <std>
 802e074:	2301      	movs	r3, #1
 802e076:	61a3      	str	r3, [r4, #24]
 802e078:	e7d2      	b.n	802e020 <__sinit+0xc>
 802e07a:	bf00      	nop
 802e07c:	0802e6f4 	.word	0x0802e6f4
 802e080:	0802dfad 	.word	0x0802dfad

0802e084 <__sfp>:
 802e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e086:	4607      	mov	r7, r0
 802e088:	f7ff ffac 	bl	802dfe4 <__sfp_lock_acquire>
 802e08c:	4b1e      	ldr	r3, [pc, #120]	; (802e108 <__sfp+0x84>)
 802e08e:	681e      	ldr	r6, [r3, #0]
 802e090:	69b3      	ldr	r3, [r6, #24]
 802e092:	b913      	cbnz	r3, 802e09a <__sfp+0x16>
 802e094:	4630      	mov	r0, r6
 802e096:	f7ff ffbd 	bl	802e014 <__sinit>
 802e09a:	3648      	adds	r6, #72	; 0x48
 802e09c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e0a0:	3b01      	subs	r3, #1
 802e0a2:	d503      	bpl.n	802e0ac <__sfp+0x28>
 802e0a4:	6833      	ldr	r3, [r6, #0]
 802e0a6:	b30b      	cbz	r3, 802e0ec <__sfp+0x68>
 802e0a8:	6836      	ldr	r6, [r6, #0]
 802e0aa:	e7f7      	b.n	802e09c <__sfp+0x18>
 802e0ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e0b0:	b9d5      	cbnz	r5, 802e0e8 <__sfp+0x64>
 802e0b2:	4b16      	ldr	r3, [pc, #88]	; (802e10c <__sfp+0x88>)
 802e0b4:	60e3      	str	r3, [r4, #12]
 802e0b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e0ba:	6665      	str	r5, [r4, #100]	; 0x64
 802e0bc:	f000 f847 	bl	802e14e <__retarget_lock_init_recursive>
 802e0c0:	f7ff ff96 	bl	802dff0 <__sfp_lock_release>
 802e0c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e0c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e0cc:	6025      	str	r5, [r4, #0]
 802e0ce:	61a5      	str	r5, [r4, #24]
 802e0d0:	2208      	movs	r2, #8
 802e0d2:	4629      	mov	r1, r5
 802e0d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e0d8:	f7fe ffd0 	bl	802d07c <memset>
 802e0dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e0e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e0e4:	4620      	mov	r0, r4
 802e0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e0e8:	3468      	adds	r4, #104	; 0x68
 802e0ea:	e7d9      	b.n	802e0a0 <__sfp+0x1c>
 802e0ec:	2104      	movs	r1, #4
 802e0ee:	4638      	mov	r0, r7
 802e0f0:	f7ff ff62 	bl	802dfb8 <__sfmoreglue>
 802e0f4:	4604      	mov	r4, r0
 802e0f6:	6030      	str	r0, [r6, #0]
 802e0f8:	2800      	cmp	r0, #0
 802e0fa:	d1d5      	bne.n	802e0a8 <__sfp+0x24>
 802e0fc:	f7ff ff78 	bl	802dff0 <__sfp_lock_release>
 802e100:	230c      	movs	r3, #12
 802e102:	603b      	str	r3, [r7, #0]
 802e104:	e7ee      	b.n	802e0e4 <__sfp+0x60>
 802e106:	bf00      	nop
 802e108:	0802e6f4 	.word	0x0802e6f4
 802e10c:	ffff0001 	.word	0xffff0001

0802e110 <_fwalk_reent>:
 802e110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e114:	4606      	mov	r6, r0
 802e116:	4688      	mov	r8, r1
 802e118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e11c:	2700      	movs	r7, #0
 802e11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e122:	f1b9 0901 	subs.w	r9, r9, #1
 802e126:	d505      	bpl.n	802e134 <_fwalk_reent+0x24>
 802e128:	6824      	ldr	r4, [r4, #0]
 802e12a:	2c00      	cmp	r4, #0
 802e12c:	d1f7      	bne.n	802e11e <_fwalk_reent+0xe>
 802e12e:	4638      	mov	r0, r7
 802e130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e134:	89ab      	ldrh	r3, [r5, #12]
 802e136:	2b01      	cmp	r3, #1
 802e138:	d907      	bls.n	802e14a <_fwalk_reent+0x3a>
 802e13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e13e:	3301      	adds	r3, #1
 802e140:	d003      	beq.n	802e14a <_fwalk_reent+0x3a>
 802e142:	4629      	mov	r1, r5
 802e144:	4630      	mov	r0, r6
 802e146:	47c0      	blx	r8
 802e148:	4307      	orrs	r7, r0
 802e14a:	3568      	adds	r5, #104	; 0x68
 802e14c:	e7e9      	b.n	802e122 <_fwalk_reent+0x12>

0802e14e <__retarget_lock_init_recursive>:
 802e14e:	4770      	bx	lr

0802e150 <__retarget_lock_acquire_recursive>:
 802e150:	4770      	bx	lr

0802e152 <__retarget_lock_release_recursive>:
 802e152:	4770      	bx	lr

0802e154 <__swhatbuf_r>:
 802e154:	b570      	push	{r4, r5, r6, lr}
 802e156:	460e      	mov	r6, r1
 802e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e15c:	2900      	cmp	r1, #0
 802e15e:	b096      	sub	sp, #88	; 0x58
 802e160:	4614      	mov	r4, r2
 802e162:	461d      	mov	r5, r3
 802e164:	da07      	bge.n	802e176 <__swhatbuf_r+0x22>
 802e166:	2300      	movs	r3, #0
 802e168:	602b      	str	r3, [r5, #0]
 802e16a:	89b3      	ldrh	r3, [r6, #12]
 802e16c:	061a      	lsls	r2, r3, #24
 802e16e:	d410      	bmi.n	802e192 <__swhatbuf_r+0x3e>
 802e170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e174:	e00e      	b.n	802e194 <__swhatbuf_r+0x40>
 802e176:	466a      	mov	r2, sp
 802e178:	f000 f946 	bl	802e408 <_fstat_r>
 802e17c:	2800      	cmp	r0, #0
 802e17e:	dbf2      	blt.n	802e166 <__swhatbuf_r+0x12>
 802e180:	9a01      	ldr	r2, [sp, #4]
 802e182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e186:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e18a:	425a      	negs	r2, r3
 802e18c:	415a      	adcs	r2, r3
 802e18e:	602a      	str	r2, [r5, #0]
 802e190:	e7ee      	b.n	802e170 <__swhatbuf_r+0x1c>
 802e192:	2340      	movs	r3, #64	; 0x40
 802e194:	2000      	movs	r0, #0
 802e196:	6023      	str	r3, [r4, #0]
 802e198:	b016      	add	sp, #88	; 0x58
 802e19a:	bd70      	pop	{r4, r5, r6, pc}

0802e19c <__smakebuf_r>:
 802e19c:	898b      	ldrh	r3, [r1, #12]
 802e19e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e1a0:	079d      	lsls	r5, r3, #30
 802e1a2:	4606      	mov	r6, r0
 802e1a4:	460c      	mov	r4, r1
 802e1a6:	d507      	bpl.n	802e1b8 <__smakebuf_r+0x1c>
 802e1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e1ac:	6023      	str	r3, [r4, #0]
 802e1ae:	6123      	str	r3, [r4, #16]
 802e1b0:	2301      	movs	r3, #1
 802e1b2:	6163      	str	r3, [r4, #20]
 802e1b4:	b002      	add	sp, #8
 802e1b6:	bd70      	pop	{r4, r5, r6, pc}
 802e1b8:	ab01      	add	r3, sp, #4
 802e1ba:	466a      	mov	r2, sp
 802e1bc:	f7ff ffca 	bl	802e154 <__swhatbuf_r>
 802e1c0:	9900      	ldr	r1, [sp, #0]
 802e1c2:	4605      	mov	r5, r0
 802e1c4:	4630      	mov	r0, r6
 802e1c6:	f7ff f88f 	bl	802d2e8 <_malloc_r>
 802e1ca:	b948      	cbnz	r0, 802e1e0 <__smakebuf_r+0x44>
 802e1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e1d0:	059a      	lsls	r2, r3, #22
 802e1d2:	d4ef      	bmi.n	802e1b4 <__smakebuf_r+0x18>
 802e1d4:	f023 0303 	bic.w	r3, r3, #3
 802e1d8:	f043 0302 	orr.w	r3, r3, #2
 802e1dc:	81a3      	strh	r3, [r4, #12]
 802e1de:	e7e3      	b.n	802e1a8 <__smakebuf_r+0xc>
 802e1e0:	4b0d      	ldr	r3, [pc, #52]	; (802e218 <__smakebuf_r+0x7c>)
 802e1e2:	62b3      	str	r3, [r6, #40]	; 0x28
 802e1e4:	89a3      	ldrh	r3, [r4, #12]
 802e1e6:	6020      	str	r0, [r4, #0]
 802e1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e1ec:	81a3      	strh	r3, [r4, #12]
 802e1ee:	9b00      	ldr	r3, [sp, #0]
 802e1f0:	6163      	str	r3, [r4, #20]
 802e1f2:	9b01      	ldr	r3, [sp, #4]
 802e1f4:	6120      	str	r0, [r4, #16]
 802e1f6:	b15b      	cbz	r3, 802e210 <__smakebuf_r+0x74>
 802e1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e1fc:	4630      	mov	r0, r6
 802e1fe:	f000 f915 	bl	802e42c <_isatty_r>
 802e202:	b128      	cbz	r0, 802e210 <__smakebuf_r+0x74>
 802e204:	89a3      	ldrh	r3, [r4, #12]
 802e206:	f023 0303 	bic.w	r3, r3, #3
 802e20a:	f043 0301 	orr.w	r3, r3, #1
 802e20e:	81a3      	strh	r3, [r4, #12]
 802e210:	89a0      	ldrh	r0, [r4, #12]
 802e212:	4305      	orrs	r5, r0
 802e214:	81a5      	strh	r5, [r4, #12]
 802e216:	e7cd      	b.n	802e1b4 <__smakebuf_r+0x18>
 802e218:	0802dfad 	.word	0x0802dfad

0802e21c <memmove>:
 802e21c:	4288      	cmp	r0, r1
 802e21e:	b510      	push	{r4, lr}
 802e220:	eb01 0402 	add.w	r4, r1, r2
 802e224:	d902      	bls.n	802e22c <memmove+0x10>
 802e226:	4284      	cmp	r4, r0
 802e228:	4623      	mov	r3, r4
 802e22a:	d807      	bhi.n	802e23c <memmove+0x20>
 802e22c:	1e43      	subs	r3, r0, #1
 802e22e:	42a1      	cmp	r1, r4
 802e230:	d008      	beq.n	802e244 <memmove+0x28>
 802e232:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e236:	f803 2f01 	strb.w	r2, [r3, #1]!
 802e23a:	e7f8      	b.n	802e22e <memmove+0x12>
 802e23c:	4402      	add	r2, r0
 802e23e:	4601      	mov	r1, r0
 802e240:	428a      	cmp	r2, r1
 802e242:	d100      	bne.n	802e246 <memmove+0x2a>
 802e244:	bd10      	pop	{r4, pc}
 802e246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e24a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e24e:	e7f7      	b.n	802e240 <memmove+0x24>

0802e250 <__malloc_lock>:
 802e250:	4801      	ldr	r0, [pc, #4]	; (802e258 <__malloc_lock+0x8>)
 802e252:	f7ff bf7d 	b.w	802e150 <__retarget_lock_acquire_recursive>
 802e256:	bf00      	nop
 802e258:	20005030 	.word	0x20005030

0802e25c <__malloc_unlock>:
 802e25c:	4801      	ldr	r0, [pc, #4]	; (802e264 <__malloc_unlock+0x8>)
 802e25e:	f7ff bf78 	b.w	802e152 <__retarget_lock_release_recursive>
 802e262:	bf00      	nop
 802e264:	20005030 	.word	0x20005030

0802e268 <_realloc_r>:
 802e268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e26a:	4607      	mov	r7, r0
 802e26c:	4614      	mov	r4, r2
 802e26e:	460e      	mov	r6, r1
 802e270:	b921      	cbnz	r1, 802e27c <_realloc_r+0x14>
 802e272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802e276:	4611      	mov	r1, r2
 802e278:	f7ff b836 	b.w	802d2e8 <_malloc_r>
 802e27c:	b922      	cbnz	r2, 802e288 <_realloc_r+0x20>
 802e27e:	f7fe ffe3 	bl	802d248 <_free_r>
 802e282:	4625      	mov	r5, r4
 802e284:	4628      	mov	r0, r5
 802e286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e288:	f000 f8f2 	bl	802e470 <_malloc_usable_size_r>
 802e28c:	42a0      	cmp	r0, r4
 802e28e:	d20f      	bcs.n	802e2b0 <_realloc_r+0x48>
 802e290:	4621      	mov	r1, r4
 802e292:	4638      	mov	r0, r7
 802e294:	f7ff f828 	bl	802d2e8 <_malloc_r>
 802e298:	4605      	mov	r5, r0
 802e29a:	2800      	cmp	r0, #0
 802e29c:	d0f2      	beq.n	802e284 <_realloc_r+0x1c>
 802e29e:	4631      	mov	r1, r6
 802e2a0:	4622      	mov	r2, r4
 802e2a2:	f7fe fedd 	bl	802d060 <memcpy>
 802e2a6:	4631      	mov	r1, r6
 802e2a8:	4638      	mov	r0, r7
 802e2aa:	f7fe ffcd 	bl	802d248 <_free_r>
 802e2ae:	e7e9      	b.n	802e284 <_realloc_r+0x1c>
 802e2b0:	4635      	mov	r5, r6
 802e2b2:	e7e7      	b.n	802e284 <_realloc_r+0x1c>

0802e2b4 <_raise_r>:
 802e2b4:	291f      	cmp	r1, #31
 802e2b6:	b538      	push	{r3, r4, r5, lr}
 802e2b8:	4604      	mov	r4, r0
 802e2ba:	460d      	mov	r5, r1
 802e2bc:	d904      	bls.n	802e2c8 <_raise_r+0x14>
 802e2be:	2316      	movs	r3, #22
 802e2c0:	6003      	str	r3, [r0, #0]
 802e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 802e2c6:	bd38      	pop	{r3, r4, r5, pc}
 802e2c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802e2ca:	b112      	cbz	r2, 802e2d2 <_raise_r+0x1e>
 802e2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e2d0:	b94b      	cbnz	r3, 802e2e6 <_raise_r+0x32>
 802e2d2:	4620      	mov	r0, r4
 802e2d4:	f000 f830 	bl	802e338 <_getpid_r>
 802e2d8:	462a      	mov	r2, r5
 802e2da:	4601      	mov	r1, r0
 802e2dc:	4620      	mov	r0, r4
 802e2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e2e2:	f000 b817 	b.w	802e314 <_kill_r>
 802e2e6:	2b01      	cmp	r3, #1
 802e2e8:	d00a      	beq.n	802e300 <_raise_r+0x4c>
 802e2ea:	1c59      	adds	r1, r3, #1
 802e2ec:	d103      	bne.n	802e2f6 <_raise_r+0x42>
 802e2ee:	2316      	movs	r3, #22
 802e2f0:	6003      	str	r3, [r0, #0]
 802e2f2:	2001      	movs	r0, #1
 802e2f4:	e7e7      	b.n	802e2c6 <_raise_r+0x12>
 802e2f6:	2400      	movs	r4, #0
 802e2f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802e2fc:	4628      	mov	r0, r5
 802e2fe:	4798      	blx	r3
 802e300:	2000      	movs	r0, #0
 802e302:	e7e0      	b.n	802e2c6 <_raise_r+0x12>

0802e304 <raise>:
 802e304:	4b02      	ldr	r3, [pc, #8]	; (802e310 <raise+0xc>)
 802e306:	4601      	mov	r1, r0
 802e308:	6818      	ldr	r0, [r3, #0]
 802e30a:	f7ff bfd3 	b.w	802e2b4 <_raise_r>
 802e30e:	bf00      	nop
 802e310:	200003f4 	.word	0x200003f4

0802e314 <_kill_r>:
 802e314:	b538      	push	{r3, r4, r5, lr}
 802e316:	4d07      	ldr	r5, [pc, #28]	; (802e334 <_kill_r+0x20>)
 802e318:	2300      	movs	r3, #0
 802e31a:	4604      	mov	r4, r0
 802e31c:	4608      	mov	r0, r1
 802e31e:	4611      	mov	r1, r2
 802e320:	602b      	str	r3, [r5, #0]
 802e322:	f7f5 faa5 	bl	8023870 <_kill>
 802e326:	1c43      	adds	r3, r0, #1
 802e328:	d102      	bne.n	802e330 <_kill_r+0x1c>
 802e32a:	682b      	ldr	r3, [r5, #0]
 802e32c:	b103      	cbz	r3, 802e330 <_kill_r+0x1c>
 802e32e:	6023      	str	r3, [r4, #0]
 802e330:	bd38      	pop	{r3, r4, r5, pc}
 802e332:	bf00      	nop
 802e334:	20005038 	.word	0x20005038

0802e338 <_getpid_r>:
 802e338:	f7f5 ba92 	b.w	8023860 <_getpid>

0802e33c <__sread>:
 802e33c:	b510      	push	{r4, lr}
 802e33e:	460c      	mov	r4, r1
 802e340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e344:	f000 f89c 	bl	802e480 <_read_r>
 802e348:	2800      	cmp	r0, #0
 802e34a:	bfab      	itete	ge
 802e34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e34e:	89a3      	ldrhlt	r3, [r4, #12]
 802e350:	181b      	addge	r3, r3, r0
 802e352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e356:	bfac      	ite	ge
 802e358:	6563      	strge	r3, [r4, #84]	; 0x54
 802e35a:	81a3      	strhlt	r3, [r4, #12]
 802e35c:	bd10      	pop	{r4, pc}

0802e35e <__swrite>:
 802e35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e362:	461f      	mov	r7, r3
 802e364:	898b      	ldrh	r3, [r1, #12]
 802e366:	05db      	lsls	r3, r3, #23
 802e368:	4605      	mov	r5, r0
 802e36a:	460c      	mov	r4, r1
 802e36c:	4616      	mov	r6, r2
 802e36e:	d505      	bpl.n	802e37c <__swrite+0x1e>
 802e370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e374:	2302      	movs	r3, #2
 802e376:	2200      	movs	r2, #0
 802e378:	f000 f868 	bl	802e44c <_lseek_r>
 802e37c:	89a3      	ldrh	r3, [r4, #12]
 802e37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e386:	81a3      	strh	r3, [r4, #12]
 802e388:	4632      	mov	r2, r6
 802e38a:	463b      	mov	r3, r7
 802e38c:	4628      	mov	r0, r5
 802e38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e392:	f000 b817 	b.w	802e3c4 <_write_r>

0802e396 <__sseek>:
 802e396:	b510      	push	{r4, lr}
 802e398:	460c      	mov	r4, r1
 802e39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e39e:	f000 f855 	bl	802e44c <_lseek_r>
 802e3a2:	1c43      	adds	r3, r0, #1
 802e3a4:	89a3      	ldrh	r3, [r4, #12]
 802e3a6:	bf15      	itete	ne
 802e3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 802e3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e3b2:	81a3      	strheq	r3, [r4, #12]
 802e3b4:	bf18      	it	ne
 802e3b6:	81a3      	strhne	r3, [r4, #12]
 802e3b8:	bd10      	pop	{r4, pc}

0802e3ba <__sclose>:
 802e3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e3be:	f000 b813 	b.w	802e3e8 <_close_r>
	...

0802e3c4 <_write_r>:
 802e3c4:	b538      	push	{r3, r4, r5, lr}
 802e3c6:	4d07      	ldr	r5, [pc, #28]	; (802e3e4 <_write_r+0x20>)
 802e3c8:	4604      	mov	r4, r0
 802e3ca:	4608      	mov	r0, r1
 802e3cc:	4611      	mov	r1, r2
 802e3ce:	2200      	movs	r2, #0
 802e3d0:	602a      	str	r2, [r5, #0]
 802e3d2:	461a      	mov	r2, r3
 802e3d4:	f7f5 fa83 	bl	80238de <_write>
 802e3d8:	1c43      	adds	r3, r0, #1
 802e3da:	d102      	bne.n	802e3e2 <_write_r+0x1e>
 802e3dc:	682b      	ldr	r3, [r5, #0]
 802e3de:	b103      	cbz	r3, 802e3e2 <_write_r+0x1e>
 802e3e0:	6023      	str	r3, [r4, #0]
 802e3e2:	bd38      	pop	{r3, r4, r5, pc}
 802e3e4:	20005038 	.word	0x20005038

0802e3e8 <_close_r>:
 802e3e8:	b538      	push	{r3, r4, r5, lr}
 802e3ea:	4d06      	ldr	r5, [pc, #24]	; (802e404 <_close_r+0x1c>)
 802e3ec:	2300      	movs	r3, #0
 802e3ee:	4604      	mov	r4, r0
 802e3f0:	4608      	mov	r0, r1
 802e3f2:	602b      	str	r3, [r5, #0]
 802e3f4:	f7f5 fa8f 	bl	8023916 <_close>
 802e3f8:	1c43      	adds	r3, r0, #1
 802e3fa:	d102      	bne.n	802e402 <_close_r+0x1a>
 802e3fc:	682b      	ldr	r3, [r5, #0]
 802e3fe:	b103      	cbz	r3, 802e402 <_close_r+0x1a>
 802e400:	6023      	str	r3, [r4, #0]
 802e402:	bd38      	pop	{r3, r4, r5, pc}
 802e404:	20005038 	.word	0x20005038

0802e408 <_fstat_r>:
 802e408:	b538      	push	{r3, r4, r5, lr}
 802e40a:	4d07      	ldr	r5, [pc, #28]	; (802e428 <_fstat_r+0x20>)
 802e40c:	2300      	movs	r3, #0
 802e40e:	4604      	mov	r4, r0
 802e410:	4608      	mov	r0, r1
 802e412:	4611      	mov	r1, r2
 802e414:	602b      	str	r3, [r5, #0]
 802e416:	f7f5 fa8a 	bl	802392e <_fstat>
 802e41a:	1c43      	adds	r3, r0, #1
 802e41c:	d102      	bne.n	802e424 <_fstat_r+0x1c>
 802e41e:	682b      	ldr	r3, [r5, #0]
 802e420:	b103      	cbz	r3, 802e424 <_fstat_r+0x1c>
 802e422:	6023      	str	r3, [r4, #0]
 802e424:	bd38      	pop	{r3, r4, r5, pc}
 802e426:	bf00      	nop
 802e428:	20005038 	.word	0x20005038

0802e42c <_isatty_r>:
 802e42c:	b538      	push	{r3, r4, r5, lr}
 802e42e:	4d06      	ldr	r5, [pc, #24]	; (802e448 <_isatty_r+0x1c>)
 802e430:	2300      	movs	r3, #0
 802e432:	4604      	mov	r4, r0
 802e434:	4608      	mov	r0, r1
 802e436:	602b      	str	r3, [r5, #0]
 802e438:	f7f5 fa89 	bl	802394e <_isatty>
 802e43c:	1c43      	adds	r3, r0, #1
 802e43e:	d102      	bne.n	802e446 <_isatty_r+0x1a>
 802e440:	682b      	ldr	r3, [r5, #0]
 802e442:	b103      	cbz	r3, 802e446 <_isatty_r+0x1a>
 802e444:	6023      	str	r3, [r4, #0]
 802e446:	bd38      	pop	{r3, r4, r5, pc}
 802e448:	20005038 	.word	0x20005038

0802e44c <_lseek_r>:
 802e44c:	b538      	push	{r3, r4, r5, lr}
 802e44e:	4d07      	ldr	r5, [pc, #28]	; (802e46c <_lseek_r+0x20>)
 802e450:	4604      	mov	r4, r0
 802e452:	4608      	mov	r0, r1
 802e454:	4611      	mov	r1, r2
 802e456:	2200      	movs	r2, #0
 802e458:	602a      	str	r2, [r5, #0]
 802e45a:	461a      	mov	r2, r3
 802e45c:	f7f5 fa82 	bl	8023964 <_lseek>
 802e460:	1c43      	adds	r3, r0, #1
 802e462:	d102      	bne.n	802e46a <_lseek_r+0x1e>
 802e464:	682b      	ldr	r3, [r5, #0]
 802e466:	b103      	cbz	r3, 802e46a <_lseek_r+0x1e>
 802e468:	6023      	str	r3, [r4, #0]
 802e46a:	bd38      	pop	{r3, r4, r5, pc}
 802e46c:	20005038 	.word	0x20005038

0802e470 <_malloc_usable_size_r>:
 802e470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e474:	1f18      	subs	r0, r3, #4
 802e476:	2b00      	cmp	r3, #0
 802e478:	bfbc      	itt	lt
 802e47a:	580b      	ldrlt	r3, [r1, r0]
 802e47c:	18c0      	addlt	r0, r0, r3
 802e47e:	4770      	bx	lr

0802e480 <_read_r>:
 802e480:	b538      	push	{r3, r4, r5, lr}
 802e482:	4d07      	ldr	r5, [pc, #28]	; (802e4a0 <_read_r+0x20>)
 802e484:	4604      	mov	r4, r0
 802e486:	4608      	mov	r0, r1
 802e488:	4611      	mov	r1, r2
 802e48a:	2200      	movs	r2, #0
 802e48c:	602a      	str	r2, [r5, #0]
 802e48e:	461a      	mov	r2, r3
 802e490:	f7f5 fa08 	bl	80238a4 <_read>
 802e494:	1c43      	adds	r3, r0, #1
 802e496:	d102      	bne.n	802e49e <_read_r+0x1e>
 802e498:	682b      	ldr	r3, [r5, #0]
 802e49a:	b103      	cbz	r3, 802e49e <_read_r+0x1e>
 802e49c:	6023      	str	r3, [r4, #0]
 802e49e:	bd38      	pop	{r3, r4, r5, pc}
 802e4a0:	20005038 	.word	0x20005038

0802e4a4 <_init>:
 802e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e4a6:	bf00      	nop
 802e4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e4aa:	bc08      	pop	{r3}
 802e4ac:	469e      	mov	lr, r3
 802e4ae:	4770      	bx	lr

0802e4b0 <_fini>:
 802e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e4b2:	bf00      	nop
 802e4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e4b6:	bc08      	pop	{r3}
 802e4b8:	469e      	mov	lr, r3
 802e4ba:	4770      	bx	lr
